// N.B. This file is generated by `//Snowpark/ir-dsl-c`. DO NOT EDIT!
// Generated from `{git@github.com:snowflakedb/snowflake.git}/Snowpark/ast`.

syntax = "proto3";

option java_package = "com.snowflake.snowpark.proto";
option java_outer_classname = "JavaProto";

package ast;

import "google/protobuf/wrappers.proto";

enum __Version__ {
  PROTO3_REQUIRES_THIS = 0;
  MAX_VERSION = 1;
}

message InternedValueTable {
  map<int32, string> string_values = 1;
}

message List_Expr {
  repeated Expr list = 1;
}

message List_SpDataType {
  repeated SpDataType list = 1;
}

message List_SpStructField {
  repeated SpStructField list = 1;
}

message List_String {
  repeated string list = 1;
}

message Map_Expr_Expr {
  repeated Tuple_Expr_Expr list = 1;
}

message Map_String_Expr {
  repeated Tuple_String_Expr list = 1;
}

message Tuple_Expr_Expr {
  Expr _1 = 1;
  Expr _2 = 2;
}

message Tuple_Expr_Float {
  Expr _1 = 1;
  double _2 = 2;
}

message Tuple_String_Expr {
  string _1 = 1;
  Expr _2 = 2;
}

message Tuple_String_List_String {
  string _1 = 1;
  repeated string _2 = 2;
}

message Tuple_String_String {
  string _1 = 1;
  string _2 = 2;
}

// ast.ir:17
message Language {
  oneof sealed_value {
    JavaLanguage java_language = 1;
    PythonLanguage python_language = 2;
    ScalaLanguage scala_language = 3;
  }
}

// ast.ir:18
message PythonLanguage {
  Version version = 1;
}

// ast.ir:19
message ScalaLanguage {
  Version version = 1;
}

// ast.ir:20
message JavaLanguage {
  Version version = 1;
}

// const.ir:74
message PythonTimeZone {
  google.protobuf.StringValue name = 1;
  int64 offset_seconds = 2;
}

// fn.ir:28
message SpCallable {
  int64 id = 1;
  string name = 2;
  SpNameRef object_name = 3;
}

// column.ir:39
message SpColumnAliasFn {
  oneof variant {
    bool sp_column_alias_fn_alias = 1;
    bool sp_column_alias_fn_as = 2;
    bool sp_column_alias_fn_name = 3;
  }
}

// type.ir:31
message SpColumnRef {
  oneof sealed_value {
    SpColumnIdentifier sp_column_identifier = 1;
    SpColumnName sp_column_name = 2;
  }
}

// type.ir:32
message SpColumnIdentifier {
  string name = 1;
}

// type.ir:33
message SpColumnName {
  string name = 1;
}

// type.ir:1
message SpDataType {
  oneof variant {
    SpArrayType sp_array_type = 1;
    bool sp_binary_type = 2;
    bool sp_boolean_type = 3;
    bool sp_byte_type = 4;
    bool sp_date_type = 5;
    SpDecimalType sp_decimal_type = 6;
    bool sp_double_type = 7;
    bool sp_float_type = 8;
    bool sp_geography_type = 9;
    bool sp_geometry_type = 10;
    bool sp_integer_type = 11;
    bool sp_long_type = 12;
    SpMapType sp_map_type = 13;
    bool sp_null_type = 14;
    SpPandasDataFrameType sp_pandas_data_frame_type = 15;
    SpPandasSeriesType sp_pandas_series_type = 16;
    bool sp_short_type = 17;
    SpStringType sp_string_type = 18;
    SpStructField sp_struct_field = 19;
    SpStructType sp_struct_type = 20;
    bool sp_time_type = 21;
    SpTimestampType sp_timestamp_type = 22;
    bool sp_variant_type = 23;
    SpVectorType sp_vector_type = 24;
  }
}

// type.ir:3
message SpArrayType {
  bool structured = 1;
  SpDataType ty = 2;
}

// type.ir:8
message SpDecimalType {
  int64 precision = 1;
  int64 scale = 2;
}

// type.ir:15
message SpMapType {
  SpDataType key_ty = 1;
  bool structured = 2;
  SpDataType value_ty = 3;
}

// type.ir:18
message SpStringType {
  google.protobuf.Int64Value length = 1;
}

// type.ir:19
message SpStructField {
  SpColumnRef column_identifier = 1;
  SpDataType data_type = 2;
  bool nullable = 3;
}

// type.ir:20
message SpStructType {
  List_SpStructField fields = 1;
  bool structured = 2;
}

// type.ir:22
message SpTimestampType {
  SpTimestampTimeZone time_zone = 1;
}

// type.ir:24
message SpVectorType {
  int64 dimension = 1;
  SpDataType ty = 2;
}

// type.ir:26
message SpPandasSeriesType {
  SpDataType el_ty = 1;
}

// type.ir:27
message SpPandasDataFrameType {
  repeated string col_names = 1;
  repeated SpDataType col_types = 2;
}

// dataframe.ir:68
message SpDataframeData {
  oneof sealed_value {
    SpDataframeData_List sp_dataframe_data__list = 1;
    SpDataframeData_Pandas sp_dataframe_data__pandas = 2;
    SpDataframeData_Tuple sp_dataframe_data__tuple = 3;
  }
}

// dataframe.ir:69
message SpDataframeData_List {
  repeated Expr vs = 1;
}

// dataframe.ir:70
message SpDataframeData_Tuple {
  repeated Expr vs = 1;
}

// dataframe.ir:71
message SpDataframeData_Pandas {
  StagedPandasDataframe v = 1;
}

// type.ir:43
message SpDataframeSchema {
  oneof sealed_value {
    SpDataframeSchema_List sp_dataframe_schema__list = 1;
    SpDataframeSchema_Struct sp_dataframe_schema__struct = 2;
  }
}

// type.ir:44
message SpDataframeSchema_List {
  repeated string vs = 1;
}

// type.ir:45
message SpDataframeSchema_Struct {
  SpStructType v = 1;
}

// dataframe.ir:86
message SpFlattenMode {
  oneof variant {
    bool sp_flatten_mode_array = 1;
    bool sp_flatten_mode_both = 2;
    bool sp_flatten_mode_object = 3;
  }
}

// dataframe.ir:240
message SpJoinType {
  oneof variant {
    bool sp_join_type__asof = 1;
    bool sp_join_type__cross = 2;
    bool sp_join_type__full_outer = 3;
    bool sp_join_type__inner = 4;
    bool sp_join_type__left_anti = 5;
    bool sp_join_type__left_outer = 6;
    bool sp_join_type__left_semi = 7;
    bool sp_join_type__right_outer = 8;
  }
}

// ast.ir:109
message SpName {
  oneof sealed_value {
    SpNameFlat sp_name_flat = 1;
    SpNameStructured sp_name_structured = 2;
  }
}

// ast.ir:110
message SpNameFlat {
  string name = 1;
}

// ast.ir:111
message SpNameStructured {
  repeated string name = 1;
}

// column.ir:70
message SpNullOrder {
  oneof variant {
    bool sp_null_order_default = 1;
    bool sp_null_order_nulls_first = 2;
    bool sp_null_order_nulls_last = 3;
  }
}

// dataframe-grouped.ir:71
message SpPivotValue {
  oneof sealed_value {
    SpPivotValue_Dataframe sp_pivot_value__dataframe = 1;
    SpPivotValue_Expr sp_pivot_value__expr = 2;
  }
}

// dataframe-grouped.ir:72
message SpPivotValue_Expr {
  Expr v = 1;
}

// dataframe-grouped.ir:73
message SpPivotValue_Dataframe {
  SpDataframeRef v = 1;
}

// dataframe-io.ir:85
message SpSaveMode {
  oneof variant {
    bool sp_save_mode_append = 1;
    bool sp_save_mode_error_if_exists = 2;
    bool sp_save_mode_ignore = 3;
    bool sp_save_mode_overwrite = 4;
    bool sp_save_mode_truncate = 5;
  }
}

// dataframe.ir:105
message SpTableVariant {
  oneof variant {
    bool sp_session_table = 1;
    bool sp_table_init = 2;
  }
}

// type.ir:36
message SpTimestampTimeZone {
  oneof variant {
    bool sp_timestamp_time_zone_default = 1;
    bool sp_timestamp_time_zone_ltz = 2;
    bool sp_timestamp_time_zone_ntz = 3;
    bool sp_timestamp_time_zone_tz = 4;
  }
}

// window.ir:6
message SpWindowRelativePosition {
  oneof variant {
    bool sp_window_relative_position__current_row = 1;
    SpWindowRelativePosition_Position sp_window_relative_position__position = 2;
    bool sp_window_relative_position__unbounded_following = 3;
    bool sp_window_relative_position__unbounded_preceding = 4;
  }
}

// window.ir:10
message SpWindowRelativePosition_Position {
  Expr n = 1;
}

// src.ir:1
message SrcPosition {
  int64 end_column = 1;
  int64 end_line = 2;
  int32 file = 3;
  int64 start_column = 4;
  int64 start_line = 5;
}

// dataframe.ir:74
message StagedPandasDataframe {
  SpNameRef temp_table = 1;
}

// fn.ir:86
message UdtfSchema {
  oneof sealed_value {
    UdtfSchema_Names udtf_schema__names = 1;
    UdtfSchema_Type udtf_schema__type = 2;
  }
}

// fn.ir:87
message UdtfSchema_Type {
  SpDataType return_type = 1;
}

// fn.ir:88
message UdtfSchema_Names {
  repeated string schema = 1;
}

// ast.ir:104
message VarId {
  uint64 bitfield1 = 1;
}

// ast.ir:23
message Version {
  string label = 1;
  int64 major = 2;
  int64 minor = 3;
  int64 patch = 4;
}

message AbstractExtension {
  oneof variant {
    AbstractExtensionExpr trait_abstract_extension_expr = 1;
    ExtensionColumnFn extension_column_fn = 2;
    ExtensionDataframeExpr extension_dataframe_expr = 3;
    ExtensionDataframeWriter extension_dataframe_writer = 4;
    ExtensionError extension_error = 5;
    ExtensionEvalResult extension_eval_result = 6;
    ExtensionExpr extension_expr = 7;
    ExtensionRelationalGroupedDataframeExpr extension_relational_grouped_dataframe_expr = 8;
    ExtensionStmt extension_stmt = 9;
  }
}

message AbstractExtensionExpr {
  oneof variant {
    ExtensionColumnFn extension_column_fn = 1;
    ExtensionDataframeExpr extension_dataframe_expr = 2;
    ExtensionDataframeWriter extension_dataframe_writer = 3;
    ExtensionExpr extension_expr = 4;
    ExtensionRelationalGroupedDataframeExpr extension_relational_grouped_dataframe_expr = 5;
  }
}

// op.ir:42
message Add {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:16
message And {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// fn.ir:2
message ApplyExpr {
  FnRefExpr fn = 1;
  repeated Tuple_String_Expr named_args = 2;
  repeated Expr pos_args = 3;
  SrcPosition src = 4;
}

// ast.ir:36
message Assign {
  Expr expr = 1;
  google.protobuf.StringValue symbol = 2;
  int64 uid = 3;
  VarId var_id = 4;
}

// const.ir:21
message BigDecimalVal {
  int64 scale = 1;
  google.protobuf.StringValue special = 2;
  SrcPosition src = 3;
  bytes unscaled_value = 4;
}

// const.ir:17
message BigIntVal {
  SrcPosition src = 1;
  bytes v = 2;
}

message BinOp {
  oneof variant {
    Add add = 1;
    And and = 2;
    BitAnd bit_and = 3;
    BitOr bit_or = 4;
    BitXor bit_xor = 5;
    Div div = 6;
    Eq eq = 7;
    Geq geq = 8;
    Gt gt = 9;
    Leq leq = 10;
    Lt lt = 11;
    Mod mod = 12;
    Mul mul = 13;
    Neq neq = 14;
    Or or = 15;
    Pow pow = 16;
    Sub sub = 17;
  }
}

// const.ir:35
message BinaryVal {
  SrcPosition src = 1;
  bytes v = 2;
}

// op.ir:58
message BitAnd {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:60
message BitOr {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:62
message BitXor {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// const.ir:9
message BoolVal {
  SrcPosition src = 1;
  bool v = 2;
}

// fn.ir:26
message BuiltinFn {
  SpNameRef name = 1;
  SrcPosition src = 2;
}

// fn.ir:144
message CallTableFunctionExpr {
  SpNameRef name = 1;
  SrcPosition src = 2;
}

message Const {
  oneof variant {
    BigDecimalVal big_decimal_val = 1;
    BigIntVal big_int_val = 2;
    BinaryVal binary_val = 3;
    BoolVal bool_val = 4;
    Float64Val float64_val = 5;
    Int64Val int64_val = 6;
    NullVal null_val = 7;
    PythonDateVal python_date_val = 8;
    PythonTimeVal python_time_val = 9;
    PythonTimestampVal python_timestamp_val = 10;
    SpDatatypeVal sp_datatype_val = 11;
    StringVal string_val = 12;
  }
}

// op.ir:48
message Div {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:24
message Eq {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

message Error {
  oneof variant {
    ExtensionError extension_error = 1;
    SessionResetRequiredError session_reset_required_error = 2;
  }
}

// ast.ir:44
message Eval {
  int64 uid = 1;
  VarId var_id = 2;
}

// ast.ir:60
message EvalOk {
  EvalResult data = 1;
  int64 uid = 2;
  VarId var_id = 3;
}

message EvalResult {
  oneof variant {
    Const trait_const = 1;
    BigDecimalVal big_decimal_val = 2;
    BigIntVal big_int_val = 3;
    BinaryVal binary_val = 4;
    BoolVal bool_val = 5;
    ExtensionEvalResult extension_eval_result = 6;
    Float64Val float64_val = 7;
    Int64Val int64_val = 8;
    NullVal null_val = 9;
    PythonDateVal python_date_val = 10;
    PythonTimeVal python_time_val = 11;
    PythonTimestampVal python_timestamp_val = 12;
    SfQueryResult sf_query_result = 13;
    SpDatatypeVal sp_datatype_val = 14;
    StringVal string_val = 15;
  }
}

message Expr {
  oneof variant {
    AbstractExtensionExpr trait_abstract_extension_expr = 1;
    BinOp trait_bin_op = 2;
    Const trait_const = 3;
    FnIdRefExpr trait_fn_id_ref_expr = 4;
    FnNameRefExpr trait_fn_name_ref_expr = 5;
    FnRefExpr trait_fn_ref_expr = 6;
    SpColumnFn trait_sp_column_fn = 7;
    SpDataframeExpr trait_sp_dataframe_expr = 8;
    SpDataframeWriter trait_sp_dataframe_writer = 9;
    SpMatchedClause trait_sp_matched_clause = 10;
    SpRelationalGroupedDataframeExpr trait_sp_relational_grouped_dataframe_expr = 11;
    SpWriteFile trait_sp_write_file = 12;
    UnaryOp trait_unary_op = 13;
    Add add = 14;
    And and = 15;
    ApplyExpr apply_expr = 16;
    BigDecimalVal big_decimal_val = 17;
    BigIntVal big_int_val = 18;
    BinaryVal binary_val = 19;
    BitAnd bit_and = 20;
    BitOr bit_or = 21;
    BitXor bit_xor = 22;
    BoolVal bool_val = 23;
    BuiltinFn builtin_fn = 24;
    CallTableFunctionExpr call_table_function_expr = 25;
    Div div = 26;
    Eq eq = 27;
    ExtensionColumnFn extension_column_fn = 28;
    ExtensionDataframeExpr extension_dataframe_expr = 29;
    ExtensionDataframeWriter extension_dataframe_writer = 30;
    ExtensionExpr extension_expr = 31;
    ExtensionRelationalGroupedDataframeExpr extension_relational_grouped_dataframe_expr = 32;
    Float64Val float64_val = 33;
    Geq geq = 34;
    Gt gt = 35;
    IndirectTableFnIdRef indirect_table_fn_id_ref = 36;
    IndirectTableFnNameRef indirect_table_fn_name_ref = 37;
    Int64Val int64_val = 38;
    Leq leq = 39;
    ListVal list_val = 40;
    Lt lt = 41;
    Mod mod = 42;
    Mul mul = 43;
    Neg neg = 44;
    Neq neq = 45;
    Not not = 46;
    NullVal null_val = 47;
    ObjectGetItem object_get_item = 48;
    Or or = 49;
    Pow pow = 50;
    PythonDateVal python_date_val = 51;
    PythonTimeVal python_time_val = 52;
    PythonTimestampVal python_timestamp_val = 53;
    SeqMapVal seq_map_val = 54;
    SpColumnAlias sp_column_alias = 55;
    SpColumnApply_Int sp_column_apply__int = 56;
    SpColumnApply_String sp_column_apply__string = 57;
    SpColumnAsc sp_column_asc = 58;
    SpColumnBetween sp_column_between = 59;
    SpColumnCaseWhen sp_column_case_when = 60;
    SpColumnCast sp_column_cast = 61;
    SpColumnDesc sp_column_desc = 62;
    SpColumnEqualNan sp_column_equal_nan = 63;
    SpColumnEqualNull sp_column_equal_null = 64;
    SpColumnIn sp_column_in = 65;
    SpColumnIsNotNull sp_column_is_not_null = 66;
    SpColumnIsNull sp_column_is_null = 67;
    SpColumnOver sp_column_over = 68;
    SpColumnSqlExpr sp_column_sql_expr = 69;
    SpColumnStringCollate sp_column_string_collate = 70;
    SpColumnStringContains sp_column_string_contains = 71;
    SpColumnStringEndsWith sp_column_string_ends_with = 72;
    SpColumnStringLike sp_column_string_like = 73;
    SpColumnStringRegexp sp_column_string_regexp = 74;
    SpColumnStringStartsWith sp_column_string_starts_with = 75;
    SpColumnStringSubstr sp_column_string_substr = 76;
    SpColumnTryCast sp_column_try_cast = 77;
    SpColumnWithinGroup sp_column_within_group = 78;
    SpCreateDataframe sp_create_dataframe = 79;
    SpDataframeAgg sp_dataframe_agg = 80;
    SpDataframeAlias sp_dataframe_alias = 81;
    SpDataframeAnalyticsComputeLag sp_dataframe_analytics_compute_lag = 82;
    SpDataframeAnalyticsComputeLead sp_dataframe_analytics_compute_lead = 83;
    SpDataframeAnalyticsCumulativeAgg sp_dataframe_analytics_cumulative_agg = 84;
    SpDataframeAnalyticsMovingAgg sp_dataframe_analytics_moving_agg = 85;
    SpDataframeAnalyticsTimeSeriesAgg sp_dataframe_analytics_time_series_agg = 86;
    SpDataframeCacheResult sp_dataframe_cache_result = 87;
    SpDataframeCol sp_dataframe_col = 88;
    SpDataframeCollect sp_dataframe_collect = 89;
    SpDataframeCopyIntoTable sp_dataframe_copy_into_table = 90;
    SpDataframeCount sp_dataframe_count = 91;
    SpDataframeCreateOrReplaceDynamicTable sp_dataframe_create_or_replace_dynamic_table = 92;
    SpDataframeCreateOrReplaceView sp_dataframe_create_or_replace_view = 93;
    SpDataframeCrossJoin sp_dataframe_cross_join = 94;
    SpDataframeCube sp_dataframe_cube = 95;
    SpDataframeDescribe sp_dataframe_describe = 96;
    SpDataframeDistinct sp_dataframe_distinct = 97;
    SpDataframeDrop sp_dataframe_drop = 98;
    SpDataframeDropDuplicates sp_dataframe_drop_duplicates = 99;
    SpDataframeExcept sp_dataframe_except = 100;
    SpDataframeFilter sp_dataframe_filter = 101;
    SpDataframeFirst sp_dataframe_first = 102;
    SpDataframeFlatten sp_dataframe_flatten = 103;
    SpDataframeGroupBy sp_dataframe_group_by = 104;
    SpDataframeGroupByGroupingSets sp_dataframe_group_by_grouping_sets = 105;
    SpDataframeIntersect sp_dataframe_intersect = 106;
    SpDataframeJoin sp_dataframe_join = 107;
    SpDataframeJoinTableFunction sp_dataframe_join_table_function = 108;
    SpDataframeLimit sp_dataframe_limit = 109;
    SpDataframeNaDrop_Python sp_dataframe_na_drop__python = 110;
    SpDataframeNaDrop_Scala sp_dataframe_na_drop__scala = 111;
    SpDataframeNaFill sp_dataframe_na_fill = 112;
    SpDataframeNaReplace sp_dataframe_na_replace = 113;
    SpDataframeNaturalJoin sp_dataframe_natural_join = 114;
    SpDataframePivot sp_dataframe_pivot = 115;
    SpDataframeRandomSplit sp_dataframe_random_split = 116;
    SpDataframeRef sp_dataframe_ref = 117;
    SpDataframeRename sp_dataframe_rename = 118;
    SpDataframeRollup sp_dataframe_rollup = 119;
    SpDataframeSample sp_dataframe_sample = 120;
    SpDataframeSelect_Columns sp_dataframe_select__columns = 121;
    SpDataframeSelect_Exprs sp_dataframe_select__exprs = 122;
    SpDataframeShow sp_dataframe_show = 123;
    SpDataframeSort sp_dataframe_sort = 124;
    SpDataframeStatApproxQuantile sp_dataframe_stat_approx_quantile = 125;
    SpDataframeStatCorr sp_dataframe_stat_corr = 126;
    SpDataframeStatCov sp_dataframe_stat_cov = 127;
    SpDataframeStatCrossTab sp_dataframe_stat_cross_tab = 128;
    SpDataframeStatSampleBy sp_dataframe_stat_sample_by = 129;
    SpDataframeToDf sp_dataframe_to_df = 130;
    SpDataframeToLocalIterator sp_dataframe_to_local_iterator = 131;
    SpDataframeToPandas sp_dataframe_to_pandas = 132;
    SpDataframeToPandasBatches sp_dataframe_to_pandas_batches = 133;
    SpDataframeUnion sp_dataframe_union = 134;
    SpDataframeUnionAll sp_dataframe_union_all = 135;
    SpDataframeUnionAllByName sp_dataframe_union_all_by_name = 136;
    SpDataframeUnionByName sp_dataframe_union_by_name = 137;
    SpDataframeUnpivot sp_dataframe_unpivot = 138;
    SpDataframeWithColumn sp_dataframe_with_column = 139;
    SpDataframeWithColumnRenamed sp_dataframe_with_column_renamed = 140;
    SpDataframeWithColumns sp_dataframe_with_columns = 141;
    SpDataframeWrite sp_dataframe_write = 142;
    SpDatatypeVal sp_datatype_val = 143;
    SpFlatten sp_flatten = 144;
    SpFnRef sp_fn_ref = 145;
    SpGenerator sp_generator = 146;
    SpGroupingSets sp_grouping_sets = 147;
    SpMergeDeleteWhenMatchedClause sp_merge_delete_when_matched_clause = 148;
    SpMergeInsertWhenNotMatchedClause sp_merge_insert_when_not_matched_clause = 149;
    SpMergeUpdateWhenMatchedClause sp_merge_update_when_matched_clause = 150;
    SpRange sp_range = 151;
    SpReadAvro sp_read_avro = 152;
    SpReadCsv sp_read_csv = 153;
    SpReadJson sp_read_json = 154;
    SpReadOrc sp_read_orc = 155;
    SpReadParquet sp_read_parquet = 156;
    SpReadTable sp_read_table = 157;
    SpReadXml sp_read_xml = 158;
    SpRelationalGroupedDataframeAgg sp_relational_grouped_dataframe_agg = 159;
    SpRelationalGroupedDataframeApplyInPandas sp_relational_grouped_dataframe_apply_in_pandas = 160;
    SpRelationalGroupedDataframeBuiltin sp_relational_grouped_dataframe_builtin = 161;
    SpRelationalGroupedDataframePivot sp_relational_grouped_dataframe_pivot = 162;
    SpRelationalGroupedDataframeRef sp_relational_grouped_dataframe_ref = 163;
    SpRow sp_row = 164;
    SpSessionTableFunction sp_session_table_function = 165;
    SpSql sp_sql = 166;
    SpTable sp_table = 167;
    SpTableDelete sp_table_delete = 168;
    SpTableDropTable sp_table_drop_table = 169;
    SpTableFnCallAlias sp_table_fn_call_alias = 170;
    SpTableFnCallOver sp_table_fn_call_over = 171;
    SpTableMerge sp_table_merge = 172;
    SpTableSample sp_table_sample = 173;
    SpTableUpdate sp_table_update = 174;
    SpToSnowparkPandas sp_to_snowpark_pandas = 175;
    SpWriteCopyIntoLocation sp_write_copy_into_location = 176;
    SpWriteCsv sp_write_csv = 177;
    SpWriteJson sp_write_json = 178;
    SpWritePandas sp_write_pandas = 179;
    SpWriteParquet sp_write_parquet = 180;
    SpWriteTable sp_write_table = 181;
    StoredProcedure stored_procedure = 182;
    StringVal string_val = 183;
    Sub sub = 184;
    TupleVal tuple_val = 185;
    Udaf udaf = 186;
    Udf udf = 187;
    Udtf udtf = 188;
  }
}

// ast.ir:119
message ExprArgList {
  repeated Expr args = 1;
  bool variadic = 2;
}

// column.ir:29
message ExtensionColumnFn {
  repeated Tuple_String_Expr attrs = 1;
  Expr col = 2;
  string kind = 3;
  SrcPosition src = 4;
}

// dataframe.ir:7
message ExtensionDataframeExpr {
  repeated Tuple_String_Expr attrs = 1;
  string kind = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:10
message ExtensionDataframeReader {
  SrcPosition src = 1;
  ExtensionExpr value = 2;
}

// dataframe-io.ir:80
message ExtensionDataframeWriter {
  repeated Tuple_String_Expr attrs = 1;
  string kind = 2;
  SrcPosition src = 3;
}

// ast.ir:71
message ExtensionError {
  repeated Tuple_String_Expr attrs = 1;
  string kind = 2;
  int64 uid = 3;
  VarId var_id = 4;
}

// ast.ir:84
message ExtensionEvalResult {
  repeated Tuple_String_Expr attrs = 1;
  string kind = 2;
}

// expr.ir:38
message ExtensionExpr {
  repeated Tuple_String_Expr attrs = 1;
  string kind = 2;
  SrcPosition src = 3;
}

// dataframe-grouped.ir:3
message ExtensionRelationalGroupedDataframeExpr {
  repeated Tuple_String_Expr attrs = 1;
  string kind = 2;
  SrcPosition src = 3;
}

// ast.ir:49
message ExtensionStmt {
  repeated Tuple_String_Expr attrs = 1;
  string kind = 2;
}

// const.ir:27
message Float64Val {
  SrcPosition src = 1;
  double v = 2;
}

message FnIdRefExpr {
  oneof variant {
    IndirectTableFnIdRef indirect_table_fn_id_ref = 1;
    SpFnRef sp_fn_ref = 2;
  }
}

message FnNameRefExpr {
  oneof variant {
    BuiltinFn builtin_fn = 1;
    CallTableFunctionExpr call_table_function_expr = 2;
    IndirectTableFnNameRef indirect_table_fn_name_ref = 3;
    StoredProcedure stored_procedure = 4;
    Udaf udaf = 5;
    Udf udf = 6;
    Udtf udtf = 7;
  }
}

message FnRefExpr {
  oneof variant {
    FnIdRefExpr trait_fn_id_ref_expr = 1;
    FnNameRefExpr trait_fn_name_ref_expr = 2;
    BuiltinFn builtin_fn = 3;
    CallTableFunctionExpr call_table_function_expr = 4;
    IndirectTableFnIdRef indirect_table_fn_id_ref = 5;
    IndirectTableFnNameRef indirect_table_fn_name_ref = 6;
    SpFnRef sp_fn_ref = 7;
    StoredProcedure stored_procedure = 8;
    Udaf udaf = 9;
    Udf udf = 10;
    Udtf udtf = 11;
  }
}

// op.ir:34
message Geq {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:32
message Gt {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

message HasSrcPosition {
  oneof variant {
    AbstractExtensionExpr trait_abstract_extension_expr = 1;
    BinOp trait_bin_op = 2;
    Const trait_const = 3;
    Expr trait_expr = 4;
    FnIdRefExpr trait_fn_id_ref_expr = 5;
    FnNameRefExpr trait_fn_name_ref_expr = 6;
    FnRefExpr trait_fn_ref_expr = 7;
    SpColumnFn trait_sp_column_fn = 8;
    SpDataframeExpr trait_sp_dataframe_expr = 9;
    SpDataframeReader trait_sp_dataframe_reader = 10;
    SpDataframeWriter trait_sp_dataframe_writer = 11;
    SpMatchedClause trait_sp_matched_clause = 12;
    SpRelationalGroupedDataframeExpr trait_sp_relational_grouped_dataframe_expr = 13;
    SpWindowSpecExpr trait_sp_window_spec_expr = 14;
    SpWriteFile trait_sp_write_file = 15;
    UnaryOp trait_unary_op = 16;
    Add add = 17;
    And and = 18;
    ApplyExpr apply_expr = 19;
    BigDecimalVal big_decimal_val = 20;
    BigIntVal big_int_val = 21;
    BinaryVal binary_val = 22;
    BitAnd bit_and = 23;
    BitOr bit_or = 24;
    BitXor bit_xor = 25;
    BoolVal bool_val = 26;
    BuiltinFn builtin_fn = 27;
    CallTableFunctionExpr call_table_function_expr = 28;
    Div div = 29;
    Eq eq = 30;
    ExtensionColumnFn extension_column_fn = 31;
    ExtensionDataframeExpr extension_dataframe_expr = 32;
    ExtensionDataframeReader extension_dataframe_reader = 33;
    ExtensionDataframeWriter extension_dataframe_writer = 34;
    ExtensionExpr extension_expr = 35;
    ExtensionRelationalGroupedDataframeExpr extension_relational_grouped_dataframe_expr = 36;
    Float64Val float64_val = 37;
    Geq geq = 38;
    Gt gt = 39;
    IndirectTableFnIdRef indirect_table_fn_id_ref = 40;
    IndirectTableFnNameRef indirect_table_fn_name_ref = 41;
    Int64Val int64_val = 42;
    Leq leq = 43;
    ListVal list_val = 44;
    Lt lt = 45;
    Mod mod = 46;
    Mul mul = 47;
    Neg neg = 48;
    Neq neq = 49;
    Not not = 50;
    NullVal null_val = 51;
    ObjectGetItem object_get_item = 52;
    Or or = 53;
    Pow pow = 54;
    PythonDateVal python_date_val = 55;
    PythonTimeVal python_time_val = 56;
    PythonTimestampVal python_timestamp_val = 57;
    SeqMapVal seq_map_val = 58;
    SpCaseExpr sp_case_expr = 59;
    SpColumnAlias sp_column_alias = 60;
    SpColumnApply_Int sp_column_apply__int = 61;
    SpColumnApply_String sp_column_apply__string = 62;
    SpColumnAsc sp_column_asc = 63;
    SpColumnBetween sp_column_between = 64;
    SpColumnCaseWhen sp_column_case_when = 65;
    SpColumnCast sp_column_cast = 66;
    SpColumnDesc sp_column_desc = 67;
    SpColumnEqualNan sp_column_equal_nan = 68;
    SpColumnEqualNull sp_column_equal_null = 69;
    SpColumnIn sp_column_in = 70;
    SpColumnIsNotNull sp_column_is_not_null = 71;
    SpColumnIsNull sp_column_is_null = 72;
    SpColumnOver sp_column_over = 73;
    SpColumnSqlExpr sp_column_sql_expr = 74;
    SpColumnStringCollate sp_column_string_collate = 75;
    SpColumnStringContains sp_column_string_contains = 76;
    SpColumnStringEndsWith sp_column_string_ends_with = 77;
    SpColumnStringLike sp_column_string_like = 78;
    SpColumnStringRegexp sp_column_string_regexp = 79;
    SpColumnStringStartsWith sp_column_string_starts_with = 80;
    SpColumnStringSubstr sp_column_string_substr = 81;
    SpColumnTryCast sp_column_try_cast = 82;
    SpColumnWithinGroup sp_column_within_group = 83;
    SpCreateDataframe sp_create_dataframe = 84;
    SpDataframeAgg sp_dataframe_agg = 85;
    SpDataframeAlias sp_dataframe_alias = 86;
    SpDataframeAnalyticsComputeLag sp_dataframe_analytics_compute_lag = 87;
    SpDataframeAnalyticsComputeLead sp_dataframe_analytics_compute_lead = 88;
    SpDataframeAnalyticsCumulativeAgg sp_dataframe_analytics_cumulative_agg = 89;
    SpDataframeAnalyticsMovingAgg sp_dataframe_analytics_moving_agg = 90;
    SpDataframeAnalyticsTimeSeriesAgg sp_dataframe_analytics_time_series_agg = 91;
    SpDataframeCacheResult sp_dataframe_cache_result = 92;
    SpDataframeCol sp_dataframe_col = 93;
    SpDataframeCollect sp_dataframe_collect = 94;
    SpDataframeCopyIntoTable sp_dataframe_copy_into_table = 95;
    SpDataframeCount sp_dataframe_count = 96;
    SpDataframeCreateOrReplaceDynamicTable sp_dataframe_create_or_replace_dynamic_table = 97;
    SpDataframeCreateOrReplaceView sp_dataframe_create_or_replace_view = 98;
    SpDataframeCrossJoin sp_dataframe_cross_join = 99;
    SpDataframeCube sp_dataframe_cube = 100;
    SpDataframeDescribe sp_dataframe_describe = 101;
    SpDataframeDistinct sp_dataframe_distinct = 102;
    SpDataframeDrop sp_dataframe_drop = 103;
    SpDataframeDropDuplicates sp_dataframe_drop_duplicates = 104;
    SpDataframeExcept sp_dataframe_except = 105;
    SpDataframeFilter sp_dataframe_filter = 106;
    SpDataframeFirst sp_dataframe_first = 107;
    SpDataframeFlatten sp_dataframe_flatten = 108;
    SpDataframeGroupBy sp_dataframe_group_by = 109;
    SpDataframeGroupByGroupingSets sp_dataframe_group_by_grouping_sets = 110;
    SpDataframeIntersect sp_dataframe_intersect = 111;
    SpDataframeJoin sp_dataframe_join = 112;
    SpDataframeJoinTableFunction sp_dataframe_join_table_function = 113;
    SpDataframeLimit sp_dataframe_limit = 114;
    SpDataframeNaDrop_Python sp_dataframe_na_drop__python = 115;
    SpDataframeNaDrop_Scala sp_dataframe_na_drop__scala = 116;
    SpDataframeNaFill sp_dataframe_na_fill = 117;
    SpDataframeNaReplace sp_dataframe_na_replace = 118;
    SpDataframeNaturalJoin sp_dataframe_natural_join = 119;
    SpDataframePivot sp_dataframe_pivot = 120;
    SpDataframeRandomSplit sp_dataframe_random_split = 121;
    SpDataframeReaderInit sp_dataframe_reader_init = 122;
    SpDataframeReaderOption sp_dataframe_reader_option = 123;
    SpDataframeReaderOptions sp_dataframe_reader_options = 124;
    SpDataframeReaderSchema sp_dataframe_reader_schema = 125;
    SpDataframeReaderWithMetadata sp_dataframe_reader_with_metadata = 126;
    SpDataframeRef sp_dataframe_ref = 127;
    SpDataframeRename sp_dataframe_rename = 128;
    SpDataframeRollup sp_dataframe_rollup = 129;
    SpDataframeSample sp_dataframe_sample = 130;
    SpDataframeSelect_Columns sp_dataframe_select__columns = 131;
    SpDataframeSelect_Exprs sp_dataframe_select__exprs = 132;
    SpDataframeShow sp_dataframe_show = 133;
    SpDataframeSort sp_dataframe_sort = 134;
    SpDataframeStatApproxQuantile sp_dataframe_stat_approx_quantile = 135;
    SpDataframeStatCorr sp_dataframe_stat_corr = 136;
    SpDataframeStatCov sp_dataframe_stat_cov = 137;
    SpDataframeStatCrossTab sp_dataframe_stat_cross_tab = 138;
    SpDataframeStatSampleBy sp_dataframe_stat_sample_by = 139;
    SpDataframeToDf sp_dataframe_to_df = 140;
    SpDataframeToLocalIterator sp_dataframe_to_local_iterator = 141;
    SpDataframeToPandas sp_dataframe_to_pandas = 142;
    SpDataframeToPandasBatches sp_dataframe_to_pandas_batches = 143;
    SpDataframeUnion sp_dataframe_union = 144;
    SpDataframeUnionAll sp_dataframe_union_all = 145;
    SpDataframeUnionAllByName sp_dataframe_union_all_by_name = 146;
    SpDataframeUnionByName sp_dataframe_union_by_name = 147;
    SpDataframeUnpivot sp_dataframe_unpivot = 148;
    SpDataframeWithColumn sp_dataframe_with_column = 149;
    SpDataframeWithColumnRenamed sp_dataframe_with_column_renamed = 150;
    SpDataframeWithColumns sp_dataframe_with_columns = 151;
    SpDataframeWrite sp_dataframe_write = 152;
    SpDatatypeVal sp_datatype_val = 153;
    SpFlatten sp_flatten = 154;
    SpFnRef sp_fn_ref = 155;
    SpGenerator sp_generator = 156;
    SpGroupingSets sp_grouping_sets = 157;
    SpMergeDeleteWhenMatchedClause sp_merge_delete_when_matched_clause = 158;
    SpMergeInsertWhenNotMatchedClause sp_merge_insert_when_not_matched_clause = 159;
    SpMergeUpdateWhenMatchedClause sp_merge_update_when_matched_clause = 160;
    SpNameRef sp_name_ref = 161;
    SpRange sp_range = 162;
    SpReadAvro sp_read_avro = 163;
    SpReadCsv sp_read_csv = 164;
    SpReadJson sp_read_json = 165;
    SpReadOrc sp_read_orc = 166;
    SpReadParquet sp_read_parquet = 167;
    SpReadTable sp_read_table = 168;
    SpReadXml sp_read_xml = 169;
    SpRelationalGroupedDataframeAgg sp_relational_grouped_dataframe_agg = 170;
    SpRelationalGroupedDataframeApplyInPandas sp_relational_grouped_dataframe_apply_in_pandas = 171;
    SpRelationalGroupedDataframeBuiltin sp_relational_grouped_dataframe_builtin = 172;
    SpRelationalGroupedDataframePivot sp_relational_grouped_dataframe_pivot = 173;
    SpRelationalGroupedDataframeRef sp_relational_grouped_dataframe_ref = 174;
    SpRow sp_row = 175;
    SpSessionTableFunction sp_session_table_function = 176;
    SpSql sp_sql = 177;
    SpTable sp_table = 178;
    SpTableDelete sp_table_delete = 179;
    SpTableDropTable sp_table_drop_table = 180;
    SpTableFnCallAlias sp_table_fn_call_alias = 181;
    SpTableFnCallOver sp_table_fn_call_over = 182;
    SpTableMerge sp_table_merge = 183;
    SpTableSample sp_table_sample = 184;
    SpTableUpdate sp_table_update = 185;
    SpToSnowparkPandas sp_to_snowpark_pandas = 186;
    SpWindowSpecEmpty sp_window_spec_empty = 187;
    SpWindowSpecOrderBy sp_window_spec_order_by = 188;
    SpWindowSpecPartitionBy sp_window_spec_partition_by = 189;
    SpWindowSpecRangeBetween sp_window_spec_range_between = 190;
    SpWindowSpecRowsBetween sp_window_spec_rows_between = 191;
    SpWriteCopyIntoLocation sp_write_copy_into_location = 192;
    SpWriteCsv sp_write_csv = 193;
    SpWriteJson sp_write_json = 194;
    SpWritePandas sp_write_pandas = 195;
    SpWriteParquet sp_write_parquet = 196;
    SpWriteTable sp_write_table = 197;
    StoredProcedure stored_procedure = 198;
    StringVal string_val = 199;
    Sub sub = 200;
    TupleVal tuple_val = 201;
    Udaf udaf = 202;
    Udf udf = 203;
    Udtf udtf = 204;
  }
}

// fn.ir:140
message IndirectTableFnIdRef {
  VarId id = 1;
  SrcPosition src = 2;
}

// fn.ir:136
message IndirectTableFnNameRef {
  SpNameRef name = 1;
  SrcPosition src = 2;
}

// const.ir:13
message Int64Val {
  SrcPosition src = 1;
  int64 v = 2;
}

// op.ir:30
message Leq {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// expr.ir:9
message ListVal {
  SrcPosition src = 1;
  repeated Expr vs = 2;
}

// op.ir:28
message Lt {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:50
message Mod {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:46
message Mul {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:40
message Neg {
  Expr operand = 1;
  SrcPosition src = 2;
}

// op.ir:26
message Neq {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:14
message Not {
  Expr operand = 1;
  SrcPosition src = 2;
}

// const.ir:7
message NullVal {
  SrcPosition src = 1;
}

// expr.ir:26
message ObjectGetItem {
  repeated Expr args = 1;
  VarId obj = 2;
  SrcPosition src = 3;
}

// op.ir:18
message Or {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:52
message Pow {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// const.ir:58
message PythonDateVal {
  int64 day = 1;
  int64 month = 2;
  SrcPosition src = 3;
  int64 year = 4;
}

// const.ir:64
message PythonTimeVal {
  int64 hour = 1;
  int64 microsecond = 2;
  int64 minute = 3;
  int64 second = 4;
  SrcPosition src = 5;
  PythonTimeZone tz = 6;
}

// const.ir:47
message PythonTimestampVal {
  int64 day = 1;
  int64 hour = 2;
  int64 microsecond = 3;
  int64 minute = 4;
  int64 month = 5;
  int64 second = 6;
  SrcPosition src = 7;
  PythonTimeZone tz = 8;
  int64 year = 9;
}

// ast.ir:4
message Request {
  InternedValueTable interned_value_table = 1;
  repeated Stmt body = 2;
  int64 client_ast_version = 3;
  Language client_language = 4;
  Version client_version = 5;
}

// ast.ir:12
message Response {
  InternedValueTable interned_value_table = 1;
  repeated Result body = 2;
}

message Result {
  oneof variant {
    Error trait_error = 1;
    EvalOk eval_ok = 2;
    ExtensionError extension_error = 3;
    SessionResetRequiredError session_reset_required_error = 4;
  }
}

// expr.ir:14
message SeqMapVal {
  repeated TupleVal kvs = 1;
  SrcPosition src = 2;
}

// ast.ir:96
message SessionResetRequiredError {
  int64 uid = 1;
  VarId var_id = 2;
}

// ast.ir:80
message SfQueryResult {
  string uuid = 1;
}

// column.ir:19
message SpCaseExpr {
  Expr condition = 1;
  SrcPosition src = 2;
  Expr value = 3;
}

// column.ir:34
message SpColumnAlias {
  Expr col = 1;
  SpColumnAliasFn fn = 2;
  string name = 3;
  SrcPosition src = 4;
}

// column.ir:41
message SpColumnApply_Int {
  Expr col = 1;
  int64 idx = 2;
  SrcPosition src = 3;
}

// column.ir:45
message SpColumnApply_String {
  Expr col = 1;
  string field = 2;
  SrcPosition src = 3;
}

// column.ir:49
message SpColumnAsc {
  Expr col = 1;
  SpNullOrder null_order = 2;
  SrcPosition src = 3;
}

// column.ir:53
message SpColumnBetween {
  Expr col = 1;
  Expr lower_bound = 2;
  SrcPosition src = 3;
  Expr upper_bound = 4;
}

// column.ir:14
message SpColumnCaseWhen {
  repeated SpCaseExpr cases = 1;
  SrcPosition src = 2;
}

// column.ir:58
message SpColumnCast {
  Expr col = 1;
  SrcPosition src = 2;
  SpDataType to = 3;
}

// column.ir:66
message SpColumnDesc {
  Expr col = 1;
  SpNullOrder null_order = 2;
  SrcPosition src = 3;
}

// column.ir:72
message SpColumnEqualNan {
  Expr col = 1;
  SrcPosition src = 2;
}

// column.ir:74
message SpColumnEqualNull {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

message SpColumnFn {
  oneof variant {
    ExtensionColumnFn extension_column_fn = 1;
    SpColumnAlias sp_column_alias = 2;
    SpColumnApply_Int sp_column_apply__int = 3;
    SpColumnApply_String sp_column_apply__string = 4;
    SpColumnAsc sp_column_asc = 5;
    SpColumnBetween sp_column_between = 6;
    SpColumnCast sp_column_cast = 7;
    SpColumnDesc sp_column_desc = 8;
    SpColumnEqualNan sp_column_equal_nan = 9;
    SpColumnIn sp_column_in = 10;
    SpColumnIsNotNull sp_column_is_not_null = 11;
    SpColumnIsNull sp_column_is_null = 12;
    SpColumnOver sp_column_over = 13;
    SpColumnStringCollate sp_column_string_collate = 14;
    SpColumnStringContains sp_column_string_contains = 15;
    SpColumnStringEndsWith sp_column_string_ends_with = 16;
    SpColumnStringLike sp_column_string_like = 17;
    SpColumnStringRegexp sp_column_string_regexp = 18;
    SpColumnStringStartsWith sp_column_string_starts_with = 19;
    SpColumnStringSubstr sp_column_string_substr = 20;
    SpColumnTryCast sp_column_try_cast = 21;
    SpColumnWithinGroup sp_column_within_group = 22;
  }
}

// column.ir:79
message SpColumnIn {
  Expr col = 1;
  SrcPosition src = 2;
  repeated Expr values = 3;
}

// column.ir:83
message SpColumnIsNotNull {
  Expr col = 1;
  SrcPosition src = 2;
}

// column.ir:85
message SpColumnIsNull {
  Expr col = 1;
  SrcPosition src = 2;
}

// column.ir:87
message SpColumnOver {
  Expr col = 1;
  SrcPosition src = 2;
  SpWindowSpecExpr window_spec = 3;
}

// column.ir:8
message SpColumnSqlExpr {
  google.protobuf.StringValue df_alias = 1;
  string sql = 2;
  SrcPosition src = 3;
}

// column.ir:114
message SpColumnStringCollate {
  Expr col = 1;
  Expr collation_spec = 2;
  SrcPosition src = 3;
}

// column.ir:118
message SpColumnStringContains {
  Expr col = 1;
  Expr pattern = 2;
  SrcPosition src = 3;
}

// column.ir:105
message SpColumnStringEndsWith {
  Expr col = 1;
  SrcPosition src = 2;
  Expr suffix = 3;
}

// column.ir:97
message SpColumnStringLike {
  Expr col = 1;
  Expr pattern = 2;
  SrcPosition src = 3;
}

// column.ir:92
message SpColumnStringRegexp {
  Expr col = 1;
  Expr parameters = 2;
  Expr pattern = 3;
  SrcPosition src = 4;
}

// column.ir:101
message SpColumnStringStartsWith {
  Expr col = 1;
  Expr prefix = 2;
  SrcPosition src = 3;
}

// column.ir:109
message SpColumnStringSubstr {
  Expr col = 1;
  Expr len = 2;
  Expr pos = 3;
  SrcPosition src = 4;
}

// column.ir:62
message SpColumnTryCast {
  Expr col = 1;
  SrcPosition src = 2;
  SpDataType to = 3;
}

// column.ir:122
message SpColumnWithinGroup {
  Expr col = 1;
  ExprArgList cols = 2;
  SrcPosition src = 3;
}

// dataframe.ir:48
message SpCreateDataframe {
  SpDataframeData data = 1;
  SpDataframeSchema schema = 2;
  SrcPosition src = 3;
}

// dataframe.ir:173
message SpDataframeAgg {
  SpDataframeExpr df = 1;
  ExprArgList exprs = 2;
  SrcPosition src = 3;
}

// dataframe.ir:178
message SpDataframeAlias {
  SpDataframeExpr df = 1;
  string name = 2;
  SrcPosition src = 3;
}

// dataframe-analytics.ir:27
message SpDataframeAnalyticsComputeLag {
  repeated Expr cols = 1;
  SpDataframeExpr df = 2;
  repeated string formatted_col_names = 3;
  repeated string group_by = 4;
  repeated int64 lags = 5;
  repeated string order_by = 6;
  SrcPosition src = 7;
}

// dataframe-analytics.ir:36
message SpDataframeAnalyticsComputeLead {
  repeated Expr cols = 1;
  SpDataframeExpr df = 2;
  repeated string formatted_col_names = 3;
  repeated string group_by = 4;
  repeated int64 leads = 5;
  repeated string order_by = 6;
  SrcPosition src = 7;
}

// dataframe-analytics.ir:18
message SpDataframeAnalyticsCumulativeAgg {
  repeated Tuple_String_List_String aggs = 1;
  SpDataframeExpr df = 2;
  repeated string formatted_col_names = 3;
  repeated string group_by = 4;
  bool is_forward = 5;
  repeated string order_by = 6;
  SrcPosition src = 7;
}

// dataframe-analytics.ir:9
message SpDataframeAnalyticsMovingAgg {
  repeated Tuple_String_List_String aggs = 1;
  SpDataframeExpr df = 2;
  repeated string formatted_col_names = 3;
  repeated string group_by = 4;
  repeated string order_by = 5;
  SrcPosition src = 6;
  repeated int64 window_sizes = 7;
}

// dataframe-analytics.ir:45
message SpDataframeAnalyticsTimeSeriesAgg {
  repeated Tuple_String_List_String aggs = 1;
  SpDataframeExpr df = 2;
  repeated string formatted_col_names = 3;
  repeated string group_by = 4;
  string sliding_interval = 5;
  SrcPosition src = 6;
  string time_col = 7;
  repeated string windows = 8;
}

// dataframe-io.ir:197
message SpDataframeCacheResult {
  SpDataframeExpr df = 1;
  SrcPosition src = 2;
  repeated Tuple_String_String statement_params = 3;
}

// column.ir:1
message SpDataframeCol {
  string col_name = 1;
  SpDataframeExpr df = 2;
  SrcPosition src = 3;
}

// dataframe.ir:28
message SpDataframeCollect {
  bool block = 1;
  bool case_sensitive = 2;
  VarId id = 3;
  bool log_on_exception = 4;
  bool no_wait = 5;
  SrcPosition src = 6;
  repeated Tuple_String_String statement_params = 7;
}

// dataframe-io.ir:179
message SpDataframeCopyIntoTable {
  repeated Tuple_String_Expr copy_options = 1;
  SpDataframeExpr df = 2;
  repeated string files = 3;
  repeated Tuple_String_Expr format_type_options = 4;
  repeated Tuple_String_String iceberg_config = 5;
  google.protobuf.StringValue pattern = 6;
  SrcPosition src = 7;
  repeated Tuple_String_String statement_params = 8;
  SpNameRef table_name = 9;
  repeated string target_columns = 10;
  repeated Expr transformations = 11;
  google.protobuf.StringValue validation_mode = 12;
}

// dataframe.ir:22
message SpDataframeCount {
  bool block = 1;
  VarId id = 2;
  SrcPosition src = 3;
  repeated Tuple_String_String statement_params = 4;
}

// dataframe-io.ir:163
message SpDataframeCreateOrReplaceDynamicTable {
  List_Expr clustering_keys = 1;
  google.protobuf.StringValue comment = 2;
  google.protobuf.Int64Value data_retention_time = 3;
  SpDataframeExpr df = 4;
  google.protobuf.StringValue initialize = 5;
  bool is_transient = 6;
  string lag = 7;
  google.protobuf.Int64Value max_data_extension_time = 8;
  SpSaveMode mode = 9;
  SpNameRef name = 10;
  google.protobuf.StringValue refresh_mode = 11;
  SrcPosition src = 12;
  repeated Tuple_String_String statement_params = 13;
  string warehouse = 14;
}

// dataframe-io.ir:155
message SpDataframeCreateOrReplaceView {
  google.protobuf.StringValue comment = 1;
  SpDataframeExpr df = 2;
  bool is_temp = 3;
  SpNameRef name = 4;
  SrcPosition src = 5;
  repeated Tuple_String_String statement_params = 6;
}

// dataframe.ir:183
message SpDataframeCrossJoin {
  SpDataframeExpr lhs = 1;
  google.protobuf.StringValue lsuffix = 2;
  SpDataframeExpr rhs = 3;
  google.protobuf.StringValue rsuffix = 4;
  SrcPosition src = 5;
}

// dataframe-grouped.ir:13
message SpDataframeCube {
  ExprArgList cols = 1;
  SpDataframeExpr df = 2;
  SrcPosition src = 3;
}

// dataframe.ir:190
message SpDataframeDescribe {
  ExprArgList cols = 1;
  SpDataframeExpr df = 2;
  SrcPosition src = 3;
}

// dataframe.ir:195
message SpDataframeDistinct {
  SpDataframeExpr df = 1;
  SrcPosition src = 2;
}

// dataframe.ir:199
message SpDataframeDrop {
  ExprArgList cols = 1;
  SpDataframeExpr df = 2;
  SrcPosition src = 3;
}

// dataframe.ir:204
message SpDataframeDropDuplicates {
  ExprArgList cols = 1;
  SpDataframeExpr df = 2;
  SrcPosition src = 3;
}

// dataframe.ir:209
message SpDataframeExcept {
  SpDataframeExpr df = 1;
  SpDataframeExpr other = 2;
  SrcPosition src = 3;
}

message SpDataframeExpr {
  oneof variant {
    ExtensionDataframeExpr extension_dataframe_expr = 1;
    SpCreateDataframe sp_create_dataframe = 2;
    SpDataframeAgg sp_dataframe_agg = 3;
    SpDataframeAlias sp_dataframe_alias = 4;
    SpDataframeAnalyticsComputeLag sp_dataframe_analytics_compute_lag = 5;
    SpDataframeAnalyticsComputeLead sp_dataframe_analytics_compute_lead = 6;
    SpDataframeAnalyticsCumulativeAgg sp_dataframe_analytics_cumulative_agg = 7;
    SpDataframeAnalyticsMovingAgg sp_dataframe_analytics_moving_agg = 8;
    SpDataframeAnalyticsTimeSeriesAgg sp_dataframe_analytics_time_series_agg = 9;
    SpDataframeCollect sp_dataframe_collect = 10;
    SpDataframeCount sp_dataframe_count = 11;
    SpDataframeCrossJoin sp_dataframe_cross_join = 12;
    SpDataframeDescribe sp_dataframe_describe = 13;
    SpDataframeDistinct sp_dataframe_distinct = 14;
    SpDataframeDrop sp_dataframe_drop = 15;
    SpDataframeDropDuplicates sp_dataframe_drop_duplicates = 16;
    SpDataframeExcept sp_dataframe_except = 17;
    SpDataframeFilter sp_dataframe_filter = 18;
    SpDataframeFirst sp_dataframe_first = 19;
    SpDataframeFlatten sp_dataframe_flatten = 20;
    SpDataframeIntersect sp_dataframe_intersect = 21;
    SpDataframeJoin sp_dataframe_join = 22;
    SpDataframeJoinTableFunction sp_dataframe_join_table_function = 23;
    SpDataframeLimit sp_dataframe_limit = 24;
    SpDataframeNaDrop_Python sp_dataframe_na_drop__python = 25;
    SpDataframeNaDrop_Scala sp_dataframe_na_drop__scala = 26;
    SpDataframeNaFill sp_dataframe_na_fill = 27;
    SpDataframeNaReplace sp_dataframe_na_replace = 28;
    SpDataframeNaturalJoin sp_dataframe_natural_join = 29;
    SpDataframeRandomSplit sp_dataframe_random_split = 30;
    SpDataframeRef sp_dataframe_ref = 31;
    SpDataframeRename sp_dataframe_rename = 32;
    SpDataframeSample sp_dataframe_sample = 33;
    SpDataframeSelect_Columns sp_dataframe_select__columns = 34;
    SpDataframeSelect_Exprs sp_dataframe_select__exprs = 35;
    SpDataframeShow sp_dataframe_show = 36;
    SpDataframeSort sp_dataframe_sort = 37;
    SpDataframeStatApproxQuantile sp_dataframe_stat_approx_quantile = 38;
    SpDataframeStatCorr sp_dataframe_stat_corr = 39;
    SpDataframeStatCov sp_dataframe_stat_cov = 40;
    SpDataframeStatCrossTab sp_dataframe_stat_cross_tab = 41;
    SpDataframeStatSampleBy sp_dataframe_stat_sample_by = 42;
    SpDataframeToDf sp_dataframe_to_df = 43;
    SpDataframeToLocalIterator sp_dataframe_to_local_iterator = 44;
    SpDataframeToPandas sp_dataframe_to_pandas = 45;
    SpDataframeToPandasBatches sp_dataframe_to_pandas_batches = 46;
    SpDataframeUnion sp_dataframe_union = 47;
    SpDataframeUnionAll sp_dataframe_union_all = 48;
    SpDataframeUnionAllByName sp_dataframe_union_all_by_name = 49;
    SpDataframeUnionByName sp_dataframe_union_by_name = 50;
    SpDataframeUnpivot sp_dataframe_unpivot = 51;
    SpDataframeWithColumn sp_dataframe_with_column = 52;
    SpDataframeWithColumnRenamed sp_dataframe_with_column_renamed = 53;
    SpDataframeWithColumns sp_dataframe_with_columns = 54;
    SpDataframeWrite sp_dataframe_write = 55;
    SpFlatten sp_flatten = 56;
    SpGenerator sp_generator = 57;
    SpRange sp_range = 58;
    SpReadAvro sp_read_avro = 59;
    SpReadCsv sp_read_csv = 60;
    SpReadJson sp_read_json = 61;
    SpReadOrc sp_read_orc = 62;
    SpReadParquet sp_read_parquet = 63;
    SpReadTable sp_read_table = 64;
    SpReadXml sp_read_xml = 65;
    SpRelationalGroupedDataframeAgg sp_relational_grouped_dataframe_agg = 66;
    SpRelationalGroupedDataframeApplyInPandas sp_relational_grouped_dataframe_apply_in_pandas = 67;
    SpRelationalGroupedDataframeBuiltin sp_relational_grouped_dataframe_builtin = 68;
    SpRelationalGroupedDataframePivot sp_relational_grouped_dataframe_pivot = 69;
    SpSessionTableFunction sp_session_table_function = 70;
    SpSql sp_sql = 71;
    SpTable sp_table = 72;
    SpTableDelete sp_table_delete = 73;
    SpTableDropTable sp_table_drop_table = 74;
    SpTableMerge sp_table_merge = 75;
    SpTableSample sp_table_sample = 76;
    SpTableUpdate sp_table_update = 77;
    SpWritePandas sp_write_pandas = 78;
  }
}

// dataframe.ir:214
message SpDataframeFilter {
  Expr condition = 1;
  SpDataframeExpr df = 2;
  SrcPosition src = 3;
}

// dataframe.ir:228
message SpDataframeFirst {
  bool block = 1;
  SpDataframeExpr df = 2;
  int64 num = 3;
  SrcPosition src = 4;
  repeated Tuple_String_String statement_params = 5;
}

// dataframe.ir:219
message SpDataframeFlatten {
  SpDataframeExpr df = 1;
  Expr input = 2;
  SpFlattenMode mode = 3;
  bool outer = 4;
  google.protobuf.StringValue path = 5;
  bool recursive = 6;
  SrcPosition src = 7;
}

// dataframe-grouped.ir:18
message SpDataframeGroupBy {
  ExprArgList cols = 1;
  SpDataframeExpr df = 2;
  SrcPosition src = 3;
}

// dataframe-grouped.ir:35
message SpDataframeGroupByGroupingSets {
  SpDataframeExpr df = 1;
  ExprArgList grouping_sets = 2;
  SrcPosition src = 3;
}

// dataframe.ir:235
message SpDataframeIntersect {
  SpDataframeExpr df = 1;
  SpDataframeExpr other = 2;
  SrcPosition src = 3;
}

// dataframe.ir:251
message SpDataframeJoin {
  Expr join_expr = 1;
  SpJoinType join_type = 2;
  SpDataframeExpr lhs = 3;
  google.protobuf.StringValue lsuffix = 4;
  Expr match_condition = 5;
  SpDataframeExpr rhs = 6;
  google.protobuf.StringValue rsuffix = 7;
  SrcPosition src = 8;
}

// dataframe.ir:261
message SpDataframeJoinTableFunction {
  Expr fn = 1;
  SpDataframeExpr lhs = 2;
  SrcPosition src = 3;
}

// dataframe.ir:266
message SpDataframeLimit {
  SpDataframeExpr df = 1;
  int64 n = 2;
  int64 offset = 3;
  SrcPosition src = 4;
}

// dataframe.ir:145
message SpDataframeNaDrop_Python {
  SpDataframeExpr df = 1;
  string how = 2;
  SrcPosition src = 3;
  List_String subset = 4;
  google.protobuf.Int64Value thresh = 5;
}

// dataframe.ir:139
message SpDataframeNaDrop_Scala {
  repeated string cols = 1;
  SpDataframeExpr df = 2;
  int64 min_non_nulls_per_row = 3;
  SrcPosition src = 4;
}

// dataframe.ir:152
message SpDataframeNaFill {
  SpDataframeExpr df = 1;
  SrcPosition src = 2;
  List_String subset = 3;
  Expr value = 4;
  Map_String_Expr value_map = 5;
}

// dataframe.ir:159
message SpDataframeNaReplace {
  SpDataframeExpr df = 1;
  Map_Expr_Expr replacement_map = 2;
  SrcPosition src = 3;
  List_String subset = 4;
  List_Expr to_replace_list = 5;
  Expr to_replace_value = 6;
  Expr value = 7;
  List_Expr values = 8;
}

// dataframe.ir:272
message SpDataframeNaturalJoin {
  SpJoinType join_type = 1;
  SpDataframeExpr lhs = 2;
  SpDataframeExpr rhs = 3;
  SrcPosition src = 4;
}

// dataframe-grouped.ir:23
message SpDataframePivot {
  Expr default_on_null = 1;
  SpDataframeExpr df = 2;
  Expr pivot_col = 3;
  SrcPosition src = 4;
  SpPivotValue values = 5;
}

// dataframe.ir:286
message SpDataframeRandomSplit {
  SpDataframeExpr df = 1;
  google.protobuf.Int64Value seed = 2;
  SrcPosition src = 3;
  repeated Tuple_String_String statement_params = 4;
  repeated double weights = 5;
}

message SpDataframeReader {
  oneof variant {
    ExtensionDataframeReader extension_dataframe_reader = 1;
    SpDataframeReaderInit sp_dataframe_reader_init = 2;
    SpDataframeReaderOption sp_dataframe_reader_option = 3;
    SpDataframeReaderOptions sp_dataframe_reader_options = 4;
    SpDataframeReaderSchema sp_dataframe_reader_schema = 5;
    SpDataframeReaderWithMetadata sp_dataframe_reader_with_metadata = 6;
  }
}

// dataframe-io.ir:15
message SpDataframeReaderInit {
  SrcPosition src = 1;
}

// dataframe-io.ir:17
message SpDataframeReaderOption {
  string key = 1;
  SpDataframeReader reader = 2;
  SrcPosition src = 3;
  Expr value = 4;
}

// dataframe-io.ir:23
message SpDataframeReaderOptions {
  repeated Tuple_String_Expr configs = 1;
  SpDataframeReader reader = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:28
message SpDataframeReaderSchema {
  SpDataframeReader reader = 1;
  SpStructType schema = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:33
message SpDataframeReaderWithMetadata {
  ExprArgList metadata_columns = 1;
  SpDataframeReader reader = 2;
  SrcPosition src = 3;
}

// dataframe.ir:13
message SpDataframeRef {
  VarId id = 1;
  SrcPosition src = 2;
}

// dataframe.ir:293
message SpDataframeRename {
  Expr col_or_mapper = 1;
  SpDataframeExpr df = 2;
  google.protobuf.StringValue new_column = 3;
  SrcPosition src = 4;
}

// dataframe-grouped.ir:30
message SpDataframeRollup {
  ExprArgList cols = 1;
  SpDataframeExpr df = 2;
  SrcPosition src = 3;
}

// dataframe.ir:299
message SpDataframeSample {
  SpDataframeExpr df = 1;
  google.protobuf.Int64Value num = 2;
  google.protobuf.DoubleValue probability_fraction = 3;
  SrcPosition src = 4;
}

// dataframe.ir:306
message SpDataframeSelect_Columns {
  ExprArgList cols = 1;
  SpDataframeExpr df = 2;
  SrcPosition src = 3;
}

// dataframe.ir:311
message SpDataframeSelect_Exprs {
  SpDataframeExpr df = 1;
  ExprArgList exprs = 2;
  SrcPosition src = 3;
}

// dataframe.ir:17
message SpDataframeShow {
  VarId id = 1;
  int64 n = 2;
  SrcPosition src = 3;
}

// dataframe.ir:316
message SpDataframeSort {
  Expr ascending = 1;
  ExprArgList cols = 2;
  SpDataframeExpr df = 3;
  SrcPosition src = 4;
}

// dataframe-stat.ir:1
message SpDataframeStatApproxQuantile {
  repeated Expr cols = 1;
  VarId id = 2;
  repeated double percentile = 3;
  SrcPosition src = 4;
  repeated Tuple_String_String statement_params = 5;
}

// dataframe-stat.ir:8
message SpDataframeStatCorr {
  Expr col1 = 1;
  Expr col2 = 2;
  VarId id = 3;
  SrcPosition src = 4;
  repeated Tuple_String_String statement_params = 5;
}

// dataframe-stat.ir:15
message SpDataframeStatCov {
  Expr col1 = 1;
  Expr col2 = 2;
  VarId id = 3;
  SrcPosition src = 4;
  repeated Tuple_String_String statement_params = 5;
}

// dataframe-stat.ir:22
message SpDataframeStatCrossTab {
  Expr col1 = 1;
  Expr col2 = 2;
  VarId id = 3;
  SrcPosition src = 4;
  repeated Tuple_String_String statement_params = 5;
}

// dataframe-stat.ir:29
message SpDataframeStatSampleBy {
  Expr col = 1;
  SpDataframeExpr df = 2;
  repeated Tuple_Expr_Float fractions = 3;
  SrcPosition src = 4;
}

// dataframe.ir:129
message SpDataframeToDf {
  ExprArgList col_names = 1;
  SpDataframeExpr df = 2;
  SrcPosition src = 3;
}

// dataframe.ir:37
message SpDataframeToLocalIterator {
  bool block = 1;
  bool case_sensitive = 2;
  VarId id = 3;
  SrcPosition src = 4;
  repeated Tuple_String_String statement_params = 5;
}

// dataframe.ir:117
message SpDataframeToPandas {
  bool block = 1;
  VarId id = 2;
  SrcPosition src = 3;
  repeated Tuple_String_String statement_params = 4;
}

// dataframe.ir:123
message SpDataframeToPandasBatches {
  bool block = 1;
  VarId id = 2;
  SrcPosition src = 3;
  repeated Tuple_String_String statement_params = 4;
}

// dataframe.ir:323
message SpDataframeUnion {
  SpDataframeExpr df = 1;
  SpDataframeExpr other = 2;
  SrcPosition src = 3;
}

// dataframe.ir:328
message SpDataframeUnionAll {
  SpDataframeExpr df = 1;
  SpDataframeExpr other = 2;
  SrcPosition src = 3;
}

// dataframe.ir:333
message SpDataframeUnionAllByName {
  SpDataframeExpr df = 1;
  SpDataframeExpr other = 2;
  SrcPosition src = 3;
}

// dataframe.ir:338
message SpDataframeUnionByName {
  SpDataframeExpr df = 1;
  SpDataframeExpr other = 2;
  SrcPosition src = 3;
}

// dataframe.ir:278
message SpDataframeUnpivot {
  repeated Expr column_list = 1;
  SpDataframeExpr df = 2;
  bool include_nulls = 3;
  string name_column = 4;
  SrcPosition src = 5;
  string value_column = 6;
}

// dataframe.ir:343
message SpDataframeWithColumn {
  Expr col = 1;
  string col_name = 2;
  SpDataframeExpr df = 3;
  SrcPosition src = 4;
}

// dataframe.ir:349
message SpDataframeWithColumnRenamed {
  Expr col = 1;
  SpDataframeExpr df = 2;
  string new_name = 3;
  SrcPosition src = 4;
}

// dataframe.ir:355
message SpDataframeWithColumns {
  repeated string col_names = 1;
  SpDataframeExpr df = 2;
  SrcPosition src = 3;
  repeated Expr values = 4;
}

// dataframe-io.ir:94
message SpDataframeWrite {
  SpDataframeExpr df = 1;
  repeated Tuple_String_Expr options = 2;
  Expr partition_by = 3;
  SpSaveMode save_mode = 4;
  SrcPosition src = 5;
}

message SpDataframeWriter {
  oneof variant {
    SpWriteFile trait_sp_write_file = 1;
    ExtensionDataframeWriter extension_dataframe_writer = 2;
    SpWriteCopyIntoLocation sp_write_copy_into_location = 3;
    SpWriteCsv sp_write_csv = 4;
    SpWriteJson sp_write_json = 5;
    SpWriteParquet sp_write_parquet = 6;
    SpWriteTable sp_write_table = 7;
  }
}

// const.ir:39
message SpDatatypeVal {
  SpDataType datatype = 1;
  SrcPosition src = 2;
}

// dataframe.ir:78
message SpFlatten {
  Expr input = 1;
  SpFlattenMode mode = 2;
  bool outer = 3;
  google.protobuf.StringValue path = 4;
  bool recursive = 5;
  SrcPosition src = 6;
}

// fn.ir:22
message SpFnRef {
  VarId id = 1;
  SrcPosition src = 2;
}

// dataframe.ir:88
message SpGenerator {
  ExprArgList columns = 1;
  int64 row_count = 2;
  SrcPosition src = 3;
  int64 time_limit_seconds = 4;
}

// dataframe.ir:361
message SpGroupingSets {
  ExprArgList sets = 1;
  SrcPosition src = 2;
}

message SpMatchedClause {
  oneof variant {
    SpMergeDeleteWhenMatchedClause sp_merge_delete_when_matched_clause = 1;
    SpMergeInsertWhenNotMatchedClause sp_merge_insert_when_not_matched_clause = 2;
    SpMergeUpdateWhenMatchedClause sp_merge_update_when_matched_clause = 3;
  }
}

// table.ir:46
message SpMergeDeleteWhenMatchedClause {
  Expr condition = 1;
  SrcPosition src = 2;
}

// table.ir:50
message SpMergeInsertWhenNotMatchedClause {
  Expr condition = 1;
  List_Expr insert_keys = 2;
  List_Expr insert_values = 3;
  SrcPosition src = 4;
}

// table.ir:41
message SpMergeUpdateWhenMatchedClause {
  Expr condition = 1;
  SrcPosition src = 2;
  Map_Expr_Expr update_assignments = 3;
}

// ast.ir:114
message SpNameRef {
  SpName name = 1;
  SrcPosition src = 2;
}

// dataframe.ir:94
message SpRange {
  google.protobuf.Int64Value end = 1;
  SrcPosition src = 2;
  int64 start = 3;
  google.protobuf.Int64Value step = 4;
}

// dataframe-io.ir:54
message SpReadAvro {
  string path = 1;
  SpDataframeReader reader = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:43
message SpReadCsv {
  string path = 1;
  SpDataframeReader reader = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:49
message SpReadJson {
  string path = 1;
  SpDataframeReader reader = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:59
message SpReadOrc {
  string path = 1;
  SpDataframeReader reader = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:64
message SpReadParquet {
  string path = 1;
  SpDataframeReader reader = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:38
message SpReadTable {
  SpNameRef name = 1;
  SpDataframeReader reader = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:69
message SpReadXml {
  string path = 1;
  SpDataframeReader reader = 2;
  SrcPosition src = 3;
}

// dataframe-grouped.ir:40
message SpRelationalGroupedDataframeAgg {
  ExprArgList exprs = 1;
  SpRelationalGroupedDataframeExpr grouped_df = 2;
  SrcPosition src = 3;
}

// dataframe-grouped.ir:52
message SpRelationalGroupedDataframeApplyInPandas {
  SpCallable func = 1;
  SpRelationalGroupedDataframeExpr grouped_df = 2;
  repeated Tuple_String_Expr kwargs = 3;
  SpStructType output_schema = 4;
  SrcPosition src = 5;
}

// dataframe-grouped.ir:46
message SpRelationalGroupedDataframeBuiltin {
  string agg_name = 1;
  ExprArgList cols = 2;
  SpRelationalGroupedDataframeExpr grouped_df = 3;
  SrcPosition src = 4;
}

message SpRelationalGroupedDataframeExpr {
  oneof variant {
    ExtensionRelationalGroupedDataframeExpr extension_relational_grouped_dataframe_expr = 1;
    SpDataframeCube sp_dataframe_cube = 2;
    SpDataframeGroupBy sp_dataframe_group_by = 3;
    SpDataframeGroupByGroupingSets sp_dataframe_group_by_grouping_sets = 4;
    SpDataframePivot sp_dataframe_pivot = 5;
    SpDataframeRollup sp_dataframe_rollup = 6;
    SpRelationalGroupedDataframeRef sp_relational_grouped_dataframe_ref = 7;
  }
}

// dataframe-grouped.ir:59
message SpRelationalGroupedDataframePivot {
  Expr default_on_null = 1;
  SpRelationalGroupedDataframeExpr grouped_df = 2;
  Expr pivot_col = 3;
  SrcPosition src = 4;
  SpPivotValue values = 5;
}

// dataframe-grouped.ir:9
message SpRelationalGroupedDataframeRef {
  VarId id = 1;
  SrcPosition src = 2;
}

// expr.ir:19
message SpRow {
  List_String names = 1;
  SrcPosition src = 2;
  repeated Expr vs = 3;
}

// dataframe.ir:113
message SpSessionTableFunction {
  Expr fn = 1;
  SrcPosition src = 2;
}

// dataframe.ir:100
message SpSql {
  repeated Expr params = 1;
  string query = 2;
  SrcPosition src = 3;
}

// dataframe.ir:107
message SpTable {
  bool is_temp_table_for_cleanup = 1;
  SpNameRef name = 2;
  SrcPosition src = 3;
  SpTableVariant variant = 4;
}

// table.ir:1
message SpTableDelete {
  bool block = 1;
  Expr condition = 2;
  VarId id = 3;
  SpDataframeExpr source = 4;
  SrcPosition src = 5;
  repeated Tuple_String_String statement_params = 6;
}

// table.ir:9
message SpTableDropTable {
  VarId id = 1;
  SrcPosition src = 2;
}

// fn.ir:160
message SpTableFnCallAlias {
  ExprArgList aliases = 1;
  Expr lhs = 2;
  SrcPosition src = 3;
}

// fn.ir:154
message SpTableFnCallOver {
  Expr lhs = 1;
  repeated Expr order_by = 2;
  repeated Expr partition_by = 3;
  SrcPosition src = 4;
}

// table.ir:13
message SpTableMerge {
  bool block = 1;
  repeated SpMatchedClause clauses = 2;
  VarId id = 3;
  Expr join_expr = 4;
  SpDataframeExpr source = 5;
  SrcPosition src = 6;
  repeated Tuple_String_String statement_params = 7;
}

// table.ir:22
message SpTableSample {
  SpDataframeExpr df = 1;
  google.protobuf.Int64Value num = 2;
  google.protobuf.DoubleValue probability_fraction = 3;
  google.protobuf.StringValue sampling_method = 4;
  google.protobuf.Int64Value seed = 5;
  SrcPosition src = 6;
}

// table.ir:30
message SpTableUpdate {
  repeated Tuple_String_Expr assignments = 1;
  bool block = 2;
  Expr condition = 3;
  VarId id = 4;
  SpDataframeExpr source = 5;
  SrcPosition src = 6;
  repeated Tuple_String_String statement_params = 7;
}

// dataframe.ir:365
message SpToSnowparkPandas {
  List_String columns = 1;
  SpDataframeExpr df = 2;
  List_String index_col = 3;
  SrcPosition src = 4;
}

// window.ir:18
message SpWindowSpecEmpty {
  SrcPosition src = 1;
  SpWindowSpecExpr wnd = 2;
}

message SpWindowSpecExpr {
  oneof variant {
    SpWindowSpecEmpty sp_window_spec_empty = 1;
    SpWindowSpecOrderBy sp_window_spec_order_by = 2;
    SpWindowSpecPartitionBy sp_window_spec_partition_by = 3;
    SpWindowSpecRangeBetween sp_window_spec_range_between = 4;
    SpWindowSpecRowsBetween sp_window_spec_rows_between = 5;
  }
}

// window.ir:20
message SpWindowSpecOrderBy {
  repeated Expr cols = 1;
  SrcPosition src = 2;
  SpWindowSpecExpr wnd = 3;
}

// window.ir:24
message SpWindowSpecPartitionBy {
  repeated Expr cols = 1;
  SrcPosition src = 2;
  SpWindowSpecExpr wnd = 3;
}

// window.ir:28
message SpWindowSpecRangeBetween {
  SpWindowRelativePosition end = 1;
  SrcPosition src = 2;
  SpWindowRelativePosition start = 3;
  SpWindowSpecExpr wnd = 4;
}

// window.ir:33
message SpWindowSpecRowsBetween {
  SpWindowRelativePosition end = 1;
  SrcPosition src = 2;
  SpWindowRelativePosition start = 3;
  SpWindowSpecExpr wnd = 4;
}

// dataframe-io.ir:145
message SpWriteCopyIntoLocation {
  bool block = 1;
  repeated Tuple_String_Expr copy_options = 2;
  google.protobuf.StringValue file_format_name = 3;
  google.protobuf.StringValue file_format_type = 4;
  repeated Tuple_String_String format_type_options = 5;
  bool header = 6;
  VarId id = 7;
  string location = 8;
  Expr partition_by = 9;
  SrcPosition src = 10;
  repeated Tuple_String_String statement_params = 11;
}

// dataframe-io.ir:112
message SpWriteCsv {
  bool block = 1;
  repeated Tuple_String_Expr copy_options = 2;
  repeated Tuple_String_String format_type_options = 3;
  bool header = 4;
  VarId id = 5;
  string location = 6;
  Expr partition_by = 7;
  SrcPosition src = 8;
  repeated Tuple_String_String statement_params = 9;
}

message SpWriteFile {
  oneof variant {
    SpWriteCopyIntoLocation sp_write_copy_into_location = 1;
    SpWriteCsv sp_write_csv = 2;
    SpWriteJson sp_write_json = 3;
    SpWriteParquet sp_write_parquet = 4;
  }
}

// dataframe-io.ir:116
message SpWriteJson {
  bool block = 1;
  repeated Tuple_String_Expr copy_options = 2;
  repeated Tuple_String_String format_type_options = 3;
  bool header = 4;
  VarId id = 5;
  string location = 6;
  Expr partition_by = 7;
  SrcPosition src = 8;
  repeated Tuple_String_String statement_params = 9;
}

// dataframe.ir:53
message SpWritePandas {
  bool auto_create_table = 1;
  google.protobuf.Int64Value chunk_size = 2;
  string compression = 3;
  bool create_temp_table = 4;
  SpDataframeData df = 5;
  repeated Tuple_String_Expr kwargs = 6;
  string on_error = 7;
  bool overwrite = 8;
  int64 parallel = 9;
  bool quote_identifiers = 10;
  SrcPosition src = 11;
  SpNameRef table_name = 12;
  string table_type = 13;
}

// dataframe-io.ir:120
message SpWriteParquet {
  bool block = 1;
  repeated Tuple_String_Expr copy_options = 2;
  repeated Tuple_String_String format_type_options = 3;
  bool header = 4;
  VarId id = 5;
  string location = 6;
  Expr partition_by = 7;
  SrcPosition src = 8;
  repeated Tuple_String_String statement_params = 9;
}

// dataframe-io.ir:124
message SpWriteTable {
  bool block = 1;
  google.protobuf.BoolValue change_tracking = 2;
  List_Expr clustering_keys = 3;
  string column_order = 4;
  google.protobuf.StringValue comment = 5;
  bool copy_grants = 6;
  bool create_temp_table = 7;
  google.protobuf.Int64Value data_retention_time = 8;
  google.protobuf.BoolValue enable_schema_evolution = 9;
  repeated Tuple_String_String iceberg_config = 10;
  VarId id = 11;
  google.protobuf.Int64Value max_data_extension_time = 12;
  SpSaveMode mode = 13;
  SrcPosition src = 14;
  repeated Tuple_String_String statement_params = 15;
  SpNameRef table_name = 16;
  string table_type = 17;
}

message Stmt {
  oneof variant {
    Assign assign = 1;
    Eval eval = 2;
    ExtensionStmt extension_stmt = 3;
  }
}

// fn.ir:40
message StoredProcedure {
  google.protobuf.StringValue comment = 1;
  string execute_as = 2;
  repeated string external_access_integrations = 3;
  SpCallable func = 4;
  bool if_not_exists = 5;
  repeated SpNameRef imports = 6;
  List_SpDataType input_types = 7;
  bool is_permanent = 8;
  repeated Tuple_String_Expr kwargs = 9;
  google.protobuf.BoolValue log_on_exception = 10;
  SpNameRef name = 11;
  repeated string packages = 12;
  int64 parallel = 13;
  bool replace = 14;
  SpDataType return_type = 15;
  repeated Tuple_String_String secrets = 16;
  bool source_code_display = 17;
  SrcPosition src = 18;
  string stage_location = 19;
  repeated Tuple_String_String statement_params = 20;
  bool strict = 21;
}

// const.ir:31
message StringVal {
  SrcPosition src = 1;
  string v = 2;
}

// op.ir:44
message Sub {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// expr.ir:4
message TupleVal {
  SrcPosition src = 1;
  repeated Expr vs = 2;
}

// fn.ir:115
message Udaf {
  google.protobuf.StringValue comment = 1;
  repeated string external_access_integrations = 2;
  SpCallable handler = 3;
  bool if_not_exists = 4;
  bool immutable = 5;
  repeated SpNameRef imports = 6;
  List_SpDataType input_types = 7;
  bool is_permanent = 8;
  repeated Tuple_String_Expr kwargs = 9;
  SpNameRef name = 10;
  repeated string packages = 11;
  int64 parallel = 12;
  bool replace = 13;
  SpDataType return_type = 14;
  repeated Tuple_String_String secrets = 15;
  SrcPosition src = 16;
  google.protobuf.StringValue stage_location = 17;
  repeated Tuple_String_String statement_params = 18;
}

// fn.ir:63
message Udf {
  google.protobuf.StringValue comment = 1;
  repeated string external_access_integrations = 2;
  SpCallable func = 3;
  bool if_not_exists = 4;
  bool immutable = 5;
  repeated SpNameRef imports = 6;
  List_SpDataType input_types = 7;
  bool is_permanent = 8;
  repeated Tuple_String_Expr kwargs = 9;
  google.protobuf.Int64Value max_batch_size = 10;
  SpNameRef name = 11;
  repeated string packages = 12;
  int64 parallel = 13;
  bool replace = 14;
  SpDataType return_type = 15;
  repeated Tuple_String_String secrets = 16;
  bool secure = 17;
  bool source_code_display = 18;
  SrcPosition src = 19;
  string stage_location = 20;
  repeated Tuple_String_String statement_params = 21;
  bool strict = 22;
}

// fn.ir:92
message Udtf {
  google.protobuf.StringValue comment = 1;
  repeated string external_access_integrations = 2;
  SpCallable handler = 3;
  bool if_not_exists = 4;
  bool immutable = 5;
  repeated SpNameRef imports = 6;
  List_SpDataType input_types = 7;
  bool is_permanent = 8;
  repeated Tuple_String_Expr kwargs = 9;
  SpNameRef name = 10;
  UdtfSchema output_schema = 11;
  repeated string packages = 12;
  int64 parallel = 13;
  bool replace = 14;
  repeated Tuple_String_String secrets = 15;
  bool secure = 16;
  SrcPosition src = 17;
  string stage_location = 18;
  repeated Tuple_String_String statement_params = 19;
  bool strict = 20;
}

message UnaryOp {
  oneof variant {
    Neg neg = 1;
    Not not = 2;
  }
}
