// N.B. This file is generated by `//Snowpark/ir-dsl-c`. DO NOT EDIT!
// Generated from `{git@github.com:snowflakedb/snowflake.git}/Snowpark/ast`.

syntax = "proto3";

option java_package = "com.snowflake.snowpark.proto";
option java_outer_classname = "JavaProto";

package ast;

import "google/protobuf/wrappers.proto";

enum __Version__ {
  PROTO3_REQUIRES_THIS = 0;
  MAX_VERSION = 1;
}

message InternedValueTable {
  map<int32, string> string_values = 1;
}

message List_Expr {
  repeated Expr list = 1;
}

message List_SpDataType {
  repeated SpDataType list = 1;
}

message List_SpStructField {
  repeated SpStructField list = 1;
}

message List_String {
  repeated string list = 1;
}

message Map_Expr_Expr {
  repeated Tuple_Expr_Expr list = 1;
}

message Map_String_Expr {
  repeated Tuple_String_Expr list = 1;
}

message Tuple_Expr_Expr {
  Expr _1 = 1;
  Expr _2 = 2;
}

message Tuple_Expr_Float {
  Expr _1 = 1;
  double _2 = 2;
}

message Tuple_String_Expr {
  string _1 = 1;
  Expr _2 = 2;
}

message Tuple_String_List_String {
  string _1 = 1;
  repeated string _2 = 2;
}

message Tuple_String_String {
  string _1 = 1;
  string _2 = 2;
}

// column.ir:31
message ColumnAliasFn {
  oneof variant {
    bool column_alias_fn_alias = 1;
    bool column_alias_fn_as = 2;
    bool column_alias_fn_name = 3;
  }
}

// ast.ir:17
message Language {
  oneof sealed_value {
    JavaLanguage java_language = 1;
    PythonLanguage python_language = 2;
    ScalaLanguage scala_language = 3;
  }
}

// ast.ir:18
message PythonLanguage {
  Version version = 1;
}

// ast.ir:19
message ScalaLanguage {
  Version version = 1;
}

// ast.ir:20
message JavaLanguage {
  Version version = 1;
}

// ast.ir:115
message Name {
  oneof sealed_value {
    NameFlat name_flat = 1;
    NameStructured name_structured = 2;
  }
}

// ast.ir:116
message NameFlat {
  string name = 1;
}

// ast.ir:117
message NameStructured {
  repeated string name = 1;
}

// column.ir:62
message NullOrder {
  oneof variant {
    bool null_order_default = 1;
    bool null_order_nulls_first = 2;
    bool null_order_nulls_last = 3;
  }
}

// dataframe-grouped.ir:76
message PivotValue {
  oneof sealed_value {
    PivotValue_Dataframe pivot_value__dataframe = 1;
    PivotValue_Expr pivot_value__expr = 2;
  }
}

// dataframe-grouped.ir:77
message PivotValue_Expr {
  Expr v = 1;
}

// dataframe-grouped.ir:78
message PivotValue_Dataframe {
  SpDataframeRef v = 1;
}

// const.ir:81
message PythonTimeZone {
  google.protobuf.StringValue name = 1;
  int64 offset_seconds = 2;
}

// fn.ir:28
message SpCallable {
  int64 id = 1;
  string name = 2;
  NameRef object_name = 3;
}

// type.ir:31
message SpColumnRef {
  oneof sealed_value {
    SpColumnIdentifier sp_column_identifier = 1;
    SpColumnName sp_column_name = 2;
  }
}

// type.ir:32
message SpColumnIdentifier {
  string name = 1;
}

// type.ir:33
message SpColumnName {
  string name = 1;
}

// type.ir:1
message SpDataType {
  oneof variant {
    SpArrayType sp_array_type = 1;
    bool sp_binary_type = 2;
    bool sp_boolean_type = 3;
    bool sp_byte_type = 4;
    bool sp_date_type = 5;
    SpDecimalType sp_decimal_type = 6;
    bool sp_double_type = 7;
    bool sp_float_type = 8;
    bool sp_geography_type = 9;
    bool sp_geometry_type = 10;
    bool sp_integer_type = 11;
    bool sp_long_type = 12;
    SpMapType sp_map_type = 13;
    bool sp_null_type = 14;
    SpPandasDataFrameType sp_pandas_data_frame_type = 15;
    SpPandasSeriesType sp_pandas_series_type = 16;
    bool sp_short_type = 17;
    SpStringType sp_string_type = 18;
    SpStructField sp_struct_field = 19;
    SpStructType sp_struct_type = 20;
    bool sp_time_type = 21;
    SpTimestampType sp_timestamp_type = 22;
    bool sp_variant_type = 23;
    SpVectorType sp_vector_type = 24;
  }
}

// type.ir:3
message SpArrayType {
  bool structured = 1;
  SpDataType ty = 2;
}

// type.ir:8
message SpDecimalType {
  int64 precision = 1;
  int64 scale = 2;
}

// type.ir:15
message SpMapType {
  SpDataType key_ty = 1;
  bool structured = 2;
  SpDataType value_ty = 3;
}

// type.ir:18
message SpStringType {
  google.protobuf.Int64Value length = 1;
}

// type.ir:19
message SpStructField {
  SpColumnRef column_identifier = 1;
  SpDataType data_type = 2;
  bool nullable = 3;
}

// type.ir:20
message SpStructType {
  List_SpStructField fields = 1;
  bool structured = 2;
}

// type.ir:22
message SpTimestampType {
  SpTimestampTimeZone time_zone = 1;
}

// type.ir:24
message SpVectorType {
  int64 dimension = 1;
  SpDataType ty = 2;
}

// type.ir:26
message SpPandasSeriesType {
  SpDataType el_ty = 1;
}

// type.ir:27
message SpPandasDataFrameType {
  repeated string col_names = 1;
  repeated SpDataType col_types = 2;
}

// dataframe.ir:73
message SpDataframeData {
  oneof sealed_value {
    SpDataframeData_List sp_dataframe_data__list = 1;
    SpDataframeData_Pandas sp_dataframe_data__pandas = 2;
    SpDataframeData_Tuple sp_dataframe_data__tuple = 3;
  }
}

// dataframe.ir:74
message SpDataframeData_List {
  repeated Expr vs = 1;
}

// dataframe.ir:75
message SpDataframeData_Tuple {
  repeated Expr vs = 1;
}

// dataframe.ir:76
message SpDataframeData_Pandas {
  StagedPandasDataframe v = 1;
}

// type.ir:43
message SpDataframeSchema {
  oneof sealed_value {
    SpDataframeSchema_List sp_dataframe_schema__list = 1;
    SpDataframeSchema_Struct sp_dataframe_schema__struct = 2;
  }
}

// type.ir:44
message SpDataframeSchema_List {
  repeated string vs = 1;
}

// type.ir:45
message SpDataframeSchema_Struct {
  SpStructType v = 1;
}

// dataframe.ir:91
message SpFlattenMode {
  oneof variant {
    bool sp_flatten_mode_array = 1;
    bool sp_flatten_mode_both = 2;
    bool sp_flatten_mode_object = 3;
  }
}

// dataframe.ir:245
message SpJoinType {
  oneof variant {
    bool sp_join_type__asof = 1;
    bool sp_join_type__cross = 2;
    bool sp_join_type__full_outer = 3;
    bool sp_join_type__inner = 4;
    bool sp_join_type__left_anti = 5;
    bool sp_join_type__left_outer = 6;
    bool sp_join_type__left_semi = 7;
    bool sp_join_type__right_outer = 8;
  }
}

// dataframe-io.ir:75
message SpSaveMode {
  oneof variant {
    bool sp_save_mode_append = 1;
    bool sp_save_mode_error_if_exists = 2;
    bool sp_save_mode_ignore = 3;
    bool sp_save_mode_overwrite = 4;
    bool sp_save_mode_truncate = 5;
  }
}

// dataframe.ir:110
message SpTableVariant {
  oneof variant {
    bool sp_session_table = 1;
    bool sp_table_init = 2;
  }
}

// type.ir:36
message SpTimestampTimeZone {
  oneof variant {
    bool sp_timestamp_time_zone_default = 1;
    bool sp_timestamp_time_zone_ltz = 2;
    bool sp_timestamp_time_zone_ntz = 3;
    bool sp_timestamp_time_zone_tz = 4;
  }
}

// window.ir:6
message SpWindowRelativePosition {
  oneof variant {
    bool sp_window_relative_position__current_row = 1;
    SpWindowRelativePosition_Position sp_window_relative_position__position = 2;
    bool sp_window_relative_position__unbounded_following = 3;
    bool sp_window_relative_position__unbounded_preceding = 4;
  }
}

// window.ir:10
message SpWindowRelativePosition_Position {
  Expr n = 1;
}

// src.ir:1
message SrcPosition {
  int64 end_column = 1;
  int64 end_line = 2;
  int32 file = 3;
  int64 start_column = 4;
  int64 start_line = 5;
}

// dataframe.ir:79
message StagedPandasDataframe {
  NameRef temp_table = 1;
}

// fn.ir:86
message UdtfSchema {
  oneof sealed_value {
    UdtfSchema_Names udtf_schema__names = 1;
    UdtfSchema_Type udtf_schema__type = 2;
  }
}

// fn.ir:87
message UdtfSchema_Type {
  SpDataType return_type = 1;
}

// fn.ir:88
message UdtfSchema_Names {
  repeated string schema = 1;
}

// ast.ir:110
message VarId {
  uint64 bitfield1 = 1;
}

// ast.ir:23
message Version {
  string label = 1;
  int64 major = 2;
  int64 minor = 3;
  int64 patch = 4;
}

message AbstractExtension {
  oneof variant {
    AbstractExtensionExpr trait_abstract_extension_expr = 1;
    ExtensionDataframeExpr extension_dataframe_expr = 2;
    ExtensionError extension_error = 3;
    ExtensionEvalResult extension_eval_result = 4;
    ExtensionExpr extension_expr = 5;
    ExtensionRelationalGroupedDataframeExpr extension_relational_grouped_dataframe_expr = 6;
    ExtensionStmt extension_stmt = 7;
  }
}

message AbstractExtensionExpr {
  oneof variant {
    ExtensionDataframeExpr extension_dataframe_expr = 1;
    ExtensionExpr extension_expr = 2;
    ExtensionRelationalGroupedDataframeExpr extension_relational_grouped_dataframe_expr = 3;
  }
}

message AbstractTruncatedExpr {
  oneof variant {
    TruncatedDataframeExpr truncated_dataframe_expr = 1;
    TruncatedExpr truncated_expr = 2;
    TruncatedRelationalGroupedDataframeExpr truncated_relational_grouped_dataframe_expr = 3;
  }
}

// op.ir:42
message Add {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:16
message And {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// fn.ir:2
message ApplyExpr {
  FnRefExpr fn = 1;
  repeated Tuple_String_Expr named_args = 2;
  repeated Expr pos_args = 3;
  SrcPosition src = 4;
}

// ast.ir:36
message Assign {
  Expr expr = 1;
  google.protobuf.StringValue symbol = 2;
  int64 uid = 3;
  VarId var_id = 4;
}

// const.ir:28
message BigDecimalVal {
  int64 scale = 1;
  google.protobuf.StringValue special = 2;
  SrcPosition src = 3;
  bytes unscaled_value = 4;
}

// const.ir:24
message BigIntVal {
  SrcPosition src = 1;
  bytes v = 2;
}

message BinOp {
  oneof variant {
    Add add = 1;
    And and = 2;
    BitAnd bit_and = 3;
    BitOr bit_or = 4;
    BitXor bit_xor = 5;
    Div div = 6;
    Eq eq = 7;
    Geq geq = 8;
    Gt gt = 9;
    Leq leq = 10;
    Lt lt = 11;
    Mod mod = 12;
    Mul mul = 13;
    Neq neq = 14;
    Or or = 15;
    Pow pow = 16;
    Sub sub = 17;
  }
}

// const.ir:42
message BinaryVal {
  SrcPosition src = 1;
  bytes v = 2;
}

// op.ir:58
message BitAnd {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:60
message BitOr {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:62
message BitXor {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// const.ir:16
message BoolVal {
  SrcPosition src = 1;
  bool v = 2;
}

// fn.ir:26
message BuiltinFn {
  NameRef name = 1;
  SrcPosition src = 2;
}

// fn.ir:144
message CallTableFunctionExpr {
  NameRef name = 1;
  SrcPosition src = 2;
}

// column.ir:26
message ColumnAlias {
  Expr col = 1;
  ColumnAliasFn fn = 2;
  string name = 3;
  SrcPosition src = 4;
}

// column.ir:33
message ColumnApply_Int {
  Expr col = 1;
  int64 idx = 2;
  SrcPosition src = 3;
}

// column.ir:37
message ColumnApply_String {
  Expr col = 1;
  string field = 2;
  SrcPosition src = 3;
}

// column.ir:41
message ColumnAsc {
  Expr col = 1;
  NullOrder null_order = 2;
  SrcPosition src = 3;
}

// column.ir:45
message ColumnBetween {
  Expr col = 1;
  Expr lower_bound = 2;
  SrcPosition src = 3;
  Expr upper_bound = 4;
}

// column.ir:12
message ColumnCaseExpr {
  repeated ColumnCaseExprClause cases = 1;
  SrcPosition src = 2;
}

// column.ir:16
message ColumnCaseExprClause {
  Expr condition = 1;
  SrcPosition src = 2;
  Expr value = 3;
}

// column.ir:50
message ColumnCast {
  Expr col = 1;
  SrcPosition src = 2;
  SpDataType to = 3;
}

// column.ir:58
message ColumnDesc {
  Expr col = 1;
  NullOrder null_order = 2;
  SrcPosition src = 3;
}

// column.ir:64
message ColumnEqualNan {
  Expr col = 1;
  SrcPosition src = 2;
}

// column.ir:66
message ColumnEqualNull {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

message ColumnFn {
  oneof variant {
    ColumnAlias column_alias = 1;
    ColumnApply_Int column_apply__int = 2;
    ColumnApply_String column_apply__string = 3;
    ColumnAsc column_asc = 4;
    ColumnBetween column_between = 5;
    ColumnCast column_cast = 6;
    ColumnDesc column_desc = 7;
    ColumnEqualNan column_equal_nan = 8;
    ColumnIn column_in = 9;
    ColumnIsNotNull column_is_not_null = 10;
    ColumnIsNull column_is_null = 11;
    ColumnOver column_over = 12;
    ColumnRegexp column_regexp = 13;
    ColumnStringCollate column_string_collate = 14;
    ColumnStringContains column_string_contains = 15;
    ColumnStringEndsWith column_string_ends_with = 16;
    ColumnStringLike column_string_like = 17;
    ColumnStringStartsWith column_string_starts_with = 18;
    ColumnStringSubstr column_string_substr = 19;
    ColumnTryCast column_try_cast = 20;
    ColumnWithinGroup column_within_group = 21;
  }
}

// column.ir:71
message ColumnIn {
  Expr col = 1;
  SrcPosition src = 2;
  repeated Expr values = 3;
}

// column.ir:75
message ColumnIsNotNull {
  Expr col = 1;
  SrcPosition src = 2;
}

// column.ir:77
message ColumnIsNull {
  Expr col = 1;
  SrcPosition src = 2;
}

// column.ir:79
message ColumnOver {
  Expr col = 1;
  SrcPosition src = 2;
  SpWindowSpecExpr window_spec = 3;
}

// column.ir:83
message ColumnRegexp {
  Expr col = 1;
  Expr parameters = 2;
  Expr pattern = 3;
  SrcPosition src = 4;
}

// column.ir:105
message ColumnStringCollate {
  Expr col = 1;
  Expr collation_spec = 2;
  SrcPosition src = 3;
}

// column.ir:109
message ColumnStringContains {
  Expr col = 1;
  Expr pattern = 2;
  SrcPosition src = 3;
}

// column.ir:96
message ColumnStringEndsWith {
  Expr col = 1;
  SrcPosition src = 2;
  Expr suffix = 3;
}

// column.ir:88
message ColumnStringLike {
  Expr col = 1;
  Expr pattern = 2;
  SrcPosition src = 3;
}

// column.ir:92
message ColumnStringStartsWith {
  Expr col = 1;
  Expr prefix = 2;
  SrcPosition src = 3;
}

// column.ir:100
message ColumnStringSubstr {
  Expr col = 1;
  Expr len = 2;
  Expr pos = 3;
  SrcPosition src = 4;
}

// column.ir:54
message ColumnTryCast {
  Expr col = 1;
  SrcPosition src = 2;
  SpDataType to = 3;
}

// column.ir:113
message ColumnWithinGroup {
  Expr col = 1;
  ExprArgList cols = 2;
  SrcPosition src = 3;
}

message Const {
  oneof variant {
    BigDecimalVal big_decimal_val = 1;
    BigIntVal big_int_val = 2;
    BinaryVal binary_val = 3;
    BoolVal bool_val = 4;
    DatatypeVal datatype_val = 5;
    Float64Val float64_val = 6;
    Int64Val int64_val = 7;
    NullVal null_val = 8;
    PythonDateVal python_date_val = 9;
    PythonTimeVal python_time_val = 10;
    PythonTimestampVal python_timestamp_val = 11;
    RedactedConst redacted_const = 12;
    StringVal string_val = 13;
  }
}

// dataframe-analytics.ir:27
message DataframeAnalyticsComputeLag {
  repeated Expr cols = 1;
  SpDataframeExpr df = 2;
  repeated string formatted_col_names = 3;
  repeated string group_by = 4;
  repeated int64 lags = 5;
  repeated string order_by = 6;
  SrcPosition src = 7;
}

// dataframe-analytics.ir:36
message DataframeAnalyticsComputeLead {
  repeated Expr cols = 1;
  SpDataframeExpr df = 2;
  repeated string formatted_col_names = 3;
  repeated string group_by = 4;
  repeated int64 leads = 5;
  repeated string order_by = 6;
  SrcPosition src = 7;
}

// dataframe-analytics.ir:18
message DataframeAnalyticsCumulativeAgg {
  repeated Tuple_String_List_String aggs = 1;
  SpDataframeExpr df = 2;
  repeated string formatted_col_names = 3;
  repeated string group_by = 4;
  bool is_forward = 5;
  repeated string order_by = 6;
  SrcPosition src = 7;
}

// dataframe-analytics.ir:9
message DataframeAnalyticsMovingAgg {
  repeated Tuple_String_List_String aggs = 1;
  SpDataframeExpr df = 2;
  repeated string formatted_col_names = 3;
  repeated string group_by = 4;
  repeated string order_by = 5;
  SrcPosition src = 6;
  repeated int64 window_sizes = 7;
}

// dataframe-analytics.ir:45
message DataframeAnalyticsTimeSeriesAgg {
  repeated Tuple_String_List_String aggs = 1;
  SpDataframeExpr df = 2;
  repeated string formatted_col_names = 3;
  repeated string group_by = 4;
  string sliding_interval = 5;
  SrcPosition src = 6;
  string time_col = 7;
  repeated string windows = 8;
}

// column.ir:1
message DataframeCol {
  string col_name = 1;
  SpDataframeExpr df = 2;
  SrcPosition src = 3;
}

// dataframe-grouped.ir:18
message DataframeCube {
  ExprArgList cols = 1;
  SpDataframeExpr df = 2;
  SrcPosition src = 3;
}

// dataframe-grouped.ir:23
message DataframeGroupBy {
  ExprArgList cols = 1;
  SpDataframeExpr df = 2;
  SrcPosition src = 3;
}

// dataframe-grouped.ir:40
message DataframeGroupByGroupingSets {
  SpDataframeExpr df = 1;
  ExprArgList grouping_sets = 2;
  SrcPosition src = 3;
}

// dataframe-grouped.ir:28
message DataframePivot {
  Expr default_on_null = 1;
  SpDataframeExpr df = 2;
  Expr pivot_col = 3;
  SrcPosition src = 4;
  PivotValue values = 5;
}

// dataframe-grouped.ir:35
message DataframeRollup {
  ExprArgList cols = 1;
  SpDataframeExpr df = 2;
  SrcPosition src = 3;
}

// const.ir:46
message DatatypeVal {
  SpDataType datatype = 1;
  SrcPosition src = 2;
}

// op.ir:48
message Div {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:24
message Eq {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

message Error {
  oneof variant {
    ExtensionError extension_error = 1;
    SessionResetRequiredError session_reset_required_error = 2;
  }
}

// ast.ir:44
message Eval {
  int64 uid = 1;
  VarId var_id = 2;
}

// ast.ir:60
message EvalOk {
  EvalResult data = 1;
  int64 uid = 2;
  VarId var_id = 3;
}

message EvalResult {
  oneof variant {
    Const trait_const = 1;
    BigDecimalVal big_decimal_val = 2;
    BigIntVal big_int_val = 3;
    BinaryVal binary_val = 4;
    BoolVal bool_val = 5;
    DatatypeVal datatype_val = 6;
    ExtensionEvalResult extension_eval_result = 7;
    Float64Val float64_val = 8;
    Int64Val int64_val = 9;
    NullVal null_val = 10;
    PythonDateVal python_date_val = 11;
    PythonTimeVal python_time_val = 12;
    PythonTimestampVal python_timestamp_val = 13;
    RedactedConst redacted_const = 14;
    SfQueryResult sf_query_result = 15;
    ShowResult show_result = 16;
    StringVal string_val = 17;
  }
}

message Expr {
  oneof variant {
    AbstractExtensionExpr trait_abstract_extension_expr = 1;
    AbstractTruncatedExpr trait_abstract_truncated_expr = 2;
    BinOp trait_bin_op = 3;
    ColumnFn trait_column_fn = 4;
    Const trait_const = 5;
    FnIdRefExpr trait_fn_id_ref_expr = 6;
    FnNameRefExpr trait_fn_name_ref_expr = 7;
    FnRefExpr trait_fn_ref_expr = 8;
    MatchedClause trait_matched_clause = 9;
    RelationalGroupedDataframeExpr trait_relational_grouped_dataframe_expr = 10;
    SpDataframeExpr trait_sp_dataframe_expr = 11;
    SpDataframeWriter trait_sp_dataframe_writer = 12;
    SpWriteFile trait_sp_write_file = 13;
    UnaryOp trait_unary_op = 14;
    Add add = 15;
    And and = 16;
    ApplyExpr apply_expr = 17;
    BigDecimalVal big_decimal_val = 18;
    BigIntVal big_int_val = 19;
    BinaryVal binary_val = 20;
    BitAnd bit_and = 21;
    BitOr bit_or = 22;
    BitXor bit_xor = 23;
    BoolVal bool_val = 24;
    BuiltinFn builtin_fn = 25;
    CallTableFunctionExpr call_table_function_expr = 26;
    ColumnAlias column_alias = 27;
    ColumnApply_Int column_apply__int = 28;
    ColumnApply_String column_apply__string = 29;
    ColumnAsc column_asc = 30;
    ColumnBetween column_between = 31;
    ColumnCaseExpr column_case_expr = 32;
    ColumnCast column_cast = 33;
    ColumnDesc column_desc = 34;
    ColumnEqualNan column_equal_nan = 35;
    ColumnEqualNull column_equal_null = 36;
    ColumnIn column_in = 37;
    ColumnIsNotNull column_is_not_null = 38;
    ColumnIsNull column_is_null = 39;
    ColumnOver column_over = 40;
    ColumnRegexp column_regexp = 41;
    ColumnStringCollate column_string_collate = 42;
    ColumnStringContains column_string_contains = 43;
    ColumnStringEndsWith column_string_ends_with = 44;
    ColumnStringLike column_string_like = 45;
    ColumnStringStartsWith column_string_starts_with = 46;
    ColumnStringSubstr column_string_substr = 47;
    ColumnTryCast column_try_cast = 48;
    ColumnWithinGroup column_within_group = 49;
    DataframeAnalyticsComputeLag dataframe_analytics_compute_lag = 50;
    DataframeAnalyticsComputeLead dataframe_analytics_compute_lead = 51;
    DataframeAnalyticsCumulativeAgg dataframe_analytics_cumulative_agg = 52;
    DataframeAnalyticsMovingAgg dataframe_analytics_moving_agg = 53;
    DataframeAnalyticsTimeSeriesAgg dataframe_analytics_time_series_agg = 54;
    DataframeCol dataframe_col = 55;
    DataframeCube dataframe_cube = 56;
    DataframeGroupBy dataframe_group_by = 57;
    DataframeGroupByGroupingSets dataframe_group_by_grouping_sets = 58;
    DataframePivot dataframe_pivot = 59;
    DataframeRollup dataframe_rollup = 60;
    DatatypeVal datatype_val = 61;
    Div div = 62;
    Eq eq = 63;
    ExtensionDataframeExpr extension_dataframe_expr = 64;
    ExtensionExpr extension_expr = 65;
    ExtensionRelationalGroupedDataframeExpr extension_relational_grouped_dataframe_expr = 66;
    Float64Val float64_val = 67;
    Geq geq = 68;
    Gt gt = 69;
    IndirectTableFnIdRef indirect_table_fn_id_ref = 70;
    IndirectTableFnNameRef indirect_table_fn_name_ref = 71;
    Int64Val int64_val = 72;
    Leq leq = 73;
    ListVal list_val = 74;
    Lt lt = 75;
    MergeDeleteWhenMatchedClause merge_delete_when_matched_clause = 76;
    MergeInsertWhenNotMatchedClause merge_insert_when_not_matched_clause = 77;
    MergeUpdateWhenMatchedClause merge_update_when_matched_clause = 78;
    Mod mod = 79;
    Mul mul = 80;
    Neg neg = 81;
    Neq neq = 82;
    Not not = 83;
    NullVal null_val = 84;
    ObjectGetItem object_get_item = 85;
    Or or = 86;
    Pow pow = 87;
    PythonDateVal python_date_val = 88;
    PythonTimeVal python_time_val = 89;
    PythonTimestampVal python_timestamp_val = 90;
    RedactedConst redacted_const = 91;
    RelationalGroupedDataframeAgg relational_grouped_dataframe_agg = 92;
    RelationalGroupedDataframeApplyInPandas relational_grouped_dataframe_apply_in_pandas = 93;
    RelationalGroupedDataframeBuiltin relational_grouped_dataframe_builtin = 94;
    RelationalGroupedDataframePivot relational_grouped_dataframe_pivot = 95;
    RelationalGroupedDataframeRef relational_grouped_dataframe_ref = 96;
    SeqMapVal seq_map_val = 97;
    SpCreateDataframe sp_create_dataframe = 98;
    SpDataframeAgg sp_dataframe_agg = 99;
    SpDataframeAlias sp_dataframe_alias = 100;
    SpDataframeCacheResult sp_dataframe_cache_result = 101;
    SpDataframeCollect sp_dataframe_collect = 102;
    SpDataframeCopyIntoTable sp_dataframe_copy_into_table = 103;
    SpDataframeCount sp_dataframe_count = 104;
    SpDataframeCreateOrReplaceDynamicTable sp_dataframe_create_or_replace_dynamic_table = 105;
    SpDataframeCreateOrReplaceView sp_dataframe_create_or_replace_view = 106;
    SpDataframeCrossJoin sp_dataframe_cross_join = 107;
    SpDataframeDescribe sp_dataframe_describe = 108;
    SpDataframeDistinct sp_dataframe_distinct = 109;
    SpDataframeDrop sp_dataframe_drop = 110;
    SpDataframeDropDuplicates sp_dataframe_drop_duplicates = 111;
    SpDataframeExcept sp_dataframe_except = 112;
    SpDataframeFilter sp_dataframe_filter = 113;
    SpDataframeFirst sp_dataframe_first = 114;
    SpDataframeFlatten sp_dataframe_flatten = 115;
    SpDataframeIntersect sp_dataframe_intersect = 116;
    SpDataframeJoin sp_dataframe_join = 117;
    SpDataframeJoinTableFunction sp_dataframe_join_table_function = 118;
    SpDataframeLimit sp_dataframe_limit = 119;
    SpDataframeNaDrop_Python sp_dataframe_na_drop__python = 120;
    SpDataframeNaDrop_Scala sp_dataframe_na_drop__scala = 121;
    SpDataframeNaFill sp_dataframe_na_fill = 122;
    SpDataframeNaReplace sp_dataframe_na_replace = 123;
    SpDataframeNaturalJoin sp_dataframe_natural_join = 124;
    SpDataframeRandomSplit sp_dataframe_random_split = 125;
    SpDataframeRef sp_dataframe_ref = 126;
    SpDataframeRename sp_dataframe_rename = 127;
    SpDataframeSample sp_dataframe_sample = 128;
    SpDataframeSelect_Columns sp_dataframe_select__columns = 129;
    SpDataframeSelect_Exprs sp_dataframe_select__exprs = 130;
    SpDataframeShow sp_dataframe_show = 131;
    SpDataframeSort sp_dataframe_sort = 132;
    SpDataframeStatApproxQuantile sp_dataframe_stat_approx_quantile = 133;
    SpDataframeStatCorr sp_dataframe_stat_corr = 134;
    SpDataframeStatCov sp_dataframe_stat_cov = 135;
    SpDataframeStatCrossTab sp_dataframe_stat_cross_tab = 136;
    SpDataframeStatSampleBy sp_dataframe_stat_sample_by = 137;
    SpDataframeToDf sp_dataframe_to_df = 138;
    SpDataframeToLocalIterator sp_dataframe_to_local_iterator = 139;
    SpDataframeToPandas sp_dataframe_to_pandas = 140;
    SpDataframeToPandasBatches sp_dataframe_to_pandas_batches = 141;
    SpDataframeUnion sp_dataframe_union = 142;
    SpDataframeUnionAll sp_dataframe_union_all = 143;
    SpDataframeUnionAllByName sp_dataframe_union_all_by_name = 144;
    SpDataframeUnionByName sp_dataframe_union_by_name = 145;
    SpDataframeUnpivot sp_dataframe_unpivot = 146;
    SpDataframeWithColumn sp_dataframe_with_column = 147;
    SpDataframeWithColumnRenamed sp_dataframe_with_column_renamed = 148;
    SpDataframeWithColumns sp_dataframe_with_columns = 149;
    SpDataframeWrite sp_dataframe_write = 150;
    SpFlatten sp_flatten = 151;
    SpFnRef sp_fn_ref = 152;
    SpGenerator sp_generator = 153;
    SpGroupingSets sp_grouping_sets = 154;
    SpRange sp_range = 155;
    SpReadAvro sp_read_avro = 156;
    SpReadCsv sp_read_csv = 157;
    SpReadJson sp_read_json = 158;
    SpReadOrc sp_read_orc = 159;
    SpReadParquet sp_read_parquet = 160;
    SpReadTable sp_read_table = 161;
    SpReadXml sp_read_xml = 162;
    SpRow sp_row = 163;
    SpSessionTableFunction sp_session_table_function = 164;
    SpSql sp_sql = 165;
    SpTable sp_table = 166;
    SpTableFnCallAlias sp_table_fn_call_alias = 167;
    SpTableFnCallOver sp_table_fn_call_over = 168;
    SpToSnowparkPandas sp_to_snowpark_pandas = 169;
    SpWriteCopyIntoLocation sp_write_copy_into_location = 170;
    SpWriteCsv sp_write_csv = 171;
    SpWriteJson sp_write_json = 172;
    SpWritePandas sp_write_pandas = 173;
    SpWriteParquet sp_write_parquet = 174;
    SpWriteTable sp_write_table = 175;
    SqlExpr sql_expr = 176;
    StoredProcedure stored_procedure = 177;
    StringVal string_val = 178;
    Sub sub = 179;
    TableDelete table_delete = 180;
    TableDropTable table_drop_table = 181;
    TableMerge table_merge = 182;
    TableSample table_sample = 183;
    TableUpdate table_update = 184;
    TruncatedDataframeExpr truncated_dataframe_expr = 185;
    TruncatedExpr truncated_expr = 186;
    TruncatedRelationalGroupedDataframeExpr truncated_relational_grouped_dataframe_expr = 187;
    TupleVal tuple_val = 188;
    Udaf udaf = 189;
    Udf udf = 190;
    Udtf udtf = 191;
  }
}

// ast.ir:125
message ExprArgList {
  repeated Expr args = 1;
  bool variadic = 2;
}

// dataframe.ir:7
message ExtensionDataframeExpr {
  repeated Tuple_String_Expr attrs = 1;
  string kind = 2;
  SrcPosition src = 3;
}

// ast.ir:71
message ExtensionError {
  repeated Tuple_String_Expr attrs = 1;
  string kind = 2;
  int64 uid = 3;
  VarId var_id = 4;
}

// ast.ir:90
message ExtensionEvalResult {
  repeated Tuple_String_Expr attrs = 1;
  string kind = 2;
}

// expr.ir:37
message ExtensionExpr {
  repeated Tuple_String_Expr attrs = 1;
  string kind = 2;
  SrcPosition src = 3;
}

// dataframe-grouped.ir:3
message ExtensionRelationalGroupedDataframeExpr {
  repeated Tuple_String_Expr attrs = 1;
  string kind = 2;
  SrcPosition src = 3;
}

// ast.ir:49
message ExtensionStmt {
  repeated Tuple_String_Expr attrs = 1;
  string kind = 2;
}

// const.ir:34
message Float64Val {
  SrcPosition src = 1;
  double v = 2;
}

message FnIdRefExpr {
  oneof variant {
    IndirectTableFnIdRef indirect_table_fn_id_ref = 1;
    SpFnRef sp_fn_ref = 2;
  }
}

message FnNameRefExpr {
  oneof variant {
    BuiltinFn builtin_fn = 1;
    CallTableFunctionExpr call_table_function_expr = 2;
    IndirectTableFnNameRef indirect_table_fn_name_ref = 3;
    StoredProcedure stored_procedure = 4;
    Udaf udaf = 5;
    Udf udf = 6;
    Udtf udtf = 7;
  }
}

message FnRefExpr {
  oneof variant {
    FnIdRefExpr trait_fn_id_ref_expr = 1;
    FnNameRefExpr trait_fn_name_ref_expr = 2;
    BuiltinFn builtin_fn = 3;
    CallTableFunctionExpr call_table_function_expr = 4;
    IndirectTableFnIdRef indirect_table_fn_id_ref = 5;
    IndirectTableFnNameRef indirect_table_fn_name_ref = 6;
    SpFnRef sp_fn_ref = 7;
    StoredProcedure stored_procedure = 8;
    Udaf udaf = 9;
    Udf udf = 10;
    Udtf udtf = 11;
  }
}

// op.ir:34
message Geq {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:32
message Gt {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

message HasSrcPosition {
  oneof variant {
    AbstractExtensionExpr trait_abstract_extension_expr = 1;
    AbstractTruncatedExpr trait_abstract_truncated_expr = 2;
    BinOp trait_bin_op = 3;
    ColumnFn trait_column_fn = 4;
    Const trait_const = 5;
    Expr trait_expr = 6;
    FnIdRefExpr trait_fn_id_ref_expr = 7;
    FnNameRefExpr trait_fn_name_ref_expr = 8;
    FnRefExpr trait_fn_ref_expr = 9;
    MatchedClause trait_matched_clause = 10;
    RelationalGroupedDataframeExpr trait_relational_grouped_dataframe_expr = 11;
    SpDataframeExpr trait_sp_dataframe_expr = 12;
    SpDataframeReader trait_sp_dataframe_reader = 13;
    SpDataframeWriter trait_sp_dataframe_writer = 14;
    SpWindowSpecExpr trait_sp_window_spec_expr = 15;
    SpWriteFile trait_sp_write_file = 16;
    UnaryOp trait_unary_op = 17;
    Add add = 18;
    And and = 19;
    ApplyExpr apply_expr = 20;
    BigDecimalVal big_decimal_val = 21;
    BigIntVal big_int_val = 22;
    BinaryVal binary_val = 23;
    BitAnd bit_and = 24;
    BitOr bit_or = 25;
    BitXor bit_xor = 26;
    BoolVal bool_val = 27;
    BuiltinFn builtin_fn = 28;
    CallTableFunctionExpr call_table_function_expr = 29;
    ColumnAlias column_alias = 30;
    ColumnApply_Int column_apply__int = 31;
    ColumnApply_String column_apply__string = 32;
    ColumnAsc column_asc = 33;
    ColumnBetween column_between = 34;
    ColumnCaseExpr column_case_expr = 35;
    ColumnCaseExprClause column_case_expr_clause = 36;
    ColumnCast column_cast = 37;
    ColumnDesc column_desc = 38;
    ColumnEqualNan column_equal_nan = 39;
    ColumnEqualNull column_equal_null = 40;
    ColumnIn column_in = 41;
    ColumnIsNotNull column_is_not_null = 42;
    ColumnIsNull column_is_null = 43;
    ColumnOver column_over = 44;
    ColumnRegexp column_regexp = 45;
    ColumnStringCollate column_string_collate = 46;
    ColumnStringContains column_string_contains = 47;
    ColumnStringEndsWith column_string_ends_with = 48;
    ColumnStringLike column_string_like = 49;
    ColumnStringStartsWith column_string_starts_with = 50;
    ColumnStringSubstr column_string_substr = 51;
    ColumnTryCast column_try_cast = 52;
    ColumnWithinGroup column_within_group = 53;
    DataframeAnalyticsComputeLag dataframe_analytics_compute_lag = 54;
    DataframeAnalyticsComputeLead dataframe_analytics_compute_lead = 55;
    DataframeAnalyticsCumulativeAgg dataframe_analytics_cumulative_agg = 56;
    DataframeAnalyticsMovingAgg dataframe_analytics_moving_agg = 57;
    DataframeAnalyticsTimeSeriesAgg dataframe_analytics_time_series_agg = 58;
    DataframeCol dataframe_col = 59;
    DataframeCube dataframe_cube = 60;
    DataframeGroupBy dataframe_group_by = 61;
    DataframeGroupByGroupingSets dataframe_group_by_grouping_sets = 62;
    DataframePivot dataframe_pivot = 63;
    DataframeRollup dataframe_rollup = 64;
    DatatypeVal datatype_val = 65;
    Div div = 66;
    Eq eq = 67;
    ExtensionDataframeExpr extension_dataframe_expr = 68;
    ExtensionExpr extension_expr = 69;
    ExtensionRelationalGroupedDataframeExpr extension_relational_grouped_dataframe_expr = 70;
    Float64Val float64_val = 71;
    Geq geq = 72;
    Gt gt = 73;
    IndirectTableFnIdRef indirect_table_fn_id_ref = 74;
    IndirectTableFnNameRef indirect_table_fn_name_ref = 75;
    Int64Val int64_val = 76;
    Leq leq = 77;
    ListVal list_val = 78;
    Lt lt = 79;
    MergeDeleteWhenMatchedClause merge_delete_when_matched_clause = 80;
    MergeInsertWhenNotMatchedClause merge_insert_when_not_matched_clause = 81;
    MergeUpdateWhenMatchedClause merge_update_when_matched_clause = 82;
    Mod mod = 83;
    Mul mul = 84;
    NameRef name_ref = 85;
    Neg neg = 86;
    Neq neq = 87;
    Not not = 88;
    NullVal null_val = 89;
    ObjectGetItem object_get_item = 90;
    Or or = 91;
    Pow pow = 92;
    PythonDateVal python_date_val = 93;
    PythonTimeVal python_time_val = 94;
    PythonTimestampVal python_timestamp_val = 95;
    RedactedConst redacted_const = 96;
    RelationalGroupedDataframeAgg relational_grouped_dataframe_agg = 97;
    RelationalGroupedDataframeApplyInPandas relational_grouped_dataframe_apply_in_pandas = 98;
    RelationalGroupedDataframeBuiltin relational_grouped_dataframe_builtin = 99;
    RelationalGroupedDataframePivot relational_grouped_dataframe_pivot = 100;
    RelationalGroupedDataframeRef relational_grouped_dataframe_ref = 101;
    SeqMapVal seq_map_val = 102;
    SpCreateDataframe sp_create_dataframe = 103;
    SpDataframeAgg sp_dataframe_agg = 104;
    SpDataframeAlias sp_dataframe_alias = 105;
    SpDataframeCacheResult sp_dataframe_cache_result = 106;
    SpDataframeCollect sp_dataframe_collect = 107;
    SpDataframeCopyIntoTable sp_dataframe_copy_into_table = 108;
    SpDataframeCount sp_dataframe_count = 109;
    SpDataframeCreateOrReplaceDynamicTable sp_dataframe_create_or_replace_dynamic_table = 110;
    SpDataframeCreateOrReplaceView sp_dataframe_create_or_replace_view = 111;
    SpDataframeCrossJoin sp_dataframe_cross_join = 112;
    SpDataframeDescribe sp_dataframe_describe = 113;
    SpDataframeDistinct sp_dataframe_distinct = 114;
    SpDataframeDrop sp_dataframe_drop = 115;
    SpDataframeDropDuplicates sp_dataframe_drop_duplicates = 116;
    SpDataframeExcept sp_dataframe_except = 117;
    SpDataframeFilter sp_dataframe_filter = 118;
    SpDataframeFirst sp_dataframe_first = 119;
    SpDataframeFlatten sp_dataframe_flatten = 120;
    SpDataframeIntersect sp_dataframe_intersect = 121;
    SpDataframeJoin sp_dataframe_join = 122;
    SpDataframeJoinTableFunction sp_dataframe_join_table_function = 123;
    SpDataframeLimit sp_dataframe_limit = 124;
    SpDataframeNaDrop_Python sp_dataframe_na_drop__python = 125;
    SpDataframeNaDrop_Scala sp_dataframe_na_drop__scala = 126;
    SpDataframeNaFill sp_dataframe_na_fill = 127;
    SpDataframeNaReplace sp_dataframe_na_replace = 128;
    SpDataframeNaturalJoin sp_dataframe_natural_join = 129;
    SpDataframeRandomSplit sp_dataframe_random_split = 130;
    SpDataframeReaderInit sp_dataframe_reader_init = 131;
    SpDataframeReaderOption sp_dataframe_reader_option = 132;
    SpDataframeReaderOptions sp_dataframe_reader_options = 133;
    SpDataframeReaderSchema sp_dataframe_reader_schema = 134;
    SpDataframeReaderWithMetadata sp_dataframe_reader_with_metadata = 135;
    SpDataframeRef sp_dataframe_ref = 136;
    SpDataframeRename sp_dataframe_rename = 137;
    SpDataframeSample sp_dataframe_sample = 138;
    SpDataframeSelect_Columns sp_dataframe_select__columns = 139;
    SpDataframeSelect_Exprs sp_dataframe_select__exprs = 140;
    SpDataframeShow sp_dataframe_show = 141;
    SpDataframeSort sp_dataframe_sort = 142;
    SpDataframeStatApproxQuantile sp_dataframe_stat_approx_quantile = 143;
    SpDataframeStatCorr sp_dataframe_stat_corr = 144;
    SpDataframeStatCov sp_dataframe_stat_cov = 145;
    SpDataframeStatCrossTab sp_dataframe_stat_cross_tab = 146;
    SpDataframeStatSampleBy sp_dataframe_stat_sample_by = 147;
    SpDataframeToDf sp_dataframe_to_df = 148;
    SpDataframeToLocalIterator sp_dataframe_to_local_iterator = 149;
    SpDataframeToPandas sp_dataframe_to_pandas = 150;
    SpDataframeToPandasBatches sp_dataframe_to_pandas_batches = 151;
    SpDataframeUnion sp_dataframe_union = 152;
    SpDataframeUnionAll sp_dataframe_union_all = 153;
    SpDataframeUnionAllByName sp_dataframe_union_all_by_name = 154;
    SpDataframeUnionByName sp_dataframe_union_by_name = 155;
    SpDataframeUnpivot sp_dataframe_unpivot = 156;
    SpDataframeWithColumn sp_dataframe_with_column = 157;
    SpDataframeWithColumnRenamed sp_dataframe_with_column_renamed = 158;
    SpDataframeWithColumns sp_dataframe_with_columns = 159;
    SpDataframeWrite sp_dataframe_write = 160;
    SpFlatten sp_flatten = 161;
    SpFnRef sp_fn_ref = 162;
    SpGenerator sp_generator = 163;
    SpGroupingSets sp_grouping_sets = 164;
    SpRange sp_range = 165;
    SpReadAvro sp_read_avro = 166;
    SpReadCsv sp_read_csv = 167;
    SpReadJson sp_read_json = 168;
    SpReadOrc sp_read_orc = 169;
    SpReadParquet sp_read_parquet = 170;
    SpReadTable sp_read_table = 171;
    SpReadXml sp_read_xml = 172;
    SpRow sp_row = 173;
    SpSessionTableFunction sp_session_table_function = 174;
    SpSql sp_sql = 175;
    SpTable sp_table = 176;
    SpTableFnCallAlias sp_table_fn_call_alias = 177;
    SpTableFnCallOver sp_table_fn_call_over = 178;
    SpToSnowparkPandas sp_to_snowpark_pandas = 179;
    SpWindowSpecEmpty sp_window_spec_empty = 180;
    SpWindowSpecOrderBy sp_window_spec_order_by = 181;
    SpWindowSpecPartitionBy sp_window_spec_partition_by = 182;
    SpWindowSpecRangeBetween sp_window_spec_range_between = 183;
    SpWindowSpecRowsBetween sp_window_spec_rows_between = 184;
    SpWriteCopyIntoLocation sp_write_copy_into_location = 185;
    SpWriteCsv sp_write_csv = 186;
    SpWriteJson sp_write_json = 187;
    SpWritePandas sp_write_pandas = 188;
    SpWriteParquet sp_write_parquet = 189;
    SpWriteTable sp_write_table = 190;
    SqlExpr sql_expr = 191;
    StoredProcedure stored_procedure = 192;
    StringVal string_val = 193;
    Sub sub = 194;
    TableDelete table_delete = 195;
    TableDropTable table_drop_table = 196;
    TableMerge table_merge = 197;
    TableSample table_sample = 198;
    TableUpdate table_update = 199;
    TruncatedDataframeExpr truncated_dataframe_expr = 200;
    TruncatedExpr truncated_expr = 201;
    TruncatedRelationalGroupedDataframeExpr truncated_relational_grouped_dataframe_expr = 202;
    TupleVal tuple_val = 203;
    Udaf udaf = 204;
    Udf udf = 205;
    Udtf udtf = 206;
  }
}

// fn.ir:140
message IndirectTableFnIdRef {
  VarId id = 1;
  SrcPosition src = 2;
}

// fn.ir:136
message IndirectTableFnNameRef {
  NameRef name = 1;
  SrcPosition src = 2;
}

// const.ir:20
message Int64Val {
  SrcPosition src = 1;
  int64 v = 2;
}

// op.ir:30
message Leq {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// expr.ir:9
message ListVal {
  SrcPosition src = 1;
  repeated Expr vs = 2;
}

// op.ir:28
message Lt {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

message MatchedClause {
  oneof variant {
    MergeDeleteWhenMatchedClause merge_delete_when_matched_clause = 1;
    MergeInsertWhenNotMatchedClause merge_insert_when_not_matched_clause = 2;
    MergeUpdateWhenMatchedClause merge_update_when_matched_clause = 3;
  }
}

// table.ir:46
message MergeDeleteWhenMatchedClause {
  Expr condition = 1;
  SrcPosition src = 2;
}

// table.ir:50
message MergeInsertWhenNotMatchedClause {
  Expr condition = 1;
  List_Expr insert_keys = 2;
  List_Expr insert_values = 3;
  SrcPosition src = 4;
}

// table.ir:41
message MergeUpdateWhenMatchedClause {
  Expr condition = 1;
  SrcPosition src = 2;
  Map_Expr_Expr update_assignments = 3;
}

// op.ir:50
message Mod {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:46
message Mul {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// ast.ir:120
message NameRef {
  Name name = 1;
  SrcPosition src = 2;
}

// op.ir:40
message Neg {
  Expr operand = 1;
  SrcPosition src = 2;
}

// op.ir:26
message Neq {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:14
message Not {
  Expr operand = 1;
  SrcPosition src = 2;
}

// const.ir:14
message NullVal {
  SrcPosition src = 1;
}

// expr.ir:25
message ObjectGetItem {
  repeated Expr args = 1;
  VarId obj = 2;
  SrcPosition src = 3;
}

// op.ir:18
message Or {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:52
message Pow {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// const.ir:65
message PythonDateVal {
  int64 day = 1;
  int64 month = 2;
  SrcPosition src = 3;
  int64 year = 4;
}

// const.ir:71
message PythonTimeVal {
  int64 hour = 1;
  int64 microsecond = 2;
  int64 minute = 3;
  int64 second = 4;
  SrcPosition src = 5;
  PythonTimeZone tz = 6;
}

// const.ir:54
message PythonTimestampVal {
  int64 day = 1;
  int64 hour = 2;
  int64 microsecond = 3;
  int64 minute = 4;
  int64 month = 5;
  int64 second = 6;
  SrcPosition src = 7;
  PythonTimeZone tz = 8;
  int64 year = 9;
}

// const.ir:8
message RedactedConst {
  Const proxy_value = 1;
  SrcPosition src = 2;
}

// dataframe-grouped.ir:45
message RelationalGroupedDataframeAgg {
  ExprArgList exprs = 1;
  RelationalGroupedDataframeExpr grouped_df = 2;
  SrcPosition src = 3;
}

// dataframe-grouped.ir:57
message RelationalGroupedDataframeApplyInPandas {
  SpCallable func = 1;
  RelationalGroupedDataframeExpr grouped_df = 2;
  repeated Tuple_String_Expr kwargs = 3;
  SpStructType output_schema = 4;
  SrcPosition src = 5;
}

// dataframe-grouped.ir:51
message RelationalGroupedDataframeBuiltin {
  string agg_name = 1;
  ExprArgList cols = 2;
  RelationalGroupedDataframeExpr grouped_df = 3;
  SrcPosition src = 4;
}

message RelationalGroupedDataframeExpr {
  oneof variant {
    DataframeCube dataframe_cube = 1;
    DataframeGroupBy dataframe_group_by = 2;
    DataframeGroupByGroupingSets dataframe_group_by_grouping_sets = 3;
    DataframePivot dataframe_pivot = 4;
    DataframeRollup dataframe_rollup = 5;
    ExtensionRelationalGroupedDataframeExpr extension_relational_grouped_dataframe_expr = 6;
    RelationalGroupedDataframeRef relational_grouped_dataframe_ref = 7;
    TruncatedRelationalGroupedDataframeExpr truncated_relational_grouped_dataframe_expr = 8;
  }
}

// dataframe-grouped.ir:64
message RelationalGroupedDataframePivot {
  Expr default_on_null = 1;
  RelationalGroupedDataframeExpr grouped_df = 2;
  Expr pivot_col = 3;
  SrcPosition src = 4;
  PivotValue values = 5;
}

// dataframe-grouped.ir:14
message RelationalGroupedDataframeRef {
  VarId id = 1;
  SrcPosition src = 2;
}

// ast.ir:4
message Request {
  InternedValueTable interned_value_table = 1;
  repeated Stmt body = 2;
  int64 client_ast_version = 3;
  Language client_language = 4;
  Version client_version = 5;
}

// ast.ir:12
message Response {
  InternedValueTable interned_value_table = 1;
  repeated Result body = 2;
}

message Result {
  oneof variant {
    Error trait_error = 1;
    EvalOk eval_ok = 2;
    ExtensionError extension_error = 3;
    SessionResetRequiredError session_reset_required_error = 4;
  }
}

// expr.ir:14
message SeqMapVal {
  repeated TupleVal kvs = 1;
  SrcPosition src = 2;
}

// ast.ir:102
message SessionResetRequiredError {
  int64 uid = 1;
  VarId var_id = 2;
}

// ast.ir:80
message SfQueryResult {
  string uuid = 1;
}

// ast.ir:86
message ShowResult {
}

// dataframe.ir:53
message SpCreateDataframe {
  SpDataframeData data = 1;
  SpDataframeSchema schema = 2;
  SrcPosition src = 3;
}

// dataframe.ir:178
message SpDataframeAgg {
  SpDataframeExpr df = 1;
  ExprArgList exprs = 2;
  SrcPosition src = 3;
}

// dataframe.ir:183
message SpDataframeAlias {
  SpDataframeExpr df = 1;
  string name = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:187
message SpDataframeCacheResult {
  SpDataframeExpr df = 1;
  SrcPosition src = 2;
  repeated Tuple_String_String statement_params = 3;
}

// dataframe.ir:33
message SpDataframeCollect {
  bool block = 1;
  bool case_sensitive = 2;
  VarId id = 3;
  bool log_on_exception = 4;
  bool no_wait = 5;
  SrcPosition src = 6;
  repeated Tuple_String_String statement_params = 7;
}

// dataframe-io.ir:169
message SpDataframeCopyIntoTable {
  repeated Tuple_String_Expr copy_options = 1;
  SpDataframeExpr df = 2;
  repeated string files = 3;
  repeated Tuple_String_Expr format_type_options = 4;
  repeated Tuple_String_String iceberg_config = 5;
  google.protobuf.StringValue pattern = 6;
  SrcPosition src = 7;
  repeated Tuple_String_String statement_params = 8;
  NameRef table_name = 9;
  repeated string target_columns = 10;
  repeated Expr transformations = 11;
  google.protobuf.StringValue validation_mode = 12;
}

// dataframe.ir:27
message SpDataframeCount {
  bool block = 1;
  VarId id = 2;
  SrcPosition src = 3;
  repeated Tuple_String_String statement_params = 4;
}

// dataframe-io.ir:153
message SpDataframeCreateOrReplaceDynamicTable {
  List_Expr clustering_keys = 1;
  google.protobuf.StringValue comment = 2;
  google.protobuf.Int64Value data_retention_time = 3;
  SpDataframeExpr df = 4;
  google.protobuf.StringValue initialize = 5;
  bool is_transient = 6;
  string lag = 7;
  google.protobuf.Int64Value max_data_extension_time = 8;
  SpSaveMode mode = 9;
  NameRef name = 10;
  google.protobuf.StringValue refresh_mode = 11;
  SrcPosition src = 12;
  repeated Tuple_String_String statement_params = 13;
  string warehouse = 14;
}

// dataframe-io.ir:145
message SpDataframeCreateOrReplaceView {
  google.protobuf.StringValue comment = 1;
  SpDataframeExpr df = 2;
  bool is_temp = 3;
  NameRef name = 4;
  SrcPosition src = 5;
  repeated Tuple_String_String statement_params = 6;
}

// dataframe.ir:188
message SpDataframeCrossJoin {
  SpDataframeExpr lhs = 1;
  google.protobuf.StringValue lsuffix = 2;
  SpDataframeExpr rhs = 3;
  google.protobuf.StringValue rsuffix = 4;
  SrcPosition src = 5;
}

// dataframe.ir:195
message SpDataframeDescribe {
  ExprArgList cols = 1;
  SpDataframeExpr df = 2;
  SrcPosition src = 3;
}

// dataframe.ir:200
message SpDataframeDistinct {
  SpDataframeExpr df = 1;
  SrcPosition src = 2;
}

// dataframe.ir:204
message SpDataframeDrop {
  ExprArgList cols = 1;
  SpDataframeExpr df = 2;
  SrcPosition src = 3;
}

// dataframe.ir:209
message SpDataframeDropDuplicates {
  ExprArgList cols = 1;
  SpDataframeExpr df = 2;
  SrcPosition src = 3;
}

// dataframe.ir:214
message SpDataframeExcept {
  SpDataframeExpr df = 1;
  SpDataframeExpr other = 2;
  SrcPosition src = 3;
}

message SpDataframeExpr {
  oneof variant {
    DataframeAnalyticsComputeLag dataframe_analytics_compute_lag = 1;
    DataframeAnalyticsComputeLead dataframe_analytics_compute_lead = 2;
    DataframeAnalyticsCumulativeAgg dataframe_analytics_cumulative_agg = 3;
    DataframeAnalyticsMovingAgg dataframe_analytics_moving_agg = 4;
    DataframeAnalyticsTimeSeriesAgg dataframe_analytics_time_series_agg = 5;
    ExtensionDataframeExpr extension_dataframe_expr = 6;
    RelationalGroupedDataframeAgg relational_grouped_dataframe_agg = 7;
    RelationalGroupedDataframeApplyInPandas relational_grouped_dataframe_apply_in_pandas = 8;
    RelationalGroupedDataframeBuiltin relational_grouped_dataframe_builtin = 9;
    RelationalGroupedDataframePivot relational_grouped_dataframe_pivot = 10;
    SpCreateDataframe sp_create_dataframe = 11;
    SpDataframeAgg sp_dataframe_agg = 12;
    SpDataframeAlias sp_dataframe_alias = 13;
    SpDataframeCollect sp_dataframe_collect = 14;
    SpDataframeCount sp_dataframe_count = 15;
    SpDataframeCrossJoin sp_dataframe_cross_join = 16;
    SpDataframeDescribe sp_dataframe_describe = 17;
    SpDataframeDistinct sp_dataframe_distinct = 18;
    SpDataframeDrop sp_dataframe_drop = 19;
    SpDataframeDropDuplicates sp_dataframe_drop_duplicates = 20;
    SpDataframeExcept sp_dataframe_except = 21;
    SpDataframeFilter sp_dataframe_filter = 22;
    SpDataframeFirst sp_dataframe_first = 23;
    SpDataframeFlatten sp_dataframe_flatten = 24;
    SpDataframeIntersect sp_dataframe_intersect = 25;
    SpDataframeJoin sp_dataframe_join = 26;
    SpDataframeJoinTableFunction sp_dataframe_join_table_function = 27;
    SpDataframeLimit sp_dataframe_limit = 28;
    SpDataframeNaDrop_Python sp_dataframe_na_drop__python = 29;
    SpDataframeNaDrop_Scala sp_dataframe_na_drop__scala = 30;
    SpDataframeNaFill sp_dataframe_na_fill = 31;
    SpDataframeNaReplace sp_dataframe_na_replace = 32;
    SpDataframeNaturalJoin sp_dataframe_natural_join = 33;
    SpDataframeRandomSplit sp_dataframe_random_split = 34;
    SpDataframeRef sp_dataframe_ref = 35;
    SpDataframeRename sp_dataframe_rename = 36;
    SpDataframeSample sp_dataframe_sample = 37;
    SpDataframeSelect_Columns sp_dataframe_select__columns = 38;
    SpDataframeSelect_Exprs sp_dataframe_select__exprs = 39;
    SpDataframeShow sp_dataframe_show = 40;
    SpDataframeSort sp_dataframe_sort = 41;
    SpDataframeStatApproxQuantile sp_dataframe_stat_approx_quantile = 42;
    SpDataframeStatCorr sp_dataframe_stat_corr = 43;
    SpDataframeStatCov sp_dataframe_stat_cov = 44;
    SpDataframeStatCrossTab sp_dataframe_stat_cross_tab = 45;
    SpDataframeStatSampleBy sp_dataframe_stat_sample_by = 46;
    SpDataframeToDf sp_dataframe_to_df = 47;
    SpDataframeToLocalIterator sp_dataframe_to_local_iterator = 48;
    SpDataframeToPandas sp_dataframe_to_pandas = 49;
    SpDataframeToPandasBatches sp_dataframe_to_pandas_batches = 50;
    SpDataframeUnion sp_dataframe_union = 51;
    SpDataframeUnionAll sp_dataframe_union_all = 52;
    SpDataframeUnionAllByName sp_dataframe_union_all_by_name = 53;
    SpDataframeUnionByName sp_dataframe_union_by_name = 54;
    SpDataframeUnpivot sp_dataframe_unpivot = 55;
    SpDataframeWithColumn sp_dataframe_with_column = 56;
    SpDataframeWithColumnRenamed sp_dataframe_with_column_renamed = 57;
    SpDataframeWithColumns sp_dataframe_with_columns = 58;
    SpDataframeWrite sp_dataframe_write = 59;
    SpFlatten sp_flatten = 60;
    SpGenerator sp_generator = 61;
    SpRange sp_range = 62;
    SpReadAvro sp_read_avro = 63;
    SpReadCsv sp_read_csv = 64;
    SpReadJson sp_read_json = 65;
    SpReadOrc sp_read_orc = 66;
    SpReadParquet sp_read_parquet = 67;
    SpReadTable sp_read_table = 68;
    SpReadXml sp_read_xml = 69;
    SpSessionTableFunction sp_session_table_function = 70;
    SpSql sp_sql = 71;
    SpTable sp_table = 72;
    SpWritePandas sp_write_pandas = 73;
    TableDelete table_delete = 74;
    TableDropTable table_drop_table = 75;
    TableMerge table_merge = 76;
    TableSample table_sample = 77;
    TableUpdate table_update = 78;
    TruncatedDataframeExpr truncated_dataframe_expr = 79;
  }
}

// dataframe.ir:219
message SpDataframeFilter {
  Expr condition = 1;
  SpDataframeExpr df = 2;
  SrcPosition src = 3;
}

// dataframe.ir:233
message SpDataframeFirst {
  bool block = 1;
  SpDataframeExpr df = 2;
  int64 num = 3;
  SrcPosition src = 4;
  repeated Tuple_String_String statement_params = 5;
}

// dataframe.ir:224
message SpDataframeFlatten {
  SpDataframeExpr df = 1;
  Expr input = 2;
  SpFlattenMode mode = 3;
  bool outer = 4;
  google.protobuf.StringValue path = 5;
  bool recursive = 6;
  SrcPosition src = 7;
}

// dataframe.ir:240
message SpDataframeIntersect {
  SpDataframeExpr df = 1;
  SpDataframeExpr other = 2;
  SrcPosition src = 3;
}

// dataframe.ir:256
message SpDataframeJoin {
  Expr join_expr = 1;
  SpJoinType join_type = 2;
  SpDataframeExpr lhs = 3;
  google.protobuf.StringValue lsuffix = 4;
  Expr match_condition = 5;
  SpDataframeExpr rhs = 6;
  google.protobuf.StringValue rsuffix = 7;
  SrcPosition src = 8;
}

// dataframe.ir:266
message SpDataframeJoinTableFunction {
  Expr fn = 1;
  SpDataframeExpr lhs = 2;
  SrcPosition src = 3;
}

// dataframe.ir:271
message SpDataframeLimit {
  SpDataframeExpr df = 1;
  int64 n = 2;
  int64 offset = 3;
  SrcPosition src = 4;
}

// dataframe.ir:150
message SpDataframeNaDrop_Python {
  SpDataframeExpr df = 1;
  string how = 2;
  SrcPosition src = 3;
  List_String subset = 4;
  google.protobuf.Int64Value thresh = 5;
}

// dataframe.ir:144
message SpDataframeNaDrop_Scala {
  repeated string cols = 1;
  SpDataframeExpr df = 2;
  int64 min_non_nulls_per_row = 3;
  SrcPosition src = 4;
}

// dataframe.ir:157
message SpDataframeNaFill {
  SpDataframeExpr df = 1;
  SrcPosition src = 2;
  List_String subset = 3;
  Expr value = 4;
  Map_String_Expr value_map = 5;
}

// dataframe.ir:164
message SpDataframeNaReplace {
  SpDataframeExpr df = 1;
  Map_Expr_Expr replacement_map = 2;
  SrcPosition src = 3;
  List_String subset = 4;
  List_Expr to_replace_list = 5;
  Expr to_replace_value = 6;
  Expr value = 7;
  List_Expr values = 8;
}

// dataframe.ir:277
message SpDataframeNaturalJoin {
  SpJoinType join_type = 1;
  SpDataframeExpr lhs = 2;
  SpDataframeExpr rhs = 3;
  SrcPosition src = 4;
}

// dataframe.ir:291
message SpDataframeRandomSplit {
  SpDataframeExpr df = 1;
  google.protobuf.Int64Value seed = 2;
  SrcPosition src = 3;
  repeated Tuple_String_String statement_params = 4;
  repeated double weights = 5;
}

message SpDataframeReader {
  oneof variant {
    SpDataframeReaderInit sp_dataframe_reader_init = 1;
    SpDataframeReaderOption sp_dataframe_reader_option = 2;
    SpDataframeReaderOptions sp_dataframe_reader_options = 3;
    SpDataframeReaderSchema sp_dataframe_reader_schema = 4;
    SpDataframeReaderWithMetadata sp_dataframe_reader_with_metadata = 5;
  }
}

// dataframe-io.ir:10
message SpDataframeReaderInit {
  SrcPosition src = 1;
}

// dataframe-io.ir:12
message SpDataframeReaderOption {
  string key = 1;
  SpDataframeReader reader = 2;
  SrcPosition src = 3;
  Expr value = 4;
}

// dataframe-io.ir:18
message SpDataframeReaderOptions {
  repeated Tuple_String_Expr configs = 1;
  SpDataframeReader reader = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:23
message SpDataframeReaderSchema {
  SpDataframeReader reader = 1;
  SpStructType schema = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:28
message SpDataframeReaderWithMetadata {
  ExprArgList metadata_columns = 1;
  SpDataframeReader reader = 2;
  SrcPosition src = 3;
}

// dataframe.ir:18
message SpDataframeRef {
  VarId id = 1;
  SrcPosition src = 2;
}

// dataframe.ir:298
message SpDataframeRename {
  Expr col_or_mapper = 1;
  SpDataframeExpr df = 2;
  google.protobuf.StringValue new_column = 3;
  SrcPosition src = 4;
}

// dataframe.ir:304
message SpDataframeSample {
  SpDataframeExpr df = 1;
  google.protobuf.Int64Value num = 2;
  google.protobuf.DoubleValue probability_fraction = 3;
  SrcPosition src = 4;
}

// dataframe.ir:311
message SpDataframeSelect_Columns {
  ExprArgList cols = 1;
  SpDataframeExpr df = 2;
  SrcPosition src = 3;
}

// dataframe.ir:316
message SpDataframeSelect_Exprs {
  SpDataframeExpr df = 1;
  ExprArgList exprs = 2;
  SrcPosition src = 3;
}

// dataframe.ir:22
message SpDataframeShow {
  VarId id = 1;
  int64 n = 2;
  SrcPosition src = 3;
}

// dataframe.ir:321
message SpDataframeSort {
  Expr ascending = 1;
  ExprArgList cols = 2;
  SpDataframeExpr df = 3;
  SrcPosition src = 4;
}

// dataframe-stat.ir:1
message SpDataframeStatApproxQuantile {
  repeated Expr cols = 1;
  VarId id = 2;
  repeated double percentile = 3;
  SrcPosition src = 4;
  repeated Tuple_String_String statement_params = 5;
}

// dataframe-stat.ir:8
message SpDataframeStatCorr {
  Expr col1 = 1;
  Expr col2 = 2;
  VarId id = 3;
  SrcPosition src = 4;
  repeated Tuple_String_String statement_params = 5;
}

// dataframe-stat.ir:15
message SpDataframeStatCov {
  Expr col1 = 1;
  Expr col2 = 2;
  VarId id = 3;
  SrcPosition src = 4;
  repeated Tuple_String_String statement_params = 5;
}

// dataframe-stat.ir:22
message SpDataframeStatCrossTab {
  Expr col1 = 1;
  Expr col2 = 2;
  VarId id = 3;
  SrcPosition src = 4;
  repeated Tuple_String_String statement_params = 5;
}

// dataframe-stat.ir:29
message SpDataframeStatSampleBy {
  Expr col = 1;
  SpDataframeExpr df = 2;
  repeated Tuple_Expr_Float fractions = 3;
  SrcPosition src = 4;
}

// dataframe.ir:134
message SpDataframeToDf {
  ExprArgList col_names = 1;
  SpDataframeExpr df = 2;
  SrcPosition src = 3;
}

// dataframe.ir:42
message SpDataframeToLocalIterator {
  bool block = 1;
  bool case_sensitive = 2;
  VarId id = 3;
  SrcPosition src = 4;
  repeated Tuple_String_String statement_params = 5;
}

// dataframe.ir:122
message SpDataframeToPandas {
  bool block = 1;
  VarId id = 2;
  SrcPosition src = 3;
  repeated Tuple_String_String statement_params = 4;
}

// dataframe.ir:128
message SpDataframeToPandasBatches {
  bool block = 1;
  VarId id = 2;
  SrcPosition src = 3;
  repeated Tuple_String_String statement_params = 4;
}

// dataframe.ir:328
message SpDataframeUnion {
  SpDataframeExpr df = 1;
  SpDataframeExpr other = 2;
  SrcPosition src = 3;
}

// dataframe.ir:333
message SpDataframeUnionAll {
  SpDataframeExpr df = 1;
  SpDataframeExpr other = 2;
  SrcPosition src = 3;
}

// dataframe.ir:338
message SpDataframeUnionAllByName {
  SpDataframeExpr df = 1;
  SpDataframeExpr other = 2;
  SrcPosition src = 3;
}

// dataframe.ir:343
message SpDataframeUnionByName {
  SpDataframeExpr df = 1;
  SpDataframeExpr other = 2;
  SrcPosition src = 3;
}

// dataframe.ir:283
message SpDataframeUnpivot {
  repeated Expr column_list = 1;
  SpDataframeExpr df = 2;
  bool include_nulls = 3;
  string name_column = 4;
  SrcPosition src = 5;
  string value_column = 6;
}

// dataframe.ir:348
message SpDataframeWithColumn {
  Expr col = 1;
  string col_name = 2;
  SpDataframeExpr df = 3;
  SrcPosition src = 4;
}

// dataframe.ir:354
message SpDataframeWithColumnRenamed {
  Expr col = 1;
  SpDataframeExpr df = 2;
  string new_name = 3;
  SrcPosition src = 4;
}

// dataframe.ir:360
message SpDataframeWithColumns {
  repeated string col_names = 1;
  SpDataframeExpr df = 2;
  SrcPosition src = 3;
  repeated Expr values = 4;
}

// dataframe-io.ir:84
message SpDataframeWrite {
  SpDataframeExpr df = 1;
  repeated Tuple_String_Expr options = 2;
  Expr partition_by = 3;
  SpSaveMode save_mode = 4;
  SrcPosition src = 5;
}

message SpDataframeWriter {
  oneof variant {
    SpWriteFile trait_sp_write_file = 1;
    SpWriteCopyIntoLocation sp_write_copy_into_location = 2;
    SpWriteCsv sp_write_csv = 3;
    SpWriteJson sp_write_json = 4;
    SpWriteParquet sp_write_parquet = 5;
    SpWriteTable sp_write_table = 6;
  }
}

// dataframe.ir:83
message SpFlatten {
  Expr input = 1;
  SpFlattenMode mode = 2;
  bool outer = 3;
  google.protobuf.StringValue path = 4;
  bool recursive = 5;
  SrcPosition src = 6;
}

// fn.ir:22
message SpFnRef {
  VarId id = 1;
  SrcPosition src = 2;
}

// dataframe.ir:93
message SpGenerator {
  ExprArgList columns = 1;
  int64 row_count = 2;
  SrcPosition src = 3;
  int64 time_limit_seconds = 4;
}

// dataframe.ir:366
message SpGroupingSets {
  ExprArgList sets = 1;
  SrcPosition src = 2;
}

// dataframe.ir:99
message SpRange {
  google.protobuf.Int64Value end = 1;
  SrcPosition src = 2;
  int64 start = 3;
  google.protobuf.Int64Value step = 4;
}

// dataframe-io.ir:49
message SpReadAvro {
  string path = 1;
  SpDataframeReader reader = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:38
message SpReadCsv {
  string path = 1;
  SpDataframeReader reader = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:44
message SpReadJson {
  string path = 1;
  SpDataframeReader reader = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:54
message SpReadOrc {
  string path = 1;
  SpDataframeReader reader = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:59
message SpReadParquet {
  string path = 1;
  SpDataframeReader reader = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:33
message SpReadTable {
  NameRef name = 1;
  SpDataframeReader reader = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:64
message SpReadXml {
  string path = 1;
  SpDataframeReader reader = 2;
  SrcPosition src = 3;
}

// expr.ir:19
message SpRow {
  List_String names = 1;
  SrcPosition src = 2;
  repeated Expr vs = 3;
}

// dataframe.ir:118
message SpSessionTableFunction {
  Expr fn = 1;
  SrcPosition src = 2;
}

// dataframe.ir:105
message SpSql {
  repeated Expr params = 1;
  string query = 2;
  SrcPosition src = 3;
}

// dataframe.ir:112
message SpTable {
  bool is_temp_table_for_cleanup = 1;
  NameRef name = 2;
  SrcPosition src = 3;
  SpTableVariant variant = 4;
}

// fn.ir:160
message SpTableFnCallAlias {
  ExprArgList aliases = 1;
  Expr lhs = 2;
  SrcPosition src = 3;
}

// fn.ir:154
message SpTableFnCallOver {
  Expr lhs = 1;
  repeated Expr order_by = 2;
  repeated Expr partition_by = 3;
  SrcPosition src = 4;
}

// dataframe.ir:370
message SpToSnowparkPandas {
  List_String columns = 1;
  SpDataframeExpr df = 2;
  List_String index_col = 3;
  SrcPosition src = 4;
}

// window.ir:18
message SpWindowSpecEmpty {
  SrcPosition src = 1;
  SpWindowSpecExpr wnd = 2;
}

message SpWindowSpecExpr {
  oneof variant {
    SpWindowSpecEmpty sp_window_spec_empty = 1;
    SpWindowSpecOrderBy sp_window_spec_order_by = 2;
    SpWindowSpecPartitionBy sp_window_spec_partition_by = 3;
    SpWindowSpecRangeBetween sp_window_spec_range_between = 4;
    SpWindowSpecRowsBetween sp_window_spec_rows_between = 5;
  }
}

// window.ir:20
message SpWindowSpecOrderBy {
  repeated Expr cols = 1;
  SrcPosition src = 2;
  SpWindowSpecExpr wnd = 3;
}

// window.ir:24
message SpWindowSpecPartitionBy {
  repeated Expr cols = 1;
  SrcPosition src = 2;
  SpWindowSpecExpr wnd = 3;
}

// window.ir:28
message SpWindowSpecRangeBetween {
  SpWindowRelativePosition end = 1;
  SrcPosition src = 2;
  SpWindowRelativePosition start = 3;
  SpWindowSpecExpr wnd = 4;
}

// window.ir:33
message SpWindowSpecRowsBetween {
  SpWindowRelativePosition end = 1;
  SrcPosition src = 2;
  SpWindowRelativePosition start = 3;
  SpWindowSpecExpr wnd = 4;
}

// dataframe-io.ir:135
message SpWriteCopyIntoLocation {
  bool block = 1;
  repeated Tuple_String_Expr copy_options = 2;
  google.protobuf.StringValue file_format_name = 3;
  google.protobuf.StringValue file_format_type = 4;
  repeated Tuple_String_String format_type_options = 5;
  bool header = 6;
  VarId id = 7;
  string location = 8;
  Expr partition_by = 9;
  SrcPosition src = 10;
  repeated Tuple_String_String statement_params = 11;
}

// dataframe-io.ir:102
message SpWriteCsv {
  bool block = 1;
  repeated Tuple_String_Expr copy_options = 2;
  repeated Tuple_String_String format_type_options = 3;
  bool header = 4;
  VarId id = 5;
  string location = 6;
  Expr partition_by = 7;
  SrcPosition src = 8;
  repeated Tuple_String_String statement_params = 9;
}

message SpWriteFile {
  oneof variant {
    SpWriteCopyIntoLocation sp_write_copy_into_location = 1;
    SpWriteCsv sp_write_csv = 2;
    SpWriteJson sp_write_json = 3;
    SpWriteParquet sp_write_parquet = 4;
  }
}

// dataframe-io.ir:106
message SpWriteJson {
  bool block = 1;
  repeated Tuple_String_Expr copy_options = 2;
  repeated Tuple_String_String format_type_options = 3;
  bool header = 4;
  VarId id = 5;
  string location = 6;
  Expr partition_by = 7;
  SrcPosition src = 8;
  repeated Tuple_String_String statement_params = 9;
}

// dataframe.ir:58
message SpWritePandas {
  bool auto_create_table = 1;
  google.protobuf.Int64Value chunk_size = 2;
  string compression = 3;
  bool create_temp_table = 4;
  SpDataframeData df = 5;
  repeated Tuple_String_Expr kwargs = 6;
  string on_error = 7;
  bool overwrite = 8;
  int64 parallel = 9;
  bool quote_identifiers = 10;
  SrcPosition src = 11;
  NameRef table_name = 12;
  string table_type = 13;
}

// dataframe-io.ir:110
message SpWriteParquet {
  bool block = 1;
  repeated Tuple_String_Expr copy_options = 2;
  repeated Tuple_String_String format_type_options = 3;
  bool header = 4;
  VarId id = 5;
  string location = 6;
  Expr partition_by = 7;
  SrcPosition src = 8;
  repeated Tuple_String_String statement_params = 9;
}

// dataframe-io.ir:114
message SpWriteTable {
  bool block = 1;
  google.protobuf.BoolValue change_tracking = 2;
  List_Expr clustering_keys = 3;
  string column_order = 4;
  google.protobuf.StringValue comment = 5;
  bool copy_grants = 6;
  bool create_temp_table = 7;
  google.protobuf.Int64Value data_retention_time = 8;
  google.protobuf.BoolValue enable_schema_evolution = 9;
  repeated Tuple_String_String iceberg_config = 10;
  VarId id = 11;
  google.protobuf.Int64Value max_data_extension_time = 12;
  SpSaveMode mode = 13;
  SrcPosition src = 14;
  repeated Tuple_String_String statement_params = 15;
  NameRef table_name = 16;
  string table_type = 17;
}

// column.ir:7
message SqlExpr {
  google.protobuf.StringValue df_alias = 1;
  string sql = 2;
  SrcPosition src = 3;
}

message Stmt {
  oneof variant {
    Assign assign = 1;
    Eval eval = 2;
    ExtensionStmt extension_stmt = 3;
  }
}

// fn.ir:40
message StoredProcedure {
  google.protobuf.StringValue comment = 1;
  string execute_as = 2;
  repeated string external_access_integrations = 3;
  SpCallable func = 4;
  bool if_not_exists = 5;
  repeated NameRef imports = 6;
  List_SpDataType input_types = 7;
  bool is_permanent = 8;
  repeated Tuple_String_Expr kwargs = 9;
  google.protobuf.BoolValue log_on_exception = 10;
  NameRef name = 11;
  repeated string packages = 12;
  int64 parallel = 13;
  bool replace = 14;
  SpDataType return_type = 15;
  repeated Tuple_String_String secrets = 16;
  bool source_code_display = 17;
  SrcPosition src = 18;
  string stage_location = 19;
  repeated Tuple_String_String statement_params = 20;
  bool strict = 21;
}

// const.ir:38
message StringVal {
  SrcPosition src = 1;
  string v = 2;
}

// op.ir:44
message Sub {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// table.ir:1
message TableDelete {
  bool block = 1;
  Expr condition = 2;
  VarId id = 3;
  SpDataframeExpr source = 4;
  SrcPosition src = 5;
  repeated Tuple_String_String statement_params = 6;
}

// table.ir:9
message TableDropTable {
  VarId id = 1;
  SrcPosition src = 2;
}

// table.ir:13
message TableMerge {
  bool block = 1;
  repeated MatchedClause clauses = 2;
  VarId id = 3;
  Expr join_expr = 4;
  SpDataframeExpr source = 5;
  SrcPosition src = 6;
  repeated Tuple_String_String statement_params = 7;
}

// table.ir:22
message TableSample {
  SpDataframeExpr df = 1;
  google.protobuf.Int64Value num = 2;
  google.protobuf.DoubleValue probability_fraction = 3;
  google.protobuf.StringValue sampling_method = 4;
  google.protobuf.Int64Value seed = 5;
  SrcPosition src = 6;
}

// table.ir:30
message TableUpdate {
  repeated Tuple_String_Expr assignments = 1;
  bool block = 2;
  Expr condition = 3;
  VarId id = 4;
  SpDataframeExpr source = 5;
  SrcPosition src = 6;
  repeated Tuple_String_String statement_params = 7;
}

// dataframe.ir:12
message TruncatedDataframeExpr {
  VarId self = 1;
  SrcPosition src = 2;
}

// expr.ir:56
message TruncatedExpr {
  VarId self = 1;
  SrcPosition src = 2;
}

// dataframe-grouped.ir:8
message TruncatedRelationalGroupedDataframeExpr {
  VarId self = 1;
  SrcPosition src = 2;
}

// expr.ir:4
message TupleVal {
  SrcPosition src = 1;
  repeated Expr vs = 2;
}

// fn.ir:115
message Udaf {
  google.protobuf.StringValue comment = 1;
  repeated string external_access_integrations = 2;
  SpCallable handler = 3;
  bool if_not_exists = 4;
  bool immutable = 5;
  repeated NameRef imports = 6;
  List_SpDataType input_types = 7;
  bool is_permanent = 8;
  repeated Tuple_String_Expr kwargs = 9;
  NameRef name = 10;
  repeated string packages = 11;
  int64 parallel = 12;
  bool replace = 13;
  SpDataType return_type = 14;
  repeated Tuple_String_String secrets = 15;
  SrcPosition src = 16;
  google.protobuf.StringValue stage_location = 17;
  repeated Tuple_String_String statement_params = 18;
}

// fn.ir:63
message Udf {
  google.protobuf.StringValue comment = 1;
  repeated string external_access_integrations = 2;
  SpCallable func = 3;
  bool if_not_exists = 4;
  bool immutable = 5;
  repeated NameRef imports = 6;
  List_SpDataType input_types = 7;
  bool is_permanent = 8;
  repeated Tuple_String_Expr kwargs = 9;
  google.protobuf.Int64Value max_batch_size = 10;
  NameRef name = 11;
  repeated string packages = 12;
  int64 parallel = 13;
  bool replace = 14;
  SpDataType return_type = 15;
  repeated Tuple_String_String secrets = 16;
  bool secure = 17;
  bool source_code_display = 18;
  SrcPosition src = 19;
  string stage_location = 20;
  repeated Tuple_String_String statement_params = 21;
  bool strict = 22;
}

// fn.ir:92
message Udtf {
  google.protobuf.StringValue comment = 1;
  repeated string external_access_integrations = 2;
  SpCallable handler = 3;
  bool if_not_exists = 4;
  bool immutable = 5;
  repeated NameRef imports = 6;
  List_SpDataType input_types = 7;
  bool is_permanent = 8;
  repeated Tuple_String_Expr kwargs = 9;
  NameRef name = 10;
  UdtfSchema output_schema = 11;
  repeated string packages = 12;
  int64 parallel = 13;
  bool replace = 14;
  repeated Tuple_String_String secrets = 15;
  bool secure = 16;
  SrcPosition src = 17;
  string stage_location = 18;
  repeated Tuple_String_String statement_params = 19;
  bool strict = 20;
}

message UnaryOp {
  oneof variant {
    Neg neg = 1;
    Not not = 2;
  }
}
