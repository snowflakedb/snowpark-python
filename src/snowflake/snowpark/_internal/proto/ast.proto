// N.B. This file is generated by `//ir-dsl-c`. DO NOT EDIT!
// Generated from `{git@github.com:snowflakedb/snowflake.git}/Snowpark/ast`.

syntax = "proto3";

option java_package = "com.snowflake.snowpark.proto";
option java_outer_classname = "JavaProto";

package ast;

import "google/protobuf/wrappers.proto";

enum __Version__ {
  PROTO3_REQUIRES_THIS = 0;
  MAX_VERSION = 1;
}

message InternedValueTable {
  map<int32, string> string_values = 1;
}

message List_String {
  repeated string list = 1;
}

message Tuple_Expr_Expr {
  Expr _1 = 1;
  Expr _2 = 2;
}

message Tuple_Expr_Float {
  Expr _1 = 1;
  double _2 = 2;
}

message Tuple_String_Expr {
  string _1 = 1;
  Expr _2 = 2;
}

message Tuple_String_List_String {
  string _1 = 1;
  repeated string _2 = 2;
}

message Tuple_String_String {
  string _1 = 1;
  string _2 = 2;
}

// fn.ir:25
message Callable {
  int64 id = 1;
  string name = 2;
  NameRef object_name = 3;
}

// column.ir:31
message ColumnAliasFn {
  oneof variant {
    bool column_alias_fn_alias = 1;
    bool column_alias_fn_as = 2;
    bool column_alias_fn_name = 3;
  }
}

// type.ir:34
message ColumnRef {
  oneof sealed_value {
    ColumnIdentifier column_identifier = 1;
    ColumnName column_name = 2;
  }
}

// type.ir:35
message ColumnIdentifier {
  string name = 1;
}

// type.ir:36
message ColumnName {
  string name = 1;
}

// type.ir:1
message DataType {
  oneof variant {
    ArrayType array_type = 1;
    bool binary_type = 2;
    bool boolean_type = 3;
    bool byte_type = 4;
    bool date_type = 5;
    DayTimeIntervalType day_time_interval_type = 6;
    DecimalType decimal_type = 7;
    bool double_type = 8;
    bool file_type = 9;
    bool float_type = 10;
    bool geography_type = 11;
    bool geometry_type = 12;
    bool integer_type = 13;
    bool long_type = 14;
    MapType map_type = 15;
    bool null_type = 16;
    PandasDataFrameType pandas_data_frame_type = 17;
    PandasSeriesType pandas_series_type = 18;
    bool short_type = 19;
    StringType string_type = 20;
    StructField struct_field = 21;
    StructType struct_type = 22;
    bool time_type = 23;
    TimestampType timestamp_type = 24;
    bool variant_type = 25;
    VectorType vector_type = 26;
    YearMonthIntervalType year_month_interval_type = 27;
  }
}

// type.ir:3
message ArrayType {
  bool structured = 1;
  DataType ty = 2;
}

// type.ir:8
message DayTimeIntervalType {
  int64 end_field = 1;
  int64 start_field = 2;
}

// type.ir:9
message DecimalType {
  int64 precision = 1;
  int64 scale = 2;
}

// type.ir:17
message MapType {
  DataType key_ty = 1;
  bool structured = 2;
  DataType value_ty = 3;
}

// type.ir:20
message StringType {
  google.protobuf.Int64Value length = 1;
}

// type.ir:21
message StructField {
  ColumnRef column_identifier = 1;
  DataType data_type = 2;
  bool nullable = 3;
}

// type.ir:22
message StructType {
  repeated StructField fields = 1;
  bool structured = 2;
}

// type.ir:24
message TimestampType {
  TimestampTimeZone time_zone = 1;
}

// type.ir:26
message VectorType {
  int64 dimension = 1;
  DataType ty = 2;
}

// type.ir:27
message YearMonthIntervalType {
  int64 end_field = 1;
  int64 start_field = 2;
}

// type.ir:29
message PandasSeriesType {
  DataType el_ty = 1;
}

// type.ir:30
message PandasDataFrameType {
  repeated string col_names = 1;
  repeated DataType col_types = 2;
}

// dataframe.ir:59
message DataframeData {
  oneof sealed_value {
    DataframeData_List dataframe_data__list = 1;
    DataframeData_Pandas dataframe_data__pandas = 2;
    DataframeData_Tuple dataframe_data__tuple = 3;
  }
}

// dataframe.ir:60
message DataframeData_List {
  repeated Expr vs = 1;
}

// dataframe.ir:61
message DataframeData_Tuple {
  repeated Expr vs = 1;
}

// dataframe.ir:62
message DataframeData_Pandas {
  StagedPandasDataframe v = 1;
}

// type.ir:46
message DataframeSchema {
  oneof sealed_value {
    DataframeSchema_List dataframe_schema__list = 1;
    DataframeSchema_Struct dataframe_schema__struct = 2;
  }
}

// type.ir:47
message DataframeSchema_List {
  repeated string vs = 1;
}

// type.ir:48
message DataframeSchema_Struct {
  StructType v = 1;
}

// dataframe.ir:77
message FlattenMode {
  oneof variant {
    bool flatten_mode_array = 1;
    bool flatten_mode_both = 2;
    bool flatten_mode_object = 3;
  }
}

// dataframe.ir:243
message JoinType {
  oneof variant {
    bool join_type__asof = 1;
    bool join_type__cross = 2;
    bool join_type__full_outer = 3;
    bool join_type__inner = 4;
    bool join_type__left_anti = 5;
    bool join_type__left_outer = 6;
    bool join_type__left_semi = 7;
    bool join_type__right_outer = 8;
  }
}

// ast.ir:26
message Language {
  oneof sealed_value {
    JavaLanguage java_language = 1;
    PythonLanguage python_language = 2;
    ScalaLanguage scala_language = 3;
  }
}

// ast.ir:27
message PythonLanguage {
  Version version = 1;
}

// ast.ir:28
message ScalaLanguage {
  Version version = 1;
}

// ast.ir:29
message JavaLanguage {
  Version version = 1;
}

// ast.ir:121
message Name {
  oneof sealed_value {
    NameFlat name_flat = 1;
    NameStructured name_structured = 2;
  }
}

// ast.ir:122
message NameFlat {
  string name = 1;
}

// ast.ir:123
message NameStructured {
  repeated string name = 1;
}

// column.ir:62
message NullOrder {
  oneof variant {
    bool null_order_default = 1;
    bool null_order_nulls_first = 2;
    bool null_order_nulls_last = 3;
  }
}

// const.ir:84
message PythonTimeZone {
  google.protobuf.StringValue name = 1;
  int64 offset_seconds = 2;
}

// dataframe-io.ir:60
message SaveMode {
  oneof variant {
    bool save_mode_append = 1;
    bool save_mode_error_if_exists = 2;
    bool save_mode_ignore = 3;
    bool save_mode_overwrite = 4;
    bool save_mode_truncate = 5;
  }
}

// src.ir:1
message SrcPosition {
  int64 end_column = 1;
  int64 end_line = 2;
  int32 file = 3;
  int64 start_column = 4;
  int64 start_line = 5;
}

// dataframe.ir:65
message StagedPandasDataframe {
  NameRef temp_table = 1;
}

// dataframe.ir:100
message TableVariant {
  oneof variant {
    bool session_table = 1;
    bool table_init = 2;
  }
}

// type.ir:39
message TimestampTimeZone {
  oneof variant {
    bool timestamp_time_zone_default = 1;
    bool timestamp_time_zone_ltz = 2;
    bool timestamp_time_zone_ntz = 3;
    bool timestamp_time_zone_tz = 4;
  }
}

// fn.ir:87
message UdtfSchema {
  oneof sealed_value {
    UdtfSchema_Names udtf_schema__names = 1;
    UdtfSchema_Type udtf_schema__type = 2;
  }
}

// fn.ir:88
message UdtfSchema_Type {
  DataType return_type = 1;
}

// fn.ir:89
message UdtfSchema_Names {
  repeated string schema = 1;
}

// ast.ir:32
message Version {
  string label = 1;
  int64 major = 2;
  int64 minor = 3;
  int64 patch = 4;
}

// window.ir:6
message WindowRelativePosition {
  oneof variant {
    bool window_relative_position__current_row = 1;
    WindowRelativePosition_Position window_relative_position__position = 2;
    bool window_relative_position__unbounded_following = 3;
    bool window_relative_position__unbounded_preceding = 4;
  }
}

// window.ir:10
message WindowRelativePosition_Position {
  Expr n = 1;
}

message AbstractExtension {
  oneof variant {
    ExtensionExpr trait_extension_expr = 1;
    ExtensionError extension_error = 2;
    ExtensionEvalResult extension_eval_result = 3;
    ExtensionStmt extension_stmt = 4;
  }
}

// op.ir:42
message Add {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:16
message And {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// fn.ir:2
message ApplyExpr {
  Expr fn = 1;
  repeated Tuple_String_Expr named_args = 2;
  repeated Expr pos_args = 3;
  SrcPosition src = 4;
}

// const.ir:31
message BigDecimalVal {
  int64 scale = 1;
  google.protobuf.StringValue special = 2;
  SrcPosition src = 3;
  bytes unscaled_value = 4;
}

// const.ir:24
message BigIntVal {
  bool is_negative = 1;
  SrcPosition src = 2;
  bytes v = 3;
}

message BinOp {
  oneof variant {
    Add add = 1;
    And and = 2;
    BitAnd bit_and = 3;
    BitOr bit_or = 4;
    BitXor bit_xor = 5;
    Div div = 6;
    Eq eq = 7;
    Geq geq = 8;
    Gt gt = 9;
    Leq leq = 10;
    Lt lt = 11;
    Mod mod = 12;
    Mul mul = 13;
    Neq neq = 14;
    Or or = 15;
    Pow pow = 16;
    Sub sub = 17;
  }
}

// const.ir:45
message BinaryVal {
  SrcPosition src = 1;
  bytes v = 2;
}

// ast.ir:45
message Bind {
  Expr expr = 1;
  bytes first_request_id = 2;
  google.protobuf.StringValue symbol = 3;
  int64 uid = 4;
}

// op.ir:58
message BitAnd {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:60
message BitOr {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:62
message BitXor {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// const.ir:16
message BoolVal {
  SrcPosition src = 1;
  bool v = 2;
}

// fn.ir:23
message BuiltinFn {
  NameRef name = 1;
  SrcPosition src = 2;
}

// fn.ir:149
message CallTableFunctionExpr {
  NameRef name = 1;
  SrcPosition src = 2;
}

// column.ir:26
message ColumnAlias {
  Expr col = 1;
  ColumnAliasFn fn = 2;
  string name = 3;
  SrcPosition src = 4;
}

// column.ir:33
message ColumnApply_Int {
  Expr col = 1;
  int64 idx = 2;
  SrcPosition src = 3;
}

// column.ir:37
message ColumnApply_String {
  Expr col = 1;
  string field = 2;
  SrcPosition src = 3;
}

// column.ir:41
message ColumnAsc {
  Expr col = 1;
  NullOrder null_order = 2;
  SrcPosition src = 3;
}

// column.ir:45
message ColumnBetween {
  Expr col = 1;
  Expr lower_bound = 2;
  SrcPosition src = 3;
  Expr upper_bound = 4;
}

// column.ir:12
message ColumnCaseExpr {
  repeated ColumnCaseExprClause cases = 1;
  SrcPosition src = 2;
}

// column.ir:16
message ColumnCaseExprClause {
  Expr condition = 1;
  SrcPosition src = 2;
  Expr value = 3;
}

// column.ir:50
message ColumnCast {
  Expr col = 1;
  SrcPosition src = 2;
  DataType to = 3;
}

// column.ir:58
message ColumnDesc {
  Expr col = 1;
  NullOrder null_order = 2;
  SrcPosition src = 3;
}

// column.ir:64
message ColumnEqualNan {
  Expr col = 1;
  SrcPosition src = 2;
}

// column.ir:66
message ColumnEqualNull {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

message ColumnFn {
  oneof variant {
    ColumnAlias column_alias = 1;
    ColumnApply_Int column_apply__int = 2;
    ColumnApply_String column_apply__string = 3;
    ColumnAsc column_asc = 4;
    ColumnBetween column_between = 5;
    ColumnCast column_cast = 6;
    ColumnDesc column_desc = 7;
    ColumnEqualNan column_equal_nan = 8;
    ColumnIn column_in = 9;
    ColumnIsNotNull column_is_not_null = 10;
    ColumnIsNull column_is_null = 11;
    ColumnOver column_over = 12;
    ColumnRegexp column_regexp = 13;
    ColumnStringCollate column_string_collate = 14;
    ColumnStringContains column_string_contains = 15;
    ColumnStringEndsWith column_string_ends_with = 16;
    ColumnStringLike column_string_like = 17;
    ColumnStringStartsWith column_string_starts_with = 18;
    ColumnStringSubstr column_string_substr = 19;
    ColumnTryCast column_try_cast = 20;
    ColumnWithinGroup column_within_group = 21;
  }
}

// column.ir:71
message ColumnIn {
  Expr col = 1;
  SrcPosition src = 2;
  repeated Expr values = 3;
}

// column.ir:75
message ColumnIsNotNull {
  Expr col = 1;
  SrcPosition src = 2;
}

// column.ir:77
message ColumnIsNull {
  Expr col = 1;
  SrcPosition src = 2;
}

// column.ir:79
message ColumnOver {
  Expr col = 1;
  SrcPosition src = 2;
  WindowSpecExpr window_spec = 3;
}

// column.ir:83
message ColumnRegexp {
  Expr col = 1;
  Expr parameters = 2;
  Expr pattern = 3;
  SrcPosition src = 4;
}

// column.ir:105
message ColumnStringCollate {
  Expr col = 1;
  Expr collation_spec = 2;
  SrcPosition src = 3;
}

// column.ir:109
message ColumnStringContains {
  Expr col = 1;
  Expr pattern = 2;
  SrcPosition src = 3;
}

// column.ir:96
message ColumnStringEndsWith {
  Expr col = 1;
  SrcPosition src = 2;
  Expr suffix = 3;
}

// column.ir:88
message ColumnStringLike {
  Expr col = 1;
  Expr pattern = 2;
  SrcPosition src = 3;
}

// column.ir:92
message ColumnStringStartsWith {
  Expr col = 1;
  Expr prefix = 2;
  SrcPosition src = 3;
}

// column.ir:100
message ColumnStringSubstr {
  Expr col = 1;
  Expr len = 2;
  Expr pos = 3;
  SrcPosition src = 4;
}

// column.ir:54
message ColumnTryCast {
  Expr col = 1;
  SrcPosition src = 2;
  DataType to = 3;
}

// column.ir:113
message ColumnWithinGroup {
  Expr col = 1;
  ExprArgList cols = 2;
  SrcPosition src = 3;
}

message Const {
  oneof variant {
    BigDecimalVal big_decimal_val = 1;
    BigIntVal big_int_val = 2;
    BinaryVal binary_val = 3;
    BoolVal bool_val = 4;
    DatatypeVal datatype_val = 5;
    Float64Val float64_val = 6;
    Int64Val int64_val = 7;
    NullVal null_val = 8;
    PythonDateVal python_date_val = 9;
    PythonTimeVal python_time_val = 10;
    PythonTimestampVal python_timestamp_val = 11;
    RedactedConst redacted_const = 12;
    StringVal string_val = 13;
  }
}

// dataframe.ir:39
message CreateDataframe {
  DataframeData data = 1;
  DataframeSchema schema = 2;
  SrcPosition src = 3;
}

// dataframe.ir:175
message DataframeAgg {
  Expr df = 1;
  ExprArgList exprs = 2;
  SrcPosition src = 3;
}

// dataframe.ir:180
message DataframeAlias {
  Expr df = 1;
  string name = 2;
  SrcPosition src = 3;
}

// dataframe-analytics.ir:27
message DataframeAnalyticsComputeLag {
  repeated Expr cols = 1;
  Expr df = 2;
  repeated string formatted_col_names = 3;
  repeated string group_by = 4;
  repeated int64 lags = 5;
  repeated string order_by = 6;
  SrcPosition src = 7;
}

// dataframe-analytics.ir:36
message DataframeAnalyticsComputeLead {
  repeated Expr cols = 1;
  Expr df = 2;
  repeated string formatted_col_names = 3;
  repeated string group_by = 4;
  repeated int64 leads = 5;
  repeated string order_by = 6;
  SrcPosition src = 7;
}

// dataframe-analytics.ir:18
message DataframeAnalyticsCumulativeAgg {
  repeated Tuple_String_List_String aggs = 1;
  Expr df = 2;
  repeated string formatted_col_names = 3;
  repeated string group_by = 4;
  bool is_forward = 5;
  repeated string order_by = 6;
  SrcPosition src = 7;
}

// dataframe-analytics.ir:9
message DataframeAnalyticsMovingAgg {
  repeated Tuple_String_List_String aggs = 1;
  Expr df = 2;
  repeated string formatted_col_names = 3;
  repeated string group_by = 4;
  repeated string order_by = 5;
  SrcPosition src = 6;
  repeated int64 window_sizes = 7;
}

// dataframe-analytics.ir:45
message DataframeAnalyticsTimeSeriesAgg {
  repeated Tuple_String_List_String aggs = 1;
  Expr df = 2;
  repeated string formatted_col_names = 3;
  repeated string group_by = 4;
  string sliding_interval = 5;
  SrcPosition src = 6;
  string time_col = 7;
  repeated string windows = 8;
}

// dataframe.ir:359
message DataframeCacheResult {
  Expr df = 1;
  NameRef object_name = 2;
  SrcPosition src = 3;
  repeated Tuple_String_String statement_params = 4;
}

// column.ir:1
message DataframeCol {
  string col_name = 1;
  Expr df = 2;
  SrcPosition src = 3;
}

// dataframe.ir:366
message DataframeColIlike {
  Expr df = 1;
  string pattern = 2;
  SrcPosition src = 3;
}

// dataframe.ir:19
message DataframeCollect {
  bool block = 1;
  bool case_sensitive = 2;
  Expr df = 3;
  bool log_on_exception = 4;
  bool no_wait = 5;
  SrcPosition src = 6;
  repeated Tuple_String_String statement_params = 7;
}

// dataframe-io.ir:165
message DataframeCopyIntoTable {
  repeated Tuple_String_Expr copy_options = 1;
  Expr df = 2;
  repeated string files = 3;
  repeated Tuple_String_Expr format_type_options = 4;
  repeated Tuple_String_Expr iceberg_config = 5;
  google.protobuf.StringValue pattern = 6;
  SrcPosition src = 7;
  repeated Tuple_String_String statement_params = 8;
  NameRef table_name = 9;
  repeated string target_columns = 10;
  repeated Expr transformations = 11;
  google.protobuf.StringValue validation_mode = 12;
}

// dataframe.ir:13
message DataframeCount {
  bool block = 1;
  Expr df = 2;
  SrcPosition src = 3;
  repeated Tuple_String_String statement_params = 4;
}

// dataframe-io.ir:148
message DataframeCreateOrReplaceDynamicTable {
  repeated Expr clustering_keys = 1;
  google.protobuf.StringValue comment = 2;
  bool copy_grants = 3;
  google.protobuf.Int64Value data_retention_time = 4;
  Expr df = 5;
  google.protobuf.StringValue initialize = 6;
  bool is_transient = 7;
  string lag = 8;
  google.protobuf.Int64Value max_data_extension_time = 9;
  SaveMode mode = 10;
  NameRef name = 11;
  google.protobuf.StringValue refresh_mode = 12;
  SrcPosition src = 13;
  repeated Tuple_String_String statement_params = 14;
  string warehouse = 15;
}

// dataframe-io.ir:139
message DataframeCreateOrReplaceView {
  google.protobuf.StringValue comment = 1;
  bool copy_grants = 2;
  Expr df = 3;
  bool is_temp = 4;
  NameRef name = 5;
  SrcPosition src = 6;
  repeated Tuple_String_String statement_params = 7;
}

// dataframe.ir:185
message DataframeCrossJoin {
  Expr lhs = 1;
  google.protobuf.StringValue lsuffix = 2;
  Expr rhs = 3;
  google.protobuf.StringValue rsuffix = 4;
  SrcPosition src = 5;
}

// dataframe-grouped.ir:6
message DataframeCube {
  ExprArgList cols = 1;
  Expr df = 2;
  SrcPosition src = 3;
}

// dataframe.ir:192
message DataframeDescribe {
  ExprArgList cols = 1;
  Expr df = 2;
  SrcPosition src = 3;
  bool strings_include_math_stats = 4;
}

// dataframe.ir:198
message DataframeDistinct {
  Expr df = 1;
  SrcPosition src = 2;
}

// dataframe.ir:202
message DataframeDrop {
  ExprArgList cols = 1;
  Expr df = 2;
  SrcPosition src = 3;
}

// dataframe.ir:207
message DataframeDropDuplicates {
  ExprArgList cols = 1;
  Expr df = 2;
  SrcPosition src = 3;
}

// dataframe.ir:212
message DataframeExcept {
  Expr df = 1;
  Expr other = 2;
  SrcPosition src = 3;
}

// dataframe.ir:217
message DataframeFilter {
  Expr condition = 1;
  Expr df = 2;
  SrcPosition src = 3;
}

// dataframe.ir:231
message DataframeFirst {
  bool block = 1;
  Expr df = 2;
  int64 num = 3;
  SrcPosition src = 4;
  repeated Tuple_String_String statement_params = 5;
}

// dataframe.ir:222
message DataframeFlatten {
  Expr df = 1;
  Expr input = 2;
  FlattenMode mode = 3;
  bool outer = 4;
  google.protobuf.StringValue path = 5;
  bool recursive = 6;
  SrcPosition src = 7;
}

// dataframe-grouped.ir:11
message DataframeGroupBy {
  ExprArgList cols = 1;
  Expr df = 2;
  SrcPosition src = 3;
}

// dataframe-grouped.ir:28
message DataframeGroupByGroupingSets {
  Expr df = 1;
  ExprArgList grouping_sets = 2;
  SrcPosition src = 3;
}

// dataframe.ir:238
message DataframeIntersect {
  Expr df = 1;
  Expr other = 2;
  SrcPosition src = 3;
}

// dataframe.ir:254
message DataframeJoin {
  Expr join_expr = 1;
  JoinType join_type = 2;
  Expr lhs = 3;
  google.protobuf.StringValue lsuffix = 4;
  Expr match_condition = 5;
  Expr rhs = 6;
  google.protobuf.StringValue rsuffix = 7;
  SrcPosition src = 8;
}

// dataframe.ir:264
message DataframeJoinTableFunction {
  Expr fn = 1;
  Expr lhs = 2;
  SrcPosition src = 3;
}

// dataframe.ir:269
message DataframeLimit {
  Expr df = 1;
  int64 n = 2;
  int64 offset = 3;
  SrcPosition src = 4;
}

// dataframe.ir:145
message DataframeNaDrop_Python {
  Expr df = 1;
  string how = 2;
  SrcPosition src = 3;
  ExprArgList subset = 4;
  google.protobuf.Int64Value thresh = 5;
}

// dataframe.ir:139
message DataframeNaDrop_Scala {
  repeated string cols = 1;
  Expr df = 2;
  int64 min_non_nulls_per_row = 3;
  SrcPosition src = 4;
}

// dataframe.ir:152
message DataframeNaFill {
  Expr df = 1;
  bool include_decimal = 2;
  SrcPosition src = 3;
  ExprArgList subset = 4;
  Expr value = 5;
  repeated Tuple_String_Expr value_map = 6;
}

// dataframe.ir:160
message DataframeNaReplace {
  Expr df = 1;
  bool include_decimal = 2;
  repeated Tuple_Expr_Expr replacement_map = 3;
  SrcPosition src = 4;
  ExprArgList subset = 5;
  repeated Expr to_replace_list = 6;
  Expr to_replace_value = 7;
  Expr value = 8;
  repeated Expr values = 9;
}

// dataframe.ir:275
message DataframeNaturalJoin {
  JoinType join_type = 1;
  Expr lhs = 2;
  Expr rhs = 3;
  SrcPosition src = 4;
}

// dataframe-grouped.ir:16
message DataframePivot {
  Expr default_on_null = 1;
  Expr df = 2;
  Expr pivot_col = 3;
  SrcPosition src = 4;
  Expr values = 5;
}

// dataframe.ir:289
message DataframeRandomSplit {
  Expr df = 1;
  google.protobuf.Int64Value seed = 2;
  SrcPosition src = 3;
  repeated Tuple_String_String statement_params = 4;
  repeated double weights = 5;
}

// dataframe-io.ir:13
message DataframeReader {
  google.protobuf.StringValue format = 1;
  ExprArgList metadata_columns = 2;
  repeated Tuple_String_Expr options = 3;
  StructType schema = 4;
  SrcPosition src = 5;
}

// dataframe.ir:4
message DataframeRef {
  int64 id = 1;
  SrcPosition src = 2;
}

// dataframe.ir:296
message DataframeRename {
  Expr col_or_mapper = 1;
  Expr df = 2;
  google.protobuf.StringValue new_column = 3;
  SrcPosition src = 4;
}

// dataframe-grouped.ir:23
message DataframeRollup {
  ExprArgList cols = 1;
  Expr df = 2;
  SrcPosition src = 3;
}

// dataframe.ir:302
message DataframeSample {
  Expr df = 1;
  google.protobuf.Int64Value num = 2;
  google.protobuf.DoubleValue probability_fraction = 3;
  google.protobuf.Int64Value seed = 4;
  SrcPosition src = 5;
}

// dataframe.ir:309
message DataframeSelect {
  ExprArgList cols = 1;
  Expr df = 2;
  bool expr_variant = 3;
  SrcPosition src = 4;
}

// dataframe.ir:8
message DataframeShow {
  Expr df = 1;
  int64 n = 2;
  SrcPosition src = 3;
}

// dataframe.ir:316
message DataframeSort {
  Expr ascending = 1;
  ExprArgList cols = 2;
  Expr df = 3;
  SrcPosition src = 4;
}

// dataframe-stat.ir:1
message DataframeStatApproxQuantile {
  ExprArgList cols = 1;
  Expr df = 2;
  repeated double percentile = 3;
  SrcPosition src = 4;
  repeated Tuple_String_String statement_params = 5;
}

// dataframe-stat.ir:8
message DataframeStatCorr {
  Expr col1 = 1;
  Expr col2 = 2;
  Expr df = 3;
  SrcPosition src = 4;
  repeated Tuple_String_String statement_params = 5;
}

// dataframe-stat.ir:15
message DataframeStatCov {
  Expr col1 = 1;
  Expr col2 = 2;
  Expr df = 3;
  SrcPosition src = 4;
  repeated Tuple_String_String statement_params = 5;
}

// dataframe-stat.ir:22
message DataframeStatCrossTab {
  Expr col1 = 1;
  Expr col2 = 2;
  Expr df = 3;
  SrcPosition src = 4;
  repeated Tuple_String_String statement_params = 5;
}

// dataframe-stat.ir:29
message DataframeStatSampleBy {
  Expr col = 1;
  Expr df = 2;
  repeated Tuple_Expr_Float fractions = 3;
  SrcPosition src = 4;
}

// dataframe.ir:130
message DataframeToDf {
  ExprArgList col_names = 1;
  Expr df = 2;
  SrcPosition src = 3;
}

// dataframe.ir:28
message DataframeToLocalIterator {
  bool block = 1;
  bool case_sensitive = 2;
  Expr df = 3;
  SrcPosition src = 4;
  repeated Tuple_String_String statement_params = 5;
}

// dataframe.ir:118
message DataframeToPandas {
  bool block = 1;
  Expr df = 2;
  SrcPosition src = 3;
  repeated Tuple_String_String statement_params = 4;
}

// dataframe.ir:124
message DataframeToPandasBatches {
  bool block = 1;
  Expr df = 2;
  SrcPosition src = 3;
  repeated Tuple_String_String statement_params = 4;
}

// dataframe.ir:322
message DataframeUnion {
  bool all = 1;
  bool allow_missing_columns = 2;
  bool by_name = 3;
  Expr df = 4;
  Expr other = 5;
  SrcPosition src = 6;
}

// dataframe.ir:281
message DataframeUnpivot {
  repeated Expr column_list = 1;
  Expr df = 2;
  bool include_nulls = 3;
  string name_column = 4;
  SrcPosition src = 5;
  string value_column = 6;
}

// dataframe.ir:330
message DataframeWithColumn {
  Expr col = 1;
  string col_name = 2;
  Expr df = 3;
  SrcPosition src = 4;
}

// dataframe.ir:336
message DataframeWithColumnRenamed {
  Expr col = 1;
  Expr df = 2;
  string new_name = 3;
  SrcPosition src = 4;
}

// dataframe.ir:342
message DataframeWithColumns {
  repeated string col_names = 1;
  Expr df = 2;
  SrcPosition src = 3;
  repeated Expr values = 4;
}

// dataframe-io.ir:73
message DataframeWriter {
  Expr df = 1;
  google.protobuf.StringValue format = 2;
  repeated Tuple_String_Expr options = 3;
  Expr partition_by = 4;
  SaveMode save_mode = 5;
  SrcPosition src = 6;
}

// const.ir:49
message DatatypeVal {
  DataType datatype = 1;
  SrcPosition src = 2;
}

// dataframe.ir:96
message Directory {
  SrcPosition src = 1;
  string stage_name = 2;
}

// op.ir:48
message Div {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:24
message Eq {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

message Error {
  oneof variant {
    ExtensionError extension_error = 1;
    SessionResetRequiredError session_reset_required_error = 2;
  }
}

// ast.ir:53
message Eval {
  int64 bind_id = 1;
}

// ast.ir:73
message EvalOk {
  int64 bind_id = 1;
  EvalResult data = 2;
  int64 uid = 3;
}

message EvalResult {
  oneof variant {
    Const trait_const = 1;
    BigDecimalVal big_decimal_val = 2;
    BigIntVal big_int_val = 3;
    BinaryVal binary_val = 4;
    BoolVal bool_val = 5;
    DatatypeVal datatype_val = 6;
    ExtensionEvalResult extension_eval_result = 7;
    Float64Val float64_val = 8;
    Int64Val int64_val = 9;
    NullVal null_val = 10;
    PythonDateVal python_date_val = 11;
    PythonTimeVal python_time_val = 12;
    PythonTimestampVal python_timestamp_val = 13;
    RedactedConst redacted_const = 14;
    SfQueryResult sf_query_result = 15;
    ShowResult show_result = 16;
    StringVal string_val = 17;
  }
}

message Expr {
  oneof variant {
    BinOp trait_bin_op = 1;
    ColumnFn trait_column_fn = 2;
    Const trait_const = 3;
    ExtensionExpr trait_extension_expr = 4;
    FnIdRefExpr trait_fn_id_ref_expr = 5;
    FnNameRefExpr trait_fn_name_ref_expr = 6;
    ReadFile trait_read_file = 7;
    UnaryOp trait_unary_op = 8;
    WriteFile trait_write_file = 9;
    Add add = 10;
    And and = 11;
    ApplyExpr apply_expr = 12;
    BigDecimalVal big_decimal_val = 13;
    BigIntVal big_int_val = 14;
    BinaryVal binary_val = 15;
    BitAnd bit_and = 16;
    BitOr bit_or = 17;
    BitXor bit_xor = 18;
    BoolVal bool_val = 19;
    BuiltinFn builtin_fn = 20;
    CallTableFunctionExpr call_table_function_expr = 21;
    ColumnAlias column_alias = 22;
    ColumnApply_Int column_apply__int = 23;
    ColumnApply_String column_apply__string = 24;
    ColumnAsc column_asc = 25;
    ColumnBetween column_between = 26;
    ColumnCaseExpr column_case_expr = 27;
    ColumnCast column_cast = 28;
    ColumnDesc column_desc = 29;
    ColumnEqualNan column_equal_nan = 30;
    ColumnEqualNull column_equal_null = 31;
    ColumnIn column_in = 32;
    ColumnIsNotNull column_is_not_null = 33;
    ColumnIsNull column_is_null = 34;
    ColumnOver column_over = 35;
    ColumnRegexp column_regexp = 36;
    ColumnStringCollate column_string_collate = 37;
    ColumnStringContains column_string_contains = 38;
    ColumnStringEndsWith column_string_ends_with = 39;
    ColumnStringLike column_string_like = 40;
    ColumnStringStartsWith column_string_starts_with = 41;
    ColumnStringSubstr column_string_substr = 42;
    ColumnTryCast column_try_cast = 43;
    ColumnWithinGroup column_within_group = 44;
    CreateDataframe create_dataframe = 45;
    DataframeAgg dataframe_agg = 46;
    DataframeAlias dataframe_alias = 47;
    DataframeAnalyticsComputeLag dataframe_analytics_compute_lag = 48;
    DataframeAnalyticsComputeLead dataframe_analytics_compute_lead = 49;
    DataframeAnalyticsCumulativeAgg dataframe_analytics_cumulative_agg = 50;
    DataframeAnalyticsMovingAgg dataframe_analytics_moving_agg = 51;
    DataframeAnalyticsTimeSeriesAgg dataframe_analytics_time_series_agg = 52;
    DataframeCacheResult dataframe_cache_result = 53;
    DataframeCol dataframe_col = 54;
    DataframeColIlike dataframe_col_ilike = 55;
    DataframeCollect dataframe_collect = 56;
    DataframeCopyIntoTable dataframe_copy_into_table = 57;
    DataframeCount dataframe_count = 58;
    DataframeCreateOrReplaceDynamicTable dataframe_create_or_replace_dynamic_table = 59;
    DataframeCreateOrReplaceView dataframe_create_or_replace_view = 60;
    DataframeCrossJoin dataframe_cross_join = 61;
    DataframeCube dataframe_cube = 62;
    DataframeDescribe dataframe_describe = 63;
    DataframeDistinct dataframe_distinct = 64;
    DataframeDrop dataframe_drop = 65;
    DataframeDropDuplicates dataframe_drop_duplicates = 66;
    DataframeExcept dataframe_except = 67;
    DataframeFilter dataframe_filter = 68;
    DataframeFirst dataframe_first = 69;
    DataframeFlatten dataframe_flatten = 70;
    DataframeGroupBy dataframe_group_by = 71;
    DataframeGroupByGroupingSets dataframe_group_by_grouping_sets = 72;
    DataframeIntersect dataframe_intersect = 73;
    DataframeJoin dataframe_join = 74;
    DataframeJoinTableFunction dataframe_join_table_function = 75;
    DataframeLimit dataframe_limit = 76;
    DataframeNaDrop_Python dataframe_na_drop__python = 77;
    DataframeNaDrop_Scala dataframe_na_drop__scala = 78;
    DataframeNaFill dataframe_na_fill = 79;
    DataframeNaReplace dataframe_na_replace = 80;
    DataframeNaturalJoin dataframe_natural_join = 81;
    DataframePivot dataframe_pivot = 82;
    DataframeRandomSplit dataframe_random_split = 83;
    DataframeReader dataframe_reader = 84;
    DataframeRef dataframe_ref = 85;
    DataframeRename dataframe_rename = 86;
    DataframeRollup dataframe_rollup = 87;
    DataframeSample dataframe_sample = 88;
    DataframeSelect dataframe_select = 89;
    DataframeShow dataframe_show = 90;
    DataframeSort dataframe_sort = 91;
    DataframeStatApproxQuantile dataframe_stat_approx_quantile = 92;
    DataframeStatCorr dataframe_stat_corr = 93;
    DataframeStatCov dataframe_stat_cov = 94;
    DataframeStatCrossTab dataframe_stat_cross_tab = 95;
    DataframeStatSampleBy dataframe_stat_sample_by = 96;
    DataframeToDf dataframe_to_df = 97;
    DataframeToLocalIterator dataframe_to_local_iterator = 98;
    DataframeToPandas dataframe_to_pandas = 99;
    DataframeToPandasBatches dataframe_to_pandas_batches = 100;
    DataframeUnion dataframe_union = 101;
    DataframeUnpivot dataframe_unpivot = 102;
    DataframeWithColumn dataframe_with_column = 103;
    DataframeWithColumnRenamed dataframe_with_column_renamed = 104;
    DataframeWithColumns dataframe_with_columns = 105;
    DataframeWriter dataframe_writer = 106;
    DatatypeVal datatype_val = 107;
    Directory directory = 108;
    Div div = 109;
    Eq eq = 110;
    Flatten flatten = 111;
    Float64Val float64_val = 112;
    FnRef fn_ref = 113;
    Generator generator = 114;
    Geq geq = 115;
    GroupingSets grouping_sets = 116;
    Gt gt = 117;
    IndirectTableFnIdRef indirect_table_fn_id_ref = 118;
    IndirectTableFnNameRef indirect_table_fn_name_ref = 119;
    Int64Val int64_val = 120;
    Leq leq = 121;
    ListVal list_val = 122;
    Lt lt = 123;
    MergeDeleteWhenMatchedClause merge_delete_when_matched_clause = 124;
    MergeInsertWhenNotMatchedClause merge_insert_when_not_matched_clause = 125;
    MergeUpdateWhenMatchedClause merge_update_when_matched_clause = 126;
    Mod mod = 127;
    Mul mul = 128;
    Neg neg = 129;
    Neq neq = 130;
    Not not = 131;
    NullVal null_val = 132;
    ObjectGetItem object_get_item = 133;
    Or or = 134;
    Pow pow = 135;
    PythonDateVal python_date_val = 136;
    PythonTimeVal python_time_val = 137;
    PythonTimestampVal python_timestamp_val = 138;
    Range range = 139;
    ReadAvro read_avro = 140;
    ReadCsv read_csv = 141;
    ReadDirectory read_directory = 142;
    ReadJson read_json = 143;
    ReadLoad read_load = 144;
    ReadOrc read_orc = 145;
    ReadParquet read_parquet = 146;
    ReadTable read_table = 147;
    ReadXml read_xml = 148;
    RedactedConst redacted_const = 149;
    RelationalGroupedDataframeAgg relational_grouped_dataframe_agg = 150;
    RelationalGroupedDataframeApplyInPandas relational_grouped_dataframe_apply_in_pandas = 151;
    RelationalGroupedDataframeBuiltin relational_grouped_dataframe_builtin = 152;
    RelationalGroupedDataframePivot relational_grouped_dataframe_pivot = 153;
    RelationalGroupedDataframeRef relational_grouped_dataframe_ref = 154;
    Row row = 155;
    SeqMapVal seq_map_val = 156;
    SessionTableFunction session_table_function = 157;
    Sql sql = 158;
    SqlExpr sql_expr = 159;
    StoredProcedure stored_procedure = 160;
    StringVal string_val = 161;
    Sub sub = 162;
    Table table = 163;
    TableDelete table_delete = 164;
    TableDropTable table_drop_table = 165;
    TableFnCallAlias table_fn_call_alias = 166;
    TableFnCallOver table_fn_call_over = 167;
    TableMerge table_merge = 168;
    TableSample table_sample = 169;
    TableUpdate table_update = 170;
    ToSnowparkPandas to_snowpark_pandas = 171;
    TruncatedExpr truncated_expr = 172;
    TupleVal tuple_val = 173;
    Udaf udaf = 174;
    Udf udf = 175;
    Udtf udtf = 176;
    WriteCopyIntoLocation write_copy_into_location = 177;
    WriteCsv write_csv = 178;
    WriteInsertInto write_insert_into = 179;
    WriteJson write_json = 180;
    WritePandas write_pandas = 181;
    WriteParquet write_parquet = 182;
    WriteSave write_save = 183;
    WriteTable write_table = 184;
  }
}

// ast.ir:131
message ExprArgList {
  repeated Expr args = 1;
  bool variadic = 2;
}

// ast.ir:84
message ExtensionError {
  repeated Tuple_String_Expr attrs = 1;
  int64 bind_id = 2;
  string kind = 3;
  int64 uid = 4;
}

// ast.ir:103
message ExtensionEvalResult {
  repeated Tuple_String_Expr attrs = 1;
  string kind = 2;
}

message ExtensionExpr {
  oneof variant {
    bool dummy = 1;
  }
}

// ast.ir:62
message ExtensionStmt {
  repeated Tuple_String_Expr attrs = 1;
  string kind = 2;
}

// dataframe.ir:69
message Flatten {
  Expr input = 1;
  FlattenMode mode = 2;
  bool outer = 3;
  google.protobuf.StringValue path = 4;
  bool recursive = 5;
  SrcPosition src = 6;
}

// const.ir:37
message Float64Val {
  SrcPosition src = 1;
  double v = 2;
}

message FnIdRefExpr {
  oneof variant {
    FnRef fn_ref = 1;
    IndirectTableFnIdRef indirect_table_fn_id_ref = 2;
  }
}

message FnNameRefExpr {
  oneof variant {
    BuiltinFn builtin_fn = 1;
    CallTableFunctionExpr call_table_function_expr = 2;
    IndirectTableFnNameRef indirect_table_fn_name_ref = 3;
    StoredProcedure stored_procedure = 4;
    Udaf udaf = 5;
    Udf udf = 6;
    Udtf udtf = 7;
  }
}

// fn.ir:19
message FnRef {
  int64 id = 1;
  SrcPosition src = 2;
}

// dataframe.ir:79
message Generator {
  ExprArgList columns = 1;
  int64 row_count = 2;
  SrcPosition src = 3;
  int64 time_limit_seconds = 4;
}

// op.ir:34
message Geq {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// dataframe.ir:348
message GroupingSets {
  ExprArgList sets = 1;
  SrcPosition src = 2;
}

// op.ir:32
message Gt {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

message HasSrcPosition {
  oneof variant {
    BinOp trait_bin_op = 1;
    ColumnFn trait_column_fn = 2;
    Const trait_const = 3;
    Expr trait_expr = 4;
    ExtensionExpr trait_extension_expr = 5;
    FnIdRefExpr trait_fn_id_ref_expr = 6;
    FnNameRefExpr trait_fn_name_ref_expr = 7;
    ReadFile trait_read_file = 8;
    UnaryOp trait_unary_op = 9;
    WindowSpecExpr trait_window_spec_expr = 10;
    WriteFile trait_write_file = 11;
    Add add = 12;
    And and = 13;
    ApplyExpr apply_expr = 14;
    BigDecimalVal big_decimal_val = 15;
    BigIntVal big_int_val = 16;
    BinaryVal binary_val = 17;
    BitAnd bit_and = 18;
    BitOr bit_or = 19;
    BitXor bit_xor = 20;
    BoolVal bool_val = 21;
    BuiltinFn builtin_fn = 22;
    CallTableFunctionExpr call_table_function_expr = 23;
    ColumnAlias column_alias = 24;
    ColumnApply_Int column_apply__int = 25;
    ColumnApply_String column_apply__string = 26;
    ColumnAsc column_asc = 27;
    ColumnBetween column_between = 28;
    ColumnCaseExpr column_case_expr = 29;
    ColumnCaseExprClause column_case_expr_clause = 30;
    ColumnCast column_cast = 31;
    ColumnDesc column_desc = 32;
    ColumnEqualNan column_equal_nan = 33;
    ColumnEqualNull column_equal_null = 34;
    ColumnIn column_in = 35;
    ColumnIsNotNull column_is_not_null = 36;
    ColumnIsNull column_is_null = 37;
    ColumnOver column_over = 38;
    ColumnRegexp column_regexp = 39;
    ColumnStringCollate column_string_collate = 40;
    ColumnStringContains column_string_contains = 41;
    ColumnStringEndsWith column_string_ends_with = 42;
    ColumnStringLike column_string_like = 43;
    ColumnStringStartsWith column_string_starts_with = 44;
    ColumnStringSubstr column_string_substr = 45;
    ColumnTryCast column_try_cast = 46;
    ColumnWithinGroup column_within_group = 47;
    CreateDataframe create_dataframe = 48;
    DataframeAgg dataframe_agg = 49;
    DataframeAlias dataframe_alias = 50;
    DataframeAnalyticsComputeLag dataframe_analytics_compute_lag = 51;
    DataframeAnalyticsComputeLead dataframe_analytics_compute_lead = 52;
    DataframeAnalyticsCumulativeAgg dataframe_analytics_cumulative_agg = 53;
    DataframeAnalyticsMovingAgg dataframe_analytics_moving_agg = 54;
    DataframeAnalyticsTimeSeriesAgg dataframe_analytics_time_series_agg = 55;
    DataframeCacheResult dataframe_cache_result = 56;
    DataframeCol dataframe_col = 57;
    DataframeColIlike dataframe_col_ilike = 58;
    DataframeCollect dataframe_collect = 59;
    DataframeCopyIntoTable dataframe_copy_into_table = 60;
    DataframeCount dataframe_count = 61;
    DataframeCreateOrReplaceDynamicTable dataframe_create_or_replace_dynamic_table = 62;
    DataframeCreateOrReplaceView dataframe_create_or_replace_view = 63;
    DataframeCrossJoin dataframe_cross_join = 64;
    DataframeCube dataframe_cube = 65;
    DataframeDescribe dataframe_describe = 66;
    DataframeDistinct dataframe_distinct = 67;
    DataframeDrop dataframe_drop = 68;
    DataframeDropDuplicates dataframe_drop_duplicates = 69;
    DataframeExcept dataframe_except = 70;
    DataframeFilter dataframe_filter = 71;
    DataframeFirst dataframe_first = 72;
    DataframeFlatten dataframe_flatten = 73;
    DataframeGroupBy dataframe_group_by = 74;
    DataframeGroupByGroupingSets dataframe_group_by_grouping_sets = 75;
    DataframeIntersect dataframe_intersect = 76;
    DataframeJoin dataframe_join = 77;
    DataframeJoinTableFunction dataframe_join_table_function = 78;
    DataframeLimit dataframe_limit = 79;
    DataframeNaDrop_Python dataframe_na_drop__python = 80;
    DataframeNaDrop_Scala dataframe_na_drop__scala = 81;
    DataframeNaFill dataframe_na_fill = 82;
    DataframeNaReplace dataframe_na_replace = 83;
    DataframeNaturalJoin dataframe_natural_join = 84;
    DataframePivot dataframe_pivot = 85;
    DataframeRandomSplit dataframe_random_split = 86;
    DataframeReader dataframe_reader = 87;
    DataframeRef dataframe_ref = 88;
    DataframeRename dataframe_rename = 89;
    DataframeRollup dataframe_rollup = 90;
    DataframeSample dataframe_sample = 91;
    DataframeSelect dataframe_select = 92;
    DataframeShow dataframe_show = 93;
    DataframeSort dataframe_sort = 94;
    DataframeStatApproxQuantile dataframe_stat_approx_quantile = 95;
    DataframeStatCorr dataframe_stat_corr = 96;
    DataframeStatCov dataframe_stat_cov = 97;
    DataframeStatCrossTab dataframe_stat_cross_tab = 98;
    DataframeStatSampleBy dataframe_stat_sample_by = 99;
    DataframeToDf dataframe_to_df = 100;
    DataframeToLocalIterator dataframe_to_local_iterator = 101;
    DataframeToPandas dataframe_to_pandas = 102;
    DataframeToPandasBatches dataframe_to_pandas_batches = 103;
    DataframeUnion dataframe_union = 104;
    DataframeUnpivot dataframe_unpivot = 105;
    DataframeWithColumn dataframe_with_column = 106;
    DataframeWithColumnRenamed dataframe_with_column_renamed = 107;
    DataframeWithColumns dataframe_with_columns = 108;
    DataframeWriter dataframe_writer = 109;
    DatatypeVal datatype_val = 110;
    Directory directory = 111;
    Div div = 112;
    Eq eq = 113;
    Flatten flatten = 114;
    Float64Val float64_val = 115;
    FnRef fn_ref = 116;
    Generator generator = 117;
    Geq geq = 118;
    GroupingSets grouping_sets = 119;
    Gt gt = 120;
    IndirectTableFnIdRef indirect_table_fn_id_ref = 121;
    IndirectTableFnNameRef indirect_table_fn_name_ref = 122;
    Int64Val int64_val = 123;
    Leq leq = 124;
    ListVal list_val = 125;
    Lt lt = 126;
    MergeDeleteWhenMatchedClause merge_delete_when_matched_clause = 127;
    MergeInsertWhenNotMatchedClause merge_insert_when_not_matched_clause = 128;
    MergeUpdateWhenMatchedClause merge_update_when_matched_clause = 129;
    Mod mod = 130;
    Mul mul = 131;
    NameRef name_ref = 132;
    Neg neg = 133;
    Neq neq = 134;
    Not not = 135;
    NullVal null_val = 136;
    ObjectGetItem object_get_item = 137;
    Or or = 138;
    Pow pow = 139;
    PythonDateVal python_date_val = 140;
    PythonTimeVal python_time_val = 141;
    PythonTimestampVal python_timestamp_val = 142;
    Range range = 143;
    ReadAvro read_avro = 144;
    ReadCsv read_csv = 145;
    ReadDirectory read_directory = 146;
    ReadJson read_json = 147;
    ReadLoad read_load = 148;
    ReadOrc read_orc = 149;
    ReadParquet read_parquet = 150;
    ReadTable read_table = 151;
    ReadXml read_xml = 152;
    RedactedConst redacted_const = 153;
    RelationalGroupedDataframeAgg relational_grouped_dataframe_agg = 154;
    RelationalGroupedDataframeApplyInPandas relational_grouped_dataframe_apply_in_pandas = 155;
    RelationalGroupedDataframeBuiltin relational_grouped_dataframe_builtin = 156;
    RelationalGroupedDataframePivot relational_grouped_dataframe_pivot = 157;
    RelationalGroupedDataframeRef relational_grouped_dataframe_ref = 158;
    Row row = 159;
    SeqMapVal seq_map_val = 160;
    SessionTableFunction session_table_function = 161;
    Sql sql = 162;
    SqlExpr sql_expr = 163;
    StoredProcedure stored_procedure = 164;
    StringVal string_val = 165;
    Sub sub = 166;
    Table table = 167;
    TableDelete table_delete = 168;
    TableDropTable table_drop_table = 169;
    TableFnCallAlias table_fn_call_alias = 170;
    TableFnCallOver table_fn_call_over = 171;
    TableMerge table_merge = 172;
    TableSample table_sample = 173;
    TableUpdate table_update = 174;
    ToSnowparkPandas to_snowpark_pandas = 175;
    TruncatedExpr truncated_expr = 176;
    TupleVal tuple_val = 177;
    Udaf udaf = 178;
    Udf udf = 179;
    Udtf udtf = 180;
    WindowSpecEmpty window_spec_empty = 181;
    WindowSpecOrderBy window_spec_order_by = 182;
    WindowSpecPartitionBy window_spec_partition_by = 183;
    WindowSpecRangeBetween window_spec_range_between = 184;
    WindowSpecRowsBetween window_spec_rows_between = 185;
    WriteCopyIntoLocation write_copy_into_location = 186;
    WriteCsv write_csv = 187;
    WriteInsertInto write_insert_into = 188;
    WriteJson write_json = 189;
    WritePandas write_pandas = 190;
    WriteParquet write_parquet = 191;
    WriteSave write_save = 192;
    WriteTable write_table = 193;
  }
}

// fn.ir:145
message IndirectTableFnIdRef {
  int64 id = 1;
  SrcPosition src = 2;
}

// fn.ir:141
message IndirectTableFnNameRef {
  NameRef name = 1;
  SrcPosition src = 2;
}

// const.ir:20
message Int64Val {
  SrcPosition src = 1;
  int64 v = 2;
}

// op.ir:30
message Leq {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// expr.ir:9
message ListVal {
  SrcPosition src = 1;
  repeated Expr vs = 2;
}

// op.ir:28
message Lt {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// table.ir:44
message MergeDeleteWhenMatchedClause {
  Expr condition = 1;
  SrcPosition src = 2;
}

// table.ir:48
message MergeInsertWhenNotMatchedClause {
  Expr condition = 1;
  repeated Expr insert_keys = 2;
  repeated Expr insert_values = 3;
  SrcPosition src = 4;
}

// table.ir:39
message MergeUpdateWhenMatchedClause {
  Expr condition = 1;
  SrcPosition src = 2;
  repeated Tuple_Expr_Expr update_assignments = 3;
}

// op.ir:50
message Mod {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:46
message Mul {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// ast.ir:126
message NameRef {
  Name name = 1;
  SrcPosition src = 2;
}

// op.ir:40
message Neg {
  Expr operand = 1;
  SrcPosition src = 2;
}

// op.ir:26
message Neq {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:14
message Not {
  Expr operand = 1;
  SrcPosition src = 2;
}

// const.ir:14
message NullVal {
  SrcPosition src = 1;
}

// expr.ir:25
message ObjectGetItem {
  repeated Expr args = 1;
  int64 obj = 2;
  SrcPosition src = 3;
}

// op.ir:18
message Or {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// op.ir:52
message Pow {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// const.ir:68
message PythonDateVal {
  int64 day = 1;
  int64 month = 2;
  SrcPosition src = 3;
  int64 year = 4;
}

// const.ir:74
message PythonTimeVal {
  int64 hour = 1;
  int64 microsecond = 2;
  int64 minute = 3;
  int64 second = 4;
  SrcPosition src = 5;
  PythonTimeZone tz = 6;
}

// const.ir:57
message PythonTimestampVal {
  int64 day = 1;
  int64 hour = 2;
  int64 microsecond = 3;
  int64 minute = 4;
  int64 month = 5;
  int64 second = 6;
  SrcPosition src = 7;
  PythonTimeZone tz = 8;
  int64 year = 9;
}

// dataframe.ir:85
message Range {
  google.protobuf.Int64Value end = 1;
  SrcPosition src = 2;
  int64 start = 3;
  google.protobuf.Int64Value step = 4;
}

// dataframe-io.ir:48
message ReadAvro {
  string path = 1;
  Expr reader = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:44
message ReadCsv {
  string path = 1;
  Expr reader = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:31
message ReadDirectory {
  Expr reader = 1;
  SrcPosition src = 2;
  string stage_name = 3;
}

message ReadFile {
  oneof variant {
    ReadAvro read_avro = 1;
    ReadCsv read_csv = 2;
    ReadJson read_json = 3;
    ReadLoad read_load = 4;
    ReadOrc read_orc = 5;
    ReadParquet read_parquet = 6;
    ReadXml read_xml = 7;
  }
}

// dataframe-io.ir:46
message ReadJson {
  string path = 1;
  Expr reader = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:42
message ReadLoad {
  string path = 1;
  Expr reader = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:50
message ReadOrc {
  string path = 1;
  Expr reader = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:52
message ReadParquet {
  string path = 1;
  Expr reader = 2;
  SrcPosition src = 3;
}

// dataframe-io.ir:20
message ReadTable {
  NameRef name = 1;
  google.protobuf.Int64Value offset = 2;
  Expr reader = 3;
  SrcPosition src = 4;
  google.protobuf.StringValue statement = 5;
  google.protobuf.StringValue stream = 6;
  google.protobuf.StringValue time_travel_mode = 7;
  Expr timestamp = 8;
  google.protobuf.StringValue timestamp_type = 9;
}

// dataframe-io.ir:54
message ReadXml {
  string path = 1;
  Expr reader = 2;
  SrcPosition src = 3;
}

// const.ir:8
message RedactedConst {
  Const proxy_value = 1;
  SrcPosition src = 2;
}

// dataframe-grouped.ir:33
message RelationalGroupedDataframeAgg {
  ExprArgList exprs = 1;
  Expr grouped_df = 2;
  SrcPosition src = 3;
}

// dataframe-grouped.ir:45
message RelationalGroupedDataframeApplyInPandas {
  Callable func = 1;
  Expr grouped_df = 2;
  repeated Tuple_String_Expr kwargs = 3;
  StructType output_schema = 4;
  SrcPosition src = 5;
}

// dataframe-grouped.ir:39
message RelationalGroupedDataframeBuiltin {
  string agg_name = 1;
  ExprArgList cols = 2;
  Expr grouped_df = 3;
  SrcPosition src = 4;
}

// dataframe-grouped.ir:52
message RelationalGroupedDataframePivot {
  Expr default_on_null = 1;
  Expr grouped_df = 2;
  Expr pivot_col = 3;
  SrcPosition src = 4;
  Expr values = 5;
}

// dataframe-grouped.ir:2
message RelationalGroupedDataframeRef {
  int64 id = 1;
  SrcPosition src = 2;
}

// ast.ir:12
message Request {
  InternedValueTable interned_value_table = 1;
  repeated Stmt body = 2;
  int64 client_ast_version = 3;
  Language client_language = 4;
  Version client_version = 5;
  bytes id = 6;
}

// ast.ir:21
message Response {
  InternedValueTable interned_value_table = 1;
  repeated Result body = 2;
}

message Result {
  oneof variant {
    Error trait_error = 1;
    EvalOk eval_ok = 2;
    ExtensionError extension_error = 3;
    SessionResetRequiredError session_reset_required_error = 4;
  }
}

// expr.ir:19
message Row {
  repeated string names = 1;
  SrcPosition src = 2;
  repeated Expr vs = 3;
}

// expr.ir:14
message SeqMapVal {
  repeated TupleVal kvs = 1;
  SrcPosition src = 2;
}

// ast.ir:115
message SessionResetRequiredError {
  int64 bind_id = 1;
  int64 uid = 2;
}

// dataframe.ir:114
message SessionTableFunction {
  Expr fn = 1;
  SrcPosition src = 2;
}

// ast.ir:93
message SfQueryResult {
  string uuid = 1;
}

// ast.ir:99
message ShowResult {
}

// dataframe.ir:91
message Sql {
  repeated Expr params = 1;
  string query = 2;
  SrcPosition src = 3;
}

// column.ir:7
message SqlExpr {
  google.protobuf.StringValue df_alias = 1;
  string sql = 2;
  SrcPosition src = 3;
}

message Stmt {
  oneof variant {
    Bind bind = 1;
    Eval eval = 2;
    ExtensionStmt extension_stmt = 3;
    TruncatedStmt truncated_stmt = 4;
  }
}

// fn.ir:37
message StoredProcedure {
  google.protobuf.StringValue artifact_repository = 1;
  google.protobuf.StringValue comment = 2;
  string execute_as = 3;
  repeated string external_access_integrations = 4;
  Callable func = 5;
  bool if_not_exists = 6;
  repeated NameRef imports = 7;
  repeated DataType input_types = 8;
  bool is_permanent = 9;
  repeated Tuple_String_Expr kwargs = 10;
  google.protobuf.BoolValue log_on_exception = 11;
  NameRef name = 12;
  repeated string packages = 13;
  int64 parallel = 14;
  bool replace = 15;
  repeated Tuple_String_String resource_constraint = 16;
  DataType return_type = 17;
  repeated Tuple_String_String secrets = 18;
  bool source_code_display = 19;
  SrcPosition src = 20;
  string stage_location = 21;
  repeated Tuple_String_String statement_params = 22;
  bool strict = 23;
}

// const.ir:41
message StringVal {
  SrcPosition src = 1;
  string v = 2;
}

// op.ir:44
message Sub {
  Expr lhs = 1;
  Expr rhs = 2;
  SrcPosition src = 3;
}

// dataframe.ir:102
message Table {
  bool is_temp_table_for_cleanup = 1;
  NameRef name = 2;
  google.protobuf.Int64Value offset = 3;
  SrcPosition src = 4;
  google.protobuf.StringValue statement = 5;
  google.protobuf.StringValue stream = 6;
  google.protobuf.StringValue time_travel_mode = 7;
  Expr timestamp = 8;
  google.protobuf.StringValue timestamp_type = 9;
  TableVariant variant = 10;
}

// table.ir:1
message TableDelete {
  bool block = 1;
  Expr condition = 2;
  Expr df = 3;
  Expr source = 4;
  SrcPosition src = 5;
  repeated Tuple_String_String statement_params = 6;
}

// table.ir:9
message TableDropTable {
  Expr df = 1;
  SrcPosition src = 2;
}

// fn.ir:165
message TableFnCallAlias {
  ExprArgList aliases = 1;
  Expr lhs = 2;
  SrcPosition src = 3;
}

// fn.ir:159
message TableFnCallOver {
  Expr lhs = 1;
  ExprArgList order_by = 2;
  ExprArgList partition_by = 3;
  SrcPosition src = 4;
}

// table.ir:13
message TableMerge {
  bool block = 1;
  repeated Expr clauses = 2;
  Expr df = 3;
  Expr join_expr = 4;
  Expr source = 5;
  SrcPosition src = 6;
  repeated Tuple_String_String statement_params = 7;
}

// table.ir:22
message TableSample {
  Expr df = 1;
  google.protobuf.Int64Value num = 2;
  google.protobuf.DoubleValue probability_fraction = 3;
  google.protobuf.StringValue sampling_method = 4;
  google.protobuf.Int64Value seed = 5;
  SrcPosition src = 6;
}

// table.ir:30
message TableUpdate {
  repeated Tuple_String_Expr assignments = 1;
  bool block = 2;
  Expr condition = 3;
  Expr df = 4;
  Expr source = 5;
  SrcPosition src = 6;
  repeated Tuple_String_String statement_params = 7;
}

// dataframe.ir:352
message ToSnowparkPandas {
  repeated string columns = 1;
  Expr df = 2;
  repeated string index_col = 3;
  SrcPosition src = 4;
}

// expr.ir:48
message TruncatedExpr {
  google.protobuf.Int64Value self = 1;
  SrcPosition src = 2;
}

// ast.ir:58
message TruncatedStmt {
  repeated int64 bind_ids = 1;
}

// expr.ir:4
message TupleVal {
  SrcPosition src = 1;
  repeated Expr vs = 2;
}

// fn.ir:118
message Udaf {
  google.protobuf.StringValue artifact_repository = 1;
  google.protobuf.StringValue comment = 2;
  repeated string external_access_integrations = 3;
  Callable handler = 4;
  bool if_not_exists = 5;
  bool immutable = 6;
  repeated NameRef imports = 7;
  repeated DataType input_types = 8;
  bool is_permanent = 9;
  repeated Tuple_String_Expr kwargs = 10;
  NameRef name = 11;
  repeated string packages = 12;
  int64 parallel = 13;
  bool replace = 14;
  repeated Tuple_String_String resource_constraint = 15;
  DataType return_type = 16;
  repeated Tuple_String_String secrets = 17;
  SrcPosition src = 18;
  google.protobuf.StringValue stage_location = 19;
  repeated Tuple_String_String statement_params = 20;
}

// fn.ir:62
message Udf {
  google.protobuf.StringValue artifact_repository = 1;
  google.protobuf.StringValue comment = 2;
  repeated string external_access_integrations = 3;
  Callable func = 4;
  bool if_not_exists = 5;
  bool immutable = 6;
  repeated NameRef imports = 7;
  repeated DataType input_types = 8;
  bool is_permanent = 9;
  repeated Tuple_String_Expr kwargs = 10;
  google.protobuf.Int64Value max_batch_size = 11;
  NameRef name = 12;
  repeated string packages = 13;
  int64 parallel = 14;
  bool replace = 15;
  repeated Tuple_String_String resource_constraint = 16;
  DataType return_type = 17;
  repeated Tuple_String_String secrets = 18;
  bool secure = 19;
  bool source_code_display = 20;
  SrcPosition src = 21;
  string stage_location = 22;
  repeated Tuple_String_String statement_params = 23;
  bool strict = 24;
}

// fn.ir:93
message Udtf {
  google.protobuf.StringValue artifact_repository = 1;
  google.protobuf.StringValue comment = 2;
  repeated string external_access_integrations = 3;
  Callable handler = 4;
  bool if_not_exists = 5;
  bool immutable = 6;
  repeated NameRef imports = 7;
  repeated DataType input_types = 8;
  bool is_permanent = 9;
  repeated Tuple_String_Expr kwargs = 10;
  NameRef name = 11;
  UdtfSchema output_schema = 12;
  repeated string packages = 13;
  int64 parallel = 14;
  bool replace = 15;
  repeated Tuple_String_String resource_constraint = 16;
  repeated Tuple_String_String secrets = 17;
  bool secure = 18;
  SrcPosition src = 19;
  string stage_location = 20;
  repeated Tuple_String_String statement_params = 21;
  bool strict = 22;
}

message UnaryOp {
  oneof variant {
    Neg neg = 1;
    Not not = 2;
  }
}

// window.ir:18
message WindowSpecEmpty {
  SrcPosition src = 1;
  WindowSpecExpr wnd = 2;
}

message WindowSpecExpr {
  oneof variant {
    WindowSpecEmpty window_spec_empty = 1;
    WindowSpecOrderBy window_spec_order_by = 2;
    WindowSpecPartitionBy window_spec_partition_by = 3;
    WindowSpecRangeBetween window_spec_range_between = 4;
    WindowSpecRowsBetween window_spec_rows_between = 5;
  }
}

// window.ir:20
message WindowSpecOrderBy {
  repeated Expr cols = 1;
  SrcPosition src = 2;
  WindowSpecExpr wnd = 3;
}

// window.ir:24
message WindowSpecPartitionBy {
  repeated Expr cols = 1;
  SrcPosition src = 2;
  WindowSpecExpr wnd = 3;
}

// window.ir:28
message WindowSpecRangeBetween {
  WindowRelativePosition end = 1;
  SrcPosition src = 2;
  WindowRelativePosition start = 3;
  WindowSpecExpr wnd = 4;
}

// window.ir:33
message WindowSpecRowsBetween {
  WindowRelativePosition end = 1;
  SrcPosition src = 2;
  WindowRelativePosition start = 3;
  WindowSpecExpr wnd = 4;
}

// dataframe-io.ir:116
message WriteCopyIntoLocation {
  bool block = 1;
  repeated Tuple_String_Expr copy_options = 2;
  repeated Tuple_String_Expr credentials = 3;
  repeated Tuple_String_Expr encryption = 4;
  google.protobuf.StringValue file_format_name = 5;
  google.protobuf.StringValue file_format_type = 6;
  repeated Tuple_String_String format_type_options = 7;
  bool header = 8;
  string location = 9;
  Expr partition_by = 10;
  SrcPosition src = 11;
  repeated Tuple_String_String statement_params = 12;
  google.protobuf.StringValue storage_integration = 13;
  google.protobuf.StringValue validation_mode = 14;
  Expr writer = 15;
}

// dataframe-io.ir:123
message WriteCsv {
  bool block = 1;
  repeated Tuple_String_Expr copy_options = 2;
  repeated Tuple_String_Expr credentials = 3;
  repeated Tuple_String_Expr encryption = 4;
  repeated Tuple_String_String format_type_options = 5;
  bool header = 6;
  string location = 7;
  Expr partition_by = 8;
  SrcPosition src = 9;
  repeated Tuple_String_String statement_params = 10;
  google.protobuf.StringValue storage_integration = 11;
  google.protobuf.StringValue validation_mode = 12;
  Expr writer = 13;
}

message WriteFile {
  oneof variant {
    WriteCopyIntoLocation write_copy_into_location = 1;
    WriteCsv write_csv = 2;
    WriteJson write_json = 3;
    WriteParquet write_parquet = 4;
    WriteSave write_save = 5;
  }
}

// dataframe-io.ir:129
message WriteInsertInto {
  bool overwrite = 1;
  SrcPosition src = 2;
  NameRef table_name = 3;
  Expr writer = 4;
}

// dataframe-io.ir:125
message WriteJson {
  bool block = 1;
  repeated Tuple_String_Expr copy_options = 2;
  repeated Tuple_String_Expr credentials = 3;
  repeated Tuple_String_Expr encryption = 4;
  repeated Tuple_String_String format_type_options = 5;
  bool header = 6;
  string location = 7;
  Expr partition_by = 8;
  SrcPosition src = 9;
  repeated Tuple_String_String statement_params = 10;
  google.protobuf.StringValue storage_integration = 11;
  google.protobuf.StringValue validation_mode = 12;
  Expr writer = 13;
}

// dataframe.ir:44
message WritePandas {
  bool auto_create_table = 1;
  google.protobuf.Int64Value chunk_size = 2;
  string compression = 3;
  bool create_temp_table = 4;
  DataframeData df = 5;
  repeated Tuple_String_Expr kwargs = 6;
  string on_error = 7;
  bool overwrite = 8;
  int64 parallel = 9;
  bool quote_identifiers = 10;
  SrcPosition src = 11;
  NameRef table_name = 12;
  string table_type = 13;
}

// dataframe-io.ir:127
message WriteParquet {
  bool block = 1;
  repeated Tuple_String_Expr copy_options = 2;
  repeated Tuple_String_Expr credentials = 3;
  repeated Tuple_String_Expr encryption = 4;
  repeated Tuple_String_String format_type_options = 5;
  bool header = 6;
  string location = 7;
  Expr partition_by = 8;
  SrcPosition src = 9;
  repeated Tuple_String_String statement_params = 10;
  google.protobuf.StringValue storage_integration = 11;
  google.protobuf.StringValue validation_mode = 12;
  Expr writer = 13;
}

// dataframe-io.ir:121
message WriteSave {
  bool block = 1;
  repeated Tuple_String_Expr copy_options = 2;
  repeated Tuple_String_Expr credentials = 3;
  repeated Tuple_String_Expr encryption = 4;
  repeated Tuple_String_String format_type_options = 5;
  bool header = 6;
  string location = 7;
  Expr partition_by = 8;
  SrcPosition src = 9;
  repeated Tuple_String_String statement_params = 10;
  google.protobuf.StringValue storage_integration = 11;
  google.protobuf.StringValue validation_mode = 12;
  Expr writer = 13;
}

// dataframe-io.ir:81
message WriteTable {
  bool block = 1;
  google.protobuf.BoolValue change_tracking = 2;
  repeated Expr clustering_keys = 3;
  string column_order = 4;
  google.protobuf.StringValue comment = 5;
  bool copy_grants = 6;
  bool create_temp_table = 7;
  google.protobuf.Int64Value data_retention_time = 8;
  google.protobuf.BoolValue enable_schema_evolution = 9;
  repeated Tuple_String_Expr iceberg_config = 10;
  google.protobuf.Int64Value max_data_extension_time = 11;
  SaveMode mode = 12;
  SrcPosition src = 13;
  repeated Tuple_String_String statement_params = 14;
  NameRef table_name = 15;
  string table_type = 16;
  Expr writer = 17;
}
