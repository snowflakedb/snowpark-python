// N.B. This file is generated by `ir-dsl-c`. DO NOT EDIT!
// Generated from `{https://github.com/snowflakedb/snowflake.git}/Snowpark/ast`.

syntax = "proto3";

option java_package = "com.snowflake.snowpark.proto";

package ast;

message List_SpColumnExpr {
  repeated SpColumnExpr list = 1;
}

message List_String {
  repeated string list = 1;
}

message Map_String_SpVariant {
  repeated Tuple_String_SpVariant list = 1;
}

message Map_String_String {
  repeated Tuple_String_String list = 1;
}

message Tuple_SpVariant_SpVariant {
  SpVariant _1 = 1;
  SpVariant _2 = 2;
}

message Tuple_SpVariant_SpVariant_Double {
  SpVariant _1 = 1;
  SpVariant_Double _2 = 2;
}

message Tuple_String_SpColumnExpr {
  string _1 = 1;
  SpColumnExpr _2 = 2;
}

message Tuple_String_SpVariant {
  string _1 = 1;
  SpVariant _2 = 2;
}

message Tuple_String_String {
  string _1 = 1;
  string _2 = 2;
}

// ast.ir:12
message Language {
  oneof sealed_value {
    Python python = 1;
    Scala scala = 2;
    Java java = 3;
  }
}

// ast.ir:13
message Python {
  Version version = 1;
}

// ast.ir:14
message Scala {
  Version version = 1;
}

// ast.ir:15
message Java {
  Version version = 1;
}

// ast.ir:18
message Version {
  int64 major = 1;
  int64 minor = 2;
}

// pd-indexing.ir:2
message PdIndexExpr {
  oneof sealed_value {
    Ord ord = 1;
    FlexOrd flex_ord = 2;
    Key key = 3;
  }
}

// pd-indexing.ir:3
message Ord {
  Expr v = 1;
}

// pd-indexing.ir:4
message FlexOrd {
  Expr v = 1;
}

// pd-indexing.ir:5
message Key {
  Expr v = 1;
}

// pd-indexing.ir:9
message PdProjectIndexExpr {
  oneof sealed_value {
    OrdRange ord_range = 1;
    FlexOrdRange flex_ord_range = 2;
    KeyRange key_range = 3;
    OrdList ord_list = 4;
    FlexOrdList flex_ord_list = 5;
    KeyList key_list = 6;
    BoolFilterList bool_filter_list = 7;
  }
}

// pd-indexing.ir:10
message OrdRange {
  Expr start = 1;
  Expr stop = 2;
  Expr step = 3;
}

// pd-indexing.ir:11
message FlexOrdRange {
  Expr start = 1;
  Expr stop = 2;
  Expr step = 3;
}

// pd-indexing.ir:12
message KeyRange {
  Expr start = 1;
  Expr stop = 2;
}

// pd-indexing.ir:13
message OrdList {
  Expr ords = 1;
}

// pd-indexing.ir:14
message FlexOrdList {
  Expr ords = 1;
}

// pd-indexing.ir:15
message KeyList {
  Expr keys = 1;
}

// pd-indexing.ir:16
message BoolFilterList {
  Expr filter = 1;
}

// sp-df-expr.ir:31
message SpFlattenMode {
  oneof variant {
    bool sp_flatten_mode_object = 1;
    bool sp_flatten_mode_array = 2;
    bool sp_flatten_mode_both = 3;
  }
}

// sp-df-expr.ir:339
message SpGroupingSets {
  repeated List_SpColumnExpr sets = 1;
}

// sp-df-io.ir:62
message SpSaveMode {
  oneof variant {
    bool sp_save_mode_append = 1;
    bool sp_save_mode_error_if_exists = 2;
    bool sp_save_mode_ignore = 3;
    bool sp_save_mode_overwrite = 4;
  }
}

// sp-misc.ir:1
message SpJoinType {
  oneof variant {
    bool sp_join_type__inner = 1;
    bool sp_join_type__left_outer = 2;
    bool sp_join_type__right_outer = 3;
    bool sp_join_type__full_outer = 4;
    bool sp_join_type__cross = 5;
    bool sp_join_type__left_semi = 6;
    bool sp_join_type__left_anti = 7;
    bool sp_join_type__self = 8;
  }
}

// sp-misc.ir:16
message SpWindowSpecExpr {
  oneof variant {
    bool sp_window_spec_empty = 1;
    SpWindowSpecOrderBy sp_window_spec_order_by = 2;
    SpWindowSpecPartitionBy sp_window_spec_partition_by = 3;
    SpWindowSpecRangeBetween sp_window_spec_range_between = 4;
    SpWindowSpecRowsBetween sp_window_spec_rows_between = 5;
    bool sp_window_spec_current_row = 6;
    bool sp_window_spec_unbounded_following = 7;
    bool sp_window_spec_unbounded_preceding = 8;
  }
}

// sp-misc.ir:18
message SpWindowSpecOrderBy {
  SpWindowSpecExpr wnd = 1;
  repeated SpColumnExpr cols = 2;
}

// sp-misc.ir:19
message SpWindowSpecPartitionBy {
  SpWindowSpecExpr wnd = 1;
  repeated SpColumnExpr cols = 2;
}

// sp-misc.ir:20
message SpWindowSpecRangeBetween {
  SpWindowSpecExpr wnd = 1;
  int64 start = 2;
  int64 end = 3;
}

// sp-misc.ir:21
message SpWindowSpecRowsBetween {
  SpWindowSpecExpr wnd = 1;
  int64 start = 2;
  int64 end = 3;
}

// sp-type.ir:17
message SpDataType {
  oneof variant {
    SpArrayType sp_array_type = 1;
    bool sp_binary_type = 2;
    bool sp_boolean_type = 3;
    bool sp_byte_type = 4;
    SpColumnIdentifier sp_column_identifier = 5;
    bool sp_date_type = 6;
    SpDecimalType sp_decimal_type = 7;
    bool sp_double_type = 8;
    bool sp_float_type = 9;
    bool sp_geography_type = 10;
    bool sp_integer_type = 11;
    bool sp_long_type = 12;
    SpMapType sp_map_type = 13;
    bool sp_short_type = 14;
    bool sp_string_type = 15;
    SpStructField sp_struct_field = 16;
    SpStructType sp_struct_type = 17;
    bool sp_time_type = 18;
    bool sp_timestamp_type = 19;
    bool sp_variant_type = 20;
  }
}

// sp-type.ir:18
message SpArrayType {
  SpDataType ty = 1;
}

// sp-type.ir:22
message SpColumnIdentifier {
  string name = 1;
}

// sp-type.ir:24
message SpDecimalType {
  int64 precision = 1;
  int64 scale = 2;
}

// sp-type.ir:30
message SpMapType {
  SpDataType key_ty = 1;
  SpDataType value_ty = 2;
}

// sp-type.ir:33
message SpStructField {
  SpColumnIdentifier column_identifier = 1;
  SpDataType data_type = 2;
  bool nullable = 3;
}

// sp-type.ir:34
message SpStructType {
  repeated SpStructField fields = 1;
}

// sp-type.ir:40
message SpVariant {
  oneof sealed_value {
    SpVariant_Object sp_variant__object = 1;
    SpVariant_List sp_variant__list = 2;
    SpVariant_Timestamp sp_variant__timestamp = 3;
    SpVariant_Date sp_variant__date = 4;
    SpVariant_Time sp_variant__time = 5;
    SpVariant_Bytes sp_variant__bytes = 6;
    SpVariant_String sp_variant__string = 7;
    SpVariant_Bool sp_variant__bool = 8;
    SpVariant_BigInt sp_variant__big_int = 9;
    SpVariant_BigDecimal sp_variant__big_decimal = 10;
    SpVariant_Int sp_variant__int = 11;
    SpVariant_Float sp_variant__float = 12;
    SpVariant_Double sp_variant__double = 13;
  }
}

// sp-type.ir:41
message SpVariant_Object {
  repeated Tuple_String_String v = 1;
}

// sp-type.ir:42
message SpVariant_List {
  repeated Map_String_String v = 1;
}

// sp-type.ir:43
message SpVariant_Timestamp {
  uint64 v = 1;
}

// sp-type.ir:44
message SpVariant_Date {
  uint64 v = 1;
}

// sp-type.ir:45
message SpVariant_Time {
  uint64 v = 1;
}

// sp-type.ir:46
message SpVariant_Bytes {
  bytes v = 1;
}

// sp-type.ir:47
message SpVariant_String {
  string v = 1;
}

// sp-type.ir:48
message SpVariant_Bool {
  bool v = 1;
}

// sp-type.ir:49
message SpVariant_BigInt {
  bytes v = 1;
}

// sp-type.ir:50
message SpVariant_BigDecimal {
  bytes v = 1;
}

// sp-type.ir:51
message SpVariant_Int {
  int64 v = 1;
}

// sp-type.ir:52
message SpVariant_Float {
  uint64 v = 1;
}

// sp-type.ir:53
message SpVariant_Double {
  uint64 v = 1;
}

// sp-type.ir:56
message SpRow {
  repeated SpVariant vs = 1;
}

// src.ir:1
message SrcPosition {
  string file = 1;
  int64 start_line = 2;
  int64 start_column = 3;
  int64 end_line = 4;
  int64 end_column = 5;
}

// stmt.ir:22
message VarId {
  uint64 bitfield1 = 1;
}

// ast.ir:2
message Request {
  Version client_version = 1;
  Language client_language = 2;
  repeated Stmt body = 3;
}

// ast.ir:8
message Response {
  repeated Result body = 1;
}

message Const {
  oneof variant {
    BigDecimalVal big_decimal_val = 1;
    BigIntVal big_int_val = 2;
    BinaryVal binary_val = 3;
    BoolVal bool_val = 4;
    DateVal date_val = 5;
    Float64Val float64_val = 6;
    FnVal fn_val = 7;
    Int32Val int32_val = 8;
    Int64Val int64_val = 9;
    NoneVal none_val = 10;
    NullVal null_val = 11;
    StringVal string_val = 12;
    TimestampVal timestamp_val = 13;
  }
}

// const.ir:7
message BinaryVal {
  SrcPosition src = 1;
  bytes v = 2;
}

// const.ir:11
message BoolVal {
  SrcPosition src = 1;
  bool v = 2;
}

// const.ir:15
message Int32Val {
  SrcPosition src = 1;
  int64 v = 2;
}

// const.ir:19
message Int64Val {
  SrcPosition src = 1;
  int64 v = 2;
}

// const.ir:23
message Float64Val {
  SrcPosition src = 1;
  double v = 2;
}

// const.ir:27
message BigIntVal {
  SrcPosition src = 1;
  bytes v = 2;
}

// const.ir:31
message BigDecimalVal {
  SrcPosition src = 1;
  bytes unscaled_value = 2;
  int64 scale = 3;
}

// const.ir:36
message StringVal {
  SrcPosition src = 1;
  string v = 2;
}

// const.ir:40
message TimestampVal {
  SrcPosition src = 1;
  int64 v = 2;
}

// const.ir:44
message DateVal {
  SrcPosition src = 1;
  int64 v = 2;
}

// const.ir:48
message NoneVal {
  SrcPosition src = 1;
}

// const.ir:50
message NullVal {
  SrcPosition src = 1;
}

// const.ir:53
message FnVal {
  SrcPosition src = 1;
  repeated string params = 2;
  Expr body = 3;
}

// expr-bool.ir:1
message IfExpr {
  SrcPosition src = 1;
  Expr cond = 2;
  Expr if_true = 3;
  Expr if_false = 4;
}

// expr-coll.ir:5
message SomeVal {
  SrcPosition src = 1;
  Expr v = 2;
}

// expr-coll.ir:13
message TupleVal {
  SrcPosition src = 1;
  repeated Expr vs = 2;
}

// expr-coll.ir:21
message ListVal {
  SrcPosition src = 1;
  repeated Expr vs = 2;
}

// expr-coll.ir:30
message SeqMapVal {
  SrcPosition src = 1;
  repeated TupleVal kvs = 2;
}

message BuiltInFnExpr {
  oneof variant {
    StringFn trait_string_fn = 1;
    StringConcat string_concat = 2;
    StringEndsWith string_ends_with = 3;
    StringLen string_len = 4;
    StringStartsWith string_starts_with = 5;
    StringToLower string_to_lower = 6;
    StringToUpper string_to_upper = 7;
  }
}

// expr-fn.ir:5
message ApplyExpr {
  SrcPosition src = 1;
  Expr fn = 2;
  repeated Expr args = 3;
}

// expr-fn.ir:11
message PyFn {
  SrcPosition src = 1;
  string pkg = 2;
  string name = 3;
  repeated string params = 4;
}

// expr-fn.ir:18
message SnowflakeUdf {
  SrcPosition src = 1;
  string name = 2;
  repeated string params = 3;
}

// expr-fn.ir:24
message SnowflakeSproc {
  SrcPosition src = 1;
  string name = 2;
  repeated string params = 3;
}

message UnaryOp {
  oneof variant {
    Not not = 1;
  }
}

message BinOp {
  oneof variant {
    Add add = 1;
    And and = 2;
    Div div = 3;
    Eq eq = 4;
    Geq geq = 5;
    Gt gt = 6;
    Leq leq = 7;
    Lt lt = 8;
    Mul mul = 9;
    Neq neq = 10;
    Or or = 11;
    Sub sub = 12;
  }
}

// expr-op.ir:14
message Not {
  SrcPosition src = 1;
  Expr operand = 2;
}

// expr-op.ir:16
message And {
  SrcPosition src = 1;
  Expr lhs = 2;
  Expr rhs = 3;
}

// expr-op.ir:18
message Or {
  SrcPosition src = 1;
  Expr lhs = 2;
  Expr rhs = 3;
}

// expr-op.ir:24
message Eq {
  SrcPosition src = 1;
  Expr lhs = 2;
  Expr rhs = 3;
}

// expr-op.ir:26
message Neq {
  SrcPosition src = 1;
  Expr lhs = 2;
  Expr rhs = 3;
}

// expr-op.ir:28
message Lt {
  SrcPosition src = 1;
  Expr lhs = 2;
  Expr rhs = 3;
}

// expr-op.ir:30
message Leq {
  SrcPosition src = 1;
  Expr lhs = 2;
  Expr rhs = 3;
}

// expr-op.ir:32
message Gt {
  SrcPosition src = 1;
  Expr lhs = 2;
  Expr rhs = 3;
}

// expr-op.ir:34
message Geq {
  SrcPosition src = 1;
  Expr lhs = 2;
  Expr rhs = 3;
}

// expr-op.ir:40
message Add {
  SrcPosition src = 1;
  Expr lhs = 2;
  Expr rhs = 3;
}

// expr-op.ir:42
message Sub {
  SrcPosition src = 1;
  Expr lhs = 2;
  Expr rhs = 3;
}

// expr-op.ir:44
message Mul {
  SrcPosition src = 1;
  Expr lhs = 2;
  Expr rhs = 3;
}

// expr-op.ir:46
message Div {
  SrcPosition src = 1;
  Expr lhs = 2;
  Expr rhs = 3;
}

// expr-range.ir:1
message RangeVal {
  SrcPosition src = 1;
  Expr start = 2;
  Expr stop = 3;
  Expr step = 4;
}

message StringFn {
  oneof variant {
    StringEndsWith string_ends_with = 1;
    StringLen string_len = 2;
    StringStartsWith string_starts_with = 3;
    StringToLower string_to_lower = 4;
    StringToUpper string_to_upper = 5;
  }
}

// expr-str.ir:5
message StringLen {
  SrcPosition src = 1;
  Expr str = 2;
}

// expr-str.ir:7
message StringToUpper {
  SrcPosition src = 1;
  Expr str = 2;
}

// expr-str.ir:9
message StringToLower {
  SrcPosition src = 1;
  Expr str = 2;
}

// expr-str.ir:11
message StringStartsWith {
  SrcPosition src = 1;
  Expr str = 2;
  Expr prefix = 3;
}

// expr-str.ir:15
message StringEndsWith {
  SrcPosition src = 1;
  Expr str = 2;
  Expr suffix = 3;
}

// expr-str.ir:19
message StringConcat {
  SrcPosition src = 1;
  repeated string strings = 2;
}

message Expr {
  oneof variant {
    BinOp trait_bin_op = 1;
    BuiltInFnExpr trait_built_in_fn_expr = 2;
    Const trait_const = 3;
    SpColumnExpr trait_sp_column_expr = 4;
    SpCopyableDataframeExpr trait_sp_copyable_dataframe_expr = 5;
    SpDataframeExpr trait_sp_dataframe_expr = 6;
    SpDataframeReaderOptions trait_sp_dataframe_reader_options = 7;
    SpDataframeReaderSchema trait_sp_dataframe_reader_schema = 8;
    SpDataframeWriter trait_sp_dataframe_writer = 9;
    SpDataframeWriterOptions trait_sp_dataframe_writer_options = 10;
    SpDataframeWriterSaveMode trait_sp_dataframe_writer_save_mode = 11;
    SpRelationalGroupedDataframeExpr trait_sp_relational_grouped_dataframe_expr = 12;
    StringFn trait_string_fn = 13;
    UnaryOp trait_unary_op = 14;
    Add add = 15;
    And and = 16;
    ApplyExpr apply_expr = 17;
    BigDecimalVal big_decimal_val = 18;
    BigIntVal big_int_val = 19;
    BinaryVal binary_val = 20;
    BoolVal bool_val = 21;
    CastExpr cast_expr = 22;
    DateVal date_val = 23;
    Div div = 24;
    Eq eq = 25;
    Float64Val float64_val = 26;
    FnVal fn_val = 27;
    Geq geq = 28;
    Gt gt = 29;
    IfExpr if_expr = 30;
    Int32Val int32_val = 31;
    Int64Val int64_val = 32;
    Leq leq = 33;
    ListVal list_val = 34;
    Lt lt = 35;
    Mul mul = 36;
    Neq neq = 37;
    NoneVal none_val = 38;
    Not not = 39;
    NullVal null_val = 40;
    Or or = 41;
    PdDataframe pd_dataframe = 42;
    PdDataframeGetItem pd_dataframe_get_item = 43;
    PdDataframeILoc pd_dataframe_i_loc = 44;
    PdDataframeLoc pd_dataframe_loc = 45;
    PdDataframeSetItem pd_dataframe_set_item = 46;
    PdDropNa pd_drop_na = 47;
    PdRepr pd_repr = 48;
    PyFn py_fn = 49;
    RangeVal range_val = 50;
    Ref ref = 51;
    SeqMapVal seq_map_val = 52;
    SnowflakeSproc snowflake_sproc = 53;
    SnowflakeUdf snowflake_udf = 54;
    SomeVal some_val = 55;
    SpColumn sp_column = 56;
    SpColumnAlias sp_column_alias = 57;
    SpColumnAnd sp_column_and = 58;
    SpColumnApply_Int sp_column_apply__int = 59;
    SpColumnApply_String sp_column_apply__string = 60;
    SpColumnAsc sp_column_asc = 61;
    SpColumnBetween sp_column_between = 62;
    SpColumnBitAnd sp_column_bit_and = 63;
    SpColumnBitOr sp_column_bit_or = 64;
    SpColumnBitXor sp_column_bit_xor = 65;
    SpColumnCast sp_column_cast = 66;
    SpColumnCollate sp_column_collate = 67;
    SpColumnDesc sp_column_desc = 68;
    SpColumnDivide sp_column_divide = 69;
    SpColumnEqualNan sp_column_equal_nan = 70;
    SpColumnEqualNull sp_column_equal_null = 71;
    SpColumnEqualTo sp_column_equal_to = 72;
    SpColumnGeq sp_column_geq = 73;
    SpColumnGt sp_column_gt = 74;
    SpColumnIn_Dataframe sp_column_in__dataframe = 75;
    SpColumnIn_Seq sp_column_in__seq = 76;
    SpColumnIsNotNull sp_column_is_not_null = 77;
    SpColumnIsNull sp_column_is_null = 78;
    SpColumnLeq sp_column_leq = 79;
    SpColumnLike sp_column_like = 80;
    SpColumnLt sp_column_lt = 81;
    SpColumnMinus sp_column_minus = 82;
    SpColumnMod sp_column_mod = 83;
    SpColumnMultiply sp_column_multiply = 84;
    SpColumnName sp_column_name = 85;
    SpColumnNotEqual sp_column_not_equal = 86;
    SpColumnOr sp_column_or = 87;
    SpColumnOver sp_column_over = 88;
    SpColumnPlus sp_column_plus = 89;
    SpColumnRef sp_column_ref = 90;
    SpColumnRegexp sp_column_regexp = 91;
    SpColumnSqlExpr sp_column_sql_expr = 92;
    SpColumnWithinGroup sp_column_within_group = 93;
    SpCopyInto sp_copy_into = 94;
    SpCreateDataframe sp_create_dataframe = 95;
    SpDataframeAgg sp_dataframe_agg = 96;
    SpDataframeApply sp_dataframe_apply = 97;
    SpDataframeCol sp_dataframe_col = 98;
    SpDataframeCrossJoin sp_dataframe_cross_join = 99;
    SpDataframeCube sp_dataframe_cube = 100;
    SpDataframeDistinct sp_dataframe_distinct = 101;
    SpDataframeDropDuplicates sp_dataframe_drop_duplicates = 102;
    SpDataframeDrop_Columns sp_dataframe_drop__columns = 103;
    SpDataframeDrop_Strings sp_dataframe_drop__strings = 104;
    SpDataframeExcept sp_dataframe_except = 105;
    SpDataframeFilter sp_dataframe_filter = 106;
    SpDataframeFlatten_Column sp_dataframe_flatten__column = 107;
    SpDataframeFlatten_Column_String_Bool_Bool_String sp_dataframe_flatten__column__string__bool__bool__string = 108;
    SpDataframeGroupBy sp_dataframe_group_by = 109;
    SpDataframeGroupByGroupingSets sp_dataframe_group_by_grouping_sets = 110;
    SpDataframeGroupBy_Columns sp_dataframe_group_by__columns = 111;
    SpDataframeGroupBy_Strings sp_dataframe_group_by__strings = 112;
    SpDataframeIntersect sp_dataframe_intersect = 113;
    SpDataframeJoin_Dataframe_JoinExprs sp_dataframe_join__dataframe__join_exprs = 114;
    SpDataframeJoin_Dataframe_UsingColumns sp_dataframe_join__dataframe__using_columns = 115;
    SpDataframeJoin_TableFunction_List sp_dataframe_join__table_function__list = 116;
    SpDataframeJoin_TableFunction_Map sp_dataframe_join__table_function__map = 117;
    SpDataframeLimit sp_dataframe_limit = 118;
    SpDataframeNaDrop sp_dataframe_na_drop = 119;
    SpDataframeNaFill sp_dataframe_na_fill = 120;
    SpDataframeNaReplace sp_dataframe_na_replace = 121;
    SpDataframeNaturalJoin sp_dataframe_natural_join = 122;
    SpDataframePivot_Column sp_dataframe_pivot__column = 123;
    SpDataframePivot_String sp_dataframe_pivot__string = 124;
    SpDataframeRef sp_dataframe_ref = 125;
    SpDataframeRename sp_dataframe_rename = 126;
    SpDataframeRollup_Columns sp_dataframe_rollup__columns = 127;
    SpDataframeRollup_Strings sp_dataframe_rollup__strings = 128;
    SpDataframeSample_Double sp_dataframe_sample__double = 129;
    SpDataframeSample_Long sp_dataframe_sample__long = 130;
    SpDataframeSelect_Columns sp_dataframe_select__columns = 131;
    SpDataframeSelect_Strings sp_dataframe_select__strings = 132;
    SpDataframeShow sp_dataframe_show = 133;
    SpDataframeSort sp_dataframe_sort = 134;
    SpDataframeStatsCrossTab sp_dataframe_stats_cross_tab = 135;
    SpDataframeStatsSampleBy sp_dataframe_stats_sample_by = 136;
    SpDataframeToDf sp_dataframe_to_df = 137;
    SpDataframeUnion sp_dataframe_union = 138;
    SpDataframeUnionAll sp_dataframe_union_all = 139;
    SpDataframeUnionAllByName sp_dataframe_union_all_by_name = 140;
    SpDataframeUnionByName sp_dataframe_union_by_name = 141;
    SpDataframeWhere sp_dataframe_where = 142;
    SpDataframeWithColumn sp_dataframe_with_column = 143;
    SpDataframeWithColumns sp_dataframe_with_columns = 144;
    SpFlatten_Column sp_flatten__column = 145;
    SpFlatten_Column_String_Bool_Bool_String sp_flatten__column__string__bool__bool__string = 146;
    SpGenerator sp_generator = 147;
    SpRange sp_range = 148;
    SpReadAvro sp_read_avro = 149;
    SpReadCsv sp_read_csv = 150;
    SpReadJson sp_read_json = 151;
    SpReadOrc sp_read_orc = 152;
    SpReadParquet sp_read_parquet = 153;
    SpReadTable sp_read_table = 154;
    SpReadXml sp_read_xml = 155;
    SpRelationalGroupedDataframeAgg_Columns sp_relational_grouped_dataframe_agg__columns = 156;
    SpRelationalGroupedDataframeAgg_Map sp_relational_grouped_dataframe_agg__map = 157;
    SpRelationalGroupedDataframeAnyValue sp_relational_grouped_dataframe_any_value = 158;
    SpRelationalGroupedDataframeAvg sp_relational_grouped_dataframe_avg = 159;
    SpRelationalGroupedDataframeBuiltin sp_relational_grouped_dataframe_builtin = 160;
    SpRelationalGroupedDataframeCount sp_relational_grouped_dataframe_count = 161;
    SpRelationalGroupedDataframeMax sp_relational_grouped_dataframe_max = 162;
    SpRelationalGroupedDataframeMean sp_relational_grouped_dataframe_mean = 163;
    SpRelationalGroupedDataframeMedian sp_relational_grouped_dataframe_median = 164;
    SpRelationalGroupedDataframeMin sp_relational_grouped_dataframe_min = 165;
    SpRelationalGroupedDataframeSum sp_relational_grouped_dataframe_sum = 166;
    SpSql sp_sql = 167;
    SpStoredProcedure sp_stored_procedure = 168;
    SpTable sp_table = 169;
    SpTableFunction sp_table_function = 170;
    SpWriteCsv sp_write_csv = 171;
    SpWriteJson sp_write_json = 172;
    SpWriteParquet sp_write_parquet = 173;
    SpWriteTable sp_write_table = 174;
    StringConcat string_concat = 175;
    StringEndsWith string_ends_with = 176;
    StringLen string_len = 177;
    StringStartsWith string_starts_with = 178;
    StringToLower string_to_lower = 179;
    StringToUpper string_to_upper = 180;
    StringVal string_val = 181;
    Sub sub = 182;
    TimestampVal timestamp_val = 183;
    TupleVal tuple_val = 184;
  }
}

// expr.ir:4
message Ref {
  SrcPosition src = 1;
  VarId var_id = 2;
}

// expr.ir:9
message CastExpr {
  SrcPosition src = 1;
  Type typ = 2;
  Expr v = 3;
}

// pd-dataframe.ir:2
message PdDataframe {
  SrcPosition src = 1;
  Expr data = 2;
  Expr index = 3;
  Expr columns = 4;
  Type dtype = 5;
}

// pd-dataframe.ir:9
message PdDropNa {
  SrcPosition src = 1;
  Ref df = 2;
  Expr thresh = 3;
  Expr axis = 4;
  Expr subset = 5;
}

// pd-indexing.ir:20
message PdDataframeGetItem {
  SrcPosition src = 1;
  Ref df = 2;
  Expr key_arg = 3;
}

// pd-indexing.ir:26
message PdDataframeSetItem {
  SrcPosition src = 1;
  Ref df = 2;
  Expr key_arg = 3;
  Expr v = 4;
}

// pd-indexing.ir:32
message PdDataframeLoc {
  SrcPosition src = 1;
  Ref df = 2;
  Expr rows = 3;
  Expr columns = 4;
}

// pd-indexing.ir:38
message PdDataframeILoc {
  SrcPosition src = 1;
  Ref df = 2;
  Expr rows = 3;
  Expr columns = 4;
}

// pd-repr.ir:1
message PdRepr {
  SrcPosition src = 1;
  bool async = 2;
  Ref v = 3;
  int64 max_rows = 4;
  int64 max_columns = 5;
}

// pd-repr.ir:11
message PdReprResult {
  int64 num_rows = 1;
  int64 num_columns = 2;
  int64 num_head_rows = 3;
  int64 num_head_columns = 4;
  bytes value = 5;
}

message Result {
  oneof variant {
    Error trait_error = 1;
    EvalOk eval_ok = 2;
    SessionResetRequiredError session_reset_required_error = 3;
  }
}

message EvalResult {
  oneof variant {
    Const trait_const = 1;
    BigDecimalVal big_decimal_val = 2;
    BigIntVal big_int_val = 3;
    BinaryVal binary_val = 4;
    BoolVal bool_val = 5;
    DateVal date_val = 6;
    Float64Val float64_val = 7;
    FnVal fn_val = 8;
    Int32Val int32_val = 9;
    Int64Val int64_val = 10;
    NoneVal none_val = 11;
    NullVal null_val = 12;
    PdReprResult pd_repr_result = 13;
    StringVal string_val = 14;
    TimestampVal timestamp_val = 15;
  }
}

// result.ir:5
message EvalOk {
  int64 uid = 1;
  VarId var_id = 2;
  EvalResult data = 3;
}

message Error {
  oneof variant {
    SessionResetRequiredError session_reset_required_error = 1;
  }
}

// result.ir:17
message SessionResetRequiredError {
  int64 uid = 1;
  VarId var_id = 2;
}

message SpColumnExpr {
  oneof variant {
    SpColumn sp_column = 1;
    SpColumnAlias sp_column_alias = 2;
    SpColumnAnd sp_column_and = 3;
    SpColumnApply_Int sp_column_apply__int = 4;
    SpColumnApply_String sp_column_apply__string = 5;
    SpColumnAsc sp_column_asc = 6;
    SpColumnBetween sp_column_between = 7;
    SpColumnBitAnd sp_column_bit_and = 8;
    SpColumnBitOr sp_column_bit_or = 9;
    SpColumnBitXor sp_column_bit_xor = 10;
    SpColumnCast sp_column_cast = 11;
    SpColumnCollate sp_column_collate = 12;
    SpColumnDesc sp_column_desc = 13;
    SpColumnDivide sp_column_divide = 14;
    SpColumnEqualNan sp_column_equal_nan = 15;
    SpColumnEqualNull sp_column_equal_null = 16;
    SpColumnEqualTo sp_column_equal_to = 17;
    SpColumnGeq sp_column_geq = 18;
    SpColumnGt sp_column_gt = 19;
    SpColumnIn_Dataframe sp_column_in__dataframe = 20;
    SpColumnIn_Seq sp_column_in__seq = 21;
    SpColumnIsNotNull sp_column_is_not_null = 22;
    SpColumnIsNull sp_column_is_null = 23;
    SpColumnLeq sp_column_leq = 24;
    SpColumnLike sp_column_like = 25;
    SpColumnLt sp_column_lt = 26;
    SpColumnMinus sp_column_minus = 27;
    SpColumnMod sp_column_mod = 28;
    SpColumnMultiply sp_column_multiply = 29;
    SpColumnName sp_column_name = 30;
    SpColumnNotEqual sp_column_not_equal = 31;
    SpColumnOr sp_column_or = 32;
    SpColumnOver sp_column_over = 33;
    SpColumnPlus sp_column_plus = 34;
    SpColumnRef sp_column_ref = 35;
    SpColumnRegexp sp_column_regexp = 36;
    SpColumnSqlExpr sp_column_sql_expr = 37;
    SpColumnWithinGroup sp_column_within_group = 38;
    SpDataframeApply sp_dataframe_apply = 39;
    SpDataframeCol sp_dataframe_col = 40;
  }
}

// sp-col-expr.ir:5
message SpColumnRef {
  SrcPosition src = 1;
  string id = 2;
}

// sp-col-expr.ir:10
message SpColumn {
  SrcPosition src = 1;
  string name = 2;
}

// sp-col-expr.ir:15
message SpColumnSqlExpr {
  SrcPosition src = 1;
  string sql = 2;
}

// sp-col-expr.ir:23
message SpColumnAlias {
  SrcPosition src = 1;
  SpColumnExpr col = 2;
  string name = 3;
  bool variant_is_as = 4;
}

// sp-col-expr.ir:29
message SpColumnApply_Int {
  SrcPosition src = 1;
  SpColumnExpr col = 2;
  int64 idx = 3;
}

// sp-col-expr.ir:34
message SpColumnApply_String {
  SrcPosition src = 1;
  SpColumnExpr col = 2;
  string field = 3;
}

// sp-col-expr.ir:39
message SpColumnAsc {
  SrcPosition src = 1;
  SpColumnExpr col = 2;
  bool nulls_first = 3;
}

// sp-col-expr.ir:44
message SpColumnBetween {
  SrcPosition src = 1;
  SpColumnExpr col = 2;
  SpColumnExpr lower_bound = 3;
  SpColumnExpr upper_bound = 4;
}

// sp-col-expr.ir:50
message SpColumnCast {
  SrcPosition src = 1;
  SpColumnExpr col = 2;
  SpDataType to = 3;
}

// sp-col-expr.ir:55
message SpColumnCollate {
  SrcPosition src = 1;
  SpColumnExpr col = 2;
  string collate_spec = 3;
}

// sp-col-expr.ir:60
message SpColumnDesc {
  SrcPosition src = 1;
  SpColumnExpr col = 2;
  bool nulls_first = 3;
}

// sp-col-expr.ir:65
message SpColumnEqualNan {
  SrcPosition src = 1;
  SpColumnExpr col = 2;
}

// sp-col-expr.ir:69
message SpColumnEqualNull {
  SrcPosition src = 1;
  SpColumnExpr lhs = 2;
  SpColumnExpr rhs = 3;
}

// sp-col-expr.ir:74
message SpColumnIn_Dataframe {
  SrcPosition src = 1;
  SpColumnExpr col = 2;
  SpDataframeExpr df = 3;
}

// sp-col-expr.ir:79
message SpColumnIn_Seq {
  SrcPosition src = 1;
  SpColumnExpr col = 2;
  repeated Expr values = 3;
}

// sp-col-expr.ir:84
message SpColumnIsNotNull {
  SrcPosition src = 1;
  SpColumnExpr col = 2;
}

// sp-col-expr.ir:88
message SpColumnIsNull {
  SrcPosition src = 1;
  SpColumnExpr col = 2;
}

// sp-col-expr.ir:92
message SpColumnName {
  SrcPosition src = 1;
  SpColumnExpr col = 2;
  string alias = 3;
}

// sp-col-expr.ir:97
message SpColumnOver {
  SrcPosition src = 1;
  SpColumnExpr col = 2;
  SpWindowSpecExpr window_spec = 3;
}

// sp-col-expr.ir:102
message SpColumnRegexp {
  SrcPosition src = 1;
  SpColumnExpr col = 2;
  SpColumnExpr pattern = 3;
}

// sp-col-expr.ir:107
message SpColumnWithinGroup {
  SrcPosition src = 1;
  SpColumnExpr col = 2;
  repeated SpColumnExpr cols = 3;
  bool variadic = 4;
}

// sp-col-expr.ir:119
message SpColumnAnd {
  SrcPosition src = 1;
  SpColumnExpr lhs = 2;
  SpColumnExpr rhs = 3;
}

// sp-col-expr.ir:124
message SpColumnBitAnd {
  SrcPosition src = 1;
  SpColumnExpr lhs = 2;
  SpColumnExpr rhs = 3;
}

// sp-col-expr.ir:129
message SpColumnBitOr {
  SrcPosition src = 1;
  SpColumnExpr lhs = 2;
  SpColumnExpr rhs = 3;
}

// sp-col-expr.ir:134
message SpColumnBitXor {
  SrcPosition src = 1;
  SpColumnExpr lhs = 2;
  SpColumnExpr rhs = 3;
}

// sp-col-expr.ir:139
message SpColumnDivide {
  SrcPosition src = 1;
  SpColumnExpr lhs = 2;
  SpColumnExpr rhs = 3;
}

// sp-col-expr.ir:144
message SpColumnEqualTo {
  SrcPosition src = 1;
  SpColumnExpr lhs = 2;
  SpColumnExpr rhs = 3;
}

// sp-col-expr.ir:149
message SpColumnGeq {
  SrcPosition src = 1;
  SpColumnExpr lhs = 2;
  SpColumnExpr rhs = 3;
}

// sp-col-expr.ir:154
message SpColumnGt {
  SrcPosition src = 1;
  SpColumnExpr lhs = 2;
  SpColumnExpr rhs = 3;
}

// sp-col-expr.ir:159
message SpColumnLeq {
  SrcPosition src = 1;
  SpColumnExpr lhs = 2;
  SpColumnExpr rhs = 3;
}

// sp-col-expr.ir:164
message SpColumnLike {
  SrcPosition src = 1;
  SpColumnExpr col = 2;
  SpColumnExpr pattern = 3;
}

// sp-col-expr.ir:169
message SpColumnLt {
  SrcPosition src = 1;
  SpColumnExpr lhs = 2;
  SpColumnExpr rhs = 3;
}

// sp-col-expr.ir:174
message SpColumnMinus {
  SrcPosition src = 1;
  SpColumnExpr lhs = 2;
  SpColumnExpr rhs = 3;
}

// sp-col-expr.ir:179
message SpColumnMod {
  SrcPosition src = 1;
  SpColumnExpr lhs = 2;
  SpColumnExpr rhs = 3;
}

// sp-col-expr.ir:184
message SpColumnMultiply {
  SrcPosition src = 1;
  SpColumnExpr lhs = 2;
  SpColumnExpr rhs = 3;
}

// sp-col-expr.ir:189
message SpColumnNotEqual {
  SrcPosition src = 1;
  SpColumnExpr lhs = 2;
  SpColumnExpr rhs = 3;
}

// sp-col-expr.ir:194
message SpColumnOr {
  SrcPosition src = 1;
  SpColumnExpr lhs = 2;
  SpColumnExpr rhs = 3;
}

// sp-col-expr.ir:199
message SpColumnPlus {
  SrcPosition src = 1;
  SpColumnExpr lhs = 2;
  SpColumnExpr rhs = 3;
}

message SpDataframeExpr {
  oneof variant {
    SpCopyableDataframeExpr trait_sp_copyable_dataframe_expr = 1;
    SpDataframeReaderOptions trait_sp_dataframe_reader_options = 2;
    SpDataframeReaderSchema trait_sp_dataframe_reader_schema = 3;
    SpCopyInto sp_copy_into = 4;
    SpCreateDataframe sp_create_dataframe = 5;
    SpDataframeAgg sp_dataframe_agg = 6;
    SpDataframeCrossJoin sp_dataframe_cross_join = 7;
    SpDataframeCube sp_dataframe_cube = 8;
    SpDataframeDistinct sp_dataframe_distinct = 9;
    SpDataframeDropDuplicates sp_dataframe_drop_duplicates = 10;
    SpDataframeDrop_Columns sp_dataframe_drop__columns = 11;
    SpDataframeDrop_Strings sp_dataframe_drop__strings = 12;
    SpDataframeExcept sp_dataframe_except = 13;
    SpDataframeFilter sp_dataframe_filter = 14;
    SpDataframeFlatten_Column sp_dataframe_flatten__column = 15;
    SpDataframeFlatten_Column_String_Bool_Bool_String sp_dataframe_flatten__column__string__bool__bool__string = 16;
    SpDataframeIntersect sp_dataframe_intersect = 17;
    SpDataframeJoin_Dataframe_JoinExprs sp_dataframe_join__dataframe__join_exprs = 18;
    SpDataframeJoin_Dataframe_UsingColumns sp_dataframe_join__dataframe__using_columns = 19;
    SpDataframeJoin_TableFunction_List sp_dataframe_join__table_function__list = 20;
    SpDataframeJoin_TableFunction_Map sp_dataframe_join__table_function__map = 21;
    SpDataframeLimit sp_dataframe_limit = 22;
    SpDataframeNaDrop sp_dataframe_na_drop = 23;
    SpDataframeNaFill sp_dataframe_na_fill = 24;
    SpDataframeNaReplace sp_dataframe_na_replace = 25;
    SpDataframeNaturalJoin sp_dataframe_natural_join = 26;
    SpDataframeRef sp_dataframe_ref = 27;
    SpDataframeRename sp_dataframe_rename = 28;
    SpDataframeSample_Double sp_dataframe_sample__double = 29;
    SpDataframeSample_Long sp_dataframe_sample__long = 30;
    SpDataframeSelect_Columns sp_dataframe_select__columns = 31;
    SpDataframeSelect_Strings sp_dataframe_select__strings = 32;
    SpDataframeShow sp_dataframe_show = 33;
    SpDataframeSort sp_dataframe_sort = 34;
    SpDataframeStatsCrossTab sp_dataframe_stats_cross_tab = 35;
    SpDataframeStatsSampleBy sp_dataframe_stats_sample_by = 36;
    SpDataframeToDf sp_dataframe_to_df = 37;
    SpDataframeUnion sp_dataframe_union = 38;
    SpDataframeUnionAll sp_dataframe_union_all = 39;
    SpDataframeUnionAllByName sp_dataframe_union_all_by_name = 40;
    SpDataframeUnionByName sp_dataframe_union_by_name = 41;
    SpDataframeWhere sp_dataframe_where = 42;
    SpDataframeWithColumn sp_dataframe_with_column = 43;
    SpDataframeWithColumns sp_dataframe_with_columns = 44;
    SpFlatten_Column sp_flatten__column = 45;
    SpFlatten_Column_String_Bool_Bool_String sp_flatten__column__string__bool__bool__string = 46;
    SpGenerator sp_generator = 47;
    SpRange sp_range = 48;
    SpReadAvro sp_read_avro = 49;
    SpReadCsv sp_read_csv = 50;
    SpReadJson sp_read_json = 51;
    SpReadOrc sp_read_orc = 52;
    SpReadParquet sp_read_parquet = 53;
    SpReadTable sp_read_table = 54;
    SpReadXml sp_read_xml = 55;
    SpSql sp_sql = 56;
    SpStoredProcedure sp_stored_procedure = 57;
    SpTable sp_table = 58;
    SpTableFunction sp_table_function = 59;
  }
}

// sp-df-expr.ir:5
message SpDataframeRef {
  SrcPosition src = 1;
  VarId id = 2;
}

// sp-df-expr.ir:9
message SpDataframeShow {
  SrcPosition src = 1;
  VarId id = 2;
}

// sp-df-expr.ir:17
message SpCreateDataframe {
  SrcPosition src = 1;
  repeated SpRow data = 2;
  SpStructType schema = 3;
  bool variadic = 4;
}

// sp-df-expr.ir:23
message SpFlatten_Column_String_Bool_Bool_String {
  SrcPosition src = 1;
  SpColumnExpr input = 2;
  string path = 3;
  bool outer = 4;
  bool recursive = 5;
  SpFlattenMode mode = 6;
}

// sp-df-expr.ir:33
message SpFlatten_Column {
  SrcPosition src = 1;
  SpColumnExpr input = 2;
}

// sp-df-expr.ir:37
message SpGenerator {
  SrcPosition src = 1;
  int64 row_count = 2;
  repeated SpColumnExpr columns = 3;
  bool variadic = 4;
}

// sp-df-expr.ir:43
message SpRange {
  SrcPosition src = 1;
  int64 start = 2;
  int64 end = 3;
  int64 step = 4;
}

// sp-df-expr.ir:49
message SpSql {
  SrcPosition src = 1;
  string query = 2;
}

// sp-df-expr.ir:53
message SpStoredProcedure {
  SrcPosition src = 1;
  string sp_name = 2;
  repeated SpVariant args = 3;
  bool variadic = 4;
}

// sp-df-expr.ir:59
message SpTable {
  SrcPosition src = 1;
  string database = 2;
  string schema = 3;
  string table = 4;
}

// sp-df-expr.ir:65
message SpTableFunction {
  SrcPosition src = 1;
  string fn = 2;
  repeated Tuple_String_SpColumnExpr args = 3;
  bool variadic = 4;
}

// sp-df-expr.ir:71
message SpDataframeToDf {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  string col_names = 3;
  bool variadic = 4;
}

// sp-df-expr.ir:81
message SpDataframeNaDrop {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  int64 min_non_nulls_per_row = 3;
  repeated string cols = 4;
}

// sp-df-expr.ir:87
message SpDataframeNaFill {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  repeated Tuple_String_SpVariant value_map = 3;
}

// sp-df-expr.ir:92
message SpDataframeNaReplace {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  string col_name = 3;
  repeated Tuple_SpVariant_SpVariant replacement = 4;
}

// sp-df-expr.ir:102
message SpDataframeAgg {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  repeated SpColumnExpr exprs = 3;
  bool variadic = 4;
}

// sp-df-expr.ir:108
message SpDataframeApply {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  string col_name = 3;
}

// sp-df-expr.ir:113
message SpDataframeCol {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  string col_name = 3;
}

// sp-df-expr.ir:118
message SpDataframeCrossJoin {
  SrcPosition src = 1;
  SpDataframeExpr lhs = 2;
  SpDataframeExpr rhs = 3;
}

// sp-df-expr.ir:123
message SpDataframeCube {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  repeated SpColumnExpr cols = 3;
  bool variadic = 4;
}

// sp-df-expr.ir:129
message SpDataframeDistinct {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
}

// sp-df-expr.ir:133
message SpDataframeDrop_Columns {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  repeated SpColumnExpr cols = 3;
  bool variadic = 4;
}

// sp-df-expr.ir:139
message SpDataframeDrop_Strings {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  repeated string cols = 3;
  bool variadic = 4;
}

// sp-df-expr.ir:145
message SpDataframeDropDuplicates {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  repeated string cols = 3;
}

// sp-df-expr.ir:150
message SpDataframeExcept {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  SpDataframeExpr other = 3;
}

// sp-df-expr.ir:155
message SpDataframeFilter {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  SpColumnExpr condition = 3;
}

// sp-df-expr.ir:160
message SpDataframeFlatten_Column_String_Bool_Bool_String {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  SpColumnExpr input = 3;
  string path = 4;
  bool outer = 5;
  bool recursive = 6;
  SpFlattenMode mode = 7;
}

// sp-df-expr.ir:169
message SpDataframeFlatten_Column {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  SpColumnExpr input = 3;
}

// sp-df-expr.ir:174
message SpDataframeGroupBy_Columns {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  repeated SpColumnExpr cols = 3;
  bool variadic = 4;
}

// sp-df-expr.ir:180
message SpDataframeGroupBy_Strings {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  repeated string cols = 3;
  bool variadic = 4;
}

// sp-df-expr.ir:186
message SpDataframeGroupBy {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
}

// sp-df-expr.ir:190
message SpDataframeIntersect {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  SpDataframeExpr other = 3;
}

// sp-df-expr.ir:195
message SpDataframeJoin_TableFunction_Map {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  SpTableFunction func = 3;
  repeated Tuple_String_SpColumnExpr args = 4;
  List_SpColumnExpr partition_by = 5;
  List_SpColumnExpr order_by = 6;
}

// sp-df-expr.ir:203
message SpDataframeJoin_TableFunction_List {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  SpTableFunction func = 3;
  repeated SpColumnExpr args = 4;
  List_SpColumnExpr partition_by = 5;
  List_SpColumnExpr order_by = 6;
  bool variadic = 7;
}

// sp-df-expr.ir:212
message SpDataframeJoin_Dataframe_JoinExprs {
  SrcPosition src = 1;
  SpDataframeExpr lhs = 2;
  SpDataframeExpr rhs = 3;
  SpDataframeExpr join_exprs = 4;
  SpJoinType join_type = 5;
}

// sp-df-expr.ir:219
message SpDataframeJoin_Dataframe_UsingColumns {
  SrcPosition src = 1;
  SpDataframeExpr lhs = 2;
  SpDataframeExpr rhs = 3;
  List_String using_columns = 4;
  SpJoinType join_type = 5;
  bool variadic = 6;
}

// sp-df-expr.ir:227
message SpDataframeLimit {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  int64 n = 3;
}

// sp-df-expr.ir:232
message SpDataframeNaturalJoin {
  SrcPosition src = 1;
  SpDataframeExpr lhs = 2;
  SpDataframeExpr rhs = 3;
  SpJoinType join_type = 4;
}

// sp-df-expr.ir:238
message SpDataframePivot_Column {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  SpColumnExpr pivot_column = 3;
  repeated SpVariant values = 4;
}

// sp-df-expr.ir:244
message SpDataframePivot_String {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  string pivot_column = 3;
  repeated SpVariant values = 4;
}

// sp-df-expr.ir:250
message SpDataframeRename {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  string new_name = 3;
  SpColumnExpr col = 4;
}

// sp-df-expr.ir:256
message SpDataframeRollup_Columns {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  repeated SpColumnExpr cols = 3;
  bool variadic = 4;
}

// sp-df-expr.ir:262
message SpDataframeRollup_Strings {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  repeated string cols = 3;
  bool variadic = 4;
}

// sp-df-expr.ir:268
message SpDataframeSample_Double {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  uint64 probability_fraction = 3;
}

// sp-df-expr.ir:273
message SpDataframeSample_Long {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  int64 num = 3;
}

// sp-df-expr.ir:278
message SpDataframeSelect_Columns {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  repeated SpColumnExpr cols = 3;
  bool variadic = 4;
}

// sp-df-expr.ir:284
message SpDataframeSelect_Strings {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  repeated string cols = 3;
  bool variadic = 4;
}

// sp-df-expr.ir:290
message SpDataframeSort {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  repeated SpColumnExpr cols = 3;
  bool variadic = 4;
}

// sp-df-expr.ir:296
message SpDataframeUnion {
  SrcPosition src = 1;
  SpDataframeExpr lhs = 2;
  SpDataframeExpr rhs = 3;
}

// sp-df-expr.ir:301
message SpDataframeUnionAll {
  SrcPosition src = 1;
  SpDataframeExpr lhs = 2;
  SpDataframeExpr rhs = 3;
}

// sp-df-expr.ir:306
message SpDataframeUnionAllByName {
  SrcPosition src = 1;
  SpDataframeExpr lhs = 2;
  SpDataframeExpr rhs = 3;
}

// sp-df-expr.ir:311
message SpDataframeUnionByName {
  SrcPosition src = 1;
  SpDataframeExpr lhs = 2;
  SpDataframeExpr rhs = 3;
}

// sp-df-expr.ir:316
message SpDataframeWhere {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  SpColumnExpr condition = 3;
}

// sp-df-expr.ir:321
message SpDataframeWithColumn {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  string col_name = 3;
  SpColumnExpr col = 4;
}

// sp-df-expr.ir:327
message SpDataframeWithColumns {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  repeated string col_names = 3;
  repeated SpColumnExpr values = 4;
}

// sp-df-expr.ir:333
message SpDataframeGroupByGroupingSets {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  repeated SpGroupingSets grouping_sets = 3;
  bool variadic = 4;
}

message SpCopyableDataframeExpr {
  oneof variant {
    SpDataframeReaderOptions trait_sp_dataframe_reader_options = 1;
    SpDataframeReaderSchema trait_sp_dataframe_reader_schema = 2;
    SpCopyInto sp_copy_into = 3;
    SpReadAvro sp_read_avro = 4;
    SpReadCsv sp_read_csv = 5;
    SpReadJson sp_read_json = 6;
    SpReadOrc sp_read_orc = 7;
    SpReadParquet sp_read_parquet = 8;
    SpReadTable sp_read_table = 9;
    SpReadXml sp_read_xml = 10;
  }
}

message SpDataframeReaderOptions {
  oneof variant {
    bool dummy = 1;
  }
}

message SpDataframeReaderSchema {
  oneof variant {
    bool dummy = 1;
  }
}

// sp-df-io.ir:16
message SpReadAvro {
  SrcPosition src = 1;
  string path = 2;
}

// sp-df-io.ir:20
message SpReadCsv {
  SrcPosition src = 1;
  string path = 2;
}

// sp-df-io.ir:24
message SpReadJson {
  SrcPosition src = 1;
  string path = 2;
}

// sp-df-io.ir:28
message SpReadOrc {
  SrcPosition src = 1;
  string path = 2;
}

// sp-df-io.ir:32
message SpReadParquet {
  SrcPosition src = 1;
  string path = 2;
}

// sp-df-io.ir:36
message SpReadTable {
  SrcPosition src = 1;
  string name = 2;
}

// sp-df-io.ir:40
message SpReadXml {
  SrcPosition src = 1;
  string path = 2;
}

// sp-df-io.ir:44
message SpCopyInto {
  SrcPosition src = 1;
  string table_name = 2;
  List_String target_column_names = 3;
  List_SpColumnExpr transformations = 4;
  Map_String_SpVariant options = 5;
}

message SpDataframeWriter {
  oneof variant {
    SpDataframeWriterOptions trait_sp_dataframe_writer_options = 1;
    SpDataframeWriterSaveMode trait_sp_dataframe_writer_save_mode = 2;
    SpWriteCsv sp_write_csv = 3;
    SpWriteJson sp_write_json = 4;
    SpWriteParquet sp_write_parquet = 5;
    SpWriteTable sp_write_table = 6;
  }
}

message SpDataframeWriterSaveMode {
  oneof variant {
    bool dummy = 1;
  }
}

message SpDataframeWriterOptions {
  oneof variant {
    bool dummy = 1;
  }
}

// sp-df-io.ir:69
message SpWriteCsv {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  string path = 3;
}

// sp-df-io.ir:74
message SpWriteJson {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  string path = 3;
}

// sp-df-io.ir:79
message SpWriteParquet {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  string path = 3;
}

// sp-df-io.ir:84
message SpWriteTable {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  Tuple_String_String database_and_schema = 3;
  string table = 4;
}

// sp-df-stats.ir:3
message SpDataframeStatsApproxQuantile {
  SpDataframeExpr df = 1;
}

// sp-df-stats.ir:5
message SpDataframeStatsCorr {
  SpDataframeExpr df = 1;
}

// sp-df-stats.ir:7
message SpDataframeStatsCov {
  SpDataframeExpr df = 1;
}

// sp-df-stats.ir:9
message SpDataframeStatsCrossTab {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  string col1 = 3;
  string col2 = 4;
}

// sp-df-stats.ir:15
message SpDataframeStatsSampleBy {
  SrcPosition src = 1;
  SpDataframeExpr df = 2;
  SpColumnExpr col = 3;
  repeated Tuple_SpVariant_SpVariant_Double fractions = 4;
}

message SpRelationalGroupedDataframeExpr {
  oneof variant {
    SpDataframeGroupBy sp_dataframe_group_by = 1;
    SpDataframeGroupByGroupingSets sp_dataframe_group_by_grouping_sets = 2;
    SpDataframeGroupBy_Columns sp_dataframe_group_by__columns = 3;
    SpDataframeGroupBy_Strings sp_dataframe_group_by__strings = 4;
    SpDataframePivot_Column sp_dataframe_pivot__column = 5;
    SpDataframePivot_String sp_dataframe_pivot__string = 6;
    SpDataframeRollup_Columns sp_dataframe_rollup__columns = 7;
    SpDataframeRollup_Strings sp_dataframe_rollup__strings = 8;
    SpRelationalGroupedDataframeAgg_Columns sp_relational_grouped_dataframe_agg__columns = 9;
    SpRelationalGroupedDataframeAgg_Map sp_relational_grouped_dataframe_agg__map = 10;
    SpRelationalGroupedDataframeAnyValue sp_relational_grouped_dataframe_any_value = 11;
    SpRelationalGroupedDataframeAvg sp_relational_grouped_dataframe_avg = 12;
    SpRelationalGroupedDataframeBuiltin sp_relational_grouped_dataframe_builtin = 13;
    SpRelationalGroupedDataframeCount sp_relational_grouped_dataframe_count = 14;
    SpRelationalGroupedDataframeMax sp_relational_grouped_dataframe_max = 15;
    SpRelationalGroupedDataframeMean sp_relational_grouped_dataframe_mean = 16;
    SpRelationalGroupedDataframeMedian sp_relational_grouped_dataframe_median = 17;
    SpRelationalGroupedDataframeMin sp_relational_grouped_dataframe_min = 18;
    SpRelationalGroupedDataframeSum sp_relational_grouped_dataframe_sum = 19;
  }
}

// sp-group.ir:3
message SpRelationalGroupedDataframeAgg_Map {
  SrcPosition src = 1;
  SpRelationalGroupedDataframeExpr df = 2;
  repeated SpColumnExpr exprs = 3;
  bool exprs_is_map = 4;
  bool variadic = 5;
}

// sp-group.ir:10
message SpRelationalGroupedDataframeAgg_Columns {
  SrcPosition src = 1;
  SpRelationalGroupedDataframeExpr df = 2;
  repeated SpColumnExpr exprs = 3;
  bool variadic = 4;
}

// sp-group.ir:16
message SpRelationalGroupedDataframeAnyValue {
  SrcPosition src = 1;
  SpRelationalGroupedDataframeExpr df = 2;
  repeated SpColumnExpr cols = 3;
}

// sp-group.ir:21
message SpRelationalGroupedDataframeAvg {
  SrcPosition src = 1;
  SpRelationalGroupedDataframeExpr df = 2;
  repeated SpColumnExpr cols = 3;
}

// sp-group.ir:26
message SpRelationalGroupedDataframeBuiltin {
  SrcPosition src = 1;
  SpRelationalGroupedDataframeExpr df = 2;
  string agg_name = 3;
  repeated SpColumnExpr cols = 4;
}

// sp-group.ir:32
message SpRelationalGroupedDataframeCount {
  SrcPosition src = 1;
  SpRelationalGroupedDataframeExpr df = 2;
}

// sp-group.ir:36
message SpRelationalGroupedDataframeMax {
  SrcPosition src = 1;
  SpRelationalGroupedDataframeExpr df = 2;
  repeated SpColumnExpr cols = 3;
}

// sp-group.ir:41
message SpRelationalGroupedDataframeMean {
  SrcPosition src = 1;
  SpRelationalGroupedDataframeExpr df = 2;
  repeated SpColumnExpr cols = 3;
}

// sp-group.ir:46
message SpRelationalGroupedDataframeMedian {
  SrcPosition src = 1;
  SpRelationalGroupedDataframeExpr df = 2;
  repeated SpColumnExpr cols = 3;
}

// sp-group.ir:51
message SpRelationalGroupedDataframeMin {
  SrcPosition src = 1;
  SpRelationalGroupedDataframeExpr df = 2;
  repeated SpColumnExpr cols = 3;
}

// sp-group.ir:56
message SpRelationalGroupedDataframeSum {
  SrcPosition src = 1;
  SpRelationalGroupedDataframeExpr df = 2;
  repeated SpColumnExpr cols = 3;
}

// sp-type.ir:1
message SpDataframeType {
  repeated string columns = 1;
  repeated Type tys = 2;
}

// sp-type.ir:6
message SpGroupedDataframeType {
  repeated string outer_columns = 1;
  repeated string inner_columns = 2;
}

// sp-type.ir:11
message SpWindowType {
}

// sp-type.ir:13
message SpColExprType {
  Type typ = 1;
}

message HasSrcPosition {
  oneof variant {
    BinOp trait_bin_op = 1;
    BuiltInFnExpr trait_built_in_fn_expr = 2;
    Const trait_const = 3;
    Expr trait_expr = 4;
    SpColumnExpr trait_sp_column_expr = 5;
    SpCopyableDataframeExpr trait_sp_copyable_dataframe_expr = 6;
    SpDataframeExpr trait_sp_dataframe_expr = 7;
    SpDataframeReaderOptions trait_sp_dataframe_reader_options = 8;
    SpDataframeReaderSchema trait_sp_dataframe_reader_schema = 9;
    SpDataframeWriter trait_sp_dataframe_writer = 10;
    SpDataframeWriterOptions trait_sp_dataframe_writer_options = 11;
    SpDataframeWriterSaveMode trait_sp_dataframe_writer_save_mode = 12;
    SpRelationalGroupedDataframeExpr trait_sp_relational_grouped_dataframe_expr = 13;
    StringFn trait_string_fn = 14;
    UnaryOp trait_unary_op = 15;
    Add add = 16;
    And and = 17;
    ApplyExpr apply_expr = 18;
    BigDecimalVal big_decimal_val = 19;
    BigIntVal big_int_val = 20;
    BinaryVal binary_val = 21;
    BoolVal bool_val = 22;
    CastExpr cast_expr = 23;
    DateVal date_val = 24;
    Div div = 25;
    Eq eq = 26;
    Float64Val float64_val = 27;
    FnVal fn_val = 28;
    Geq geq = 29;
    Gt gt = 30;
    IfExpr if_expr = 31;
    Int32Val int32_val = 32;
    Int64Val int64_val = 33;
    Leq leq = 34;
    ListVal list_val = 35;
    Lt lt = 36;
    Mul mul = 37;
    Neq neq = 38;
    NoneVal none_val = 39;
    Not not = 40;
    NullVal null_val = 41;
    Or or = 42;
    PdDataframe pd_dataframe = 43;
    PdDataframeGetItem pd_dataframe_get_item = 44;
    PdDataframeILoc pd_dataframe_i_loc = 45;
    PdDataframeLoc pd_dataframe_loc = 46;
    PdDataframeSetItem pd_dataframe_set_item = 47;
    PdDropNa pd_drop_na = 48;
    PdRepr pd_repr = 49;
    PyFn py_fn = 50;
    RangeVal range_val = 51;
    Ref ref = 52;
    SeqMapVal seq_map_val = 53;
    SnowflakeSproc snowflake_sproc = 54;
    SnowflakeUdf snowflake_udf = 55;
    SomeVal some_val = 56;
    SpColumn sp_column = 57;
    SpColumnAlias sp_column_alias = 58;
    SpColumnAnd sp_column_and = 59;
    SpColumnApply_Int sp_column_apply__int = 60;
    SpColumnApply_String sp_column_apply__string = 61;
    SpColumnAsc sp_column_asc = 62;
    SpColumnBetween sp_column_between = 63;
    SpColumnBitAnd sp_column_bit_and = 64;
    SpColumnBitOr sp_column_bit_or = 65;
    SpColumnBitXor sp_column_bit_xor = 66;
    SpColumnCast sp_column_cast = 67;
    SpColumnCollate sp_column_collate = 68;
    SpColumnDesc sp_column_desc = 69;
    SpColumnDivide sp_column_divide = 70;
    SpColumnEqualNan sp_column_equal_nan = 71;
    SpColumnEqualNull sp_column_equal_null = 72;
    SpColumnEqualTo sp_column_equal_to = 73;
    SpColumnGeq sp_column_geq = 74;
    SpColumnGt sp_column_gt = 75;
    SpColumnIn_Dataframe sp_column_in__dataframe = 76;
    SpColumnIn_Seq sp_column_in__seq = 77;
    SpColumnIsNotNull sp_column_is_not_null = 78;
    SpColumnIsNull sp_column_is_null = 79;
    SpColumnLeq sp_column_leq = 80;
    SpColumnLike sp_column_like = 81;
    SpColumnLt sp_column_lt = 82;
    SpColumnMinus sp_column_minus = 83;
    SpColumnMod sp_column_mod = 84;
    SpColumnMultiply sp_column_multiply = 85;
    SpColumnName sp_column_name = 86;
    SpColumnNotEqual sp_column_not_equal = 87;
    SpColumnOr sp_column_or = 88;
    SpColumnOver sp_column_over = 89;
    SpColumnPlus sp_column_plus = 90;
    SpColumnRef sp_column_ref = 91;
    SpColumnRegexp sp_column_regexp = 92;
    SpColumnSqlExpr sp_column_sql_expr = 93;
    SpColumnWithinGroup sp_column_within_group = 94;
    SpCopyInto sp_copy_into = 95;
    SpCreateDataframe sp_create_dataframe = 96;
    SpDataframeAgg sp_dataframe_agg = 97;
    SpDataframeApply sp_dataframe_apply = 98;
    SpDataframeCol sp_dataframe_col = 99;
    SpDataframeCrossJoin sp_dataframe_cross_join = 100;
    SpDataframeCube sp_dataframe_cube = 101;
    SpDataframeDistinct sp_dataframe_distinct = 102;
    SpDataframeDropDuplicates sp_dataframe_drop_duplicates = 103;
    SpDataframeDrop_Columns sp_dataframe_drop__columns = 104;
    SpDataframeDrop_Strings sp_dataframe_drop__strings = 105;
    SpDataframeExcept sp_dataframe_except = 106;
    SpDataframeFilter sp_dataframe_filter = 107;
    SpDataframeFlatten_Column sp_dataframe_flatten__column = 108;
    SpDataframeFlatten_Column_String_Bool_Bool_String sp_dataframe_flatten__column__string__bool__bool__string = 109;
    SpDataframeGroupBy sp_dataframe_group_by = 110;
    SpDataframeGroupByGroupingSets sp_dataframe_group_by_grouping_sets = 111;
    SpDataframeGroupBy_Columns sp_dataframe_group_by__columns = 112;
    SpDataframeGroupBy_Strings sp_dataframe_group_by__strings = 113;
    SpDataframeIntersect sp_dataframe_intersect = 114;
    SpDataframeJoin_Dataframe_JoinExprs sp_dataframe_join__dataframe__join_exprs = 115;
    SpDataframeJoin_Dataframe_UsingColumns sp_dataframe_join__dataframe__using_columns = 116;
    SpDataframeJoin_TableFunction_List sp_dataframe_join__table_function__list = 117;
    SpDataframeJoin_TableFunction_Map sp_dataframe_join__table_function__map = 118;
    SpDataframeLimit sp_dataframe_limit = 119;
    SpDataframeNaDrop sp_dataframe_na_drop = 120;
    SpDataframeNaFill sp_dataframe_na_fill = 121;
    SpDataframeNaReplace sp_dataframe_na_replace = 122;
    SpDataframeNaturalJoin sp_dataframe_natural_join = 123;
    SpDataframePivot_Column sp_dataframe_pivot__column = 124;
    SpDataframePivot_String sp_dataframe_pivot__string = 125;
    SpDataframeRef sp_dataframe_ref = 126;
    SpDataframeRename sp_dataframe_rename = 127;
    SpDataframeRollup_Columns sp_dataframe_rollup__columns = 128;
    SpDataframeRollup_Strings sp_dataframe_rollup__strings = 129;
    SpDataframeSample_Double sp_dataframe_sample__double = 130;
    SpDataframeSample_Long sp_dataframe_sample__long = 131;
    SpDataframeSelect_Columns sp_dataframe_select__columns = 132;
    SpDataframeSelect_Strings sp_dataframe_select__strings = 133;
    SpDataframeShow sp_dataframe_show = 134;
    SpDataframeSort sp_dataframe_sort = 135;
    SpDataframeStatsCrossTab sp_dataframe_stats_cross_tab = 136;
    SpDataframeStatsSampleBy sp_dataframe_stats_sample_by = 137;
    SpDataframeToDf sp_dataframe_to_df = 138;
    SpDataframeUnion sp_dataframe_union = 139;
    SpDataframeUnionAll sp_dataframe_union_all = 140;
    SpDataframeUnionAllByName sp_dataframe_union_all_by_name = 141;
    SpDataframeUnionByName sp_dataframe_union_by_name = 142;
    SpDataframeWhere sp_dataframe_where = 143;
    SpDataframeWithColumn sp_dataframe_with_column = 144;
    SpDataframeWithColumns sp_dataframe_with_columns = 145;
    SpFlatten_Column sp_flatten__column = 146;
    SpFlatten_Column_String_Bool_Bool_String sp_flatten__column__string__bool__bool__string = 147;
    SpGenerator sp_generator = 148;
    SpRange sp_range = 149;
    SpReadAvro sp_read_avro = 150;
    SpReadCsv sp_read_csv = 151;
    SpReadJson sp_read_json = 152;
    SpReadOrc sp_read_orc = 153;
    SpReadParquet sp_read_parquet = 154;
    SpReadTable sp_read_table = 155;
    SpReadXml sp_read_xml = 156;
    SpRelationalGroupedDataframeAgg_Columns sp_relational_grouped_dataframe_agg__columns = 157;
    SpRelationalGroupedDataframeAgg_Map sp_relational_grouped_dataframe_agg__map = 158;
    SpRelationalGroupedDataframeAnyValue sp_relational_grouped_dataframe_any_value = 159;
    SpRelationalGroupedDataframeAvg sp_relational_grouped_dataframe_avg = 160;
    SpRelationalGroupedDataframeBuiltin sp_relational_grouped_dataframe_builtin = 161;
    SpRelationalGroupedDataframeCount sp_relational_grouped_dataframe_count = 162;
    SpRelationalGroupedDataframeMax sp_relational_grouped_dataframe_max = 163;
    SpRelationalGroupedDataframeMean sp_relational_grouped_dataframe_mean = 164;
    SpRelationalGroupedDataframeMedian sp_relational_grouped_dataframe_median = 165;
    SpRelationalGroupedDataframeMin sp_relational_grouped_dataframe_min = 166;
    SpRelationalGroupedDataframeSum sp_relational_grouped_dataframe_sum = 167;
    SpSql sp_sql = 168;
    SpStoredProcedure sp_stored_procedure = 169;
    SpTable sp_table = 170;
    SpTableFunction sp_table_function = 171;
    SpWriteCsv sp_write_csv = 172;
    SpWriteJson sp_write_json = 173;
    SpWriteParquet sp_write_parquet = 174;
    SpWriteTable sp_write_table = 175;
    StringConcat string_concat = 176;
    StringEndsWith string_ends_with = 177;
    StringLen string_len = 178;
    StringStartsWith string_starts_with = 179;
    StringToLower string_to_lower = 180;
    StringToUpper string_to_upper = 181;
    StringVal string_val = 182;
    Sub sub = 183;
    TimestampVal timestamp_val = 184;
    TupleVal tuple_val = 185;
  }
}

message Stmt {
  oneof variant {
    Assign assign = 1;
    Eval eval = 2;
  }
}

// stmt.ir:3
message Assign {
  int64 uid = 1;
  VarId var_id = 2;
  Expr expr = 3;
  string symbol = 4;
}

// stmt.ir:11
message Eval {
  int64 uid = 1;
  VarId var_id = 2;
}

message Type {
  oneof variant {
    NumericType trait_numeric_type = 1;
    ScalarType trait_scalar_type = 2;
    AnyType any_type = 3;
    BoolType bool_type = 4;
    Float64Type float64_type = 5;
    FnType fn_type = 6;
    Int32Type int32_type = 7;
    Int64Type int64_type = 8;
    ListType list_type = 9;
    MapType map_type = 10;
    NothingType nothing_type = 11;
    NumberType number_type = 12;
    OptionType option_type = 13;
    PdReprType pd_repr_type = 14;
    SpColExprType sp_col_expr_type = 15;
    SpDataframeType sp_dataframe_type = 16;
    SpGroupedDataframeType sp_grouped_dataframe_type = 17;
    SpWindowType sp_window_type = 18;
    StringType string_type = 19;
    TupleType tuple_type = 20;
    TyVar ty_var = 21;
    UnitType unit_type = 22;
    UnknownType unknown_type = 23;
  }
}

// type.ir:3
message UnknownType {
}

// type.ir:5
message AnyType {
}

message ScalarType {
  oneof variant {
    NumericType trait_numeric_type = 1;
    BoolType bool_type = 2;
    Float64Type float64_type = 3;
    Int32Type int32_type = 4;
    Int64Type int64_type = 5;
    NumberType number_type = 6;
    UnitType unit_type = 7;
  }
}

message NumericType {
  oneof variant {
    Float64Type float64_type = 1;
    Int32Type int32_type = 2;
    Int64Type int64_type = 3;
    NumberType number_type = 4;
  }
}

// type.ir:11
message NumberType {
}

// type.ir:13
message NothingType {
}

// type.ir:15
message UnitType {
}

// type.ir:17
message BoolType {
}

// type.ir:19
message Int32Type {
}

// type.ir:21
message Int64Type {
}

// type.ir:23
message Float64Type {
}

// type.ir:25
message StringType {
}

// type.ir:27
message PdReprType {
}

// type.ir:34
message FnType {
  repeated Type params = 1;
  Type ret = 2;
}

// type.ir:39
message OptionType {
  Type typ = 1;
}

// type.ir:43
message TupleType {
  repeated Type tys = 1;
}

// type.ir:47
message ListType {
  Type typ = 1;
}

// type.ir:51
message MapType {
  Type k = 1;
  Type v = 2;
}

// type.ir:56
message TyVar {
  string id = 1;
}