[coverage:report]
skip_covered = False
show_missing = True
[coverage:run]
branch = true
parallel = true
[coverage:paths]
source = src/snowflake/snowpark
         */.tox/*/lib/python*/site-packages/snowflake/snowpark
         */.tox\*\Lib\site-packages\snowflake\snowpark
         */src/snowflake/snowpark
         *\src\snowflake\snowpark
         */fips_env/lib/python*/site-packages/snowflake/snowpark

[tox]
minversion = 3.7
envlist = fix_lint,
          py38,
          coverage
skip_missing_interpreters = true

[testenv]
description = run the tests with pytest under {basepython}
deps =
    pip >= 19.3.1
    .[pandas]
    .[development]
install_command = python -m pip install -U {opts} {packages}
setenv =
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}/.coverage.{envname}}
    ci: SNOWFLAKE_PYTEST_OPTS = -vvv
    # Set test type, either notset, unit, integ, or both
    unit-integ: SNOWFLAKE_TEST_TYPE = (unit or integ)
    !unit-!integ: SNOWFLAKE_TEST_TYPE = (unit or integ)
    unit: SNOWFLAKE_TEST_TYPE = unit
    integ: SNOWFLAKE_TEST_TYPE = integ
    parallel: SNOWFLAKE_PYTEST_OPTS = {env:SNOWFLAKE_PYTEST_OPTS:} -n auto
    # Add common parts into pytest command
    SNOWFLAKE_PYTEST_COV_LOCATION = {env:JUNIT_REPORT_DIR:{toxworkdir}}/junit.{envname}-{env:cloud_provider:dev}.xml
    SNOWFLAKE_PYTEST_COV_CMD = --cov snowflake.snowpark --junitxml {env:SNOWFLAKE_PYTEST_COV_LOCATION} --cov-report=
    SNOWFLAKE_PYTEST_CMD = pytest {env:SNOWFLAKE_PYTEST_OPTS:} {env:SNOWFLAKE_PYTEST_COV_CMD}
passenv =
    AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY
    SF_PROJECT_ROOT
    cloud_provider
    SF_REGRESS_LOGS
    ; Github Actions provided environmental variables
    GITHUB_ACTIONS
    JENKINS_HOME
    ; This is required on windows. Otherwise pwd module won't be imported successfully,
    ; see https://github.com/tox-dev/tox/issues/1455
    USERNAME
    CLIENT_LOG_DIR_PATH_DOCKER
    PYTEST_ADDOPTS
commands =
    !udf: {env:SNOWFLAKE_PYTEST_CMD} -m "{env:SNOWFLAKE_TEST_TYPE} and not udf" {posargs:} tests
    udf: {env:SNOWFLAKE_PYTEST_CMD} -m "{env:SNOWFLAKE_TEST_TYPE} or udf" {posargs:} tests

[testenv:coverage]
description = [run locally after tests]: combine coverage data and create report
;              generates a diff coverage against origin/master (can be changed by setting DIFF_AGAINST env var)
deps = {[testenv]deps}
       coverage
;       diff_cover
skip_install = True
passenv = DIFF_AGAINST
setenv = COVERAGE_FILE={toxworkdir}/.coverage
commands = coverage combine
           coverage report -m
           coverage xml -o {env:COV_REPORT_DIR:{toxworkdir}}/coverage.xml
           coverage html -d {env:COV_REPORT_DIR:{toxworkdir}}/htmlcov
depends = py38

[testenv:flake8]
description = check code style with flake8
skip_install = true
deps = flake8
commands = flake8 {posargs}

[testenv:fix_lint]
description = format the code base to adhere to our styles, and complain about what we cannot do automatically
basepython = python3.8
passenv =
    PROGRAMDATA
deps =
    {[testenv]deps}
    pre-commit >= 2.9.0
skip_install = True
commands = pre-commit run
           python -c 'import pathlib; print("hint: run \{\} install to add checks as pre-commit hook".format(pathlib.Path(r"{envdir}") / "bin" / "pre-commit"))'

[testenv:dev]
description = create dev environment
extras = pandas, development, sso
usedevelop = True
commands = python -m pip list --format=columns
           python -c "print(r'{envpython}')"

[pytest]
log_cli = True
log_cli_level = INFO
markers =
    # Optional dependency groups markers
    udf: Snowpark UDF tests
    # Test type markers
    integ: integration tests
    unit: unit tests
    # Other markers
    timeout: tests that need a timeout time
addopts = --doctest-modules
