## TEST CASE

df = Table("test_table", session)

df.delete()

df = Table("test_table", session)

df.delete(block=False)

df = Table("test_table", session)

df.delete(block=False, statement_params={"SF_PARTNER": "FAKE_PARTNER"})

df = Table("test_table", session)

df.delete(df["num"] == 1)

df = Table("test_table", session)

source_df = session.create_dataframe([2, 3, 4, 5], schema=["a"])

df.delete(["num"] == source_df.a, source_df)

## EXPECTED UNPARSER OUTPUT

df = Table("test_table", session)

df.delete()

df = Table("test_table", session)

df.delete(block=False)

df = Table("test_table", session)

df.delete(statement_params={"SF_PARTNER": "FAKE_PARTNER"}, block=False)

df = Table("test_table", session)

df.delete(condition=df["num"] == 1)

df = Table("test_table", session)

source_df = session.create_dataframe([2, 3, 4, 5], schema=["a"])

df.delete(condition=source_df["a"] == ["num"], source=source_df)

## EXPECTED ENCODED AST

CkMKQQozggwwEg4KDAoKdGVzdF90YWJsZRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoiAhABEgQKAmRmGAEiAggBCjEKLwoligwiCAEaAggBKhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXBIAGAIiAggCCggSBggDEgIIAhABGhESDwoNCgVmaW5hbBADGAkgEiIEEAEYFw==
CkMKQQozggwwEg4KDAoKdGVzdF90YWJsZRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4iAhABEgQKAmRmGAQiAggECi8KLQojigwgGgIIBCoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGASABgFIgIIBQoIEgYIBhICCAUQARoREg8KDQoFZmluYWwQAxgJIBIiBBABGBc=
CkMKQQozggwwEg4KDAoKdGVzdF90YWJsZRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGIiAhABEgQKAmRmGAciAggHCksKSQo/igw8GgIIByoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGQyGgoKU0ZfUEFSVE5FUhIMRkFLRV9QQVJUTkVSEgAYCCICCAgKCBIGCAkSAggIEAEaERIPCg0KBWZpbmFsEAMYCSASIgQQARgX
CkMKQQozggwwEg4KDAoKdGVzdF90YWJsZRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGYiAhABEgQKAmRmGAoiAggKCqcBCqQBCpkBigyVAQgBEnH6AW4KLcoGKgoDbnVtEgeCAgQKAggKGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBABGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBoCCAoqGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShoEgAYCyICCAsKCBIGCAwSAggLEAEaERIPCg0KBWZpbmFsEAMYCSASIgQQARgX
CkMKQQozggwwEg4KDAoKdGVzdF90YWJsZRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGoiAhABEgQKAmRmGA0iAggNCtIBCs8BCrkB+gW1AQqPAQqMAQohwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBACCiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEAMKIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwQBAohwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBAFEgUKAwoBYRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSCwoJc291cmNlX2RmGA4iAggOCtQBCtEBCsYBigzCAQgBEpQB+gGQAQorygYoCgFhEgeCAgQKAggOGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobhJF0gJCChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobhIk+gwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobhIDbnVtGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobhoCCA0iB4ICBAoCCA4qGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShuEgAYDyICCA8KCBIGCBASAggPEAEaERIPCg0KBWZpbmFsEAMYCSASIgQQARgX
EAEaERIPCg0KBWZpbmFsEAMYCSASIgQQARgX
