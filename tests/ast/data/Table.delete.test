## TEST CASE

df = Table(tables.table1, session)

df.delete()

df = Table(tables.table1, session)

df.delete(block=False)

df = Table(tables.table1, session)

df.delete(block=False, statement_params={"SF_PARTNER": "FAKE_PARTNER"})

df = Table(tables.table1, session)

df.delete(df["num"] == 1)

df = Table(tables.table1, session)

source_df = session.create_dataframe([2, 3, 4, 5], schema=["a"])

df.delete(["num"] == source_df.a, source_df)

## EXPECTED UNPARSER OUTPUT

df = Table("table1", session)

df.delete()

df = Table("table1", session)

df.delete(block=False)

df = Table("table1", session)

df.delete(statement_params={"SF_PARTNER": "FAKE_PARTNER"}, block=False)

df = Table("table1", session)

df.delete(condition=df["num"] == 1)

df = Table("table1", session)

source_df = session.create_dataframe([2, 3, 4, 5], schema=["a"])

df.delete(condition=source_df["a"] == ["num"], source=source_df)

## EXPECTED ENCODED AST

<<<<<<< HEAD
Cj8KPQovggwsEgoKCAoGdGFibGUxGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoGSICEAESBAoCZGYYASICCAEKMQovCiWKDCIIARoCCAEqGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgbEgAYAiICCAIKCBIGCAMSAggCEAEaERIPCg0KBWZpbmFsEAMYCSASIgQQARgX
Cj8KPQovggwsEgoKCAoGdGFibGUxGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoHSICEAESBAoCZGYYBCICCAQKLwotCiOKDCAaAggEKhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoHxIAGAUiAggFCggSBggGEgIIBRABGhESDwoNCgVmaW5hbBADGAkgEiIEEAEYFw==
Cj8KPQovggwsEgoKCAoGdGFibGUxGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoISICEAESBAoCZGYYByICCAcKSwpJCj+KDDwaAggHKhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoIzIaCgpTRl9QQVJUTkVSEgxGQUtFX1BBUlRORVISABgIIgIICAoIEgYICRICCAgQARoREg8KDQoFZmluYWwQAxgJIBIiBBABGBc=
Cj8KPQovggwsEgoKCAoGdGFibGUxGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoJSICEAESBAoCZGYYCiICCAoKpwEKpAEKmQGKDJUBCAEScfoBbgotygYqCgNudW0SB4ICBAoCCAoaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgnEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgnEAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgnGgIICioaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCcSABgLIgIICwoIEgYIDBICCAsQARoREg8KDQoFZmluYWwQAxgJIBIiBBABGBc=
Cj8KPQovggwsEgoKCAoGdGFibGUxGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKSICEAESBAoCZGYYDSICCA0K0gEKzwEKuQH6BbUBCo8BCowBCiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgrEAIKIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCsQAwohwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKxAECiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgrEAUSBQoDCgFhGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKxILCglzb3VyY2VfZGYYDiICCA4K1AEK0QEKxgGKDMIBCAESlAH6AZABCivKBigKAWESB4ICBAoCCA4aGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgtEkXSAkIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgtEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgtEgNudW0aGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgtGgIIDSIHggIECgIIDioaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKC0SABgPIgIIDwoIEgYIEBICCA8QARoREg8KDQoFZmluYWwQAxgJIBIiBBABGBc=
EAEaERIPCg0KBWZpbmFsEAMYCSASIgQQARgX
=======
{
  "body": [
    {
      "assign": {
        "expr": {
          "sp_table": {
            "name": {
              "sp_table_name_flat": {
                "name": "test_table"
              }
            },
            "src": {
              "file": "SRC_POSITION_TEST_MODE",
              "start_line": "90"
            },
            "variant": {
              "sp_table_init": true
            }
          }
        },
        "symbol": "df",
        "uid": "1",
        "var_id": {
          "bitfield1": "1"
        }
      }
    },
    {
      "assign": {
        "expr": {
          "sp_table_delete": {
            "block": true,
            "id": {
              "bitfield1": "1"
            },
            "src": {
              "file": "SRC_POSITION_TEST_MODE",
              "start_line": "92"
            }
          }
        },
        "symbol": "",
        "uid": "2",
        "var_id": {
          "bitfield1": "2"
        }
      }
    },
    {
      "eval": {
        "uid": "3",
        "var_id": {
          "bitfield1": "2"
        }
      }
    }
  ],
  "client_ast_version": "1",
  "client_language": {
    "python_language": {
      "version": {
        "label": "final",
        "major": "3",
        "minor": "9",
        "patch": "20"
      }
    }
  },
  "client_version": {
    "major": "1",
    "minor": "23"
  }
}
>>>>>>> 66d50cff3 (SNOW-1738538 Update expectation files to json ast output so more stable & readable)
