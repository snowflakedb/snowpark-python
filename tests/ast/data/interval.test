## TEST CASE

from snowflake.snowpark._internal.analyzer.expression import Interval

df1 = session.create_dataframe(
        [
            [datetime.datetime(2010, 1, 1), datetime.datetime(2011, 1, 1)],
            [datetime.datetime(2012, 1, 1), datetime.datetime(2013, 1, 1)],
        ],
        schema=["a", "b"],
    )

df2 = df1.select(
    df1["a"]
    + make_interval(
        quarter=1,
        month=1,
        week=2,
        day=2,
        hour=2,
        minute=3,
        second=3,
        millisecond=3,
        microsecond=4,
        nanosecond=4,
    )
)

df4 = df1.select(df1["a"] + Column(Interval(1234)))

df5 = df1.select(
    df1["a"]
    + make_interval(
        quarter=1,
        month=2,
        week=3,
        day=4,
        hour=5,
        minute=6,
        second=7
    )
)

df6 = df1.select(
    df1["a"]
    + make_interval(
        year=1,
        month=2,
        week=3,
        day=4,
        hour=5,
        minute=6,
        second=7,
        millisecond=8,
        microsecond=9,
        nanosecond=10
    )
)


## EXPECTED UNPARSER OUTPUT

df1 = session.create_dataframe([[datetime.datetime(2010, 1, 1, 0, 0, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=-18000), name="EST")), datetime.datetime(2011, 1, 1, 0, 0, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=-18000), name="EST"))], [datetime.datetime(2012, 1, 1, 0, 0, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=-18000), name="EST")), datetime.datetime(2013, 1, 1, 0, 0, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=-18000), name="EST"))]], schema=["a", "b"])

df2 = df1.select(df1["a"] + Interval(quarter=1, month=1, week=2, day=2, hour=2, minute=3, second=3, millisecond=3, microsecond=4, nanosecond=4))

df4 = df1.select(df1["a"] + Interval(year=1234))

df5 = df1.select(df1["a"] + Interval(quarter=1, month=2, week=3, day=4, hour=5, minute=6, second=7))

df6 = df1.select(df1["a"] + Interval(year=1, month=2, week=3, day=4, hour=5, minute=6, second=7, millisecond=8, microsecond=9, nanosecond=10))

## EXPECTED ENCODED AST

CqMDCqADCpAD8gWMAwrdAgraAgqqAcoCpgEKIAgNEGIaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDihcEkDyAz0IASgBOiAIDRBiGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA4oXEISCgUKA0VTVBCw8/7///////8BSNoPEkDyAz0IASgBOiAIDRBiGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA4oXEISCgUKA0VTVBCw8/7///////8BSNsPCqoBygKmAQogCA0QYhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAOKFwSQPIDPQgBKAE6IAgNEGIaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDihcQhIKBQoDRVNUELDz/v///////wFI3A8SQPIDPQgBKAE6IAgNEGIaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDihcQhIKBQoDRVNUELDz/v///////wFI3Q8SCAoGCgFhCgFiGiAIDRBiGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA4oXBIFCgNkZjEYASICCAEK7gEK6wEK2wH6CNcBCqcBeqQBCjHCBi4KAWESB4ICBAoCCAEaIAgUEGUaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDChlEk3aCkoKAggCEgIIAhoCCAQiAggDKgIIAzICCAE6AggEQgIIAUoCCANSIAgREHIaFlNSQ19QT1NJVElPTl9URVNUX01PREUgEChnWgIIAhogCA0QcxoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAMKGUSB4ICBAoCCAEaIAgJEHQaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDihkIAESBQoDZGYyGAIiAggCCssBCsgBCrgB+gi0AQqEAXqBAQoxwgYuCgFhEgeCAgQKAggBGiAIIRB2GhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIBkodhIq2gonUiAIORB2GhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFICsodmIDCNIJGiAIOhB2GhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIBkodhIHggIECgIIARogCDsQdhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAOKHYgARIFCgNkZjQYAyICCAMK5QEK4gEK0gH6CM4BCp0BepoBCjHCBi4KAWESB4ICBAoCCAEaIAgUEHkaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDCh5EkLaCj8KAggEEgIIBSoCCAYyAggCQgIIAUoCCAdSIQgREIMBGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIBAoe1oCCAMaIQgNEIQBGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAwoeRIHggIECgIIARohCAkQhQEaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDih4IAESBQoDZGY1GAQiAggECvYBCvMBCuMB+gjfAQqtAXqqAQozwgYwCgFhEgeCAgQKAggBGiIIFBCIARoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAMKIgBEk/aCkwKAggEEgIIBRoCCAkiAggIKgIIBjICCAI6AggKSgIIB1IiCBEQlQEaFlNSQ19QT1NJVElPTl9URVNUX01PREUgECiKAVoCCANiAggBGiIIDRCWARoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAMKIgBEgeCAgQKAggBGiIICRCXARoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAOKIcBIAESBQoDZGY2GAUiAggFEAEaERIPCg0KBWZpbmFsEAMYCyAJIgQQARgX
