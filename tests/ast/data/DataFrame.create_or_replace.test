## TEST CASE

df = session.table(tables.table1)

df.create_or_replace_view(["test_db", "test_schema", "test_view"], comment="foo")

df.create_or_replace_view("test_view", statement_params={"foo": "bar"})

df.create_or_replace_temp_view(["test_db", "test_schema", "test_view"], comment="foo")

df.create_or_replace_temp_view("test_view", statement_params={"foo": "bar"})

# TODO: remove the suppress check in `copy_into_table()`.
# session.file.put(local_file_name="test.json", stage_location="test", auto_compress=False)
# df2 = session.read.option("INFER_SCHEMA", True).json("@test/test.json")

df.copy_into_table(
    ["test_db", "test_schema", "test_table2"],
    files=["file1", "file2"],
    pattern="[A-Z]+",
    validation_mode="RETURN_ERRORS",
    target_columns=["n", "str"],
    transformations=[col("n") * 10, col("str")],
    format_type_options={"COMPRESSION": "GZIP", "RECORD_DELIMITER": "|"},
    statement_params={"foo": "bar"},
    force=True,
)

df3 = df.cache_result()

df4 = df.cache_result(statement_params={"foo": "bar"})

df.create_or_replace_dynamic_table("test_dyn_table", warehouse="test_wh", lag="1 hour", comment="foo")

## EXPECTED UNPARSER OUTPUT

df = session.table("table1")

res1 = df.create_or_replace_view(["test_db", "test_schema", "test_view"], comment="foo")

res2 = df.create_or_replace_view("test_view", statement_params={"foo": "bar"})

res3 = df.create_or_replace_temp_view(["test_db", "test_schema", "test_view"], comment="foo")

res4 = df.create_or_replace_temp_view("test_view", statement_params={"foo": "bar"})

res5 = df.copy_into_table(["test_db", "test_schema", "test_table2"], files=["file1", "file2"], pattern="[A-Z]+", validation_mode="RETURN_ERRORS", target_columns=["n", "str"], transformations=[col("n") * 10, col("str")], format_type_options={"COMPRESSION": "GZIP", "RECORD_DELIMITER": "|"}, statement_params={"foo": "bar"}, force=True)

df3 = df.cache_result()

df4 = df.cache_result(statement_params={"foo": "bar"})

res6 = df.create_or_replace_dynamic_table("test_dyn_table", warehouse="test_wh", lag="1 hour", comment="foo")

## EXPECTED ENCODED AST

Cj8KPQovggwsEgoKCAoGdGFibGUxGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoRiICCAESBAoCZGYYASICCAEKXApaClDyBk0KBQoDZm9vEgeCAgQKAggBIgd0ZXN0X2RiIgt0ZXN0X3NjaGVtYSIJdGVzdF92aWV3KhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoSBIAGAIiAggCCksKSQo/8gY8EgeCAgQKAggBIgl0ZXN0X3ZpZXcqGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShKMgoKA2ZvbxIDYmFyEgAYAyICCAMKXgpcClLyBk8KBQoDZm9vEgeCAgQKAggBGAEiB3Rlc3RfZGIiC3Rlc3Rfc2NoZW1hIgl0ZXN0X3ZpZXcqGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShMEgAYBCICCAQKTQpLCkHyBj4SB4ICBAoCCAEYASIJdGVzdF92aWV3KhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoTjIKCgNmb28SA2JhchIAGAUiAggFCp0ECpoECo8E2gaLBAoqCgVmb3JjZRIhygEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVBABEgeCAgQKAggBGgVmaWxlMRoFZmlsZTIiNAoLQ09NUFJFU1NJT04SJfoMIgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFQSBEdaSVAiNgoQUkVDT1JEX0RFTElNSVRFUhIi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVBIBfCoICgZbQS1aXSsyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShUOgoKA2ZvbxIDYmFyQgd0ZXN0X2RiQgt0ZXN0X3NjaGVtYUILdGVzdF90YWJsZTJKAW5KA3N0clKVAeoCkQEKUJIBTQoLGgkKBwoFCgNjb2waIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSAW4iGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAoaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaUlKSAU8KCxoJCgcKBQoDY29sGiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEgNzdHIiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaWg8KDVJFVFVSTl9FUlJPUlMSABgGIgIIBgo5CjcKKMIGJQoHggIECgIIARIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGASBQoDZGYzGAciAggHCkUKQwo0wgYxCgeCAgQKAggBEhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYhoKCgNmb28SA2JhchIFCgNkZjQYCCICCAgKXApaClDqBk0KBQoDZm9vEgeCAgQKAggBGgYxIGhvdXIiDnRlc3RfZHluX3RhYmxlKhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZDoHdGVzdF93aBIAGAkiAggJEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
