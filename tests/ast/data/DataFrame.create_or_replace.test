## TEST CASE

df = session.table("test_table")

df.create_or_replace_view(["test_db", "test_schema", "test_view"], comment="foo")

df.create_or_replace_view("test_view", statement_params={"foo": "bar"})

df.create_or_replace_temp_view(["test_db", "test_schema", "test_view"], comment="foo")

df.create_or_replace_temp_view("test_view", statement_params={"foo": "bar"})

# TODO: remove the suppress check in `copy_into_table()`.
# session.file.put(local_file_name="test.json", stage_location="test", auto_compress=False)
# df2 = session.read.option("INFER_SCHEMA", True).json("@test/test.json")

df.copy_into_table(
    ["test_db", "test_schema", "test_table2"],
    files=["file1", "file2"],
    pattern="[A-Z]+",
    validation_mode="RETURN_ERRORS",
    target_columns=["n", "str"],
    transformations=[col("n") * 10, col("str")],
    format_type_options={"COMPRESSION": "GZIP", "RECORD_DELIMITER": "|"},
    statement_params={"foo": "bar"},
    force=True,
)

df3 = df.cache_result()

df4 = df.cache_result(statement_params={"foo": "bar"})

df.create_or_replace_dynamic_table("test_dyn_table", warehouse="test_wh", lag="1 hour", comment="foo")

## EXPECTED UNPARSER OUTPUT

df = session.table("test_table")

res1 = df.create_or_replace_view(["test_db", "test_schema", "test_view"], comment="foo")

res2 = df.create_or_replace_view("test_view", statement_params={"foo": "bar"})

res3 = df.create_or_replace_temp_view(["test_db", "test_schema", "test_view"], comment="foo")

res4 = df.create_or_replace_temp_view("test_view", statement_params={"foo": "bar"})

res5 = df.copy_into_table(["test_db", "test_schema", "test_table2"], files=["file1", "file2"], pattern="[A-Z]+", validation_mode="RETURN_ERRORS", target_columns=["n", "str"], transformations=[col("n") * 10, col("str")], format_type_options={"COMPRESSION": "GZIP", "RECORD_DELIMITER": "|"}, statement_params={"foo": "bar"}, force=True)

df3 = df.cache_result()

df4 = df.cache_result(statement_params={"foo": "bar"})

res6 = df.create_or_replace_dynamic_table("test_dyn_table", warehouse="test_wh", lag="1 hour", comment="foo")

## EXPECTED ENCODED AST

CkMKQQoz4gswEg4KDAoKdGVzdF90YWJsZRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoiAggBEgQKAmRmGAEiAggBClwKWgpQ6gZNCgUKA2ZvbxIHggIECgIIASIHdGVzdF9kYiILdGVzdF9zY2hlbWEiCXRlc3RfdmlldyoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwSABgCIgIIAgpLCkkKP+oGPBIHggIECgIIASIJdGVzdF92aWV3KhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXjIKCgNmb28SA2JhchIAGAMiAggDCl4KXApS6gZPCgUKA2ZvbxIHggIECgIIARgBIgd0ZXN0X2RiIgt0ZXN0X3NjaGVtYSIJdGVzdF92aWV3KhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYBIAGAQiAggECk0KSwpB6gY+EgeCAgQKAggBGAEiCXRlc3RfdmlldyoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGIyCgoDZm9vEgNiYXISABgFIgIIBQrVBArSBArHBNIGwwQKKgoFZm9yY2USIcIBHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGgQARIHggIECgIIARoFZmlsZTEaBWZpbGUyIjQKC0NPTVBSRVNTSU9OEiWyDCIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShoEgRHWklQIjYKEFJFQ09SRF9ERUxJTUlURVISIrIMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGgSAXwqCAoGW0EtWl0rMhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaDoKCgNmb28SA2JhckIHdGVzdF9kYkILdGVzdF9zY2hlbWFCC3Rlc3RfdGFibGUySgFuSgNzdHJSsQHiAq0BCmyKAWkKJxolCgcKBQoDY29sEhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobhoisgwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobhIBbiIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKG4SIboCHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKG4QChoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKG5SbooBawonGiUKBwoFCgNjb2wSGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShuGiSyDCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShuEgNzdHIiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShuWg8KDVJFVFVSTl9FUlJPUlMSABgGIgIIBgo5CjcKKLoGJQoHggIECgIIARIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHQSBQoDZGYzGAciAggHCkUKQwo0ugYxCgeCAgQKAggBEhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodhoKCgNmb28SA2JhchIFCgNkZjQYCCICCAgKXApaClDiBk0KBQoDZm9vEgeCAgQKAggBGgYxIGhvdXIiDnRlc3RfZHluX3RhYmxlKhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeDoHdGVzdF93aBIAGAkiAggJEAEaERIPCg0KBWZpbmFsEAMYCSATIgQQARgV
