## TEST CASE

df = session.table("test_table")

df.create_or_replace_view(["test_db", "test_schema", "test_view"], comment="foo")

df.create_or_replace_view("test_view", statement_params={"foo": "bar"})

df.create_or_replace_temp_view(["test_db", "test_schema", "test_view"], comment="foo")

df.create_or_replace_temp_view("test_view", statement_params={"foo": "bar"})

# TODO: remove the suppress check in `copy_into_table()`.
# session.file.put(local_file_name="test.json", stage_location="test", auto_compress=False)
# df2 = session.read.option("INFER_SCHEMA", True).json("@test/test.json")

df.copy_into_table(
    ["test_db", "test_schema", "test_table2"],
    files=["file1", "file2"],
    pattern="[A-Z]+",
    validation_mode="RETURN_ERRORS",
    target_columns=["n", "str"],
    transformations=[col("n") * 10, col("str")],
    format_type_options={"COMPRESSION": "GZIP", "RECORD_DELIMITER": "|"},
    statement_params={"foo": "bar"},
    force=True,
)

df3 = df.cache_result()

df4 = df.cache_result(statement_params={"foo": "bar"})

df.create_or_replace_dynamic_table("test_dyn_table", warehouse="test_wh", lag="1 hour", comment="foo")

## EXPECTED UNPARSER OUTPUT

df = session.table("test_table")

res1 = df.create_or_replace_view(["test_db", "test_schema", "test_view"], comment="foo")

res2 = df.create_or_replace_view("test_view", statement_params={"foo": "bar"})

res3 = df.create_or_replace_temp_view(["test_db", "test_schema", "test_view"], comment="foo")

res4 = df.create_or_replace_temp_view("test_view", statement_params={"foo": "bar"})

res5 = df.copy_into_table(["test_db", "test_schema", "test_table2"], files=["file1", "file2"], pattern="[A-Z]+", validation_mode="RETURN_ERRORS", target_columns=["n", "str"], transformations=[col("n") * 10, col("str")], format_type_options={"COMPRESSION": "GZIP", "RECORD_DELIMITER": "|"}, statement_params={"foo": "bar"}, force=True)

df3 = df.cache_result()

df4 = df.cache_result(statement_params={"foo": "bar"})

res6 = df.create_or_replace_dynamic_table("test_dyn_table", warehouse="test_wh", lag="1 hour", comment="foo")

## EXPECTED ENCODED AST

CkMKQQozogswEg4KDAoKdGVzdF90YWJsZRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFQiAggBEgQKAmRmGB0iAggdClwKWgpQwgZNCgUKA2ZvbxIHigIECgIIHSIHdGVzdF9kYiILdGVzdF9zY2hlbWEiCXRlc3RfdmlldyoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFYSABgeIgIIHgpLCkkKP8IGPBIHigIECgIIHSIJdGVzdF92aWV3KhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWDIKCgNmb28SA2JhchIAGB8iAggfCl4KXApSwgZPCgUKA2ZvbxIHigIECgIIHRgBIgd0ZXN0X2RiIgt0ZXN0X3NjaGVtYSIJdGVzdF92aWV3KhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhIAGCAiAgggCk0KSwpBwgY+EgeKAgQKAggdGAEiCXRlc3RfdmlldyoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwyCgoDZm9vEgNiYXISABghIgIIIQrTBArQBArFBKoGwQQKKgoFZm9yY2USIbIBHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGIQARIHigIECgIIHRoFZmlsZTEaBWZpbGUyIjQKC0NPTVBSRVNTSU9OEiXqCyIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShiEgRHWklQIjYKEFJFQ09SRF9ERUxJTUlURVISIuoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGISAXwqCAoGW0EtWl0rMhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYjoKCgNmb28SA2JhckIHdGVzdF9kYkILdGVzdF9zY2hlbWFCC3Rlc3RfdGFibGUySgFuSgNzdHJSsAG6AqwBCmt6aQonCiUKBwoFCgNjb2wSGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShoGiLqCx8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShoEgFuIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBAKGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaFJtemsKJwolCgcKBQoDY29sEhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBok6gshChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBIDc3RyIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaFoPCg1SRVRVUk5fRVJST1JTEgAYIiICCCIKOQo3CiiSBiUKB4oCBAoCCB0SGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShuEgUKA2RmMxgjIgIIIxABGhESDwoNCgVmaW5hbBADGAkgEyIEEAEYFQ==
CkUKQwo0kgYxCgeKAgQKAggdEhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUocBoKCgNmb28SA2JhchIFCgNkZjQYJCICCCQQARoREg8KDQoFZmluYWwQAxgJIBMiBBABGBU=
ClwKWgpQugZNCgUKA2ZvbxIHigIECgIIHRoGMSBob3VyIg50ZXN0X2R5bl90YWJsZSoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHI6B3Rlc3Rfd2gSABglIgIIJRABGhESDwoNCgVmaW5hbBADGAkgEyIEEAEYFQ==
