## TEST CASE

df = session.table("test_table")

df.create_or_replace_view(["test_db", "test_schema", "test_view"], comment="foo")

df.create_or_replace_view("test_view", statement_params={"foo": "bar"})

df.create_or_replace_temp_view(["test_db", "test_schema", "test_view"], comment="foo")

df.create_or_replace_temp_view("test_view", statement_params={"foo": "bar"})

# TODO: remove the suppress check in `copy_into_table()`.
# session.file.put(local_file_name="test.json", stage_location="test", auto_compress=False)
# df2 = session.read.option("INFER_SCHEMA", True).json("@test/test.json")

df.copy_into_table(
    ["test_db", "test_schema", "test_table2"],
    files=["file1", "file2"],
    pattern="[A-Z]+",
    validation_mode="RETURN_ERRORS",
    target_columns=["n", "str"],
    transformations=[col("n") * 10, col("str")],
    format_type_options={"COMPRESSION": "GZIP", "RECORD_DELIMITER": "|"},
    statement_params={"foo": "bar"},
    force=True,
)

df3 = df.cache_result()

df4 = df.cache_result(statement_params={"foo": "bar"})

df.create_or_replace_dynamic_table("test_dyn_table", warehouse="test_wh", lag="1 hour", comment="foo")

## EXPECTED UNPARSER OUTPUT

df = session.table("test_table")

res1 = df.create_or_replace_view(["test_db", "test_schema", "test_view"], comment="foo")

res2 = df.create_or_replace_view("test_view", statement_params={"foo": "bar"})

res3 = df.create_or_replace_temp_view(["test_db", "test_schema", "test_view"], comment="foo")

res4 = df.create_or_replace_temp_view("test_view", statement_params={"foo": "bar"})

res5 = df.copy_into_table(["test_db", "test_schema", "test_table2"], files=["file1", "file2"], pattern="[A-Z]+", validation_mode="RETURN_ERRORS", target_columns=["n", "str"], transformations=[col("n") * 10, col("str")], format_type_options={"COMPRESSION": "GZIP", "RECORD_DELIMITER": "|"}, statement_params={"foo": "bar"}, force=True)

df3 = df.cache_result()

df4 = df.cache_result(statement_params={"foo": "bar"})

res6 = df.create_or_replace_dynamic_table("test_dyn_table", warehouse="test_wh", lag="1 hour", comment="foo")

## EXPECTED ENCODED AST

CkkKRwo5sgs2Eg4KDAoKdGVzdF90YWJsZRogCCgQWhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKFoiAggBEgQKAmRmGAEiAggBCmIKYApWygZTCgUKA2ZvbxIHigIECgIIASIHdGVzdF9kYiILdGVzdF9zY2hlbWEiCXRlc3RfdmlldyogCFkQXBoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKFwSABgCIgIIAgpRCk8KRcoGQhIHigIECgIIASIJdGVzdF92aWV3KiAITxBeGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgoXjIKCgNmb28SA2JhchIAGAMiAggDCmQKYgpYygZVCgUKA2ZvbxIHigIECgIIARgBIgd0ZXN0X2RiIgt0ZXN0X3NjaGVtYSIJdGVzdF92aWV3KiAIXhBgGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgoYBIAGAQiAggEClMKUQpHygZEEgeKAgQKAggBGAEiCXRlc3RfdmlldyogCFQQYhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKGIyCgoDZm9vEgNiYXISABgFIgIIBQqbBQqYBQqNBbIGiQUKMAoFZm9yY2USJ7IBJAogCAkQchoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKGgQARIHigIECgIIARoFZmlsZTEaBWZpbGUyIjoKC0NPTVBSRVNTSU9OEiv6CygKIAgJEHIaFlNSQ19QT1NJVElPTl9URVNUX01PREUgCChoEgRHWklQIjwKEFJFQ09SRF9ERUxJTUlURVISKPoLJQogCAkQchoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKGgSAXwqCAoGW0EtWl0rMiAICRByGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgoaDoKCgNmb28SA2JhckIHdGVzdF9kYkILdGVzdF9zY2hlbWFCC3Rlc3RfdGFibGUySgFuSgNzdHJSzgG6AsoBCn16ewotCisKBwoFCgNjb2wSIAglEG4aFlNSQ19QT1NJVElPTl9URVNUX01PREUgHShuGij6CyUKIAglEG4aFlNSQ19QT1NJVElPTl9URVNUX01PREUgHShuEgFuIiAIJRBuGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIB0obhInkgIkCiAIKhBuGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIB0obhAKGiAIKhBuGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIB0oblJ/en0KLQorCgcKBQoDY29sEiAINhBuGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFICwobhoq+gsnCiAINhBuGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFICwobhIDc3RyIiAINhBuGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFICwobloPCg1SRVRVUk5fRVJST1JTEgAYBiICCAYKPwo9Ci6aBisKB4oCBAoCCAESIAgfEHQaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDih0EgUKA2RmMxgHIgIIBwpLCkkKOpoGNwoHigIECgIIARIgCD4QdhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAOKHYaCgoDZm9vEgNiYXISBQoDZGY0GAgiAggICmIKYApWwgZTCgUKA2ZvbxIHigIECgIIARoGMSBob3VyIg50ZXN0X2R5bl90YWJsZSogCG4QeBoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKHg6B3Rlc3Rfd2gSABgJIgIICRABGhESDwoNCgVmaW5hbBADGAsgCSIEEAEYFQ==
