## TEST CASE

# This test creates a Pandas dataframe literal and gets the count.
import pandas as pd

df = session.create_dataframe(pd.DataFrame([["one", 1], ["two", 2], ["three", 3]], columns=["A", "B"]))

df.count()

df.count(block=False)

df.count(block=False, statement_params={"SF_PARTNER": "FAKE_PARTNER"})

## EXPECTED UNPARSER OUTPUT

df = session.create_dataframe(pandas.DataFrame(<not shown>), schema=StructType(fields=[StructField("\"A\"", StringType(16777216), nullable=True), StructField("\"B\"", LongType(), nullable=True)], structured=False))

df.count()

df = session.create_dataframe(pandas.DataFrame(<not shown>), schema=StructType(fields=[StructField("\"A\"", StringType(16777216), nullable=True), StructField("\"B\"", LongType(), nullable=True)], structured=False))

df.count(block=False)

df = session.create_dataframe(pandas.DataFrame(<not shown>), schema=StructType(fields=[StructField("\"A\"", StringType(16777216), nullable=True), StructField("\"B\"", LongType(), nullable=True)], structured=False))

df.count(statement_params={"SF_PARTNER": "FAKE_PARTNER"}, block=False)

## EXPECTED ENCODED AST

interned_value_table {
  string_values {
    key: -1
  }
  string_values {
    key: 2
    value: "SRC_POSITION_TEST_MODE"
  }
}
body {
  bind {
    expr {
      create_dataframe {
        data {
          dataframe_data__pandas {
            v {
            }
          }
        }
        schema {
          dataframe_schema__struct {
            v {
              fields {
                column_identifier {
                  column_name {
                    name: "\"A\""
                  }
                }
                data_type {
                  string_type {
                    length {
                      value: 16777216
                    }
                  }
                }
                nullable: true
              }
              fields {
                column_identifier {
                  column_name {
                    name: "\"B\""
                  }
                }
                data_type {
                  long_type: true
                }
                nullable: true
              }
            }
          }
        }
        src {
          end_column: 111
          end_line: 28
          file: 2
          start_column: 13
          start_line: 28
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "df"
    }
    uid: 1
  }
}
body {
  bind {
    expr {
      dataframe_count {
        block: true
        df {
          dataframe_ref {
            id: 1
          }
        }
        src {
          end_column: 18
          end_line: 30
          file: 2
          start_column: 8
          start_line: 30
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 2
  }
}
body {
  eval {
    bind_id: 2
  }
}
body {
  bind {
    expr {
      create_dataframe {
        data {
          dataframe_data__pandas {
            v {
            }
          }
        }
        schema {
          dataframe_schema__struct {
            v {
              fields {
                column_identifier {
                  column_name {
                    name: "\"A\""
                  }
                }
                data_type {
                  string_type {
                    length {
                      value: 16777216
                    }
                  }
                }
                nullable: true
              }
              fields {
                column_identifier {
                  column_name {
                    name: "\"B\""
                  }
                }
                data_type {
                  long_type: true
                }
                nullable: true
              }
            }
          }
        }
        src {
          end_column: 111
          end_line: 28
          file: 2
          start_column: 13
          start_line: 28
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "df"
    }
    uid: 1
  }
}
body {
  bind {
    expr {
      dataframe_count {
        df {
          dataframe_ref {
            id: 1
          }
        }
        src {
          end_column: 29
          end_line: 32
          file: 2
          start_column: 8
          start_line: 32
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 3
  }
}
body {
  eval {
    bind_id: 3
  }
}
body {
  bind {
    expr {
      create_dataframe {
        data {
          dataframe_data__pandas {
            v {
            }
          }
        }
        schema {
          dataframe_schema__struct {
            v {
              fields {
                column_identifier {
                  column_name {
                    name: "\"A\""
                  }
                }
                data_type {
                  string_type {
                    length {
                      value: 16777216
                    }
                  }
                }
                nullable: true
              }
              fields {
                column_identifier {
                  column_name {
                    name: "\"B\""
                  }
                }
                data_type {
                  long_type: true
                }
                nullable: true
              }
            }
          }
        }
        src {
          end_column: 111
          end_line: 28
          file: 2
          start_column: 13
          start_line: 28
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "df"
    }
    uid: 1
  }
}
body {
  bind {
    expr {
      dataframe_count {
        df {
          dataframe_ref {
            id: 1
          }
        }
        src {
          end_column: 78
          end_line: 34
          file: 2
          start_column: 8
          start_line: 34
        }
        statement_params {
          _1: "SF_PARTNER"
          _2: "FAKE_PARTNER"
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 4
  }
}
body {
  eval {
    bind_id: 4
  }
}
client_ast_version: 1
client_language {
  python_language {
    version {
      label: "final"
      major: 3
      minor: 9
      patch: 1
    }
  }
}
client_version {
  major: 1
  minor: 31
}
id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
