## TEST CASE

df1 = session.flatten(parse_json(lit('{"a": [1,2]}')), "a", False, False, "BOTH")

df2 = session.flatten(col("NUM"), recursive=True, mode="ARRAY")

## EXPECTED UNPARSER OUTPUT

df1 = session.flatten(parse_json(lit("{\"a\": [1,2]}")), Some("a"), False, False, "BOTH")

df2 = session.flatten(col("NUM"), None, False, True, "ARRAY")

## EXPECTED ENCODED AST

{
  "body": [
    {
      "assign": {
        "expr": {
          "sp_flatten": {
            "input": {
              "apply_expr": {
                "fn": {
                  "builtin_fn": {
                    "name": {
                      "fn_name_flat": {
                        "name": "parse_json"
                      }
                    }
                  }
                },
                "pos_args": [
                  {
                    "apply_expr": {
                      "fn": {
                        "builtin_fn": {
                          "name": {
                            "fn_name_flat": {
                              "name": "lit"
                            }
                          }
                        }
                      },
                      "pos_args": [
                        {
                          "string_val": {
                            "src": {
                              "file": "SRC_POSITION_TEST_MODE",
                              "start_line": "90"
                            },
                            "v": "{\"a\": [1,2]}"
                          }
                        }
                      ],
                      "src": {
                        "file": "SRC_POSITION_TEST_MODE",
                        "start_line": "90"
                      }
                    }
                  }
                ],
                "src": {
                  "file": "SRC_POSITION_TEST_MODE",
                  "start_line": "90"
                }
              }
            },
            "mode": {
              "sp_flatten_mode_both": true
            },
            "path": "a",
            "src": {
              "file": "SRC_POSITION_TEST_MODE",
              "start_line": "90"
            }
          }
        },
        "symbol": "df1",
        "uid": "1",
        "var_id": {
          "bitfield1": "1"
        }
      }
    },
    {
      "assign": {
        "expr": {
          "sp_flatten": {
            "input": {
              "apply_expr": {
                "fn": {
                  "builtin_fn": {
                    "name": {
                      "fn_name_flat": {
                        "name": "col"
                      }
                    }
                  }
                },
                "pos_args": [
                  {
                    "string_val": {
                      "src": {
                        "file": "SRC_POSITION_TEST_MODE",
                        "start_line": "92"
                      },
                      "v": "NUM"
                    }
                  }
                ],
                "src": {
                  "file": "SRC_POSITION_TEST_MODE",
                  "start_line": "92"
                }
              }
            },
            "mode": {
              "sp_flatten_mode_array": true
            },
            "recursive": true,
            "src": {
              "file": "SRC_POSITION_TEST_MODE",
              "start_line": "92"
            }
          }
        },
        "symbol": "df2",
        "uid": "2",
        "var_id": {
          "bitfield1": "2"
        }
      }
    }
  ],
  "client_ast_version": "1",
  "client_language": {
    "python_language": {
      "version": {
        "label": "final",
        "major": "3",
        "minor": "9",
        "patch": "20"
      }
    }
  },
  "client_version": {
    "major": "1",
    "minor": "23"
  }
}
