## TEST CASE

df = session.create_dataframe(
    [
        (1, 10000, "JAN"),
        (1, 400, "JAN"),
        (2, 4500, "JAN"),
        (2, 35000, "JAN"),
        (1, 5000, "FEB"),
        (1, 3000, "FEB"),
        (2, 200, "FEB"),
    ],
    schema=["k", "t", "mo"],
)

df1 = df.pivot("mo", ["JAN", "FEB"]).sum("t").sort("k")

df2 = df.pivot("mo", values=["JAN", "FEB"], default_on_null="Nothing").sum("t").sort("k")

## EXPECTED UNPARSER OUTPUT

df = session.create_dataframe([(1, 10000, "JAN"), (1, 400, "JAN"), (2, 4500, "JAN"), (2, 35000, "JAN"), (1, 5000, "FEB"), (1, 3000, "FEB"), (2, 200, "FEB")], schema=["k", "t", "mo"])

df1 = df.pivot("mo", values=["JAN", "FEB"], default_on_null=None)

df1 = df1.sum("t")

df1 = df1.sort("k")

df2 = df.pivot("mo", values=["JAN", "FEB"], default_on_null="Nothing")

df2 = df2.sum("t")

df2 = df2.sort("k")

## EXPECTED ENCODED AST

CrcICrQICqUI0gWhCAr0BwrxBwqNAaIMiQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAESIpICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQkE4SJPoLIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSA0pBTgqNAaIMiQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAESIpICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQkAMSJPoLIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSA0pBTgqNAaIMiQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAISIpICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQlCMSJPoLIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSA0pBTgqOAaIMigEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAISI5ICIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQuJECEiT6CyEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEgNKQU4KjQGiDIkBChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhABEiKSAh8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEIgnEiT6CyEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEgNGRUIKjQGiDIkBChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhABEiKSAh8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaELgXEiT6CyEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEgNGRUIKjQGiDIkBChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhACEiKSAh8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEMgBEiT6CyEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEgNGRUISDAoKCgFrCgF0CgJtbxoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSBAoCZGYYASICCAEK8wEK8AEK4AGqCNwBCh/iAhwKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShnEgeSAgQKAggBGiP6CyAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShnEgJtbyIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGcqbxJtCmuiAmgKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShnEiT6CyEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShnEgNKQU4SJPoLIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGcSA0ZFQhIFCgNkZjEYAiICCAIKZQpjClSCC1EKA3N1bRImCiL6Cx8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShnEgF0EAEaBlIECgIIAiIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGcSBQoDZGYxGAMiAggDCl8KXQpOgglLEiL6Cx8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShnEgFrGAEiB5ICBAoCCAMqGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShnEgUKA2RmMRgEIgIIBAr8AQr5AQrpAaoI5QEKKPoLJQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSB05vdGhpbmcSB5ICBAoCCAEaI/oLIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSAm1vIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaSpvEm0Ka6ICaAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSJPoLIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSA0pBThIk+gshChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaRIDRkVCEgUKA2RmMhgFIgIIBQplCmMKVIILUQoDc3VtEiYKIvoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSAXQQARoGUgQKAggFIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaRIFCgNkZjIYBiICCAYKXwpdCk6CCUsSIvoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSAWsYASIHkgIECgIIBioaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSBQoDZGYyGAciAggHEAEaERIPCg0KBWZpbmFsEAMYCSATIgQQARgV
