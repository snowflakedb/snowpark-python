## TEST CASE

df = session.create_dataframe(
    [
        (1, 10000, "JAN"),
        (1, 400, "JAN"),
        (2, 4500, "JAN"),
        (2, 35000, "JAN"),
        (1, 5000, "FEB"),
        (1, 3000, "FEB"),
        (2, 200, "FEB"),
    ],
    schema=["k", "t", "mo"],
)

df1 = df.pivot("mo", ["JAN", "FEB"]).sum("t").sort("k")

df2 = df.pivot("mo", values=["JAN", "FEB"], default_on_null="Nothing").sum("t").sort("k")

## EXPECTED UNPARSER OUTPUT

df = session.create_dataframe([(1, 10000, "JAN"), (1, 400, "JAN"), (2, 4500, "JAN"), (2, 35000, "JAN"), (1, 5000, "FEB"), (1, 3000, "FEB"), (2, 200, "FEB")], schema=["k", "t", "mo"])

df1 = df.pivot("mo", values=["JAN", "FEB"], default_on_null=None)

df1 = df1.sum("t")

df1 = df1.sort("k")

df2 = df.pivot("mo", values=["JAN", "FEB"], default_on_null="Nothing")

df2 = df2.sum("t")

df2 = df2.sort("k")

## EXPECTED ENCODED AST

CrcICrQICqUI+gWhCAr0BwrxBwqNAZoNiQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEAESIsICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKBkQkE4SJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKBkSA0pBTgqNAZoNiQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEAESIsICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKBkQkAMSJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKBkSA0pBTgqNAZoNiQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEAISIsICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKBkQlCMSJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKBkSA0pBTgqOAZoNigEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEAISI8ICIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKBkQuJECEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEgNKQU4KjQGaDYkBChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoGRIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoGRABEiLCAh8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEIgnEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEgNGRUIKjQGaDYkBChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoGRIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoGRABEiLCAh8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZELgXEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEgNGRUIKjQGaDYkBChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoGRIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoGRACEiLCAh8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEMgBEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEgNGRUISDAoKCgFrCgF0CgJtbxoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKBkSBAoCZGYYASICCAEK8wEK8AEK4AHCCNwBCh+SAxwKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgmEgeCAgQKAggBGiP6DCAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgmEgJtbyIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCYqbxJtCmvSAmgKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgmEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgmEgNKQU4SJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCYSA0ZFQhIFCgNkZjEYAiICCAIKZQpjClTKC1EKA3N1bRImCiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgmEgF0EAEaBlIECgIIAiIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCYSBQoDZGYxGAMiAggDCl8KXQpOmglLEiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgmEgFrGAEiB4ICBAoCCAMqGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgmEgUKA2RmMRgEIgIIBAr8AQr5AQrpAcII5QEKKPoMJQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCgSB05vdGhpbmcSB4ICBAoCCAEaI/oMIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCgSAm1vIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKCpvEm0Ka9ICaAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCgSJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCgSA0pBThIk+gwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKBIDRkVCEgUKA2RmMhgFIgIIBQplCmMKVMoLUQoDc3VtEiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCgSAXQQARoGUgQKAggFIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKBIFCgNkZjIYBiICCAYKXwpdCk6aCUsSIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCgSAWsYASIHggIECgIIBioaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCgSBQoDZGYyGAciAggHEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
