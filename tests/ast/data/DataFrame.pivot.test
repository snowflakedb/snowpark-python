## TEST CASE

df = session.create_dataframe(
    [
        (1, 10000, "JAN"),
        (1, 400, "JAN"),
        (2, 4500, "JAN"),
        (2, 35000, "JAN"),
        (1, 5000, "FEB"),
        (1, 3000, "FEB"),
        (2, 200, "FEB"),
    ],
    schema=["k", "t", "mo"],
)

df1 = df.pivot("mo", ["JAN", "FEB"]).sum("t").sort("k")

df2 = df.pivot("mo", values=["JAN", "FEB"], default_on_null="Nothing").sum("t").sort("k")

## EXPECTED UNPARSER OUTPUT

df = session.create_dataframe([(1, 10000, "JAN"), (1, 400, "JAN"), (2, 4500, "JAN"), (2, 35000, "JAN"), (1, 5000, "FEB"), (1, 3000, "FEB"), (2, 200, "FEB")], schema=["k", "t", "mo"])

df1 = df.pivot("mo", values=["JAN", "FEB"], default_on_null=None)

df1 = df1.sum("t")

df1 = df1.sort("k")

df2 = df.pivot("mo", values=["JAN", "FEB"], default_on_null="Nothing")

df2 = df2.sum("t")

df2 = df2.sort("k")

## EXPECTED ENCODED AST

CrcICrQICqUI8gWhCAr0BwrxBwqNAdoMiQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEiG6Ah4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAESIroCHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQkE4SJLoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSA0pBTgqNAdoMiQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEiG6Ah4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAESIroCHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQkAMSJLoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSA0pBTgqNAdoMiQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEiG6Ah4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAISIroCHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQlCMSJLoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSA0pBTgqOAdoMigEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEiG6Ah4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAISI7oCIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQuJECEiS6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEgNKQU4KjQHaDIkBChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhIhugIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhABEiK6Ah8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEIgnEiS6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEgNGRUIKjQHaDIkBChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhIhugIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhABEiK6Ah8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaELgXEiS6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEgNGRUIKjQHaDIkBChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhIhugIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhACEiK6Ah8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEMgBEiS6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEgNGRUISDAoKCgFrCgF0CgJtbxoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSBAoCZGYYASICCAEK8wEK8AEK4AG6CNwBCh+KAxwKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShnEgeCAgQKAggBGiO6DCAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShnEgJtbyIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGcqbxJtCmvKAmgKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShnEiS6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShnEgNKQU4SJLoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGcSA0ZFQhIFCgNkZjEYAiICCAIKZQpjClSyC1EKA3N1bRImCiK6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShnEgF0EAEaBlIECgIIAiIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGcSBQoDZGYxGAMiAggDCl8KXQpOkglLEiK6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShnEgFrGAEiB4ICBAoCCAMqGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShnEgUKA2RmMRgEIgIIBAr8AQr5AQrpAboI5QEKKLoMJQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSB05vdGhpbmcSB4ICBAoCCAEaI7oMIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSAm1vIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaSpvEm0Ka8oCaAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSJLoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSA0pBThIkugwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaRIDRkVCEgUKA2RmMhgFIgIIBQplCmMKVLILUQoDc3VtEiYKIroMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSAXQQARoGUgQKAggFIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaRIFCgNkZjIYBiICCAYKXwpdCk6SCUsSIroMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSAWsYASIHggIECgIIBioaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSBQoDZGYyGAciAggHEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgV
