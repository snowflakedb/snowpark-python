## TEST CASE

df = session.create_dataframe(
    [
        (1, 10000, "JAN"),
        (1, 400, "JAN"),
        (2, 4500, "JAN"),
        (2, 35000, "JAN"),
        (1, 5000, "FEB"),
        (1, 3000, "FEB"),
        (2, 200, "FEB"),
    ],
    schema=["k", "t", "mo"],
)

df1 = df.pivot("mo", ["JAN", "FEB"]).sum("t").sort("k")

df2 = df.pivot("mo", values=["JAN", "FEB"], default_on_null="Nothing").sum("t").sort("k")

## EXPECTED UNPARSER OUTPUT

df = session.create_dataframe([(1, 10000, "JAN"), (1, 400, "JAN"), (2, 4500, "JAN"), (2, 35000, "JAN"), (1, 5000, "FEB"), (1, 3000, "FEB"), (2, 200, "FEB")], schema=["k", "t", "mo"])

df1 = df.pivot("mo", values=["JAN", "FEB"], default_on_null=None)

df1 = df1.sum("t")

df1 = df1.sort("k")

df2 = df.pivot("mo", values=["JAN", "FEB"], default_on_null="Nothing")

df2 = df2.sum("t")

df2 = df2.sort("k")

## EXPECTED ENCODED AST

CrcICrQICqUI+gWhCAr0BwrxBwqNAZoNiQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShQEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShQEAESIsICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFAQkE4SJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFASA0pBTgqNAZoNiQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShQEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShQEAESIsICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFAQkAMSJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFASA0pBTgqNAZoNiQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShQEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShQEAISIsICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFAQlCMSJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFASA0pBTgqOAZoNigEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShQEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShQEAISI8ICIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFAQuJECEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShQEgNKQU4KjQGaDYkBChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoUBIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoUBABEiLCAh8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShQEIgnEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShQEgNGRUIKjQGaDYkBChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoUBIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoUBABEiLCAh8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShQELgXEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShQEgNGRUIKjQGaDYkBChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoUBIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoUBACEiLCAh8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShQEMgBEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShQEgNGRUISDAoKCgFrCgF0CgJtbxoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFASBAoCZGYYASICCAEK8wEK8AEK4AHCCNwBCh+SAxwKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShdEgeCAgQKAggBGiP6DCAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShdEgJtbyIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF0qbxJtCmvSAmgKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShdEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShdEgNKQU4SJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF0SA0ZFQhIFCgNkZjEYAiICCAIKZQpjClTKC1EKA3N1bRImCiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShdEgF0EAEaBlIECgIIAiIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF0SBQoDZGYxGAMiAggDCl8KXQpOmglLEiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShdEgFrGAEiB4ICBAoCCAMqGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShdEgUKA2RmMRgEIgIIBAr8AQr5AQrpAcII5QEKKPoMJQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF8SB05vdGhpbmcSB4ICBAoCCAEaI/oMIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF8SAm1vIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXypvEm0Ka9ICaAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF8SJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF8SA0pBThIk+gwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXxIDRkVCEgUKA2RmMhgFIgIIBQplCmMKVMoLUQoDc3VtEiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF8SAXQQARoGUgQKAggFIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXxIFCgNkZjIYBiICCAYKXwpdCk6aCUsSIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF8SAWsYASIHggIECgIIBioaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF8SBQoDZGYyGAciAggHEAEaERIPCg0KBWZpbmFsEAMYCSATIgQQARgX
