## TEST CASE

df = session.create_dataframe(
    [
        (1, 10000, "JAN"),
        (1, 400, "JAN"),
        (2, 4500, "JAN"),
        (2, 35000, "JAN"),
        (1, 5000, "FEB"),
        (1, 3000, "FEB"),
        (2, 200, "FEB"),
    ],
    schema=["k", "t", "mo"],
)

df1 = df.pivot("mo", ["JAN", "FEB"]).sum("t").sort("k")

df2 = df.pivot("mo", values=["JAN", "FEB"], default_on_null="Nothing").sum("t").sort("k")

## EXPECTED UNPARSER OUTPUT

df = session.create_dataframe([(1, 10000, "JAN"), (1, 400, "JAN"), (2, 4500, "JAN"), (2, 35000, "JAN"), (1, 5000, "FEB"), (1, 3000, "FEB"), (2, 200, "FEB")], schema=["k", "t", "mo"])

df1 = df.pivot("mo", values=["JAN", "FEB"], default_on_null=None)

df1 = df1.sum("t")

df1 = df1.sort("k")

df2 = df.pivot("mo", values=["JAN", "FEB"], default_on_null="Nothing")

df2 = df2.sum("t")

df2 = df2.sort("k")

## EXPECTED ENCODED AST

CrcICrQICqUI+gWhCAr0BwrxBwqNAZoNiQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEAESIsICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEYQkE4SJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEYSA0pBTgqNAZoNiQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEAESIsICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEYQkAMSJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEYSA0pBTgqNAZoNiQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEAISIsICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEYQlCMSJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEYSA0pBTgqOAZoNigEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEAISI8ICIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEYQuJECEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEgNKQU4KjQGaDYkBChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoRhIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoRhABEiLCAh8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEIgnEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEgNGRUIKjQGaDYkBChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoRhIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoRhABEiLCAh8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGELgXEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEgNGRUIKjQGaDYkBChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoRhIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoRhACEiLCAh8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEMgBEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEgNGRUISDAoKCgFrCgF0CgJtbxoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEYSBAoCZGYYASICCAEK8wEK8AEK4AHCCNwBCh+SAxwKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShTEgeCAgQKAggBGiP6DCAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShTEgJtbyIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFMqbxJtCmvSAmgKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShTEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShTEgNKQU4SJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFMSA0ZFQhIFCgNkZjEYAiICCAIKZQpjClTKC1EKA3N1bRImCiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShTEgF0EAEaBlIECgIIAiIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFMSBQoDZGYxGAMiAggDCl8KXQpOmglLEiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShTEgFrGAEiB4ICBAoCCAMqGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShTEgUKA2RmMRgEIgIIBAr8AQr5AQrpAcII5QEKKPoMJQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFUSB05vdGhpbmcSB4ICBAoCCAEaI/oMIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFUSAm1vIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVSpvEm0Ka9ICaAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFUSJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFUSA0pBThIk+gwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVRIDRkVCEgUKA2RmMhgFIgIIBQplCmMKVMoLUQoDc3VtEiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFUSAXQQARoGUgQKAggFIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVRIFCgNkZjIYBiICCAYKXwpdCk6aCUsSIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFUSAWsYASIHggIECgIIBioaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFUSBQoDZGYyGAciAggHEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
