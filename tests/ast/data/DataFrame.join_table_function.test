## TEST CASE

df1 = session.create_dataframe(
    [
        ["foo", "The quick brown fox jumps over the lazy dog"],
        ["bar", "Lorem ipsum dolor sit amet, consectetur adipiscing elit"],
    ],
    schema=["name", "text"],
)

df2 = df1.join_table_function("STRTOK_SPLIT_TO_TABLE", df1["text"], lit(" "))

tokenize_text = (
    call_table_function("STRTOK_SPLIT_TO_TABLE", df1["text"], lit(" "))
    .over(partition_by="name")
    .over(order_by="text")
    .alias("ignored1", "ignored2", "ignored3")
    .alias("original_row_number", "token_number", "token")
)

df3 = df1.join_table_function(tokenize_text)

df3 = df1.join_table_function(tokenize_text)

tokenize_text_ref = table_function("STRTOK_SPLIT_TO_TABLE")
df4 = df1.join_table_function(
    tokenize_text_ref(df1["text"], lit(" "))
    .over(partition_by="name", order_by="text")
    .alias("original_row_number", "token_number", "token")
)

df5 = df1.join_table_function(
    tokenize_text_ref(df1["text"], lit(" ,"))
    .over(partition_by="name", order_by="text")
    .alias("row_number", "token_number", "token")
)

## EXPECTED UNPARSER OUTPUT

df1 = session.create_dataframe([["foo", "The quick brown fox jumps over the lazy dog"], ["bar", "Lorem ipsum dolor sit amet, consectetur adipiscing elit"]], schema=["name", "text"])

df2 = df1.join_table_function("STRTOK_SPLIT_TO_TABLE", df1["text"], lit(" "))

df3 = df1.join_table_function(call_table_function("STRTOK_SPLIT_TO_TABLE", df1["text"], lit(" ")).over(, partition_by=["n", "a", "m", "e"]).over(, order_by=["t", "e", "x", "t"]).alias("ignored1", "ignored2", "ignored3").alias("original_row_number", "token_number", "token"))

df3 = df1.join_table_function(call_table_function("STRTOK_SPLIT_TO_TABLE", df1["text"], lit(" ")).over(, partition_by=["n", "a", "m", "e"]).over(, order_by=["t", "e", "x", "t"]).alias("ignored1", "ignored2", "ignored3").alias("original_row_number", "token_number", "token"))

df4 = df1.join_table_function(call_table_function("STRTOK_SPLIT_TO_TABLE", df1["text"], lit(" ")).over(, partition_by=["n", "a", "m", "e"], order_by=["t", "e", "x", "t"]).alias("original_row_number", "token_number", "token"))

df5 = df1.join_table_function(call_table_function("STRTOK_SPLIT_TO_TABLE", df1["text"], lit(" ,")).over(, partition_by=["n", "a", "m", "e"], order_by=["t", "e", "x", "t"]).alias("row_number", "token_number", "token"))

## EXPECTED ENCODED AST

CoMDCoADCvAC+gXsAgq9Agq6AgqUAdICkAEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEgNmb28STPoMSQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSK1RoZSBxdWljayBicm93biBmb3gganVtcHMgb3ZlciB0aGUgbGF6eSBkb2cKoAHSApwBChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhIk+gwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhIDYmFyElj6DFUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEjdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0Eg4KDAoEbmFtZQoEdGV4dBoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSBQoDZGYxGAEiAggBCoACCv0BCu0B+gfpAQrBAZIBvQEKHTIbChkKFwoVU1RSVE9LX1NQTElUX1RPX1RBQkxFGi7KBisKBHRleHQSB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShiGlCSAU0KCxoJCgcKBQoDbGl0GiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShiEgEgIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYiIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGISB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShiEgUKA2RmMhgCIgIIAgqTBwqQBwqFB5oMgQcKjwEKNPoMMQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGUSE29yaWdpbmFsX3Jvd19udW1iZXIKLfoMKgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGUSDHRva2VuX251bWJlcgom+gwjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZRIFdG9rZW4QARLQBZoMzAUKgwEKKfoMJgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGUSCGlnbm9yZWQxCin6DCYKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShlEghpZ25vcmVkMgop+gwmChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZRIIaWdub3JlZDMQARKnBKIMowQK9AKiDPACCsEBkgG9AQodIhsKGQoXChVTVFJUT0tfU1BMSVRfVE9fVEFCTEUaLsoGKwoEdGV4dBIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGUaUJIBTQoLGgkKBwoFCgNsaXQaIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGUSASAiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShlIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZRoi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZRIBbhoi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZRIBYRoi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZRIBbRoi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZRIBZSIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGUSIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGUSAXQSIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGUSAWUSIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGUSAXgSIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGUSAXQiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShlGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGUSABgDIgIIAwpiCmAKUfoHTgonkgEkCgYqBAoCCAMiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIFCgNkZjMYBCICCAQKkwcKkAcKhQeaDIEHCo8BCjT6DDEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShlEhNvcmlnaW5hbF9yb3dfbnVtYmVyCi36DCoKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShlEgx0b2tlbl9udW1iZXIKJvoMIwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGUSBXRva2VuEAES0AWaDMwFCoMBCin6DCYKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShlEghpZ25vcmVkMQop+gwmChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZRIIaWdub3JlZDIKKfoMJgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGUSCGlnbm9yZWQzEAESpwSiDKMECvQCogzwAgrBAZIBvQEKHSIbChkKFwoVU1RSVE9LX1NQTElUX1RPX1RBQkxFGi7KBisKBHRleHQSB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShlGlCSAU0KCxoJCgcKBQoDbGl0GiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShlEgEgIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZSIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGUaIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGUSAW4aIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGUSAWEaIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGUSAW0aIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGUSAWUiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShlEiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShlEgF0EiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShlEgFlEiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShlEgF4EiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShlEgF0IhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGUaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShlEgAYBSICCAUKYgpgClH6B04KJ5IBJAoGKgQKAggFIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobhIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKG4SBQoDZGYzGAYiAggGCscFCsQFCrkFmgy1BQqPAQo0+gwxChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUochITb3JpZ2luYWxfcm93X251bWJlcgot+gwqChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUochIMdG9rZW5fbnVtYmVyCib6DCMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEgV0b2tlbhABEoQEogyABArBAZIBvQEKHSIbChkKFwoVU1RSVE9LX1NQTElUX1RPX1RBQkxFGi7KBisKBHRleHQSB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyGlCSAU0KCxoJCgcKBQoDbGl0GiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEgEgIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUociIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISAXQSIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISAWUSIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISAXgSIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISAXQaIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISAW4aIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISAWEaIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISAW0aIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISAWUiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUochIAGAciAggHCmIKYApR+gdOCieSASQKBioECgIIByIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHESB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShxEgUKA2RmNBgIIgIICAq/BQq8BQqxBZoMrQUKhgEKK/oMKAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHgSCnJvd19udW1iZXIKLfoMKgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHgSDHRva2VuX251bWJlcgom+gwjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeBIFdG9rZW4QARKFBKIMgQQKwgGSAb4BCh0iGwoZChcKFVNUUlRPS19TUExJVF9UT19UQUJMRRouygYrCgR0ZXh0EgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeBpRkgFOCgsaCQoHCgUKA2xpdBoj+gwgChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeBICICwiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh4IhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeBIi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeBIBdBIi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeBIBZRIi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeBIBeBIi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeBIBdBoi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeBIBbhoi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeBIBYRoi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeBIBbRoi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeBIBZSIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHgaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh4EgAYCSICCAkKYgpgClH6B04KJ5IBJAoGKgQKAggJIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodxIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHcSBQoDZGY1GAoiAggKEAEaERIPCg0KBWZpbmFsEAMYCSATIgQQARgX
