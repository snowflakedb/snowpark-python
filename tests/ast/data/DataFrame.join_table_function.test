## TEST CASE

df1 = session.create_dataframe(
    [
        ["foo", "The quick brown fox jumps over the lazy dog"],
        ["bar", "Lorem ipsum dolor sit amet, consectetur adipiscing elit"],
    ],
    schema=["name", "text"],
)

df2 = df1.join_table_function("STRTOK_SPLIT_TO_TABLE", df1["text"], lit(" "))

tokenize_text = (
    call_table_function("STRTOK_SPLIT_TO_TABLE", df1["text"], lit(" "))
    .over(partition_by="name")
    .over(order_by="text")
    .alias("ignored1", "ignored2", "ignored3")
    .alias("original_row_number", "token_number", "token")
)

df3 = df1.join_table_function(tokenize_text)

df3 = df1.join_table_function(tokenize_text)

tokenize_text_ref = table_function("STRTOK_SPLIT_TO_TABLE")
df4 = df1.join_table_function(
    tokenize_text_ref(df1["text"], lit(" "))
    .over(partition_by="name", order_by="text")
    .alias("original_row_number", "token_number", "token")
)

df5 = df1.join_table_function(
    tokenize_text_ref(df1["text"], lit(" ,"))
    .over(partition_by="name", order_by="text")
    .alias("row_number", "token_number", "token")
)

## EXPECTED UNPARSER OUTPUT

df1 = session.create_dataframe([["foo", "The quick brown fox jumps over the lazy dog"], ["bar", "Lorem ipsum dolor sit amet, consectetur adipiscing elit"]], schema=["name", "text"])

df2 = df1.join_table_function("STRTOK_SPLIT_TO_TABLE", df1["text"], lit(" "))

df3 = df1.join_table_function(call_table_function("STRTOK_SPLIT_TO_TABLE", df1["text"], lit(" ")).over(, partition_by=["n", "a", "m", "e"]).over(, order_by=["t", "e", "x", "t"]).alias("ignored1", "ignored2", "ignored3").alias("original_row_number", "token_number", "token"))

df3 = df1.join_table_function(call_table_function("STRTOK_SPLIT_TO_TABLE", df1["text"], lit(" ")).over(, partition_by=["n", "a", "m", "e"]).over(, order_by=["t", "e", "x", "t"]).alias("ignored1", "ignored2", "ignored3").alias("original_row_number", "token_number", "token"))

df4 = df1.join_table_function(call_table_function("STRTOK_SPLIT_TO_TABLE", df1["text"], lit(" ")).over(, partition_by=["n", "a", "m", "e"], order_by=["t", "e", "x", "t"]).alias("original_row_number", "token_number", "token"))

df5 = df1.join_table_function(call_table_function("STRTOK_SPLIT_TO_TABLE", df1["text"], lit(" ,")).over(, partition_by=["n", "a", "m", "e"], order_by=["t", "e", "x", "t"]).alias("row_number", "token_number", "token"))

## EXPECTED ENCODED AST

CoMDCoADCvAC+gXsAgq9Agq6AgqUAdICkAEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEgNmb28STPoMSQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKBkSK1RoZSBxdWljayBicm93biBmb3gganVtcHMgb3ZlciB0aGUgbGF6eSBkb2cKoAHSApwBChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoGRIk+gwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoGRIDYmFyElj6DFUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEjdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0Eg4KDAoEbmFtZQoEdGV4dBoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKBkSBQoDZGYxGAEiAggBCoACCv0BCu0B+gfpAQrBAZIBvQEKHTIbChkKFwoVU1RSVE9LX1NQTElUX1RPX1RBQkxFGi7KBisKBHRleHQSB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSghGlCSAU0KCxoJCgcKBQoDbGl0GiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSghEgEgIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoISIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCESB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSghEgUKA2RmMhgCIgIIAgqTBwqQBwqFB5oMgQcKjwEKNPoMMQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCQSE29yaWdpbmFsX3Jvd19udW1iZXIKLfoMKgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCQSDHRva2VuX251bWJlcgom+gwjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoJBIFdG9rZW4QARLQBZoMzAUKgwEKKfoMJgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCQSCGlnbm9yZWQxCin6DCYKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgkEghpZ25vcmVkMgop+gwmChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoJBIIaWdub3JlZDMQARKnBKIMowQK9AKiDPACCsEBkgG9AQodIhsKGQoXChVTVFJUT0tfU1BMSVRfVE9fVEFCTEUaLsoGKwoEdGV4dBIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCQaUJIBTQoLGgkKBwoFCgNsaXQaIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCQSASAiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgkIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoJBoi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoJBIBbhoi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoJBIBYRoi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoJBIBbRoi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoJBIBZSIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCQSIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCQSAXQSIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCQSAWUSIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCQSAXgSIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCQSAXQiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgkGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoJBoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCQSABgDIgIIAwpiCmAKUfoHTgonkgEkCgYqBAoCCAMiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgrEgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKxIFCgNkZjMYBCICCAQKkwcKkAcKhQeaDIEHCo8BCjT6DDEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgkEhNvcmlnaW5hbF9yb3dfbnVtYmVyCi36DCoKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgkEgx0b2tlbl9udW1iZXIKJvoMIwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCQSBXRva2VuEAES0AWaDMwFCoMBCin6DCYKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgkEghpZ25vcmVkMQop+gwmChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoJBIIaWdub3JlZDIKKfoMJgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCQSCGlnbm9yZWQzEAESpwSiDKMECvQCogzwAgrBAZIBvQEKHSIbChkKFwoVU1RSVE9LX1NQTElUX1RPX1RBQkxFGi7KBisKBHRleHQSB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgkGlCSAU0KCxoJCgcKBQoDbGl0GiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgkEgEgIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoJCIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCQaIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCQSAW4aIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCQSAWEaIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCQSAW0aIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCQSAWUiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgkEiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgkEgF0EiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgkEgFlEiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgkEgF4EiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgkEgF0IhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoJBoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCQaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgkEgAYBSICCAUKYgpgClH6B04KJ5IBJAoGKgQKAggFIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoLRIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKC0SBQoDZGYzGAYiAggGCscFCsQFCrkFmgy1BQqPAQo0+gwxChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoMRITb3JpZ2luYWxfcm93X251bWJlcgot+gwqChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoMRIMdG9rZW5fbnVtYmVyCib6DCMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgxEgV0b2tlbhABEoQEogyABArBAZIBvQEKHSIbChkKFwoVU1RSVE9LX1NQTElUX1RPX1RBQkxFGi7KBisKBHRleHQSB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgxGlCSAU0KCxoJCgcKBQoDbGl0GiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgxEgEgIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoMSIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDESIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDESAXQSIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDESAWUSIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDESAXgSIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDESAXQaIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDESAW4aIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDESAWEaIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDESAW0aIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDESAWUiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgxGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoMRIAGAciAggHCmIKYApR+gdOCieSASQKBioECgIIByIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDASB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgwEgUKA2RmNBgIIgIICAq/BQq8BQqxBZoMrQUKhgEKK/oMKAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDcSCnJvd19udW1iZXIKLfoMKgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDcSDHRva2VuX251bWJlcgom+gwjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoNxIFdG9rZW4QARKFBKIMgQQKwgGSAb4BCh0iGwoZChcKFVNUUlRPS19TUExJVF9UT19UQUJMRRouygYrCgR0ZXh0EgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoNxpRkgFOCgsaCQoHCgUKA2xpdBoj+gwgChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoNxICICwiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSg3IhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoNxIi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoNxIBdBIi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoNxIBZRIi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoNxIBeBIi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoNxIBdBoi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoNxIBbhoi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoNxIBYRoi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoNxIBbRoi+gwfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoNxIBZSIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDcaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSg3EgAYCSICCAkKYgpgClH6B04KJ5IBJAoGKgQKAggJIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoNhIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDYSBQoDZGY1GAoiAggKEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
