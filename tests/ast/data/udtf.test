## TEST CASE

from snowflake.snowpark.functions import col, udtf

from snowflake.snowpark.types import IntegerType, StructField, StructType

class PrimeSieve:
    def process(self, n):
        is_prime = [True] * (n + 1)
        is_prime[0] = False
        is_prime[1] = False
        p = 2
        while p * p <= n:
            if is_prime[p]:
                # set all multiples of p to False
                for i in range(p * p, n + 1, p):
                    is_prime[i] = False
            p += 1
        # yield all prime numbers
        for p in range(2, n + 1):
            if is_prime[p]:
                yield (p,)

prime_udtf = udtf(PrimeSieve, output_schema=StructType([StructField("number", IntegerType())]), input_types=[IntegerType()])

session.table_function(prime_udtf(lit(20))).collect()

@udtf(output_schema=["number"])
class sum_udtf:
    def process(self, a: int, b: int) -> Iterable[Tuple[int]]:
        yield (a + b, )

df = session.create_dataframe([[1, 2], [3, 4]], schema=["a", "b"])
df.with_column("total", sum_udtf(df.a, df.b)).sort(df.a).show()

class GeneratorUDTF:
    def process(self, n):
        for i in range(n):
            yield (i, )

generator_udtf = udtf(GeneratorUDTF, output_schema=StructType([StructField("number", IntegerType())]), input_types=[IntegerType()])

session.table_function(generator_udtf(lit(3))).collect()

# Test here that all arguments in udtf decorator are supported.
class Foo:
    def process(self, a, b) -> Iterable[Tuple[int, int]]:
        yield (a + b, 2)

foo = udtf(Foo,  output_schema= ["a", "b"],
           input_types= [IntegerType(), LongType()],
           name= "foo",
           is_permanent= True,
           stage_location="@",
           imports = ["numpy", ("seaborn", "sns")],
           packages = ["snowflake.snowpark"],
           replace = True,
           if_not_exists = False,
           parallel = 7,
           statement_params = {'a':'b'},
           strict = True,
           secure = True,
           force_inline_code=True,
           external_access_integrations = ["gs"],
           secrets = {'test':'verysecret'},
           immutable = True,
           comment = "fufufufu")

## EXPECTED UNPARSER OUTPUT

prime_udtf = udtf(PrimeSieve, output_schema=StructType([StructField("number", IntegerType(), nullable=True)], structured=False), input_types=[IntegerType()], copy_grants=False)

session.table_function(prime_udtf(lit(20))).collect()

df = session.create_dataframe([[1, 2], [3, 4]], schema=["a", "b"])

df.with_column("total", udtf(sum_udtf, output_schema=["number"], copy_grants=False)(df["a"], df["b"])).sort(df["a"]).show()

generator_udtf = udtf(GeneratorUDTF, output_schema=StructType([StructField("number", IntegerType(), nullable=True)], structured=False), input_types=[IntegerType()], copy_grants=False)

session.table_function(generator_udtf(lit(3))).collect()

foo = udtf(Foo, output_schema=["a", "b"], input_types=[IntegerType(), LongType()], name="foo", is_permanent=True, stage_location="@", imports=["numpy", ["seaborn", "sns"]], packages=["snowflake.snowpark"], replace=True, parallel=7, statement_params=, statement_params={"a": "b"}, strict=True, secure=True, external_access_integrations=["gs"], secrets={"test": "verysecret"}, immutable=True, comment="fufufufu", copy_grants=False, force_inline_code=True)

## EXPECTED ENCODED AST

body {
  assign {
    expr {
      udtf {
        handler {
          name: "PrimeSieve"
        }
        input_types {
          list {
            sp_integer_type: true
          }
        }
        kwargs {
          _1: "copy_grants"
          _2 {
            bool_val {
              src {
                file: "SRC_POSITION_TEST_MODE"
                start_line: 46
              }
            }
          }
        }
        output_schema {
          udtf_schema__type {
            return_type {
              sp_struct_type {
                fields {
                  column_identifier {
                    name: "number"
                  }
                  data_type {
                    sp_integer_type: true
                  }
                  nullable: true
                }
              }
            }
          }
        }
        parallel: 4
        src {
          file: "SRC_POSITION_TEST_MODE"
          start_line: 46
        }
      }
    }
    symbol {
      value: "prime_udtf"
    }
    uid: 1
    var_id {
      bitfield1: 1
    }
  }
}
body {
  assign {
    expr {
      apply_expr {
        fn {
          sp_fn_ref {
            id {
              bitfield1: 1
            }
          }
        }
        pos_args {
          apply_expr {
            fn {
              builtin_fn {
                name {
                  fn_name_flat {
                    name: "lit"
                  }
                }
              }
            }
            pos_args {
              int64_val {
                src {
                  file: "SRC_POSITION_TEST_MODE"
                  start_line: 48
                }
                v: 20
              }
            }
            src {
              file: "SRC_POSITION_TEST_MODE"
              start_line: 48
            }
          }
        }
        src {
          file: "SRC_POSITION_TEST_MODE"
          start_line: 48
        }
      }
    }
    symbol {
    }
    uid: 2
    var_id {
      bitfield1: 2
    }
  }
}
body {
  assign {
    expr {
      sp_session_table_function {
        fn {
          apply_expr {
            fn {
              indirect_table_fn_id_ref {
                id {
                  bitfield1: 2
                }
              }
            }
            src {
              file: "SRC_POSITION_TEST_MODE"
              start_line: 48
            }
          }
        }
        src {
          file: "SRC_POSITION_TEST_MODE"
          start_line: 48
        }
      }
    }
    symbol {
    }
    uid: 3
    var_id {
      bitfield1: 3
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_collect {
        block: true
        case_sensitive: true
        id {
          bitfield1: 3
        }
        src {
          file: "SRC_POSITION_TEST_MODE"
          start_line: 48
        }
      }
    }
    symbol {
    }
    uid: 4
    var_id {
      bitfield1: 4
    }
  }
}
body {
  eval {
    uid: 5
    var_id {
      bitfield1: 4
    }
  }
}
body {
  assign {
    expr {
      udtf {
        handler {
          id: 1
          name: "sum_udtf"
        }
        kwargs {
          _1: "copy_grants"
          _2 {
            bool_val {
              src {
                file: "SRC_POSITION_TEST_MODE"
                start_line: 51
              }
            }
          }
        }
        output_schema {
          udtf_schema__names {
            schema: "number"
          }
        }
        parallel: 4
        src {
          file: "SRC_POSITION_TEST_MODE"
          start_line: 51
        }
      }
    }
    symbol {
    }
    uid: 6
    var_id {
      bitfield1: 6
    }
  }
}
body {
  assign {
    expr {
      sp_create_dataframe {
        data {
          sp_dataframe_data__list {
            vs {
              list_val {
                src {
                  file: "SRC_POSITION_TEST_MODE"
                  start_line: 55
                }
                vs {
                  int64_val {
                    src {
                      file: "SRC_POSITION_TEST_MODE"
                      start_line: 55
                    }
                    v: 1
                  }
                }
                vs {
                  int64_val {
                    src {
                      file: "SRC_POSITION_TEST_MODE"
                      start_line: 55
                    }
                    v: 2
                  }
                }
              }
            }
            vs {
              list_val {
                src {
                  file: "SRC_POSITION_TEST_MODE"
                  start_line: 55
                }
                vs {
                  int64_val {
                    src {
                      file: "SRC_POSITION_TEST_MODE"
                      start_line: 55
                    }
                    v: 3
                  }
                }
                vs {
                  int64_val {
                    src {
                      file: "SRC_POSITION_TEST_MODE"
                      start_line: 55
                    }
                    v: 4
                  }
                }
              }
            }
          }
        }
        schema {
          sp_dataframe_schema__list {
            vs: "a"
            vs: "b"
          }
        }
        src {
          file: "SRC_POSITION_TEST_MODE"
          start_line: 55
        }
      }
    }
    symbol {
      value: "df"
    }
    uid: 7
    var_id {
      bitfield1: 7
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_with_column {
        col {
          apply_expr {
            fn {
              sp_fn_ref {
                id {
                  bitfield1: 6
                }
              }
            }
            pos_args {
              sp_dataframe_col {
                col_name: "a"
                df {
                  sp_dataframe_ref {
                    id {
                      bitfield1: 7
                    }
                  }
                }
                src {
                  file: "SRC_POSITION_TEST_MODE"
                  start_line: 56
                }
              }
            }
            pos_args {
              sp_dataframe_col {
                col_name: "b"
                df {
                  sp_dataframe_ref {
                    id {
                      bitfield1: 7
                    }
                  }
                }
                src {
                  file: "SRC_POSITION_TEST_MODE"
                  start_line: 56
                }
              }
            }
            src {
              file: "SRC_POSITION_TEST_MODE"
              start_line: 56
            }
          }
        }
        col_name: "total"
        df {
          sp_dataframe_ref {
            id {
              bitfield1: 7
            }
          }
        }
        src {
          file: "SRC_POSITION_TEST_MODE"
          start_line: 56
        }
      }
    }
    symbol {
    }
    uid: 8
    var_id {
      bitfield1: 8
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_sort {
        cols {
          sp_dataframe_col {
            col_name: "a"
            df {
              sp_dataframe_ref {
                id {
                  bitfield1: 7
                }
              }
            }
            src {
              file: "SRC_POSITION_TEST_MODE"
              start_line: 56
            }
          }
        }
        cols_variadic: true
        df {
          sp_dataframe_ref {
            id {
              bitfield1: 8
            }
          }
        }
        src {
          file: "SRC_POSITION_TEST_MODE"
          start_line: 56
        }
      }
    }
    symbol {
    }
    uid: 9
    var_id {
      bitfield1: 9
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_show {
        id {
          bitfield1: 9
        }
      }
    }
    symbol {
    }
    uid: 10
    var_id {
      bitfield1: 10
    }
  }
}
body {
  eval {
    uid: 11
    var_id {
      bitfield1: 10
    }
  }
}
body {
  assign {
    expr {
      udtf {
        handler {
          id: 2
          name: "GeneratorUDTF"
        }
        input_types {
          list {
            sp_integer_type: true
          }
        }
        kwargs {
          _1: "copy_grants"
          _2 {
            bool_val {
              src {
                file: "SRC_POSITION_TEST_MODE"
                start_line: 63
              }
            }
          }
        }
        output_schema {
          udtf_schema__type {
            return_type {
              sp_struct_type {
                fields {
                  column_identifier {
                    name: "number"
                  }
                  data_type {
                    sp_integer_type: true
                  }
                  nullable: true
                }
              }
            }
          }
        }
        parallel: 4
        src {
          file: "SRC_POSITION_TEST_MODE"
          start_line: 63
        }
      }
    }
    symbol {
      value: "generator_udtf"
    }
    uid: 12
    var_id {
      bitfield1: 12
    }
  }
}
body {
  assign {
    expr {
      apply_expr {
        fn {
          sp_fn_ref {
            id {
              bitfield1: 12
            }
          }
        }
        pos_args {
          apply_expr {
            fn {
              builtin_fn {
                name {
                  fn_name_flat {
                    name: "lit"
                  }
                }
              }
            }
            pos_args {
              int64_val {
                src {
                  file: "SRC_POSITION_TEST_MODE"
                  start_line: 65
                }
                v: 3
              }
            }
            src {
              file: "SRC_POSITION_TEST_MODE"
              start_line: 65
            }
          }
        }
        src {
          file: "SRC_POSITION_TEST_MODE"
          start_line: 65
        }
      }
    }
    symbol {
    }
    uid: 13
    var_id {
      bitfield1: 13
    }
  }
}
body {
  assign {
    expr {
      sp_session_table_function {
        fn {
          apply_expr {
            fn {
              indirect_table_fn_id_ref {
                id {
                  bitfield1: 13
                }
              }
            }
            src {
              file: "SRC_POSITION_TEST_MODE"
              start_line: 65
            }
          }
        }
        src {
          file: "SRC_POSITION_TEST_MODE"
          start_line: 65
        }
      }
    }
    symbol {
    }
    uid: 14
    var_id {
      bitfield1: 14
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_collect {
        block: true
        case_sensitive: true
        id {
          bitfield1: 14
        }
        src {
          file: "SRC_POSITION_TEST_MODE"
          start_line: 65
        }
      }
    }
    symbol {
    }
    uid: 15
    var_id {
      bitfield1: 15
    }
  }
}
body {
  eval {
    uid: 16
    var_id {
      bitfield1: 15
    }
  }
}
body {
  assign {
    expr {
      udtf {
        comment {
          value: "fufufufu"
        }
        external_access_integrations: "gs"
        handler {
          id: 3
          name: "Foo"
        }
        immutable: true
        imports {
          sp_table_name_flat {
            name: "numpy"
          }
        }
        imports {
          sp_table_name_structured {
            name: "seaborn"
            name: "sns"
          }
        }
        input_types {
          list {
            sp_integer_type: true
          }
          list {
            sp_long_type: true
          }
        }
        is_permanent: true
        kwargs {
          _1: "copy_grants"
          _2 {
            bool_val {
              src {
                file: "SRC_POSITION_TEST_MODE"
                start_line: 72
              }
            }
          }
        }
        kwargs {
          _1: "force_inline_code"
          _2 {
            bool_val {
              src {
                file: "SRC_POSITION_TEST_MODE"
                start_line: 72
              }
              v: true
            }
          }
        }
        name {
          fn_name_flat {
            name: "foo"
          }
        }
        output_schema {
          udtf_schema__names {
            schema: "a"
            schema: "b"
          }
        }
        packages: "snowflake.snowpark"
        parallel: 7
        replace: true
        secrets {
          _1: "test"
          _2: "verysecret"
        }
        secure: true
        src {
          file: "SRC_POSITION_TEST_MODE"
          start_line: 72
        }
        stage_location: "@"
        statement_params {
          _1: "a"
          _2: "b"
        }
        strict: true
      }
    }
    symbol {
      value: "foo"
    }
    uid: 17
    var_id {
      bitfield1: 17
    }
  }
}
client_ast_version: 1
client_language {
  python_language {
    version {
      label: "final"
      major: 3
      minor: 9
      patch: 1
    }
  }
}
client_version {
  major: 1
  minor: 24
}
