## TEST CASE

from snowflake.snowpark.functions import col, udtf

from snowflake.snowpark.types import IntegerType, StructField, StructType

class PrimeSieve:
    def process(self, n):
        is_prime = [True] * (n + 1)
        is_prime[0] = False
        is_prime[1] = False
        p = 2
        while p * p <= n:
            if is_prime[p]:
                # set all multiples of p to False
                for i in range(p * p, n + 1, p):
                    is_prime[i] = False
            p += 1
        # yield all prime numbers
        for p in range(2, n + 1):
            if is_prime[p]:
                yield (p,)

prime_udtf = udtf(PrimeSieve, output_schema=StructType([StructField("number", IntegerType())]), input_types=[IntegerType()])

session.table_function(prime_udtf(lit(20))).collect()

@udtf(output_schema=["number"])
class sum_udtf:
    def process(self, a: int, b: int) -> Iterable[Tuple[int]]:
        yield (a + b, )

df = session.create_dataframe([[1, 2], [3, 4]], schema=["a", "b"])
df.with_column("total", sum_udtf(df.a, df.b)).sort(df.a).show()

class GeneratorUDTF:
    def process(self, n):
        for i in range(n):
            yield (i, )

generator_udtf = udtf(GeneratorUDTF, output_schema=StructType([StructField("number", IntegerType())]), input_types=[IntegerType()])

session.table_function(generator_udtf(lit(3))).collect()

# Test here that all arguments in udtf decorator are supported.
class Foo:
    def process(self, a, b) -> Iterable[Tuple[int, int]]:
        yield (a + b, 2)

foo = udtf(Foo,  output_schema= ["a", "b"],
           input_types= [IntegerType(), LongType()],
           name= "foo",
           is_permanent= True,
           stage_location="@",
           imports = ["numpy", ("seaborn", "sns")],
           packages = ["snowflake.snowpark"],
           replace = True,
           if_not_exists = False,
           parallel = 7,
           statement_params = {'a':'b'},
           strict = True,
           secure = True,
           force_inline_code=True,
           external_access_integrations = ["gs"],
           secrets = {'test':'verysecret'},
           immutable = True,
           comment = "fufufufu")

## EXPECTED UNPARSER OUTPUT

prime_udtf = udtf(PrimeSieve, output_schema=StructType([StructField("number", IntegerType(), nullable=True)], structured=False), input_types=[IntegerType()])

session.table_function(prime_udtf(lit(20))).collect()

df = session.create_dataframe([[1, 2], [3, 4]], schema=["a", "b"])

df.with_column("total", udtf(sum_udtf, output_schema=["number"])(df["a"], df["b"])).sort(df["a"]).show()

generator_udtf = udtf(GeneratorUDTF, output_schema=StructType([StructField("number", IntegerType(), nullable=True)], structured=False), input_types=[IntegerType()])

session.table_function(generator_udtf(lit(3))).collect()

foo = udtf(Foo, output_schema=["a", "b"], input_types=[IntegerType(), LongType()], name="foo", is_permanent=True, stage_location="@", imports=["numpy", ["seaborn", "sns"]], packages=["snowflake.snowpark"], replace=True, parallel=7, statement_params=, statement_params={"a": "b"}, strict=True, secure=True, external_access_integrations=["gs"], secrets={"test": "verysecret"}, immutable=True, comment="fufufufu", force_inline_code=True)

## EXPECTED ENCODED AST

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
