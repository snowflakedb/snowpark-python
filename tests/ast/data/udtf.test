## TEST CASE

from snowflake.snowpark.functions import col, udtf

from snowflake.snowpark.types import IntegerType, StructField, StructType

class PrimeSieve:
    def process(self, n):
        is_prime = [True] * (n + 1)
        is_prime[0] = False
        is_prime[1] = False
        p = 2
        while p * p <= n:
            if is_prime[p]:
                # set all multiples of p to False
                for i in range(p * p, n + 1, p):
                    is_prime[i] = False
            p += 1
        # yield all prime numbers
        for p in range(2, n + 1):
            if is_prime[p]:
                yield (p,)

prime_udtf = udtf(PrimeSieve, output_schema=StructType([StructField("number", IntegerType())]), input_types=[IntegerType()])

session.table_function(prime_udtf(lit(20))).collect()

@udtf(output_schema=["number"])
class sum_udtf:
    def process(self, a: int, b: int) -> Iterable[Tuple[int]]:
        yield (a + b, )

df = session.create_dataframe([[1, 2], [3, 4]], schema=["a", "b"])
df.with_column("total", sum_udtf(df.a, df.b)).sort(df.a).show()

class GeneratorUDTF:
    def process(self, n):
        for i in range(n):
            yield (i, )

generator_udtf = udtf(GeneratorUDTF, output_schema=StructType([StructField("number", IntegerType())]), input_types=[IntegerType()])

session.table_function(generator_udtf(lit(3))).collect()

# Test here that all arguments in udtf decorator are supported.
class Foo:
    def process(self, a, b) -> Iterable[Tuple[int, int]]:
        yield (a + b, 2)

foo = udtf(Foo,  output_schema= ["a", "b"],
           input_types= [IntegerType(), LongType()],
           name= "foo",
           is_permanent= True,
           stage_location="@",
           imports = ["numpy", ("seaborn", "sns")],
           packages = ["snowflake.snowpark"],
           replace = True,
           if_not_exists = False,
           parallel = 7,
           statement_params = {'a':'b'},
           strict = True,
           secure = True,
           force_inline_code=True,
           external_access_integrations = ["gs"],
           secrets = {'test':'verysecret'},
           immutable = True,
           comment = "fufufufu")

## EXPECTED UNPARSER OUTPUT

prime_udtf = udtf(PrimeSieve, output_schema=StructType([StructField("number", IntegerType(), nullable=True)], structured=False), input_types=[IntegerType()])

session.table_function(prime_udtf(lit(20))).collect()

df = session.create_dataframe([[1, 2], [3, 4]], schema=["a", "b"])

df.with_column("total", udtf(sum_udtf, output_schema=["number"])(df["a"], df["b"])).sort(df["a"]).show()

generator_udtf = udtf(GeneratorUDTF, output_schema=StructType([StructField("number", IntegerType(), nullable=True)], structured=False), input_types=[IntegerType()])

session.table_function(generator_udtf(lit(3))).collect()

foo = udtf(Foo, output_schema=["a", "b"], input_types=[IntegerType(), LongType()], name="foo", is_permanent=True, stage_location="@", imports=["numpy", ["seaborn", "sns"]], packages=["snowflake.snowpark"], replace=True, parallel=7, statement_params=, statement_params={"a": "b"}, strict=True, secure=True, external_access_integrations=["gs"], secrets={"test": "verysecret"}, immutable=True, comment="fufufufu", force_inline_code=True)

## EXPECTED ENCODED AST

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
