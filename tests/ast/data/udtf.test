## TEST CASE

from snowflake.snowpark.functions import col, udtf

from snowflake.snowpark.types import IntegerType, StructField, StructType

class PrimeSieve:
    def process(self, n):
        is_prime = [True] * (n + 1)
        is_prime[0] = False
        is_prime[1] = False
        p = 2
        while p * p <= n:
            if is_prime[p]:
                # set all multiples of p to False
                for i in range(p * p, n + 1, p):
                    is_prime[i] = False
            p += 1
        # yield all prime numbers
        for p in range(2, n + 1):
            if is_prime[p]:
                yield (p,)

prime_udtf = udtf(PrimeSieve, output_schema=StructType([StructField("number", IntegerType())]), input_types=[IntegerType()])

session.table_function(prime_udtf(lit(20))).collect()

@udtf(output_schema=["number"])
class sum_udtf:
    def process(self, a: int, b: int) -> Iterable[Tuple[int]]:
        yield (a + b, )

df = session.create_dataframe([[1, 2], [3, 4]], schema=["a", "b"])
df.with_column("total", sum_udtf(df.a, df.b)).sort(df.a).show()

class GeneratorUDTF:
    def process(self, n):
        for i in range(n):
            yield (i, )

generator_udtf = udtf(GeneratorUDTF, output_schema=StructType([StructField("number", IntegerType())]), input_types=[IntegerType()])

session.table_function(generator_udtf(lit(3))).collect()

# Test here that all arguments in udtf decorator are supported.
class Foo:
    def process(self, a, b) -> Iterable[Tuple[int, int]]:
        yield (a + b, 2)

foo = udtf(Foo,  output_schema= ["a", "b"],
           input_types= [IntegerType(), LongType()],
           name= "foo",
           is_permanent= True,
           stage_location="@",
           imports = ["numpy", ("seaborn", "sns")],
           packages = ["snowflake.snowpark"],
           replace = True,
           if_not_exists = False,
           parallel = 7,
           statement_params = {'a':'b'},
           strict = True,
           secure = True,
           force_inline_code=True,
           external_access_integrations = ["gs"],
           secrets = {'test':'verysecret'},
           immutable = True,
           comment = "fufufufu")

## EXPECTED UNPARSER OUTPUT

prime_udtf = udtf(PrimeSieve, output_schema=StructType([StructField("number", IntegerType(), nullable=True)], structured=False), input_types=[IntegerType()])

session.table_function(prime_udtf(lit(20))).collect()

df = session.create_dataframe([[1, 2], [3, 4]], schema=["a", "b"])

df.with_column("total", udtf(sum_udtf, output_schema=["number"])(df["a"], df["b"])).sort(df["a"]).show()

generator_udtf = udtf(GeneratorUDTF, output_schema=StructType([StructField("number", IntegerType(), nullable=True)], structured=False), input_types=[IntegerType()])

session.table_function(generator_udtf(lit(3))).collect()

foo = udtf(Foo, output_schema=["a", "b"], input_types=[IntegerType()]LongType()], name="foo", is_permanent=True, stage_location="@", imports=["numpy"]["seaborn", "sns"]], packages=["snowflake.snowpark"], replace=True, parallel=7, statement_params=, statement_params={"a": "b"}, strict=True, secure=True, external_access_integrations=["gs"], secrets={"test": "verysecret"}, immutable=True, comment="fufufufu", force_inline_code=True)

## EXPECTED ENCODED AST

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
