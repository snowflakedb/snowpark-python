## TEST CASE

from snowflake.snowpark.functions import col, udtf

from snowflake.snowpark.types import IntegerType, StructField, StructType

class PrimeSieve:
    def process(self, n):
        is_prime = [True] * (n + 1)
        is_prime[0] = False
        is_prime[1] = False
        p = 2
        while p * p <= n:
            if is_prime[p]:
                # set all multiples of p to False
                for i in range(p * p, n + 1, p):
                    is_prime[i] = False
            p += 1
        # yield all prime numbers
        for p in range(2, n + 1):
            if is_prime[p]:
                yield (p,)

prime_udtf = udtf(PrimeSieve, output_schema=StructType([StructField("number", IntegerType())]), input_types=[IntegerType()])

session.table_function(prime_udtf(lit(20))).collect()

@udtf(output_schema=["number"])
class sum_udtf:
    def process(self, a: int, b: int) -> Iterable[Tuple[int]]:
        yield (a + b, )

df = session.create_dataframe([[1, 2], [3, 4]], schema=["a", "b"])
df.with_column("total", sum_udtf(df.a, df.b)).sort(df.a).show()


## EXPECTED OUTPUT

prime_udtf = udtf(PrimeSieve, output_schema=StructType([StructField("number", IntegerType(), nullable=True)], structured=False), input_types=[IntegerType()])

session.table_function(prime_udtf(lit(20))).collect()

df = session.create_dataframe([[1, 2], [3, 4]], schema=["a", "b"])

df.with_column("total", udtf(sum_udtf, output_schema=["number"])(df["a"], df["b"])).sort(df["a"]).show()
