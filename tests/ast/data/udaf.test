## TEST CASE

from snowflake.snowpark.functions import col, udaf

from snowflake.snowpark.types import IntegerType
class PythonSumUDAF:
    def __init__(self) -> None:
        self._sum = 0

    @property
    def aggregate_state(self):
        return self._sum

    def accumulate(self, input_value):
        self._sum += input_value

    def merge(self, other_sum):
        self._sum += other_sum

    def finish(self):
        return self._sum

sum_udaf = udaf(
    PythonSumUDAF,
    name="sum_int",
    replace=True,
    return_type=IntegerType(),
    input_types=[IntegerType()],
)

df = session.create_dataframe([[1, 3], [1, 4], [2, 5], [2, 6]]).to_df("a", "b")

df.agg(sum_udaf("a")).collect()


import heapq
from dataclasses import dataclass
import itertools
from typing import List

@dataclass
class AggState:
    minheap: List[int]
    k: int

class PythonTopK:
    def __init__(self):
        self._agg_state = AggState([], 0)

    @property
    def aggregate_state(self):
        return self._agg_state

    @staticmethod
    def get_top_k_items(minheap, k):
      # Return k smallest elements if there are more than k elements on the min heap.
      if (len(minheap) > k):
        return [heapq.heappop(minheap) for i in range(k)]
      return minheap

    def accumulate(self, input, k):
        self._agg_state.k = k

        # Store the input as negative value, as heapq is a min heap.
        heapq.heappush(self._agg_state.minheap, -input)

        # Store only top k items on the min heap.
        self._agg_state.minheap = self.get_top_k_items(self._agg_state.minheap, k)

    def merge(self, other_agg_state):
        k = self._agg_state.k if self._agg_state.k > 0 else other_agg_state.k

        # Merge two min heaps by popping off elements from one and pushing them onto another.
        while(len(other_agg_state.minheap) > 0):
            heapq.heappush(self._agg_state.minheap, heapq.heappop(other_agg_state.minheap))

        # Store only k elements on the min heap.
        self._agg_state.minheap = self.get_top_k_items(self._agg_state.minheap, k)

    def finish(self):
        return [-x for x in self._agg_state.minheap]

u2 = udaf(PythonTopK, return_type=IntegerType(), input_types=[IntegerType()], name="top_k", is_permanent=True,
          stage_location="@", imports=["numpy"], packages=["numpy"], replace=True, if_not_exists=False, parallel=8,
          statement_params={'a':'b', 'd':'e'}, immutable=True, external_access_integrations=['s3'],
          secrets={'a':'c', 'e':'f'}, comment='test udaf', force_inline_code=True)

df.agg(u2("a"))

## EXPECTED UNPARSER OUTPUT

sum_udaf = udaf("PythonSumUDAF", return_type=IntegerType(), input_types=[IntegerType()], name="sum_int", replace=True, copy_grants=False, _registered_object_name="sum_int")

df = session.create_dataframe([[1, 3], [1, 4], [2, 5], [2, 6]])

df = df.to_df("a", "b")

df.agg(sum_udaf("a")).collect()

u2 = udaf("PythonTopK", return_type=IntegerType(), input_types=[IntegerType()], name="top_k", is_permanent=True, stage_location="@", imports=["numpy"], packages=["numpy"], replace=True, parallel=8, statement_params={"a": "b", "d": "e"}, external_access_integrations=["s3"], secrets={"a": "c", "e": "f"}, immutable=True, comment="test udaf", copy_grants=False, force_inline_code=True, _registered_object_name="top_k")

res3 = df.agg(u2("a"))

## EXPECTED ENCODED AST

body {
  assign {
    expr {
      udaf {
        handler {
          name: "PythonSumUDAF"
          object_name {
            name {
              sp_name_flat {
                name: "sum_int"
              }
            }
          }
        }
        input_types {
          list {
            sp_integer_type: true
          }
        }
        kwargs {
          _1: "copy_grants"
          _2 {
            bool_val {
              src {
                end_column: 9
                end_line: 51
                file: "SRC_POSITION_TEST_MODE"
                start_column: 19
                start_line: 45
              }
            }
          }
        }
        name {
          name {
            sp_name_flat {
              name: "sum_int"
            }
          }
        }
        parallel: 4
        replace: true
        return_type {
          sp_integer_type: true
        }
        src {
          end_column: 9
          end_line: 51
          file: "SRC_POSITION_TEST_MODE"
          start_column: 19
          start_line: 45
        }
      }
    }
    symbol {
      value: "sum_udaf"
    }
    uid: 1
    var_id {
      bitfield1: 1
    }
  }
}
body {
  assign {
    expr {
      sp_create_dataframe {
        data {
          sp_dataframe_data__list {
            vs {
              list_val {
                src {
                  end_column: 71
                  end_line: 53
                  file: "SRC_POSITION_TEST_MODE"
                  start_column: 13
                  start_line: 53
                }
                vs {
                  int64_val {
                    src {
                      end_column: 71
                      end_line: 53
                      file: "SRC_POSITION_TEST_MODE"
                      start_column: 13
                      start_line: 53
                    }
                    v: 1
                  }
                }
                vs {
                  int64_val {
                    src {
                      end_column: 71
                      end_line: 53
                      file: "SRC_POSITION_TEST_MODE"
                      start_column: 13
                      start_line: 53
                    }
                    v: 3
                  }
                }
              }
            }
            vs {
              list_val {
                src {
                  end_column: 71
                  end_line: 53
                  file: "SRC_POSITION_TEST_MODE"
                  start_column: 13
                  start_line: 53
                }
                vs {
                  int64_val {
                    src {
                      end_column: 71
                      end_line: 53
                      file: "SRC_POSITION_TEST_MODE"
                      start_column: 13
                      start_line: 53
                    }
                    v: 1
                  }
                }
                vs {
                  int64_val {
                    src {
                      end_column: 71
                      end_line: 53
                      file: "SRC_POSITION_TEST_MODE"
                      start_column: 13
                      start_line: 53
                    }
                    v: 4
                  }
                }
              }
            }
            vs {
              list_val {
                src {
                  end_column: 71
                  end_line: 53
                  file: "SRC_POSITION_TEST_MODE"
                  start_column: 13
                  start_line: 53
                }
                vs {
                  int64_val {
                    src {
                      end_column: 71
                      end_line: 53
                      file: "SRC_POSITION_TEST_MODE"
                      start_column: 13
                      start_line: 53
                    }
                    v: 2
                  }
                }
                vs {
                  int64_val {
                    src {
                      end_column: 71
                      end_line: 53
                      file: "SRC_POSITION_TEST_MODE"
                      start_column: 13
                      start_line: 53
                    }
                    v: 5
                  }
                }
              }
            }
            vs {
              list_val {
                src {
                  end_column: 71
                  end_line: 53
                  file: "SRC_POSITION_TEST_MODE"
                  start_column: 13
                  start_line: 53
                }
                vs {
                  int64_val {
                    src {
                      end_column: 71
                      end_line: 53
                      file: "SRC_POSITION_TEST_MODE"
                      start_column: 13
                      start_line: 53
                    }
                    v: 2
                  }
                }
                vs {
                  int64_val {
                    src {
                      end_column: 71
                      end_line: 53
                      file: "SRC_POSITION_TEST_MODE"
                      start_column: 13
                      start_line: 53
                    }
                    v: 6
                  }
                }
              }
            }
          }
        }
        src {
          end_column: 71
          end_line: 53
          file: "SRC_POSITION_TEST_MODE"
          start_column: 13
          start_line: 53
        }
      }
    }
    symbol {
      value: "df"
    }
    uid: 2
    var_id {
      bitfield1: 2
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_to_df {
        col_names: "a"
        col_names: "b"
        df {
          sp_dataframe_ref {
            id {
              bitfield1: 2
            }
          }
        }
        src {
          end_column: 87
          end_line: 53
          file: "SRC_POSITION_TEST_MODE"
          start_column: 13
          start_line: 53
        }
        variadic: true
      }
    }
    symbol {
      value: "df"
    }
    uid: 3
    var_id {
      bitfield1: 3
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_agg {
        df {
          sp_dataframe_ref {
            id {
              bitfield1: 3
            }
          }
        }
        exprs {
          args {
            apply_expr {
              fn {
                sp_fn_ref {
                  id {
                    bitfield1: 1
                  }
                }
              }
              pos_args {
                string_val {
                  src {
                    end_column: 28
                    end_line: 55
                    file: "SRC_POSITION_TEST_MODE"
                    start_column: 15
                    start_line: 55
                  }
                  v: "a"
                }
              }
              src {
                end_column: 28
                end_line: 55
                file: "SRC_POSITION_TEST_MODE"
                start_column: 15
                start_line: 55
              }
            }
          }
          variadic: true
        }
        src {
          end_column: 29
          end_line: 55
          file: "SRC_POSITION_TEST_MODE"
          start_column: 8
          start_line: 55
        }
      }
    }
    symbol {
    }
    uid: 4
    var_id {
      bitfield1: 4
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_collect {
        block: true
        case_sensitive: true
        id {
          bitfield1: 4
        }
        src {
          end_column: 39
          end_line: 55
          file: "SRC_POSITION_TEST_MODE"
          start_column: 8
          start_line: 55
        }
      }
    }
    symbol {
    }
    uid: 5
    var_id {
      bitfield1: 5
    }
  }
}
body {
  eval {
    uid: 6
    var_id {
      bitfield1: 5
    }
  }
}
body {
  assign {
    expr {
      udaf {
        comment {
          value: "test udaf"
        }
        external_access_integrations: "s3"
        handler {
          id: 1
          name: "PythonTopK"
          object_name {
            name {
              sp_name_flat {
                name: "top_k"
              }
            }
          }
        }
        immutable: true
        imports {
          name {
            sp_name_flat {
              name: "numpy"
            }
          }
        }
        input_types {
          list {
            sp_integer_type: true
          }
        }
        is_permanent: true
        kwargs {
          _1: "copy_grants"
          _2 {
            bool_val {
              src {
                end_column: 90
                end_line: 108
                file: "SRC_POSITION_TEST_MODE"
                start_column: 13
                start_line: 105
              }
            }
          }
        }
        kwargs {
          _1: "force_inline_code"
          _2 {
            bool_val {
              src {
                end_column: 90
                end_line: 108
                file: "SRC_POSITION_TEST_MODE"
                start_column: 13
                start_line: 105
              }
              v: true
            }
          }
        }
        name {
          name {
            sp_name_flat {
              name: "top_k"
            }
          }
        }
        packages: "numpy"
        parallel: 8
        replace: true
        return_type {
          sp_integer_type: true
        }
        secrets {
          _1: "a"
          _2: "c"
        }
        secrets {
          _1: "e"
          _2: "f"
        }
        src {
          end_column: 90
          end_line: 108
          file: "SRC_POSITION_TEST_MODE"
          start_column: 13
          start_line: 105
        }
        stage_location {
          value: "@"
        }
        statement_params {
          _1: "a"
          _2: "b"
        }
        statement_params {
          _1: "d"
          _2: "e"
        }
      }
    }
    symbol {
      value: "u2"
    }
    uid: 7
    var_id {
      bitfield1: 7
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_agg {
        df {
          sp_dataframe_ref {
            id {
              bitfield1: 3
            }
          }
        }
        exprs {
          args {
            apply_expr {
              fn {
                sp_fn_ref {
                  id {
                    bitfield1: 7
                  }
                }
              }
              pos_args {
                string_val {
                  src {
                    end_column: 22
                    end_line: 110
                    file: "SRC_POSITION_TEST_MODE"
                    start_column: 15
                    start_line: 110
                  }
                  v: "a"
                }
              }
              src {
                end_column: 22
                end_line: 110
                file: "SRC_POSITION_TEST_MODE"
                start_column: 15
                start_line: 110
              }
            }
          }
          variadic: true
        }
        src {
          end_column: 23
          end_line: 110
          file: "SRC_POSITION_TEST_MODE"
          start_column: 8
          start_line: 110
        }
      }
    }
    symbol {
    }
    uid: 8
    var_id {
      bitfield1: 8
    }
  }
}
client_ast_version: 1
client_language {
  python_language {
    version {
      label: "final"
      major: 3
      minor: 9
      patch: 1
    }
  }
}
client_version {
  major: 1
  minor: 26
}
