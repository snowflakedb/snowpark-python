## TEST CASE

import datetime

df = session.table("test_table")

df01 = df.select(col("A"))

df02 = df.select(col("X", "A"))

df03 = df.select(col("A", None))

df04 = df.select(column("A"))

df05 = df.select(column("X", "A"))

df06 = df.select(column("A", None))

df07 = df.select(lit(1), lit("1"), lit(1.0), lit(True), lit(b'snow'), lit(datetime.date(2023, 2, 2)), lit([1, 2]), lit({"snow": "flake"}))

df08 = df.select(sql_expr("CURRENT_WAREHOUSE()"))

df09 = df.select(current_session())

df10 = df.select(current_statement())

df11 = df.select(current_user())

df12 = df.select(current_version())

df13 = df.select(current_warehouse())

df14 = df.select(current_database())

df15 = df.select(current_role())

df16 = df.select(current_schema())

df17 = df.select(current_schemas())

df18 = df.select(current_region())

df19 = df.select(current_account())

df20 = df.select(current_available_roles())

df21 = df.select(add_months("d", 4))

df22 = df.select(add_months(col("A"), 4))

df23 = df.select(add_months(col("A"), col("A")))

df24 = df.select(any_value("A"), any_value(col("A")))

df25 = df.select(bitnot("A"), bitnot(col("A")), bitnot(e=col("A")))

df26 = df.select(bitshiftleft("A", col("B")), bitshiftleft("A", -10), bitshiftleft(col("B"), 42))

df27 = df.select(bitshiftright("A", col("B")), bitshiftright("A", -10), bitshiftright(col("B"), 42))

df28 = df.select(bround("A", scale=10), bround("A", 2), bround(col("A"), scale=col("B")))

df29 = df.select(convert_timezone("A", col("B")), convert_timezone(col("A"), "B"), convert_timezone("A", "B"), convert_timezone(col("A"), col("B")), convert_timezone("A","B",None), convert_timezone("A", "B", "A"))

df30 = df.select(convert_timezone(lit("UTC"), col("a")), convert_timezone(lit("UTC"), col("b"), lit("Asia/Shanghai")))

df31 = df.select(approx_count_distinct("A"), approx_count_distinct(col("A")))

df32 = df.select(avg("A"), avg(col("B")))

df33 = df.select(corr("A", "B"))

df34 = df.select(count("*"), count("A"), count(col("A")))

df35 = df.select(count_distinct(), count_distinct(col("*")), count_distinct("A", "B", "C", "D", col("E")))

df36 = df.select(covar_pop("A", col("B")))

df37 = df.select(covar_samp("A", "B"))

df38 = df.select(create_map(["A", "B"]))

df39 = df.select(create_map({"A", "B", "A", "B"}))

df40 = df.select(create_map("A", "B"))

df41 = df.select(create_map("A", "B", "C", "D"))

df42 = df.select(kurtosis("A"))

df43 = df.select(max("*"), max("A"), max(col("A")))

df44 = df.select(mean("A"))

df45 = df.select(median("A"))

df46 = df.select(min("A"))

df47 = df.select(mode("A"))

df48 = df.select(skew("A"))

df49 = df.select(stddev("A"))

df50 = df.select(stddev_samp("A"))

df51 = df.select(stddev_pop("A"))

df52 = df.select(sum("A"))

df53 = df.select(sum_distinct("A"))

df54 = df.select(variance("A"))

df55 = df.select(var_samp("A"))

df56 = df.select(var_pop("A"))

df57 = df.select(approx_percentile("A", 0.6), approx_percentile(col("B"), 0.0))

df58 = df.select(approx_percentile_accumulate("A"))

df59 = df.select(approx_percentile_estimate("A", 0.3))

df60 = df.select(approx_percentile_combine("A"))

df61 = df.select(grouping("A"), grouping("A", "B"))

df62 = df.select(coalesce(), coalesce(col("A"), lit(10)))

df63 = df.select(equal_nan("A"))

df64 = df.select(is_null("A"))

df65 = df.select(negate("A"))

df66 = df.select(not_("A"))

df67 = df.select(random(), random(None), random(10))

df68 = df.select(uniform("A", "B", "A"), uniform(10, 13., col("A")), uniform(0.2, 2, 0.2))

df69 = df.select(seq1(0), seq1(10), seq1(-10))

df70 = df.select(seq2(1))

df71 = df.select(seq4(12))

df72 = df.select(seq8(324))

df73 = df.select(to_decimal("A", 10, 3), to_decimal(col("B"), 12, 3))

df74 = df.select(to_double(col("A")), to_double("A", None), to_double("A", "999.9"), to_double(col("A"), col("B")))

df75 = df.select(div0(0, 1), div0(1.2, 9.3), div0(10, 89.2), div0("A", 1), div0(0.2, "A"), div0(0.3, col("B")))

df76 = df.select(sqrt("A"))

df77 = df.select(abs("A"))

df78 = df.select(acos("A"))

df79 = df.select(asin("A"))

df80 = df.select(atan("A"))

df81 = df.select(atan2("A", "B"))

df82 = df.select(ceil("A"))

df83 = df.select(cos("A"))

df84 = df.select(cosh("A"))

df85 = df.select(exp("A"))

df86 = df.select(factorial("A"))

df87 = df.select(floor("A"))

df88 = df.select(format_number("A", col("B")), format_number("A", 10))

df89 = df.select(sin("A"))

df90 = df.select(sinh("A"))

df91 = df.select(tan("A"))

df92 = df.select(tanh("A"))

df93 = df.select(degrees("A"))

df94 = df.select(radians("A"))

df95 = df.select(md5("A"))

df96 = df.select(sha1("A"))

df97 = df.select(sha2(col("B"), 0), sha2("A", 224))

df98 = df.select(hash(lit(None), lit(10), col("A"), "B"))

df99 = df.select(ascii("A"))

df100 = df.select(initcap("A"), initcap("A", None), initcap("A", "B"), initcap(col("A"), lit("123")))

df101 = df.select(length("A"))

df102 = df.select(lower("A"))

df103 = df.select(lpad("A", col("B"), "B"), lpad("A", 100, "B"), lpad(col("A"), col("B"), col("B")))

df104 = df.select(ltrim("A"), ltrim("A", None), ltrim(col("A"), "B"), ltrim(col("A"), lit("B")))

df105 = df.select(rpad("A", col("B"), "B"), rpad("A", 100, "B"), rpad(col("A"), col("B"), col("B")))

df106 = df.select(rtrim("A"), rtrim("A", None), rtrim(col("A"), "B"), rtrim(col("A"), lit("B")))

df107 = df.select(repeat("A", 1), repeat(col("A"), 20), repeat("B", col("A")))

df108 = df.select(reverse("A"))

df109 = df.select(soundex("A"))

df110 = df.select(trim("A"), trim("A", None), trim(col("A"), "B"), trim(col("A"), lit("B")))

df111 = df = df.select(upper("A"))

df112 = df.select(strtok_to_array("A"), strtok_to_array(col("A"), None), strtok_to_array(col("A"), col("B")), strtok_to_array("A", "B"))

df113 = df.select(struct("A", col("A"), col("B")))

df114 = df.select(log("A", 10), log(col("B"), 4.3), log("A", "B"))

df115 = df.select(pow("A", 10), pow(col("B"), 4.3), pow("A", "B"))

df116 = df.select(round("A"), round("A", 0), round(col("B"), 4.7))

df117 = df.select(sign("A"))

df118 = df.select(split("A", "B"), split(col("A"), lit("asfdg")))

df119 = df.select(substring("A", col("A"), col("A")), substring(col("A"), 0, 10), substring(col("A"), 20, col("B")))

df120 = df.select(substring_index("A", "abc", 3), substring_index(col("A"), col("B"), 2))

df121 = df.select(regexp_count("A", "B", col("A")), regexp_count(col("A"), col("B"), col("C"), 1, 2, "test"))

df122 = df.select(regexp_extract("A", "B", 2))

df123 = df.select(regexp_replace("A", "B", "", 1, 0), regexp_replace(col("A"), col("B"), col("C"), col("D"), col("E"), col("F"), 1, "sgh", 99.9))

df124 = df.select(replace(col("A"), "", ""), replace("A", "B", "ahsgj"))

df125 = df.select(charindex(col("A"), col("B")), charindex("A", "B", None), charindex("A", "B", 20), charindex("A", "B", col("C")))

df126 = df.select(collate(col("A"), "sp-upper"))

df127 = df.select(collation("A"))

df128 = df.select(concat("A", col("B"), "A"), concat())

df129 = df.select(concat_ws("A", col("B"), "A"))

df130 = df.select(translate("A", "B", "B"), translate(col("A"), col("B"), lit("ashg")))

df131 = df.select(contains("A", "B"))

df132 = df.select(startswith("A", "B"))

df133 = df.select(endswith("A", "B"))

df134 = df.select(insert(col("A"), col("B"), col("C"), "D"), insert("A", 12, 13, col("D")))

df135 = df.select(left("A", col("B")), left(col("A"), 10))

df136 = df.select(right("A", col("B")), right(col("A"), 10))

df137 = df.select(char("A"))

df138 = df.select(to_char("A"), to_char(col("B"), None), to_char("A", "bcd"))

df139 = df.select(date_format(col("A"), col("B")), date_format("A", "YYYY"))

df140 = df.select(to_time("A"), to_time("A", "YYYY"), to_time(col("A"), col("B")))

df141 = df.select(to_timestamp("A"), to_timestamp("C", None), to_timestamp(col("A"), col("B")))

df142 = df.select(to_timestamp_ntz("A"), to_timestamp_ntz(col("A"), None), to_timestamp_ntz("A", "auto"), to_timestamp_ntz(col("A"), col("B")))

df143 = df.select(to_timestamp_ltz("A"), to_timestamp_ltz(col("A"), None), to_timestamp_ltz("A", "auto"), to_timestamp_ltz(col("A"), col("B")))

df144 = df.select(to_timestamp_tz("A"), to_timestamp_tz(col("A"), None), to_timestamp_tz("A", "auto"), to_timestamp_tz(col("A"), col("B")))

df145 = df.select(from_utc_timestamp("A", lit(1234)), from_utc_timestamp(col("A"), col("B")))

df146 = df.select(to_utc_timestamp("A", lit(1234)), to_utc_timestamp(col("A"), col("B")))

df147 = df.select(to_date("A"), to_date("A", col("A")), to_date(col("A"), None))

df148 = df.select(current_timestamp())

df149 = df.select(current_date())

df150 = df.select(current_time())

df151 = df.select(hour("A"))

df152 = df.select(last_day("A"), last_day(col("A"), None), last_day(col("A"), col("B")), last_day("A", "B"))

df153 = df.select(minute("A"))

df154 = df.select(next_day("A", "fr"), next_day(col("A"), col("B")))

df155 = df.select(previous_day("A", "fr"), previous_day(col("A"), col("B")))

df156 = df.select(second("A"))

df157 = df.select(month("A"))

df158 = df.select(monthname("A"))

df159 = df.select(quarter("A"))

df160 = df.select(year("A"))

df170 = df.select(sysdate())

df171 = df.select(months_between("A", "B"), months_between(col("A"), "B"), months_between(col("A"), col("B")))

df172 = df.select(to_geography("A"))

df173 = df.select(to_geometry("A"))

df174 = df.select(arrays_overlap("A", col("B")), arrays_overlap(col("A"), "B"))

df175 = df.select(array_distinct("A"))

df176 = df.select(array_intersection("A", "B"), array_intersection(col("A"), col("B")), array_intersection("A", col("B")))

df177 = df.select(array_except("A", "B"), array_except("A", col("B"), True), array_except("B", "A", False))

df178 = df.select(array_min("A"))

df179 = df.select(array_max("A"))

df180 = df.select(array_flatten("A"))

df181 = df.select(array_sort("A"), array_sort("A", True), array_sort(col("A"), False, True))

df182 = df.select(arrays_to_object("A", "B"), arrays_to_object("A", col("A")))

df183 = df.select(array_generate_range("A", "B"), array_generate_range("A", col("B"), None), array_generate_range(col("A"), "B", "C"))

df184 = df.select(sequence("A", "B"), sequence("A", col("B"), None), sequence(col("A"), "B", "C"))

df185 = df.select(date_add("A", "B"), date_add("A", 10), date_add(col("A"), 0), date_add(col("A"), col("B")))

df186 = df.select(date_sub("A", "B"), date_sub("A", 10), date_sub(col("A"), 0), date_sub(col("A"), col("B")))

df187 = df.select(datediff("year", col("A"), "B"), datediff("month", "A", col("B")))

df188 = df.select(daydiff("A", "B"), daydiff(col("A"), col("B")))

df189 = df.select(trunc("A", "B"), trunc(col("A"), col("B")), trunc("A", 10), trunc("B", 7.9))

df190 = df.select(dateadd("year", "A", "B"), dateadd("year", col("A"), col("B")))

df191 = df.select(date_part("year", "A"), date_part("year", col("B")))

df192 = df.select(date_from_parts(10, 2, 1), date_from_parts(10, "A", 1), date_from_parts("A", "B", "A"), date_from_parts(10, col("A"), 1))

df193 = df.select(date_trunc("year", "A"), date_trunc("year", col("B")))

df194 = df.select(dayname("A"))

df195 = df.select(dayofmonth("A"))

df196 = df.select(dayofweek("A"))

df197 = df.select(dayofyear("A"))

df198 = df.select(is_array("A"))

df199 = df.select(is_boolean("A"))

df200 = df.select(is_binary("A"))

df201 = df.select(is_char("A"))

df202 = df.select(is_date("A"))

df203 = df.select(is_decimal("A"))

df204 = df.select(is_double("A"))

df205 = df.select(is_real("A"))

df206 = df.select(is_integer("A"))

df207 = df.select(is_null_value("A"))

df208 = df.select(is_object("A"))

df209 = df.select(is_time("A"))

df210 = df.select(is_timestamp_ltz("A"))

df211 = df.select(is_timestamp_ntz("A"))

df212 = df.select(is_timestamp_tz("A"))

df213 = df.select(time_from_parts(1, 2, 3), time_from_parts("A", "B", "A"), time_from_parts(1, "A", col("B")))

df214 = df.select(timestamp_from_parts("A", "A"), timestamp_from_parts(col("A"), "B"), timestamp_from_parts(col("A"), col("B")))

df215 = df.select(timestamp_from_parts(2000, 12, 0, 12, 3, 1), timestamp_from_parts(2000, 12, 0, 12, 3, 1, None), timestamp_from_parts(2000, 12, 0, 12, 3, 1, None, None), timestamp_from_parts(2000, 12, 0, 12, 3, 1, None, "us"))

df216 = df.select(timestamp_from_parts("year", "month", "day", "hour", "minute", "second"), timestamp_from_parts(to_date("date"), to_time("time")))

df217 = df.select(timestamp_ltz_from_parts(2000, 12, 0, 12, 3, 1), timestamp_ltz_from_parts(2000, 12, 0, 12, 3, 1, None), timestamp_ltz_from_parts(2000, 12, 0, 12, 3, 1, None), timestamp_ltz_from_parts(2000, 12, 0, 12, 3, 1, 12))

df218 = df.select(timestamp_ntz_from_parts(2000, 12, 0, 12, 3, 1), timestamp_ntz_from_parts(2000, 12, 0, 12, 3, 1, None), timestamp_ntz_from_parts(2000, 12, 0, 12, 3, 1, None), timestamp_ntz_from_parts(2000, 12, 0, 12, 3, 1, 12))

df219 = df.select(timestamp_tz_from_parts(2000, 12, 0, 12, 3, 1), timestamp_tz_from_parts(2000, 12, 0, 12, 3, 1, None), timestamp_tz_from_parts(2000, 12, 0, 12, 3, 1, None, None), timestamp_tz_from_parts(2000, 12, 0, 12, 3, 1, None, "us"))

df220 = df.select(weekofyear("A"))

df221 = df.select(typeof("A"))

df222 = df.select(check_json("A"))

df223 = df.select(check_xml("A"))

df224 = df.select(json_extract_path_text("A", "B"), json_extract_path_text(col("A"), col("B")), json_extract_path_text(col("A"), "B"))

df225 = df.select(parse_json("A"))

df226 = df.select(parse_xml("A"))

df227 = df.select(strip_null_value("A"))

df228 = df.select(array_agg("A", False), array_agg(col("A"), True))

df229 = df.select(array_append("A", lit(1)), array_append("A", "B"), array_append(col("A"), col("B")))

df230 = df.select(array_cat("A", lit(1)), array_cat("A", "B"), array_cat(col("A"), col("B")))

df231 = df.select(array_compact("A"))

df232 = df.select(array_construct(), array_construct("A"), array_construct(lit(1), "A", col("B")))

df233 = df.select(array_construct_compact(), array_construct_compact("A"), array_construct_compact(lit(1), "A", col("B")))

df234 = df.select(array_contains("A", col("B")), array_contains("A", lit(1)))

df235 = df.select(array_insert("A", "B", "A"), array_insert(col("A"), col("B"), col("A")))

df236 = df.select(array_position("A", "B"), array_position(col("A"), lit(0)))

df237 = df.select(array_prepend("A", col("B")), array_prepend(col("A"), col("B")))

df238 = df.select(array_size("A"))

df239 = df.select(array_slice("A", "B", "A"), array_slice(col("A"), col("B"), col("A")))

df240 = df.select(array_to_string("A", "B"), array_to_string(col("A"), col("B")))

df241 = df.select(array_unique_agg("A"))

df242 = df.select(object_agg("A", "B"), object_agg("A", col("B")))

df243 = df.select(object_construct(), object_construct(col("k"), col("v")), object_construct("A", "B", "A", "B"))

df244 = df.select(object_construct_keep_null(), object_construct_keep_null(col("k"), col("v")), object_construct_keep_null("A", "B", "A", "B"))

df245 = df.select(object_delete("A", "B"), object_delete(col("A"), "k1", "k2", "k3", "k4"))

df246 = df.select(object_insert("A", "B", "A"), object_insert(col("A"), lit(1), lit(20), "B"))

df247 = df.select(object_pick("A", "B"), object_pick(col("A"), "k1", "k2", "k3", "k4"))

df248 = df.select(vector_cosine_distance(col("A"), "B"))

df249 = df.select(vector_l2_distance("A", col("B")))

df250 = df.select(vector_inner_product("A", "B"))

df251 = df.select(asc("A"))

df252 = df.select(asc_nulls_first("A"))

df253 = df.select(asc_nulls_last("A"))

df254 = df.select(desc("A"))

df255 = df.select(desc_nulls_first("A"))

df256 = df.select(desc_nulls_last("A"))

df257 = df.select(as_array("A"))

df258 = df.select(as_binary("A"))

df259 = df.select(as_char("A"))

df260 = df.select(as_varchar("A"))

df261 = df.select(as_date("A"))

df262 = df.select(cast("A", "int"), cast("A", LongType()))

df263 = df.select(try_cast("A", "int"), try_cast("A", LongType()))

df264 = df.select(as_decimal("A"), as_decimal("A", None), as_decimal("A", 10), as_decimal(col("A"), 10, 2))

df265 = df.select(as_number("A"), as_number("A", None), as_number("A", 10), as_number(col("A"), 10, 2))

df266 = df.select(as_double("A"))

df267 = df.select(as_real("A"))

df268 = df.select(as_integer("A"))

df269 = df.select(as_object("A"))

df270 = df.select(as_time("A"))

df271 = df.select(as_timestamp_ltz("A"))

df272 = df.select(as_timestamp_ntz("A"))

df273 = df.select(as_timestamp_tz("A"))

df274 = df.select(to_binary("A"), to_binary("B", "BASE64"), to_binary(col("A"), 'UTF-8'))

df275 = df.select(to_array("A"))

df276 = df.select(to_json("A"))

df277 = df.select(to_object("A"))

df278 = df.select(to_variant("A"))

df279 = df.select(to_xml("A"))

df280 = df.select(get_ignore_case("A", col("B")))

df281 = df.select(object_keys("A"))

df282 = df.select(xmlget("A", "B"), xmlget("A", "B", 0), xmlget(col("A"), lit("123"), col("B")), xmlget("A", "B", "C"))

df283 = df.select(get_path("A", "B"))

df284 = df.select(get(1, 2), get("A", 2), get(3, "B"), get(col("A"), 2), get(col("A"), lit(1)))

df285 = df.select(when(col("a") % 2 == 0, lit("even")))

df286 = df.select(iff(col("a") % 2 == 0, lit("even"), lit("odd")))

df287 = df.select(in_([]), in_([col("A"), "B", "A"]), in_([col("col1"), col("col2")], [[1, "a"], [2, "b"]]))

df288 = df.select(cume_dist())

df289 = df.select(rank())

df290 = df.select(percent_rank())

df291 = df.select(dense_rank())

df292 = df.select(row_number())

df293 = df.select(lag("A"), lag(col("B")), lag("A", 1, None, None), lag("A", 1, col("B")), lag("A", 2, lit(20), True))

df294 = df.select(lead("A"), lead(col("B")), lead("A", 1, None, None), lead("A", 1, col("B")), lead("A", 2, lit(20), True))

df295 = df.select(last_value("A"), last_value("A", True), last_value(col("B"), False))

df296 = df.select(first_value("A"), first_value("A", True), first_value(col("B"), False))

df297 = df.select(ntile(10), ntile("A"), ntile(col("B")))

df298 = df.select(percentile_cont(0.4))

df299 = df.select(greatest(), greatest("A"), greatest(col("B"), "A"), greatest("A", "B", "C", "D", "E", "F"))

df300 = df.select(least(), least("A"), least(col("B"), "A"), least("A", "B", "C", "D", "E", "F"))

df301 = df.select(listagg("A"), listagg(col("B")), listagg("A", ","), listagg("A", "|", True))

df302 = df.select(call_udf("name"), call_udf("test", col("A"), lit(10)))

df303 = df.select(unix_timestamp("A"), unix_timestamp("A", None), unix_timestamp(col("B"), lit("YYYY")))

df304 = df.select(locate("needle", col("expr")), locate("needle", lit("test string"), 2))

## EXPECTED OUTPUT

df = session.table("test_table")

df01 = df.select(col("A"))

df02 = df.select(col("X", "A"))

df03 = df.select(col("A"))

df04 = df.select(column("A"))

df05 = df.select(column("X", "A"))

df06 = df.select(column("A"))

df07 = df.select(lit(1), lit("1"), lit(1.0), lit(True), lit(bytes("snow", "utf-8")), lit(datetime.date(2023, 2, 2)), lit([1, 2]), lit({"snow": "flake"}))

df08 = df.select(sql_expr("CURRENT_WAREHOUSE()"))

df09 = df.select(current_session())

df10 = df.select(current_statement())

df11 = df.select(current_user())

df12 = df.select(current_version())

df13 = df.select(current_warehouse())

df14 = df.select(current_database())

df15 = df.select(current_role())

df16 = df.select(current_schema())

df17 = df.select(current_schemas())

df18 = df.select(current_region())

df19 = df.select(current_account())

df20 = df.select(current_available_roles())

df21 = df.select(add_months(col("d"), 4))

df22 = df.select(add_months(col("A"), 4))

df23 = df.select(add_months(col("A"), col("A")))

df24 = df.select(any_value(col("A")), any_value(col("A")))

df25 = df.select(bitnot(col("A")), bitnot(col("A")), bitnot(col("A")))

df26 = df.select(bitshiftleft(col("A"), col("B")), bitshiftleft(col("A"), -10), bitshiftleft(col("B"), 42))

df27 = df.select(bitshiftright(col("A"), col("B")), bitshiftright(col("A"), -10), bitshiftright(col("B"), 42))

df28 = df.select(bround(col("A"), 10), bround(col("A"), 2), bround(col("A"), col("B")))

df29 = df.select(convert_timezone(col("A"), col("B")), convert_timezone(col("A"), col("B")), convert_timezone(col("A"), col("B")), convert_timezone(col("A"), col("B")), convert_timezone(col("A"), col("B")), convert_timezone(col("A"), col("A"), col("B")))

df30 = df.select(convert_timezone(lit("UTC"), col("a")), convert_timezone(lit("Asia/Shanghai"), lit("UTC"), col("b")))

df31 = df.select(approx_count_distinct(col("A")), approx_count_distinct(col("A")))

df32 = df.select(avg(col("A")), avg(col("B")))

df33 = df.select(corr(col("A"), col("B")))

df34 = df.select(count(1), count("\"A\""), count("\"A\""))

df35 = df.select(count_distinct(), count_distinct("*"), count_distinct("A", "B", "C", "D", col("E")))

df36 = df.select(covar_pop(col("A"), col("B")))

df37 = df.select(covar_samp(col("A"), col("B")))

df38 = df.select(create_map(col("A"), col("B")))

df39 = df.select(create_map(col("A"), col("B")))

df40 = df.select(create_map(col("A"), col("B")))

df41 = df.select(create_map(col("A"), col("B"), col("C"), col("D")))

df42 = df.select(kurtosis(col("A")))

df43 = df.select(max("*"), max(col("A")), max(col("A")))

df44 = df.select(avg(col("A")))

df45 = df.select(median(col("A")))

df46 = df.select(min(col("A")))

df47 = df.select(mode(col("A")))

df48 = df.select(skew(col("A")))

df49 = df.select(stddev(col("A")))

df50 = df.select(stddev_samp(col("A")))

df51 = df.select(stddev_pop(col("A")))

df52 = df.select(sum(col("A")))

df53 = df.select(sum_distinct(col("A")))

df54 = df.select(variance(col("A")))

df55 = df.select(variance(col("A")))

df56 = df.select(var_pop(col("A")))

df57 = df.select(approx_percentile(col("A"), lit(0.6)), approx_percentile(col("B"), lit(0.0)))

df58 = df.select(approx_percentile_accumulate(col("A")))

df59 = df.select(approx_percentile_estimate(col("A"), lit(0.3)))

df60 = df.select(approx_percentile_combine(col("A")))

df61 = df.select(grouping(col("A")), grouping(col("A"), col("B")))

df62 = df.select(coalesce(), coalesce(col("A"), lit(10)))

df63 = df.select(col("A").equal_nan())

df64 = df.select(col("A").is_null())

df65 = df.select(-col("A"))

df66 = df.select(~col("A"))

df67 = df.select(random(), random(), random(10))

df68 = df.select(uniform(col("A"), col("B"), col("A")), uniform(lit(10), lit(13.0).cast(FloatType()), col("A")), uniform(lit(0.2).cast(FloatType()), lit(2), lit(0.2)))

df69 = df.select(seq1(0), seq1(10), seq1(-10))

df70 = df.select(seq2(1))

df71 = df.select(seq4(12))

df72 = df.select(seq8(324))

df73 = df.select(to_decimal(col("A"), lit(10), lit(3)), to_decimal(col("B"), lit(12), lit(3)))

df74 = df.select(to_double(col("A")), to_double(col("A")), to_double(col("A"), "999.9"), to_double(col("A"), col("B")))

df75 = df.select(div0(lit(0), lit(1)), div0(lit(1.2), lit(9.3)), div0(lit(10), lit(89.2)), div0(col("A"), lit(1)), div0(lit(0.2), col("A")), div0(lit(0.3), col("B")))

df76 = df.select(sqrt(col("A")))

df77 = df.select(abs(col("A")))

df78 = df.select(acos(col("A")))

df79 = df.select(asin(col("A")))

df80 = df.select(atan(col("A")))

df81 = df.select(atan2(col("A"), col("B")))

df82 = df.select(ceil(col("A")))

df83 = df.select(cos(col("A")))

df84 = df.select(cosh(col("A")))

df85 = df.select(exp(col("A")))

df86 = df.select(factorial(col("A")))

df87 = df.select(floor(col("A")))

df88 = df.select(bround(col("A"), col("B")).cast(StringType()), bround(col("A"), 10).cast(StringType()))

df89 = df.select(sin(col("A")))

df90 = df.select(sinh(col("A")))

df91 = df.select(tan(col("A")))

df92 = df.select(tanh(col("A")))

df93 = df.select(degrees(col("A")))

df94 = df.select(radians(col("A")))

df95 = df.select(md5(col("A")))

df96 = df.select(sha1(col("A")))

df97 = df.select(sha2(col("B"), 0), sha2(col("A"), 224))

df98 = df.select(hash(lit(None), lit(10), col("A"), col("B")))

df99 = df.select(ascii(col("A")))

df100 = df.select(initcap(col("A")), initcap(col("A")), initcap(col("A"), col("B")), initcap(col("A"), lit("123")))

df101 = df.select(length(col("A")))

df102 = df.select(lower(col("A")))

df103 = df.select(lpad(col("A"), col("B"), col("B")), lpad(col("A"), lit(100), col("B")), lpad(col("A"), col("B"), col("B")))

df104 = df.select(ltrim(col("A")), ltrim(col("A")), ltrim(col("A"), col("B")), ltrim(col("A"), lit("B")))

df105 = df.select(rpad(col("A"), col("B"), col("B")), rpad(col("A"), lit(100), col("B")), rpad(col("A"), col("B"), col("B")))

df106 = df.select(rtrim(col("A")), rtrim(col("A")), rtrim(col("A"), col("B")), rtrim(col("A"), lit("B")))

df107 = df.select(repeat(col("A"), lit(1)), repeat(col("A"), lit(20)), repeat(col("B"), col("A")))

df108 = df.select(reverse(col("A")))

df109 = df.select(soundex(col("A")))

df110 = df.select(trim(col("A")), trim(col("A")), trim(col("A"), col("B")), trim(col("A"), lit("B")))

df111 = df.select(upper(col("A")))

df112 = df111.select(strtok_to_array(col("A")), strtok_to_array(col("A")), strtok_to_array(col("A"), col("B")), strtok_to_array(col("A"), col("B")))

df113 = df111.select(object_construct_keep_null(lit("A"), col("A"), lit("A"), col("A"), lit("B"), col("B")))

df114 = df111.select(log(col("A"), lit(10)), log(col("B"), lit(4.3)), log(col("A"), col("B")))

df115 = df111.select(pow(col("A"), lit(10)), pow(col("B"), lit(4.3)), pow(col("A"), col("B")))

df116 = df111.select(round("A", 0), round("A", 0), round(col("B"), 4.7))

df117 = df111.select(sign(col("A")))

df118 = df111.select(split(col("A"), col("B")), split(col("A"), lit("asfdg")))

df119 = df111.select(substring(col("A"), col("A"), col("A")), substring(col("A"), lit(0), lit(10)), substring(col("A"), lit(20), col("B")))

df120 = df111.select(array_to_string(array_slice(strtok_to_array(col("A"), "abc"), 0, 3), "abc"), array_to_string(array_slice(strtok_to_array(col("A"), col("B")), 0, 2), col("B")))

df121 = df111.select(regexp_count(col("A"), lit("B"), col("A")), regexp_count(col("A"), col("B"), col("C"), lit(1), lit(2), lit("test")))

df122 = df111.select(coalesce(regexp_substr(col("A"), "B", lit(1), lit(1), lit("e"), 2), lit("")))

df123 = df111.select(regexp_replace(col("A"), lit("B"), lit(""), lit(1), lit(0)), regexp_replace(col("A"), col("B"), col("C"), col("D"), col("E"), col("F"), lit(1), lit("sgh"), lit(99.9)))

df124 = df111.select(replace(col("A"), lit(""), lit("")), replace(col("A"), lit("B"), lit("ahsgj")))

df125 = df111.select(charindex(col("A"), col("B")), charindex(col("A"), col("B")), charindex(col("A"), col("B"), lit(20)), charindex(col("A"), col("B"), col("C")))

df126 = df111.select(collate(col("A"), "sp-upper"))

df127 = df111.select(collation(col("A")))

df128 = df111.select(concat(col("A"), col("B"), col("A")), concat())

df129 = df111.select(concat_ws(col("A"), col("B"), col("A")))

df130 = df111.select(translate(col("A"), col("B"), col("B")), translate(col("A"), col("B"), lit("ashg")))

df131 = df111.select(contains(col("A"), col("B")))

df132 = df111.select(startswith(col("A"), col("B")))

df133 = df111.select(endswith(col("A"), col("B")))

df134 = df111.select(insert(col("A"), col("B"), col("C"), col("D")), insert(col("A"), lit(12), lit(13), col("D")))

df135 = df111.select(left(col("A"), col("B")), left(col("A"), lit(10)))

df136 = df111.select(right(col("A"), col("B")), right(col("A"), lit(10)))

df137 = df111.select(char(col("A")))

df138 = df111.select(to_char(col("A")), to_char(col("B")), to_char(col("A"), lit("bcd")))

df139 = df111.select(to_char(col("A").try_cast(TimestampType()), col("B")), to_char(col("A").try_cast(TimestampType()), lit("YYYY")))

df140 = df111.select(to_time(col("A")), to_time(col("A"), "YYYY"), to_time(col("A"), col("B")))

df141 = df111.select(to_timestamp(col("A")), to_timestamp(col("C")), to_timestamp(col("A"), col("B")))

df142 = df111.select(to_timestamp_ntz(col("A")), to_timestamp_ntz(col("A")), to_timestamp_ntz(col("A"), "auto"), to_timestamp_ntz(col("A"), col("B")))

df143 = df111.select(to_timestamp_ltz(col("A")), to_timestamp_ltz(col("A")), to_timestamp_ltz(col("A"), "auto"), to_timestamp_ltz(col("A"), col("B")))

df144 = df111.select(to_timestamp_tz(col("A")), to_timestamp_tz(col("A")), to_timestamp_tz(col("A"), "auto"), to_timestamp_tz(col("A"), col("B")))

df145 = df111.select(convert_timezone("UTC", lit(1234), col("A")), convert_timezone("UTC", col("B"), col("A")))

df146 = df111.select(convert_timezone(lit(1234), "UTC", col("A")), convert_timezone(col("B"), "UTC", col("A")))

df147 = df111.select(to_date(col("A")), to_date(col("A"), col("A")), to_date(col("A")))

df148 = df111.select(current_timestamp())

df149 = df111.select(current_date())

df150 = df111.select(current_time())

df151 = df111.select(hour(col("A")))

df152 = df111.select(last_day(col("A")), last_day(col("A")), last_day(col("A"), col("B")), last_day(col("A"), col("B")))

df153 = df111.select(minute(col("A")))

df154 = df111.select(next_day(col("A"), "fr"), next_day(col("A"), "\"B\""))

df155 = df111.select(previous_day(col("A"), "fr"), previous_day(col("A"), "\"B\""))

df156 = df111.select(second(col("A")))

df157 = df111.select(month(col("A")))

df158 = df111.select(monthname(col("A")))

df159 = df111.select(quarter(col("A")))

df160 = df111.select(year(col("A")))

df170 = df111.select(sysdate())

df171 = df111.select(months_between(col("A"), col("B")), months_between(col("A"), col("B")), months_between(col("A"), col("B")))

df172 = df111.select(to_geography(col("A")))

df173 = df111.select(to_geometry(col("A")))

df174 = df111.select(arrays_overlap(col("A"), col("B")), arrays_overlap(col("A"), col("B")))

df175 = df111.select(array_distinct(col("A")))

df176 = df111.select(array_intersection(col("A"), col("B")), array_intersection(col("A"), col("B")), array_intersection(col("A"), col("B")))

df177 = df111.select(array_except(col("A"), col("B")), array_except(col("A"), col("B")), array_except(array_distinct(col("B")), array_distinct(col("A"))))

df178 = df111.select(array_min(col("A")))

df179 = df111.select(array_max(col("A")))

df180 = df111.select(array_flatten(col("A")))

df181 = df111.select(array_sort(col("A"), lit(True), lit(False)), array_sort(col("A"), lit(True), lit(False)), array_sort(col("A"), lit(False), lit(True)))

df182 = df111.select(arrays_to_object(col("A"), col("B")), arrays_to_object(col("A"), col("A")))

df183 = df111.select(array_generate_range(col("A"), col("B")), array_generate_range(col("A"), col("B")), array_generate_range(col("A"), col("B"), col("C")))

df184 = df111.select(array_generate_range(col("A"), col("B") + iff(sign(col("B") - col("A")) > 0, 1, -1), iff(sign(col("B") - col("A")) > 0, 1, -1)), array_generate_range(col("A"), col("B") + iff(sign(col("B") - col("A")) > 0, 1, -1), iff(sign(col("B") - col("A")) > 0, 1, -1)), array_generate_range(col("A"), col("B") + iff(sign(col("C")) > 0, 1, -1), col("C")))

df185 = df111.select(dateadd("day", col("B"), col("A")), dateadd("day", lit(10), col("A")), dateadd("day", lit(0), col("A")), dateadd("day", col("B"), col("A")))

df186 = df111.select(dateadd("day", -1 * col("B"), col("A")), dateadd("day", -1 * lit(10), col("A")), dateadd("day", -1 * lit(0), col("A")), dateadd("day", -1 * col("B"), col("A")))

df187 = df111.select(datediff("year", col("A"), col("B")), datediff("month", col("A"), col("B")))

df188 = df111.select(datediff(lit("day"), col("B"), col("A")), datediff(lit("day"), col("B"), col("A")))

df189 = df111.select(trunc(col("A"), col("B")), trunc(col("A"), col("B")), trunc(col("A"), lit(10)), trunc(col("B"), lit(7.9)))

df190 = df111.select(dateadd("year", col("A"), col("B")), dateadd("year", col("A"), col("B")))

df191 = df111.select(date_part("year", col("A")), date_part("year", col("B")))

df192 = df111.select(date_from_parts(10, 2, 1), date_from_parts(10, col("A"), 1), date_from_parts(col("A"), col("B"), col("A")), date_from_parts(10, col("A"), 1))

df193 = df111.select(date_trunc("year", col("A")), date_trunc("year", col("B")))

df194 = df111.select(dayname(col("A")))

df195 = df111.select(dayofmonth(col("A")))

df196 = df111.select(dayofweek(col("A")))

df197 = df111.select(dayofyear(col("A")))

df198 = df111.select(is_array(col("A")))

df199 = df111.select(is_boolean(col("A")))

df200 = df111.select(is_binary(col("A")))

df201 = df111.select(is_char(col("A")))

df202 = df111.select(is_date(col("A")))

df203 = df111.select(is_decimal(col("A")))

df204 = df111.select(is_double(col("A")))

df205 = df111.select(is_real(col("A")))

df206 = df111.select(is_integer(col("A")))

df207 = df111.select(is_null_value(col("A")))

df208 = df111.select(is_object(col("A")))

df209 = df111.select(is_time(col("A")))

df210 = df111.select(is_timestamp_ltz(col("A")))

df211 = df111.select(is_timestamp_ntz(col("A")))

df212 = df111.select(is_timestamp_tz(col("A")))

df213 = df111.select(time_from_parts(1, 2, 3), time_from_parts(col("A"), col("B"), col("A")), time_from_parts(1, col("A"), col("B")))

df214 = df111.select(timestamp_from_parts(col("A"), col("A")), timestamp_from_parts(col("A"), col("B")), timestamp_from_parts(col("A"), col("B")))

df215 = df111.select(timestamp_from_parts(2000, 12, 0, 12, 3, 1), timestamp_from_parts(2000, 12, 0, 12, 3, 1), timestamp_from_parts(2000, 12, 0, 12, 3, 1), timestamp_from_parts(2000, 12, 0, 12, 3, 1, lit(0), "us"))

df216 = df111.select(timestamp_from_parts(col("year"), col("month"), col("day"), col("hour"), col("minute"), col("second")), timestamp_from_parts(to_date(col("date")), to_time(col("time"))))

df217 = df111.select(timestamp_ltz_from_parts(2000, 12, 0, 12, 3, 1), timestamp_ltz_from_parts(2000, 12, 0, 12, 3, 1), timestamp_ltz_from_parts(2000, 12, 0, 12, 3, 1), timestamp_ltz_from_parts(2000, 12, 0, 12, 3, 1, 12))

df218 = df111.select(timestamp_ntz_from_parts(2000, 12, 0, 12, 3, 1), timestamp_ntz_from_parts(2000, 12, 0, 12, 3, 1), timestamp_ntz_from_parts(2000, 12, 0, 12, 3, 1), timestamp_ntz_from_parts(2000, 12, 0, 12, 3, 1, 12))

df219 = df111.select(timestamp_tz_from_parts(2000, 12, 0, 12, 3, 1), timestamp_tz_from_parts(2000, 12, 0, 12, 3, 1), timestamp_tz_from_parts(2000, 12, 0, 12, 3, 1), timestamp_tz_from_parts(2000, 12, 0, 12, 3, 1, lit(0), "us"))

df220 = df111.select(weekofyear(col("A")))

df221 = df111.select(typeof(col("A")))

df222 = df111.select(check_json(col("A")))

df223 = df111.select(check_xml(col("A")))

df224 = df111.select(json_extract_path_text(col("A"), col("B")), json_extract_path_text(col("A"), col("B")), json_extract_path_text(col("A"), col("B")))

df225 = df111.select(parse_json(col("A")))

df226 = df111.select(parse_xml(col("A")))

df227 = df111.select(strip_null_value(col("A")))

df228 = df111.select(array_agg(col("A")), array_agg(col("A")))

df229 = df111.select(array_append(col("A"), lit(1)), array_append(col("A"), col("B")), array_append(col("A"), col("B")))

df230 = df111.select(array_cat(col("A"), lit(1)), array_cat(col("A"), col("B")), array_cat(col("A"), col("B")))

df231 = df111.select(array_compact(col("A")))

df232 = df111.select(array_construct(), array_construct(col("A")), array_construct(lit(1), col("A"), col("B")))

df233 = df111.select(array_construct_compact(), array_construct_compact(col("A")), array_construct_compact(lit(1), col("A"), col("B")))

df234 = df111.select(array_contains(col("A"), col("B")), array_contains(col("A"), lit(1)))

df235 = df111.select(array_insert(col("A"), col("B"), col("A")), array_insert(col("A"), col("B"), col("A")))

df236 = df111.select(array_position(col("A"), col("B")), array_position(col("A"), lit(0)))

df237 = df111.select(array_prepend(col("A"), col("B")), array_prepend(col("A"), col("B")))

df238 = df111.select(array_size(col("A")))

df239 = df111.select(array_slice(col("A"), col("B"), col("A")), array_slice(col("A"), col("B"), col("A")))

df240 = df111.select(array_to_string(col("A"), col("B")), array_to_string(col("A"), col("B")))

df241 = df111.select(array_unique_agg(col("A")))

df242 = df111.select(object_agg(col("A"), col("B")), object_agg(col("A"), col("B")))

df243 = df111.select(object_construct(), object_construct(col("k"), col("v")), object_construct(col("A"), col("B"), col("A"), col("B")))

df244 = df111.select(object_construct_keep_null(), object_construct_keep_null(col("k"), col("v")), object_construct_keep_null(col("A"), col("B"), col("A"), col("B")))

df245 = df111.select(object_delete(col("A"), col("B")), object_delete(col("A"), col("k1"), col("k2"), col("k3"), col("k4")))

df246 = df111.select(object_insert(col("A"), col("B"), col("A")), object_insert(col("A"), lit(1), lit(20), col("B")))

df247 = df111.select(object_pick(col("A"), col("B")), object_pick(col("A"), col("k1"), col("k2"), col("k3"), col("k4")))

df248 = df111.select(vector_cosine_distance(col("A"), col("B")))

df249 = df111.select(vector_l2_distance(col("A"), col("B")))

df250 = df111.select(vector_inner_product(col("A"), col("B")))

df251 = df111.select(col("A").asc())

df252 = df111.select(col("A").asc_nulls_first())

df253 = df111.select(col("A").asc_nulls_last())

df254 = df111.select(col("A").desc())

df255 = df111.select(col("A").desc_nulls_first())

df256 = df111.select(col("A").desc_nulls_last())

df257 = df111.select(as_array(col("A")))

df258 = df111.select(as_binary(col("A")))

df259 = df111.select(as_char(col("A")))

df260 = df111.select(as_varchar(col("A")))

df261 = df111.select(as_date(col("A")))

df262 = df111.select(col("A").cast(IntegerType()), col("A").cast(LongType()))

df263 = df111.select(col("A").try_cast(IntegerType()), col("A").try_cast(LongType()))

df264 = df111.select(as_decimal(col("A")), as_decimal(col("A")), as_decimal(col("A"), lit(10)), as_decimal(col("A"), lit(10), lit(2)))

df265 = df111.select(as_number(col("A")), as_number(col("A")), as_number(col("A"), lit(10)), as_number(col("A"), lit(10), lit(2)))

df266 = df111.select(as_double(col("A")))

df267 = df111.select(as_real(col("A")))

df268 = df111.select(as_integer(col("A")))

df269 = df111.select(as_object(col("A")))

df270 = df111.select(as_time(col("A")))

df271 = df111.select(as_timestamp_ltz(col("A")))

df272 = df111.select(as_timestamp_ntz(col("A")))

df273 = df111.select(as_timestamp_tz(col("A")))

df274 = df111.select(to_binary(col("A")), to_binary(col("B"), "BASE64"), to_binary(col("A"), "UTF-8"))

df275 = df111.select(to_array(col("A")))

df276 = df111.select(to_json(col("A")))

df277 = df111.select(to_object(col("A")))

df278 = df111.select(to_variant(col("A")))

df279 = df111.select(to_xml(col("A")))

df280 = df111.select(get_ignore_case(col("A"), col("B")))

df281 = df111.select(object_keys(col("A")))

df282 = df111.select(xmlget(col("A"), col("B"), 0), xmlget(col("A"), col("B"), 0), xmlget(col("A"), lit("123"), col("B")), xmlget(col("A"), col("B"), col("C")))

df283 = df111.select(get_path(col("A"), col("B")))

df284 = df111.select(get(1, 2), get(col("A"), 2), get(3, col("B")), get(col("A"), 2), get(col("A"), lit(1)))

df285 = df111.select(when(col("a") % 2 == 0, lit("even")))

df286 = df111.select(iff(col("a") % 2 == 0, lit("even"), lit("odd")))

df287 = df111.select(in_([]), in_([col("A"), "B", "A"]), in_([col("col1"), col("col2")], [[1, "a"], [2, "b"]]))

df288 = df111.select(cume_dist())

df289 = df111.select(rank())

df290 = df111.select(percent_rank())

df291 = df111.select(dense_rank())

df292 = df111.select(row_number())

df293 = df111.select(lag("A", None, 1, None, False), lag(col("B"), None, 1, None, False), lag("A", None, 1, None, None), lag("A", col("B"), 1, col("B"), False), lag("A", lit(20), 2, lit(20), True))

df294 = df111.select(lead("A", None, 1, None, False), lead(col("B"), None, 1, None, False), lead("A", None, 1, None, None), lead("A", col("B"), 1, col("B"), False), lead("A", lit(20), 2, lit(20), True))

df295 = df111.select(last_value("A", False), last_value("A", True), last_value(col("B"), False))

df296 = df111.select(first_value("A", False), first_value("A", True), first_value(col("B"), False))

df297 = df111.select(ntile(10), ntile(col("A")), ntile(col("B")))

df298 = df111.select(percentile_cont(0.4))

df299 = df111.select(greatest(), greatest(col("A")), greatest(col("B"), col("A")), greatest(col("A"), col("B"), col("C"), col("D"), col("E"), col("F")))

df300 = df111.select(least(), least(col("A")), least(col("B"), col("A")), least(col("A"), col("B"), col("C"), col("D"), col("E"), col("F")))

df301 = df111.select(listagg("A", "", False), listagg(col("B"), "", False), listagg("A", ",", False), listagg("A", "|", True))

df302 = df111.select(call_udf("name"), call_udf("test", col("A"), lit(10)))

df303 = df111.select(date_part("epoch_second", to_timestamp(col("A"))), date_part("epoch_second", to_timestamp(col("A"))), date_part("epoch_second", to_timestamp(col("B"), lit("YYYY"))))

df304 = df111.select(charindex(lit("needle"), col("expr"), lit(1)), charindex(lit("needle"), lit("test string"), lit(2)))
