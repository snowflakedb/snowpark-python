## TEST CASE

from snowflake.snowpark.functions import *

import datetime

df = session.table("test_table")

df01 = df.select(col("A"))

df02 = df.select(col("X", "A"))

df03 = df.select(col("A", None))

df04 = df.select(column("A"))

df05 = df.select(column("X", "A"))

df06 = df.select(column("A", None))

df07 = df.select(lit(1), lit("1"), lit(1.0), lit(True), lit(b'snow'), lit(datetime.date(2023, 2, 2)), lit([1, 2]), lit({"snow": "flake"}))

df08 = df.select(sql_expr("CURRENT_WAREHOUSE()"))

df09 = df.select(current_session())

df10 = df.select(current_statement())

df11 = df.select(current_user())

df12 = df.select(current_version())

df13 = df.select(current_warehouse())

df14 = df.select(current_database())

df15 = df.select(current_role())

df16 = df.select(current_schema())

df17 = df.select(current_schemas())

df18 = df.select(current_region())

df19 = df.select(current_account())

df20 = df.select(current_available_roles())

df21 = df.select(add_months("d", 4))

df22 = df.select(add_months(col("A"), 4))

df23 = df.select(add_months(col("A"), col("A")))

df24 = df.select(any_value("A"), any_value(col("A")))

df25 = df.select(bitnot("A"), bitnot(col("A")), bitnot(e=col("A")))

df26 = df.select(bitshiftleft("A", col("B")), bitshiftleft("A", -10), bitshiftleft(col("B"), 42))

df27 = df.select(bitshiftright("A", col("B")), bitshiftright("A", -10), bitshiftright(col("B"), 42))

df28 = df.select(bround("A", scale=10), bround("A", 2), bround(col("A"), scale=col("B")))

df29 = df.select(convert_timezone("A", col("B")), convert_timezone(col("A"), "B"), convert_timezone("A", "B"), convert_timezone(col("A"), col("B")), convert_timezone("A","B",None), convert_timezone("A", "B", "A"))

df30 = df.select(convert_timezone(lit("UTC"), col("a")), convert_timezone(lit("UTC"), col("b"), lit("Asia/Shanghai")))

df31 = df.select(approx_count_distinct("A"), approx_count_distinct(col("A")))

df32 = df.select(avg("A"), avg(col("B")))

df33 = df.select(corr("A", "B"))

df34 = df.select(count("*"), count("A"), count(col("A")))

df35 = df.select(count_distinct(), count_distinct(col("*")), count_distinct("A", "B", "C", "D", col("E")))

df36 = df.select(covar_pop("A", col("B")))

df37 = df.select(covar_samp("A", "B"))

df38 = df.select(create_map(["A", "B"]))

df39 = df.select(create_map({"A", "B", "A", "B"}))

df40 = df.select(create_map("A", "B"))

df41 = df.select(create_map("A", "B", "C", "D"))

df42 = df.select(kurtosis("A"))

df43 = df.select(max("*"), max("A"), max(col("A")))

df44 = df.select(mean("A"))

df45 = df.select(median("A"))

df46 = df.select(min("A"))

df47 = df.select(mode("A"))

df48 = df.select(skew("A"))

df49 = df.select(stddev("A"))

df50 = df.select(stddev_samp("A"))

df51 = df.select(stddev_pop("A"))

df52 = df.select(sum("A"))

df53 = df.select(sum_distinct("A"))

df54 = df.select(variance("A"))

df55 = df.select(var_samp("A"))

df56 = df.select(var_pop("A"))

df57 = df.select(approx_percentile("A", 0.6), approx_percentile(col("B"), 0.0))

df58 = df.select(approx_percentile_accumulate("A"))

df59 = df.select(approx_percentile_estimate("A", 0.3))

df60 = df.select(approx_percentile_combine("A"))

df61 = df.select(grouping("A"), grouping("A", "B"))

df62 = df.select(coalesce(), coalesce(col("A"), lit(10)))

df63 = df.select(equal_nan("A"))

df64 = df.select(is_null("A"))

df65 = df.select(negate("A"))

df66 = df.select(not_("A"))

df67 = df.select(random(), random(None), random(10))

df68 = df.select(uniform("A", "B", "A"), uniform(10, 13., col("A")), uniform(0.2, 2, 0.2))

df69 = df.select(seq1(0), seq1(10), seq1(-10))

df70 = df.select(seq2(1))

df71 = df.select(seq4(12))

df72 = df.select(seq8(324))

df73 = df.select(to_decimal("A", 10, 3), to_decimal(col("B"), 12, 3))

df74 = df.select(to_double(col("A")), to_double("A", None), to_double("A", "999.9"), to_double(col("A"), col("B")))

df75 = df.select(div0(0, 1), div0(1.2, 9.3), div0(10, 89.2), div0("A", 1), div0(0.2, "A"), div0(0.3, col("B")))

df76 = df.select(sqrt("A"))

df77 = df.select(abs("A"))

df78 = df.select(acos("A"))

df79 = df.select(asin("A"))

df80 = df.select(atan("A"))

df81 = df.select(atan2("A", "B"))

df82 = df.select(ceil("A"))

df83 = df.select(cos("A"))

df84 = df.select(cosh("A"))

df85 = df.select(exp("A"))

df86 = df.select(factorial("A"))

df87 = df.select(floor("A"))

df88 = df.select(format_number("A", col("B")), format_number("A", 10))

df89 = df.select(sin("A"))

df90 = df.select(sinh("A"))

df91 = df.select(tan("A"))

df92 = df.select(tanh("A"))

df93 = df.select(degrees("A"))

df94 = df.select(radians("A"))

df95 = df.select(md5("A"))

df96 = df.select(sha1("A"))

df97 = df.select(sha2(col("B"), 0), sha2("A", 224))

df98 = df.select(hash(lit(None), lit(10), col("A"), "B"))

df99 = df.select(ascii("A"))

df100 = df.select(initcap("A"), initcap("A", None), initcap("A", "B"), initcap(col("A"), lit("123")))

df101 = df.select(length("A"))

df102 = df.select(lower("A"))

df103 = df.select(lpad("A", col("B"), "B"), lpad("A", 100, "B"), lpad(col("A"), col("B"), col("B")))

df104 = df.select(ltrim("A"), ltrim("A", None), ltrim(col("A"), "B"), ltrim(col("A"), lit("B")))

df105 = df.select(rpad("A", col("B"), "B"), rpad("A", 100, "B"), rpad(col("A"), col("B"), col("B")))

df106 = df.select(rtrim("A"), rtrim("A", None), rtrim(col("A"), "B"), rtrim(col("A"), lit("B")))

df107 = df.select(repeat("A", 1), repeat(col("A"), 20), repeat("B", col("A")))

df108 = df.select(reverse("A"))

df109 = df.select(soundex("A"))

df110 = df.select(trim("A"), trim("A", None), trim(col("A"), "B"), trim(col("A"), lit("B")))

df111 = df = df.select(upper("A"))

df112 = df.select(strtok_to_array("A"), strtok_to_array(col("A"), None), strtok_to_array(col("A"), col("B")), strtok_to_array("A", "B"))

df113 = df.select(struct("A", col("A"), col("B")))

df114 = df.select(log("A", 10), log(col("B"), 4.3), log("A", "B"))

df115 = df.select(pow("A", 10), pow(col("B"), 4.3), pow("A", "B"))

df116 = df.select(round("A"), round("A", 0), round(col("B"), 4.7))

df117 = df.select(sign("A"))

df118 = df.select(split("A", "B"), split(col("A"), lit("asfdg")))

df119 = df.select(substring("A", col("A"), col("A")), substring(col("A"), 0, 10), substring(col("A"), 20, col("B")))

df120 = df.select(substring_index("A", "abc", 3), substring_index(col("A"), col("B"), 2))

df121 = df.select(regexp_count("A", "B", col("A")), regexp_count(col("A"), col("B"), col("C"), 1, 2, "test"))

df122 = df.select(regexp_extract("A", "B", 2))

df123 = df.select(regexp_replace("A", "B", "", 1, 0), regexp_replace(col("A"), col("B"), col("C"), col("D"), col("E"), col("F"), 1, "sgh", 99.9))

df124 = df.select(replace(col("A"), "", ""), replace("A", "B", "ahsgj"))

df125 = df.select(charindex(col("A"), col("B")), charindex("A", "B", None), charindex("A", "B", 20), charindex("A", "B", col("C")))

df126 = df.select(collate(col("A"), "sp-upper"))

df127 = df.select(collation("A"))

df128 = df.select(concat("A", col("B"), "A"), concat())

df129 = df.select(concat_ws("A", col("B"), "A"))

df130 = df.select(translate("A", "B", "B"), translate(col("A"), col("B"), lit("ashg")))

df131 = df.select(contains("A", "B"))

df132 = df.select(startswith("A", "B"))

df133 = df.select(endswith("A", "B"))

df134 = df.select(insert(col("A"), col("B"), col("C"), "D"), insert("A", 12, 13, col("D")))

df135 = df.select(left("A", col("B")), left(col("A"), 10))

df136 = df.select(right("A", col("B")), right(col("A"), 10))

df137 = df.select(char("A"))

df138 = df.select(to_char("A"), to_char(col("B"), None), to_char("A", "bcd"))

df139 = df.select(date_format(col("A"), col("B")), date_format("A", "YYYY"))

df140 = df.select(to_time("A"), to_time("A", "YYYY"), to_time(col("A"), col("B")))

df141 = df.select(to_timestamp("A"), to_timestamp("C", None), to_timestamp(col("A"), col("B")))

df142 = df.select(to_timestamp_ntz("A"), to_timestamp_ntz(col("A"), None), to_timestamp_ntz("A", "auto"), to_timestamp_ntz(col("A"), col("B")))

df143 = df.select(to_timestamp_ltz("A"), to_timestamp_ltz(col("A"), None), to_timestamp_ltz("A", "auto"), to_timestamp_ltz(col("A"), col("B")))

df144 = df.select(to_timestamp_tz("A"), to_timestamp_tz(col("A"), None), to_timestamp_tz("A", "auto"), to_timestamp_tz(col("A"), col("B")))

df145 = df.select(from_utc_timestamp("A", lit(1234)), from_utc_timestamp(col("A"), col("B")))

df146 = df.select(to_utc_timestamp("A", lit(1234)), to_utc_timestamp(col("A"), col("B")))

df147 = df.select(to_date("A"), to_date("A", col("A")), to_date(col("A"), None))

df148 = df.select(current_timestamp())

df149 = df.select(current_date())

df150 = df.select(current_time())

df151 = df.select(hour("A"))

df152 = df.select(last_day("A"), last_day(col("A"), None), last_day(col("A"), col("B")), last_day("A", "B"))

df153 = df.select(minute("A"))

df154 = df.select(next_day("A", "fr"), next_day(col("A"), col("B")))

df155 = df.select(previous_day("A", "fr"), previous_day(col("A"), col("B")))

df156 = df.select(second("A"))

df157 = df.select(month("A"))

df158 = df.select(monthname("A"))

df159 = df.select(quarter("A"))

df160 = df.select(year("A"))

df170 = df.select(sysdate())

df171 = df.select(months_between("A", "B"), months_between(col("A"), "B"), months_between(col("A"), col("B")))

df172 = df.select(to_geography("A"))

df173 = df.select(to_geometry("A"))

df174 = df.select(arrays_overlap("A", col("B")), arrays_overlap(col("A"), "B"))

df175 = df.select(array_distinct("A"))

df176 = df.select(array_intersection("A", "B"), array_intersection(col("A"), col("B")), array_intersection("A", col("B")))

df177 = df.select(array_except("A", "B"), array_except("A", col("B"), True), array_except("B", "A", False))

df178 = df.select(array_min("A"))

df179 = df.select(array_max("A"))

df180 = df.select(array_flatten("A"))

df181 = df.select(array_sort("A"), array_sort("A", True), array_sort(col("A"), False, True))

df182 = df.select(arrays_to_object("A", "B"), arrays_to_object("A", col("A")))

df183 = df.select(array_generate_range("A", "B"), array_generate_range("A", col("B"), None), array_generate_range(col("A"), "B", "C"))

df184 = df.select(sequence("A", "B"), sequence("A", col("B"), None), sequence(col("A"), "B", "C"))

df185 = df.select(date_add("A", "B"), date_add("A", 10), date_add(col("A"), 0), date_add(col("A"), col("B")))

df186 = df.select(date_sub("A", "B"), date_sub("A", 10), date_sub(col("A"), 0), date_sub(col("A"), col("B")))

df187 = df.select(datediff("year", col("A"), "B"), datediff("month", "A", col("B")))

df188 = df.select(daydiff("A", "B"), daydiff(col("A"), col("B")))

df189 = df.select(trunc("A", "B"), trunc(col("A"), col("B")), trunc("A", 10), trunc("B", 7.9))

df190 = df.select(dateadd("year", "A", "B"), dateadd("year", col("A"), col("B")))

df191 = df.select(date_part("year", "A"), date_part("year", col("B")))

df192 = df.select(date_from_parts(10, 2, 1), date_from_parts(10, "A", 1), date_from_parts("A", "B", "A"), date_from_parts(10, col("A"), 1))

df193 = df.select(date_trunc("year", "A"), date_trunc("year", col("B")))

df194 = df.select(dayname("A"))

df195 = df.select(dayofmonth("A"))

df196 = df.select(dayofweek("A"))

df197 = df.select(dayofyear("A"))

df198 = df.select(is_array("A"))

df199 = df.select(is_boolean("A"))

df200 = df.select(is_binary("A"))

df201 = df.select(is_char("A"))

df202 = df.select(is_date("A"))

df203 = df.select(is_decimal("A"))

df204 = df.select(is_double("A"))

df205 = df.select(is_real("A"))

df206 = df.select(is_integer("A"))

df207 = df.select(is_null_value("A"))

df208 = df.select(is_object("A"))

df209 = df.select(is_time("A"))

df210 = df.select(is_timestamp_ltz("A"))

df211 = df.select(is_timestamp_ntz("A"))

df212 = df.select(is_timestamp_tz("A"))

df213 = df.select(time_from_parts(1,2,3), time_from_parts("A", "B", "A"), time_from_parts(1, "A", col("B")))

df = df.select(timestamp_from_parts(date_expr: ColumnOrName, time_expr: ColumnOrName) -> Column:
df = df.select(timestamp_from_parts(
df = df.select(timestamp_from_parts(*args, **kwargs) -> Column:
df = df.select(timestamp_ltz_from_parts(
df = df.select(timestamp_ntz_from_parts(
df = df.select(timestamp_ntz_from_parts(
df = df.select(timestamp_ntz_from_parts(*args, **kwargs) -> Column:
df = df.select(timestamp_tz_from_parts(
df = df.select(weekofyear(e: ColumnOrName) -> Column:
df = df.select(typeof(col: ColumnOrName) -> Column:
df = df.select(check_json(col: ColumnOrName) -> Column:
df = df.select(check_xml(col: ColumnOrName) -> Column:
df = df.select(json_extract_path_text(col: ColumnOrName, path: ColumnOrName) -> Column:
df = df.select(parse_json(e: ColumnOrName) -> Column:
df = df.select(parse_xml(e: ColumnOrName) -> Column:
df = df.select(strip_null_value(col: ColumnOrName) -> Column:
df = df.select(array_agg(col: ColumnOrName, is_distinct: bool = False) -> Column:
df = df.select(array_append(array: ColumnOrName, element: ColumnOrName) -> Column:
df = df.select(array_cat(array1: ColumnOrName, array2: ColumnOrName) -> Column:
df = df.select(array_compact(array: ColumnOrName) -> Column:
df = df.select(array_construct(*cols: ColumnOrName) -> Column:
df = df.select(array_construct_compact(*cols: ColumnOrName) -> Column:
df = df.select(array_contains(variant: ColumnOrName, array: ColumnOrName) -> Column:
df = df.select(array_insert(

## EXPECTED OUTPUT
