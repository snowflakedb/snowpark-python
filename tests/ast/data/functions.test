## TEST CASE

from snowflake.snowpark.functions import *

import datetime

df = session.table("test_table")

df01 = df.select(col("A"))

df02 = df.select(col("X", "A"))

df03 = df.select(col("A", None))

df04 = df.select(column("A"))

df05 = df.select(column("X", "A"))

df06 = df.select(column("A", None))

df07 = df.select(lit(1), lit("1"), lit(1.0), lit(True), lit(b'snow'), lit(datetime.date(2023, 2, 2)), lit([1, 2]), lit({"snow": "flake"}))

df08 = df.select(sql_expr("CURRENT_WAREHOUSE()"))

df09 = df.select(current_session())

df10 = df.select(current_statement())

df11 = df.select(current_user())

df12 = df.select(current_version())

df13 = df.select(current_warehouse())

df14 = df.select(current_database())

df15 = df.select(current_role())

df16 = df.select(current_schema())

df17 = df.select(current_schemas())

df18 = df.select(current_region())

df19 = df.select(current_account())

df20 = df.select(current_available_roles())

df21 = df.select(add_months("d", 4))

df22 = df.select(add_months(col("A"), 4))

df23 = df.select(add_months(col("A"), col("A")))

df24 = df.select(any_value("A"), any_value(col("A")))

df25 = df.select(bitnot("A"), bitnot(col("A")), bitnot(e=col("A")))

df26 = df.select(bitshiftleft("A", col("B")), bitshiftleft("A", -10), bitshiftleft(col("B"), 42))

df27 = df.select(bitshiftright("A", col("B")), bitshiftright("A", -10), bitshiftright(col("B"), 42))

df28 = df.select(bround("A", scale=10), bround("A", 2), bround(col("A"), scale=col("B")))

df29 = df.select(convert_timezone("A", col("B")), convert_timezone(col("A"), "B"), convert_timezone("A", "B"), convert_timezone(col("A"), col("B")), convert_timezone("A","B",None), convert_timezone("A", "B", "A"))

df30 = df.select(convert_timezone(lit("UTC"), col("a")), convert_timezone(lit("UTC"), col("b"), lit("Asia/Shanghai")))

df31 = df.select(approx_count_distinct("A"), approx_count_distinct(col("A")))

df32 = df.select(avg("A"), avg(col("B")))

df33 = df.select(corr("A", "B"))

df34 = df.select(count("*"), count("A"), count(col("A")))

df35 = df.select(count_distinct(), count_distinct(col("*")), count_distinct("A", "B", "C", "D", col("E")))

df36 = df.select(covar_pop("A", col("B")))

df37 = df.select(covar_samp("A", "B"))

df38 = df.select(create_map(["A", "B"]))

df39 = df.select(create_map({"A", "B", "A", "B"}))

df40 = df.select(create_map("A", "B"))

df41 = df.select(create_map("A", "B", "C", "D"))

df42 = df.select(kurtosis("A"))

df43 = df.select(max("*"), max("A"), max(col("A")))

df44 = df.select(mean("A"))

df45 = df.select(median("A"))

df46 = df.select(min("A"))

df47 = df.select(mode("A"))

df48 = df.select(skew("A"))

df49 = df.select(stddev("A"))

df50 = df.select(stddev_samp("A"))

df51 = df.select(stddev_pop("A"))

df52 = df.select(sum("A"))

df53 = df.select(sum_distinct("A"))

df54 = df.select(variance("A"))

df55 = df.select(var_samp("A"))

df56 = df.select(var_pop("A"))

df57 = df.select(approx_percentile("A", 0.6), approx_percentile(col("B"), 0.0))

df58 = df.select(approx_percentile_accumulate("A"))

df59 = df.select(approx_percentile_estimate("A", 0.3))

df60 = df.select(approx_percentile_combine("A"))

df61 = df.select(grouping("A"), grouping("A", "B"))

df62 = df.select(coalesce(), coalesce(col("A"), lit(10)))

df63 = df.select(equal_nan("A"))

df64 = df.select(is_null("A"))

df65 = df.select(negate("A"))

df66 = df.select(not_("A"))

df67 = df.select(random(), random(None), random(10))

df68 = df.select(uniform("A", "B", "A"), uniform(10, 13., col("A")), uniform(0.2, 2, 0.2))

df69 = df.select(seq1(0), seq1(10), seq1(-10))

df70 = df.select(seq2(1))

df71 = df.select(seq4(12))

df72 = df.select(seq8(324))

df73 = df.select(to_decimal("A", 10, 3), to_decimal(col("B"), 12, 3))

df74 = df.select(to_double(col("A")), to_double("A", None), to_double("A", "999.9"), to_double(col("A"), col("B")))

df75 = df.select(div0(0, 1), div0(1.2, 9.3), div0(10, 89.2), div0("A", 1), div0(0.2, "A"), div0(0.3, col("B")))

df76 = df.select(sqrt("A"))

df77 = df.select(abs("A"))

df78 = df.select(acos("A"))

df79 = df.select(asin("A"))

df80 = df.select(atan("A"))

df81 = df.select(atan2("A", "B"))

df82 = df.select(ceil("A"))

df83 = df.select(cos("A"))

df84 = df.select(cosh("A"))

df85 = df.select(exp("A"))

df86 = df.select(factorial("A"))

df87 = df.select(floor("A"))

## EXPECTED OUTPUT
