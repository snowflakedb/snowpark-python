## TEST CASE

df = session.table(tables.table1)

df2 = df.stat.approx_quantile("NUM", [0.5])

df3 = df.stat.approx_quantile(["NUM", "NUM"], [0, 0.2, 0.4], statement_params={'a':'b'})

df = session.create_dataframe([[0.1, 0.5], [0.2, 0.6], [0.3, 0.7]], schema=["a", "b"])

df4 = df.stat.cov("a", "b")

df5 = df.stat.cov("a", "b", statement_params={'a':'b'})

df4 = df.stat.corr("a", "b")

df5 = df.stat.corr("a", "b", statement_params={'a':'b'})

df = session.create_dataframe([(1, 1), (1, 2), (2, 1), (2, 1), (2, 3), (3, 2), (3, 3)], schema=["key", "value"])

ct = df.stat.crosstab("key", "value")

ct2 = df.stat.crosstab("key", "value", statement_params={'a':'b'})

df = session.create_dataframe([("Bob", 17), ("Alice", 10), ("Nico", 8), ("Bob", 12)], schema=["name", "age"])

fractions = {"Bob": 0.5, "Nico": 1.0}

sample_df = df.stat.sample_by("name", fractions)

## EXPECTED UNPARSER OUTPUT

df = session.table("table1")

df2 = df.stat.approx_quantile(["NUM"], [0.5])

df2

df3 = df.stat.approx_quantile(["NUM", "NUM"], [0.0, 0.2, 0.4], statement_params={"a": "b"})

df3

df = session.create_dataframe([[0.1, 0.5], [0.2, 0.6], [0.3, 0.7]], schema=["a", "b"])

df4 = df.stat.cov("a", "b")

df4

df5 = df.stat.cov("a", "b", statement_params={"a": "b"})

df5

df4 = df.stat.corr("a", "b")

df4

df5 = df.stat.corr("a", "b", statement_params={"a": "b"})

df5

df = session.create_dataframe([(1, 1), (1, 2), (2, 1), (2, 1), (2, 3), (3, 2), (3, 3)], schema=["key", "value"])

ct = df.stat.crosstab("key", "value")

ct2 = df.stat.crosstab("key", "value", statement_params={"a": "b"})

df = session.create_dataframe([("Bob", 17), ("Alice", 10), ("Nico", 8), ("Bob", 12)], schema=["name", "age"])

sample_df = df.stat.sample_by("name", {"Bob": 0.5, "Nico": 1.0})

## EXPECTED ENCODED AST

<<<<<<< HEAD
Cj8KPQovggwsEgoKCAoGdGFibGUxGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoGSICCAESBAoCZGYYASICCAEKZApiClOiCVAKJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKBsSA05VTRICCAEaCAAAAAAAAOA/IhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoGxIFCgNkZjIYAiICCAIKCBIGCAMSAggCEAEaERIPCg0KBWZpbmFsEAMYCSASIgQQARgX
CqUBCqIBCpIBogmOAQok+gwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoHRIDTlVNCiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgdEgNOVU0SAggBGhgAAAAAAAAAAJqZmZmZmck/mpmZmZmZ2T8iGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgdKgYKAWESAWISBQoDZGYzGAQiAggECggSBggFEgIIBBABGhESDwoNCgVmaW5hbBADGAkgEiIEEAEYFw==
CqEDCp4DCo8D+gWLAwriAgrfAgpz0gJwChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoHxIoggIlChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoHxGamZmZmZm5PxIoggIlChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoHxEAAAAAAADgPwpz0gJwChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoHxIoggIlChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoHxGamZmZmZnJPxIoggIlChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoHxEzMzMzMzPjPwpz0gJwChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoHxIoggIlChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoHxEzMzMzMzPTPxIoggIlChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoHxFmZmZmZmbmPxIICgYKAWEKAWIaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgfEgQKAmRmGAYiAggGCnwKegprsgloCiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSghEgFhEiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSghEgFiGgIIBiIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCESBQoDZGY0GAciAggHCggSBggIEgIIBxABGhESDwoNCgVmaW5hbBADGAkgEiIEEAEYFw==
CoUBCoIBCnOyCXAKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCMSAWESIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCMSAWIaAggGIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoIyoGCgFhEgFiEgUKA2RmNRgJIgIICQoIEgYIChICCAkQARoREg8KDQoFZmluYWwQAxgJIBIiBBABGBc=
CnwKegprqgloCiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSglEgFhEiL6DB8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSglEgFiGgIIBiIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCUSBQoDZGY0GAsiAggLCggSBggMEgIICxABGhESDwoNCgVmaW5hbBADGAkgEiIEEAEYFw==
CoUBCoIBCnOqCXAKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCcSAWESIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCcSAWIaAggGIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoJyoGCgFhEgFiEgUKA2RmNRgNIgIIDQoIEgYIDhICCA0QARoREg8KDQoFZmluYWwQAxgJIBIiBBABGBc=
CpkGCpYGCocG+gWDBgrUBQrRBQplmg1iChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKRIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKRABEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgpEAEKZZoNYgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCkSIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCkQARIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKRACCmWaDWIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgpEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgpEAISIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCkQAQplmg1iChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKRIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKRACEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgpEAEKZZoNYgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCkSIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCkQAhIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKRADCmWaDWIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgpEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgpEAMSIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCkQAgplmg1iChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKRIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKRADEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgpEAMSDgoMCgNrZXkKBXZhbHVlGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKRIECgJkZhgPIgIIDwqBAQp/CnG6CW4KJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCsSA2tleRIm+gwjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKxIFdmFsdWUaAggPIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKxIECgJjdBgQIgIIEAqLAQqIAQp5ugl2CiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgtEgNrZXkSJvoMIwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKC0SBXZhbHVlGgIIDyIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKC0qBgoBYRIBYhIFCgNjdDIYESICCBEK8gMK7wMK4AP6BdwDCq4DCqsDCmiaDWUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgvEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgvEgNCb2ISIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKC8QEQpqmg1nChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoLxIm+gwjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoLxIFQWxpY2USIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKC8QCgppmg1mChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoLxIl+gwiChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoLxIETmljbxIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoLxAICmiaDWUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgvEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgvEgNCb2ISIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKC8QDBINCgsKBG5hbWUKA2FnZRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKC8SBAoCZGYYEiICCBIKzAEKyQEKswHCCa8BCiX6DCIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgzEgRuYW1lEgeCAgQKAggSGi8KJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDMSA0JvYhEAAAAAAADgPxowCiX6DCIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgzEgROaWNvEQAAAAAAAPA/IhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoMxILCglzYW1wbGVfZGYYEyICCBMQARoREg8KDQoFZmluYWwQAxgJIBIiBBABGBc=
=======
{
  "body": [
    {
      "assign": {
        "expr": {
          "sp_table": {
            "name": {
              "sp_table_name_flat": {
                "name": "test_table"
              }
            },
            "src": {
              "file": "SRC_POSITION_TEST_MODE",
              "start_line": "90"
            },
            "variant": {
              "sp_session_table": true
            }
          }
        },
        "symbol": "df",
        "uid": "1",
        "var_id": {
          "bitfield1": "1"
        }
      }
    },
    {
      "assign": {
        "expr": {
          "sp_dataframe_stat_approx_quantile": {
            "cols": [
              {
                "string_val": {
                  "src": {
                    "file": "SRC_POSITION_TEST_MODE",
                    "start_line": "92"
                  },
                  "v": "NUM"
                }
              }
            ],
            "id": {
              "bitfield1": "1"
            },
            "percentile": [
              0.5
            ],
            "src": {
              "file": "SRC_POSITION_TEST_MODE",
              "start_line": "92"
            }
          }
        },
        "symbol": "df2",
        "uid": "2",
        "var_id": {
          "bitfield1": "2"
        }
      }
    },
    {
      "eval": {
        "uid": "3",
        "var_id": {
          "bitfield1": "2"
        }
      }
    }
  ],
  "client_ast_version": "1",
  "client_language": {
    "python_language": {
      "version": {
        "label": "final",
        "major": "3",
        "minor": "9",
        "patch": "20"
      }
    }
  },
  "client_version": {
    "major": "1",
    "minor": "23"
  }
}
>>>>>>> 66d50cff3 (SNOW-1738538 Update expectation files to json ast output so more stable & readable)
