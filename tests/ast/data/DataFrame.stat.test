## TEST CASE

df = session.table("test_table")

df2 = df.stat.approx_quantile("NUM", [0.5])

df3 = df.stat.approx_quantile(["NUM", "NUM"], [0, 0.2, 0.4], statement_params={'a':'b'})

df = session.create_dataframe([[0.1, 0.5], [0.2, 0.6], [0.3, 0.7]], schema=["a", "b"])

df4 = df.stat.cov("a", "b")

df5 = df.stat.cov("a", "b", statement_params={'a':'b'})

df4 = df.stat.corr("a", "b")

df5 = df.stat.corr("a", "b", statement_params={'a':'b'})

df = session.create_dataframe([(1, 1), (1, 2), (2, 1), (2, 1), (2, 3), (3, 2), (3, 3)], schema=["key", "value"])

ct = df.stat.crosstab("key", "value")

ct2 = df.stat.crosstab("key", "value", statement_params={'a':'b'})

df = session.create_dataframe([("Bob", 17), ("Alice", 10), ("Nico", 8), ("Bob", 12)], schema=["name", "age"])

fractions = {"Bob": 0.5, "Nico": 1.0}

sample_df = df.stat.sample_by("name", fractions)

## EXPECTED ENCODED AST

CkMKQQozogswEg4KDAoKdGVzdF90YWJsZRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFQiAggBEgQKAmRmGB0iAggdCmQKYgpTgglQCiTqCyEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShWEgNOVU0SAggdGggAAAAAAADgPyIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFYSBQoDZGYyGB4iAggeCggSBggfEgIIHhABGhESDwoNCgVmaW5hbBADGAggEyIEEAEYFQ==
CqUBCqIBCpIBggmOAQok6gshChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWBIDTlVNCiTqCyEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShYEgNOVU0SAggdGhgAAAAAAAAAAJqZmZmZmck/mpmZmZmZ2T8iGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShYKgYKAWESAWISBQoDZGYzGCAiAgggCggSBgghEgIIIBABGhESDwoNCgVmaW5hbBADGAggEyIEEAEYFQ==
CqEDCp4DCo8DygWLAwriAgrfAgpzogJwChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhIo4gElChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhGamZmZmZm5PxIo4gElChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhEAAAAAAADgPwpzogJwChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhIo4gElChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhGamZmZmZnJPxIo4gElChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhEzMzMzMzPjPwpzogJwChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhIo4gElChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhEzMzMzMzPTPxIo4gElChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhFmZmZmZmbmPxIICgYKAWEKAWIaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEgQKAmRmGCIiAggiCnwKegprkgloCiLqCx8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShcEgFhEiLqCx8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShcEgFiGgIIIiIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwSBQoDZGY0GCMiAggjCggSBggkEgIIIxABGhESDwoNCgVmaW5hbBADGAggEyIEEAEYFQ==
CoUBCoIBCnOSCXAKIuoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SAWESIuoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SAWIaAggiIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXioGCgFhEgFiEgUKA2RmNRglIgIIJQoIEgYIJhICCCUQARoREg8KDQoFZmluYWwQAxgIIBMiBBABGBU=
CnwKegprigloCiLqCx8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShgEgFhEiLqCx8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShgEgFiGgIIIiIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGASBQoDZGY0GCciAggnCggSBggoEgIIJxABGhESDwoNCgVmaW5hbBADGAggEyIEEAEYFQ==
CoUBCoIBCnOKCXAKIuoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGISAWESIuoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGISAWIaAggiIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYioGCgFhEgFiEgUKA2RmNRgpIgIIKQoIEgYIKhICCCkQARoREg8KDQoFZmluYWwQAxgIIBMiBBABGBU=
CpkGCpYGCocGygWDBgrUBQrRBQplkgxiChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZBIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZBABEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShkEAEKZZIMYgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGQSIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGQQARIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZBACCmWSDGIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShkEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShkEAISIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGQQAQplkgxiChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZBIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZBACEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShkEAEKZZIMYgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGQSIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGQQAhIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZBADCmWSDGIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShkEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShkEAMSIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGQQAgplkgxiChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZBIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZBADEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShkEAMSDgoMCgNrZXkKBXZhbHVlGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZBIECgJkZhgrIgIIKwqBAQp/CnGaCW4KJOoLIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGYSA2tleRIm6gsjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZhIFdmFsdWUaAggrIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZhIECgJjdBgsIgIILAqLAQqIAQp5mgl2CiTqCyEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShoEgNrZXkSJuoLIwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGgSBXZhbHVlGgIIKyIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGgqBgoBYRIBYhIFCgNjdDIYLSICCC0K8gMK7wMK4APKBdwDCq4DCqsDCmiSDGUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShqEiTqCyEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShqEgNCb2ISIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGoQEQpqkgxnChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoahIm6gsjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoahIFQWxpY2USIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGoQCgppkgxmChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoahIl6gsiChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoahIETmljbxIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoahAICmiSDGUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShqEiTqCyEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShqEgNCb2ISIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGoQDBINCgsKBG5hbWUKA2FnZRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGoSBAoCZGYYLiICCC4KzAEKyQEKswGiCa8BCiXqCyIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShuEgRuYW1lEgeKAgQKAgguGi8KJOoLIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKG4SA0JvYhEAAAAAAADgPxowCiXqCyIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShuEgROaWNvEQAAAAAAAPA/IhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobhILCglzYW1wbGVfZGYYLyICCC8QARoREg8KDQoFZmluYWwQAxgIIBMiBBABGBU=

## EXPECTED UNPARSER OUTPUT

df = session.table("test_table")

df2 = df.stat.approx_quantile(["NUM"], [0.5])

df2

df3 = df.stat.approx_quantile(["NUM", "NUM"], [0.0, 0.2, 0.4], statement_params={"a": "b"})

df3

df = session.create_dataframe([[0.1, 0.5], [0.2, 0.6], [0.3, 0.7]], schema=["a", "b"])

df4 = df.stat.cov("a", "b")

df4

df5 = df.stat.cov("a", "b", statement_params={"a": "b"})

df5

df4 = df.stat.corr("a", "b")

df4

df5 = df.stat.corr("a", "b", statement_params={"a": "b"})

df5

df = session.create_dataframe([(1, 1), (1, 2), (2, 1), (2, 1), (2, 3), (3, 2), (3, 3)], schema=["key", "value"])

ct = df.stat.crosstab("key", "value")

ct2 = df.stat.crosstab("key", "value", statement_params={"a": "b"})

df = session.create_dataframe([("Bob", 17), ("Alice", 10), ("Nico", 8), ("Bob", 12)], schema=["name", "age"])

sample_df = df.stat.sample_by("name", {"Bob": 0.5}{"Nico": 1.0})
