## TEST CASE

df = session.create_dataframe([(1, 1),(1, 2),(2, 1),(2, 2),(3, 1),(3, 2)], schema=["a", "b"])

df.group_by("a").median("b").collect()

df.group_by("a").function("avg")("b").collect()

df.group_by("a").count()

import pandas as pd

from snowflake.snowpark.types import StructType, StructField, StringType, FloatType

def convert(pandas_df):
    return pandas_df.assign(TEMP_F = lambda x: x.TEMP_C * 9 / 5 + 32)

df = session.createDataFrame([('SF', 21.0), ('SF', 17.5), ('SF', 24.0), ('NY', 30.9), ('NY', 33.6)],
        schema=['location', 'temp_c'])

df.group_by("location").apply_in_pandas(convert,
    output_schema=StructType([StructField("location", StringType()),
                              StructField("temp_c", FloatType()),
                              StructField("temp_f", FloatType())])).order_by("temp_c").collect()


df = session.create_dataframe([(1, 'A', 10000, 'JAN'), (1, 'B', 400, 'JAN'), (1, 'B', 5000, 'FEB')], schema=['empid', 'team', 'amount', 'month'])

# Does not work because __getitem__ is missing.
# df.group_by("empid").pivot("month", ['JAN', 'FEB']).sum("amount").sort(df["empid"]).show()

df.group_by("empid").pivot("month", ['JAN', 'FEB']).sum("amount").show()

df.group_by(["empid", "team"]).pivot("month").sum("amount").sort("empid", "team").show()

## EXPECTED UNPARSER OUTPUT

df = session.create_dataframe([(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2)], schema=["a", "b"])

df.group_by("a").median("b").collect()

df.group_by("a").avg("b").collect()

res8 = df.group_by("a").count()

df = session.create_dataframe([("SF", 21.0), ("SF", 17.5), ("SF", 24.0), ("NY", 30.9), ("NY", 33.6)], schema=["location", "temp_c"])

res10 = udtf(_ApplyInPandas, output_schema=StructType([StructField("location", StringType(), nullable=True), StructField("temp_c", FloatType(), nullable=True), StructField("temp_f", FloatType(), nullable=True)], structured=False), input_types=[StringType(16777216)]DoubleType()])

df.group_by("location").apply_in_pandas(convert, StructType([StructField("location", StringType(), nullable=True), StructField("temp_c", FloatType(), nullable=True), StructField("temp_f", FloatType(), nullable=True)], structured=False), input_types=[StringType(16777216), DoubleType()], input_names=["LOCATION", "TEMP_C"]).sort("temp_c").collect()

df = session.create_dataframe([(1, "A", 10000, "JAN"), (1, "B", 400, "JAN"), (1, "B", 5000, "FEB")], schema=["empid", "team", "amount", "month"])

df.group_by("empid").pivot("month", values=["JAN", "FEB"]).sum("amount").show()

df.group_by(["empid", "team"]).pivot("month").sum("amount").sort("empid", "team").show()

## EXPECTED ENCODED AST

CqwFCqkFCpoF0gWWBQrtBArqBAplogxiChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhABEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAEKZaIMYgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQARIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhACCmWiDGIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAISIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQAQplogxiChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhACEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAIKZaIMYgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQAxIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhABCmWiDGIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAMSIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQAhIICgYKAWEKAWIaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEgQKAmRmGAEiAggBClwKWgpQogdNCiYKIvoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwSAWEQARIHkgIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwSABgCIgIIAgpjCmEKV4ILVAoGbWVkaWFuEiYKIvoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwSAWIQARoGUgQKAggCIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXBIAGAMiAggDCjMKMQonqgYkCAEQARoCCAMyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShcEgAYBCICCAQKCBIGCAUSAggEEAEaERIPCg0KBWZpbmFsEAMYCSATIgQQARgV
ClwKWgpQogdNCiYKIvoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SAWEQARIHkgIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SABgGIgIIBgpgCl4KVIILUQoDYXZnEiYKIvoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SAWIQARoGUgQKAggGIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXhIAGAciAggHCjMKMQonqgYkCAEQARoCCAcyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEgAYCCICCAgKCBIGCAkSAggIEAEaERIPCg0KBWZpbmFsEAMYCSATIgQQARgV
ClwKWgpQogdNCiYKIvoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGASAWEQARIHkgIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGASABgKIgIICgo6CjgKLoILKwoFY291bnQaBlIECgIICiIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGASABgLIgIICwr+BAr7BArsBNIF6AQKswQKsAQKbqIMawoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSI/oLIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSAlNGEijiASUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEQAAAAAAADVACm6iDGsKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEiP6CyAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEgJTRhIo4gElChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaREAAAAAAIAxQApuogxrChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaRIj+gsgChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaRICU0YSKOIBJQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkRAAAAAAAAOEAKbqIMawoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSI/oLIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSAk5ZEijiASUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEWZmZmZm5j5ACm6iDGsKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEiP6CyAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEgJOWRIo4gElChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaRHNzMzMzMxAQBIUChIKCGxvY2F0aW9uCgZ0ZW1wX2MaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEgQKAmRmGAwiAggMCmMKYQpXogdUCi0KKfoLJgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSCGxvY2F0aW9uEAESB5ICBAoCCAwaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEgAYDSICCA0KmQEKlgEKiwG6DIcBGhASDl9BcHBseUluUGFuZGFzOhAKCpoBBwoFCICAgAgKAkABWkISQAo+qgE7ChUKCgoIbG9jYXRpb24SBZoBAgoAGAEKEAoICgZ0ZW1wX2MSAkgBGAEKEAoICgZ0ZW1wX2YSAkgBGAFoBIoBGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEgAYDiICCA4KiAMKhQMK+gL6CvYCCgsIARIHY29udmVydBIGUgQKAggNGoABCgtpbnB1dF90eXBlcxJxogJuChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIrigooCgqaAQcKBQiAgIAIEhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIjigogCgJAARIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwaggEKC2lucHV0X25hbWVzEnOiAnAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEin6CyYKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEghMT0NBVElPThIn+gskChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIGVEVNUF9DIjsKFQoKCghsb2NhdGlvbhIFmgECCgAYAQoQCggKBnRlbXBfYxICSAEYAQoQCggKBnRlbXBfZhICSAEYASoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSABgPIgIIDwpfCl0KU4IJUBIn+gskChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIGdGVtcF9jGAEiB5ICBAoCCA8qGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEgAYECICCBAKMwoxCieqBiQIARABGgIIEDIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSABgRIgIIEQoIEgYIEhICCBEQARoREg8KDQoFZmluYWwQAxgJIBMiBBABGBU=
CvQECvEECuIE0gXeBAqfBAqcBAqxAaIMrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEAESIvoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISAUESIpICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHIQkE4SJPoLIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISA0pBTgqxAaIMrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEAESIvoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISAUISIpICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHIQkAMSJPoLIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISA0pBTgqxAaIMrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEAESIvoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISAUISIpICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHIQiCcSJPoLIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISA0ZFQhIeChwKBWVtcGlkCgR0ZWFtCgZhbW91bnQKBW1vbnRoGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUochIECgJkZhgTIgIIEwpgCl4KVKIHUQoqCib6CyMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh3EgVlbXBpZBABEgeSAgQKAggTGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodxIAGBQiAggUCs8BCswBCsEBigu9ARIGUgQKAggUGib6CyMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh3EgVtb250aCIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHcqbxJtCmuiAmgKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh3EiT6CyEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh3EgNKQU4SJPoLIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHcSA0ZFQhIAGBUiAggVCmUKYwpZggtWCgNzdW0SKwon+gskChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodxIGYW1vdW50EAEaBlIECgIIFSIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHcSABgWIgIIFgoTChEKB/oIBAoCCBYSABgXIgIIFwoIEgYIGBICCBcQARoREg8KDQoFZmluYWwQAxgJIBMiBBABGBU=
CoYBCoMBCnmiB3YKTwom+gsjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeRIFZW1waWQKJfoLIgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHkSBHRlYW0SB5ICBAoCCBMaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh5EgAYGSICCBkKWwpZCk+KC0wSBlIECgIIGRom+gsjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeRIFbW9udGgiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh5EgAYGiICCBoKZQpjClmCC1YKA3N1bRIrCif6CyQKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh5EgZhbW91bnQQARoGUgQKAggaIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeRIAGBsiAggbCoYBCoMBCnmCCXYSJvoLIwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHkSBWVtcGlkEiX6CyIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh5EgR0ZWFtGAEiB5ICBAoCCBsqGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh5EgAYHCICCBwKEwoRCgf6CAQKAggcEgAYHSICCB0KCBIGCB4SAggdEAEaERIPCg0KBWZpbmFsEAMYCSATIgQQARgV
EAEaERIPCg0KBWZpbmFsEAMYCSATIgQQARgV
