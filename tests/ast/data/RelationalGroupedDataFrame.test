## TEST CASE

df = session.create_dataframe([(1, 1),(1, 2),(2, 1),(2, 2),(3, 1),(3, 2)], schema=["a", "b"])

df.group_by("a").median("b").collect()

df.group_by("a").function("avg")("b").collect()

df.group_by("a").count()

import pandas as pd

from snowflake.snowpark.types import StructType, StructField, StringType, FloatType

def convert(pandas_df):
    return pandas_df.assign(TEMP_F = lambda x: x.TEMP_C * 9 / 5 + 32)

df = session.createDataFrame([('SF', 21.0), ('SF', 17.5), ('SF', 24.0), ('NY', 30.9), ('NY', 33.6)],
        schema=['location', 'temp_c'])

df.group_by("location").apply_in_pandas(convert,
    output_schema=StructType([StructField("location", StringType()),
                              StructField("temp_c", FloatType()),
                              StructField("temp_f", FloatType())])).order_by("temp_c").collect()


df = session.create_dataframe([(1, 'A', 10000, 'JAN'), (1, 'B', 400, 'JAN'), (1, 'B', 5000, 'FEB')], schema=['empid', 'team', 'amount', 'month'])

# Does not work because __getitem__ is missing.
# df.group_by("empid").pivot("month", ['JAN', 'FEB']).sum("amount").sort(df["empid"]).show()

df.group_by("empid").pivot("month", ['JAN', 'FEB']).sum("amount").show()

df.group_by(["empid", "team"]).pivot("month").sum("amount").sort("empid", "team").show()

## EXPECTED UNPARSER OUTPUT

df = session.create_dataframe([(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2)], schema=["a", "b"])

df.group_by("a").median("b").collect()

df.group_by("a").avg("b").collect()

res8 = df.group_by("a").count()

df = session.create_dataframe([("SF", 21.0), ("SF", 17.5), ("SF", 24.0), ("NY", 30.9), ("NY", 33.6)], schema=["location", "temp_c"])

res10 = udtf(_ApplyInPandas, output_schema=StructType([StructField("location", StringType(), nullable=True), StructField("temp_c", FloatType(), nullable=True), StructField("temp_f", FloatType(), nullable=True)], structured=False), input_types=[StringType(16777216)]DoubleType()])

df.group_by("location").apply_in_pandas(convert, StructType([StructField("location", StringType(), nullable=True), StructField("temp_c", FloatType(), nullable=True), StructField("temp_f", FloatType(), nullable=True)], structured=False), input_types=[StringType(16777216), DoubleType()], input_names=["LOCATION", "TEMP_C"]).sort("temp_c").collect()

df = session.create_dataframe([(1, "A", 10000, "JAN"), (1, "B", 400, "JAN"), (1, "B", 5000, "FEB")], schema=["empid", "team", "amount", "month"])

df.group_by("empid").pivot("month", values=["JAN", "FEB"]).sum("amount").show()

df.group_by(["empid", "team"]).pivot("month").sum("amount").sort("empid", "team").show()

## EXPECTED ENCODED AST

CqwFCqkFCpoFygWWBQrtBArqBAplkgxiChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhABEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAEKZZIMYgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQARIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhACCmWSDGIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAISIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQAQplkgxiChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhACEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAIKZZIMYgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQAxIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhABCmWSDGIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAMSIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQAhIICgYKAWEKAWIaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEgQKAmRmGAEiAggBClwKWgpQmgdNCiYKIuoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwSAWEQARIHigIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwSABgCIgIIAgpjCmEKV/IKVAoGbWVkaWFuEiYKIuoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwSAWIQARoGWgQKAggCIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXBIAGAMiAggDCjMKMQonogYkCAEQARoCCAMyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShcEgAYBCICCAQKCBIGCAUSAggEEAEaERIPCg0KBWZpbmFsEAMYCCATIgQQARgV
ClwKWgpQmgdNCiYKIuoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SAWEQARIHigIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SABgGIgIIBgpgCl4KVPIKUQoDYXZnEiYKIuoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SAWIQARoGWgQKAggGIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXhIAGAciAggHCjMKMQonogYkCAEQARoCCAcyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEgAYCCICCAgKCBIGCAkSAggIEAEaERIPCg0KBWZpbmFsEAMYCCATIgQQARgV
ClwKWgpQmgdNCiYKIuoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGASAWEQARIHigIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGASABgKIgIICgo6CjgKLvIKKwoFY291bnQaBloECgIICiIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGASABgLIgIICwr+BAr7BArsBMoF6AQKswQKsAQKbpIMawoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSI+oLIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSAlNGEijiASUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEQAAAAAAADVACm6SDGsKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEiPqCyAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEgJTRhIo4gElChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaREAAAAAAIAxQApukgxrChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaRIj6gsgChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaRICU0YSKOIBJQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkRAAAAAAAAOEAKbpIMawoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSI+oLIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSAk5ZEijiASUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEWZmZmZm5j5ACm6SDGsKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEiPqCyAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEgJOWRIo4gElChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaRHNzMzMzMxAQBIUChIKCGxvY2F0aW9uCgZ0ZW1wX2MaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEgQKAmRmGAwiAggMCmMKYQpXmgdUCi0KKeoLJgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSCGxvY2F0aW9uEAESB4oCBAoCCAwaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEgAYDSICCA0KmQEKlgEKiwGqDIcBGhASDl9BcHBseUluUGFuZGFzOhAKCpoBBwoFCICAgAgKAkABWkISQAo+qgE7ChUKCgoIbG9jYXRpb24SBZoBAgoAGAEKEAoICgZ0ZW1wX2MSAkgBGAEKEAoICgZ0ZW1wX2YSAkgBGAFoBIoBGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEgAYDiICCA4KiAMKhQMK+gLqCvYCCgsIARIHY29udmVydBIGWgQKAggNGoABCgtpbnB1dF90eXBlcxJxogJuChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIr+gkoCgqaAQcKBQiAgIAIEhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIj+gkgCgJAARIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwaggEKC2lucHV0X25hbWVzEnOiAnAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEinqCyYKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEghMT0NBVElPThIn6gskChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIGVEVNUF9DIjsKFQoKCghsb2NhdGlvbhIFmgECCgAYAQoQCggKBnRlbXBfYxICSAEYAQoQCggKBnRlbXBfZhICSAEYASoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSABgPIgIIDwpfCl0KU/oIUBIn6gskChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIGdGVtcF9jGAEiB4oCBAoCCA8qGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEgAYECICCBAKMwoxCieiBiQIARABGgIIEDIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSABgRIgIIEQoIEgYIEhICCBEQARoREg8KDQoFZmluYWwQAxgIIBMiBBABGBU=
CvQECvEECuIEygXeBAqfBAqcBAqxAZIMrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEAESIuoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISAUESIpICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHIQkE4SJOoLIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISA0pBTgqxAZIMrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEAESIuoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISAUISIpICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHIQkAMSJOoLIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISA0pBTgqxAZIMrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEAESIuoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISAUISIpICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHIQiCcSJOoLIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISA0ZFQhIeChwKBWVtcGlkCgR0ZWFtCgZhbW91bnQKBW1vbnRoGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUochIECgJkZhgTIgIIEwpgCl4KVJoHUQoqCibqCyMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh3EgVlbXBpZBABEgeKAgQKAggTGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodxIAGBQiAggUCs8BCswBCsEB+gq9ARIGWgQKAggUGibqCyMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh3EgVtb250aCIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHcqbxJtCmuiAmgKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh3EiTqCyEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh3EgNKQU4SJOoLIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHcSA0ZFQhIAGBUiAggVCmUKYwpZ8gpWCgNzdW0SKwon6gskChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodxIGYW1vdW50EAEaBloECgIIFSIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHcSABgWIgIIFgoTChEKB/IIBAoCCBYSABgXIgIIFwoIEgYIGBICCBcQARoREg8KDQoFZmluYWwQAxgIIBMiBBABGBU=
CoYBCoMBCnmaB3YKTwom6gsjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeRIFZW1waWQKJeoLIgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHkSBHRlYW0SB4oCBAoCCBMaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh5EgAYGSICCBkKWwpZCk/6CkwSBloECgIIGRom6gsjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeRIFbW9udGgiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh5EgAYGiICCBoKZQpjClnyClYKA3N1bRIrCifqCyQKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh5EgZhbW91bnQQARoGWgQKAggaIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeRIAGBsiAggbCoYBCoMBCnn6CHYSJuoLIwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHkSBWVtcGlkEiXqCyIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh5EgR0ZWFtGAEiB4oCBAoCCBsqGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh5EgAYHCICCBwKEwoRCgfyCAQKAggcEgAYHSICCB0KCBIGCB4SAggdEAEaERIPCg0KBWZpbmFsEAMYCCATIgQQARgV
EAEaERIPCg0KBWZpbmFsEAMYCCATIgQQARgV
