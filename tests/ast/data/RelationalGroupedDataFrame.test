## TEST CASE

df = session.create_dataframe([(1, 1),(1, 2),(2, 1),(2, 2),(3, 1),(3, 2)], schema=["a", "b"])

df.group_by("a").median("b").collect()

df.group_by("a").function("avg")("b").collect()

df.group_by("a").count()

import pandas as pd

from snowflake.snowpark.types import StructType, StructField, StringType, FloatType

def convert(pandas_df):
    return pandas_df.assign(TEMP_F = lambda x: x.TEMP_C * 9 / 5 + 32)

df = session.createDataFrame([('SF', 21.0), ('SF', 17.5), ('SF', 24.0), ('NY', 30.9), ('NY', 33.6)],
        schema=['location', 'temp_c'])

df.group_by("location").apply_in_pandas(convert,
    output_schema=StructType([StructField("location", StringType()),
                              StructField("temp_c", FloatType()),
                              StructField("temp_f", FloatType())])).order_by("temp_c").collect()


df = session.create_dataframe([(1, 'A', 10000, 'JAN'), (1, 'B', 400, 'JAN'), (1, 'B', 5000, 'FEB')], schema=['empid', 'team', 'amount', 'month'])

# Does not work because __getitem__ is missing.
# df.group_by("empid").pivot("month", ['JAN', 'FEB']).sum("amount").sort(df["empid"]).show()

df.group_by("empid").pivot("month", ['JAN', 'FEB']).sum("amount").show()

df.group_by(["empid", "team"]).pivot("month").sum("amount").sort("empid", "team").show()

## EXPECTED UNPARSER OUTPUT

df = session.create_dataframe([(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2)], schema=["a", "b"])

df.group_by("a").median("b").collect()

df.group_by("a").avg("b").collect()

res8 = df.group_by("a").count()

df = session.create_dataframe([("SF", 21.0), ("SF", 17.5), ("SF", 24.0), ("NY", 30.9), ("NY", 33.6)], schema=["location", "temp_c"])

res10 = udtf(_ApplyInPandas, output_schema=StructType([StructField("location", StringType(), nullable=True), StructField("temp_c", FloatType(), nullable=True), StructField("temp_f", FloatType(), nullable=True)], structured=False), input_types=[StringType(16777216)]DoubleType()])

df.group_by("location").apply_in_pandas(convert, StructType([StructField("location", StringType(), nullable=True), StructField("temp_c", FloatType(), nullable=True), StructField("temp_f", FloatType(), nullable=True)], structured=False), input_types=[StringType(16777216), DoubleType()], input_names=["LOCATION", "TEMP_C"]).sort("temp_c").collect()

df = session.create_dataframe([(1, "A", 10000, "JAN"), (1, "B", 400, "JAN"), (1, "B", 5000, "FEB")], schema=["empid", "team", "amount", "month"])

df.group_by("empid").pivot("month", values=["JAN", "FEB"]).sum("amount").show()

df.group_by(["empid", "team"]).pivot("month").sum("amount").sort("empid", "team").show()

## EXPECTED ENCODED AST

Cp4GCpsGCowG8gWIBgrZBQrWBQp30gx0CiAIZRBaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oWhInugIkCiAIZRBaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oWhABEie6AiQKIAhlEFoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShaEAEKd9IMdAogCGUQWhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKFoSJ7oCJAogCGUQWhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKFoQARInugIkCiAIZRBaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oWhACCnfSDHQKIAhlEFoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShaEie6AiQKIAhlEFoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShaEAISJ7oCJAogCGUQWhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKFoQAQp30gx0CiAIZRBaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oWhInugIkCiAIZRBaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oWhACEie6AiQKIAhlEFoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShaEAIKd9IMdAogCGUQWhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKFoSJ7oCJAogCGUQWhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKFoQAxInugIkCiAIZRBaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oWhABCnfSDHQKIAhlEFoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShaEie6AiQKIAhlEFoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShaEAMSJ7oCJAogCGUQWhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKFoQAhIICgYKAWEKAWIaIAhlEFoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShaEgQKAmRmGAEiAggBCmgKZgpcwgdZCiwKKLIMJQogCBgQXBoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKFwSAWEQARIHggIECgIIARogCBgQXBoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKFwS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
EAEaERIPCg0KBWZpbmFsEAMYCyAJIgQQARgV
