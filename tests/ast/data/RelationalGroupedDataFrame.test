## TEST CASE

df = session.create_dataframe([(1, 1),(1, 2),(2, 1),(2, 2),(3, 1),(3, 2)], schema=["a", "b"])

df.group_by("a").median("b").collect()

df.group_by("a").function("avg")("b").collect()

df.group_by("a").count()

import pandas as pd

from snowflake.snowpark.types import StructType, StructField, StringType, FloatType

def convert(pandas_df):
    return pandas_df.assign(TEMP_F = lambda x: x.TEMP_C * 9 / 5 + 32)

df = session.createDataFrame([('SF', 21.0), ('SF', 17.5), ('SF', 24.0), ('NY', 30.9), ('NY', 33.6)],
        schema=['location', 'temp_c'])

df.group_by("location").apply_in_pandas(convert,
    output_schema=StructType([StructField("location", StringType()),
                              StructField("temp_c", FloatType()),
                              StructField("temp_f", FloatType())])).order_by("temp_c").collect()


df = session.create_dataframe([(1, 'A', 10000, 'JAN'), (1, 'B', 400, 'JAN'), (1, 'B', 5000, 'FEB')], schema=['empid', 'team', 'amount', 'month'])

# Does not work because __getitem__ is missing.
# df.group_by("empid").pivot("month", ['JAN', 'FEB']).sum("amount").sort(df["empid"]).show()

df.group_by("empid").pivot("month", ['JAN', 'FEB']).sum("amount").show()

df.group_by(["empid", "team"]).pivot("month").sum("amount").sort("empid", "team").show()

## EXPECTED UNPARSER OUTPUT

df = session.create_dataframe([(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2)], schema=["a", "b"])

df.group_by("a").median("b").collect()

df.group_by("a").avg("b").collect()

res8 = df.group_by("a").count()

df = session.create_dataframe([("SF", 21.0), ("SF", 17.5), ("SF", 24.0), ("NY", 30.9), ("NY", 33.6)], schema=["location", "temp_c"])

res10 = udtf(_ApplyInPandas, output_schema=StructType([StructField("location", StringType(), nullable=True), StructField("temp_c", FloatType(), nullable=True), StructField("temp_f", FloatType(), nullable=True)], structured=False), input_types=[StringType(16777216)]DoubleType()])

df.group_by("location").apply_in_pandas(convert, StructType([StructField("location", StringType(), nullable=True), StructField("temp_c", FloatType(), nullable=True), StructField("temp_f", FloatType(), nullable=True)], structured=False), input_types=[StringType(16777216), DoubleType()], input_names=["LOCATION", "TEMP_C"]).sort("temp_c").collect()

df = session.create_dataframe([(1, "A", 10000, "JAN"), (1, "B", 400, "JAN"), (1, "B", 5000, "FEB")], schema=["empid", "team", "amount", "month"])

df.group_by("empid").pivot("month", values=["JAN", "FEB"]).sum("amount").show()

df.group_by(["empid", "team"]).pivot("month").sum("amount").sort("empid", "team").show()

## EXPECTED ENCODED AST

CqwFCqkFCpoF8gWWBQrtBArqBApl0gxiChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhIhugIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhABEiG6Ah4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAEKZdIMYgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSIboCHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQARIhugIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhACCmXSDGIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEiG6Ah4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAISIboCHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQAQpl0gxiChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhIhugIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhACEiG6Ah4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAIKZdIMYgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSIboCHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQAxIhugIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhABCmXSDGIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEiG6Ah4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAMSIboCHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQAhIICgYKAWEKAWIaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEgQKAmRmGAEiAggBClwKWgpQwgdNCiYKIrIMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwSAWEQARIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwSABgCIgIIAgpjCmEKV6oLVAoGbWVkaWFuEiYKIrIMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwSAWIQARoGUgQKAggCIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXBIAGAMiAggDCjMKMQonygYkCAEQARoCCAMyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShcEgAYBCICCAQKCBIGCAUSAggEEAEaERIPCg0KBWZpbmFsEAMYCSASIgYQARgWIAE=
ClwKWgpQwgdNCiYKIrIMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SAWEQARIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SABgGIgIIBgpgCl4KVKoLUQoDYXZnEiYKIrIMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SAWIQARoGUgQKAggGIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXhIAGAciAggHCjMKMQonygYkCAEQARoCCAcyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEgAYCCICCAgKCBIGCAkSAggIEAEaERIPCg0KBWZpbmFsEAMYCSASIgYQARgWIAE=
ClwKWgpQwgdNCiYKIrIMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGASAWEQARIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGASABgKIgIICgo6CjgKLqoLKwoFY291bnQaBlIECgIICiIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGASABgLIgIICwr+BAr7BArsBPIF6AQKswQKsAQKbtIMawoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSI7IMIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSAlNGEij6ASUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEQAAAAAAADVACm7SDGsKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEiOyDCAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEgJTRhIo+gElChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaREAAAAAAIAxQApu0gxrChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaRIjsgwgChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaRICU0YSKPoBJQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkRAAAAAAAAOEAKbtIMawoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSI7IMIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSAk5ZEij6ASUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEWZmZmZm5j5ACm7SDGsKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEiOyDCAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEgJOWRIo+gElChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaRHNzMzMzMxAQBIUChIKCGxvY2F0aW9uCgZ0ZW1wX2MaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEgQKAmRmGAwiAggMCmMKYQpXwgdUCi0KKbIMJgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSCGxvY2F0aW9uEAESB4ICBAoCCAwaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEgAYDSICCA0KmQEKlgEKiwHqDIcBGhASDl9BcHBseUluUGFuZGFzOhAKCpoBBwoFCICAgAgKAkABWkISQAo+qgE7ChUKCgoIbG9jYXRpb24SBZoBAgoAGAEKEAoICgZ0ZW1wX2MSAkgBGAEKEAoICgZ0ZW1wX2YSAkgBGAFoBIoBGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEgAYDiICCA4KiAMKhQMK+gKiC/YCCgsIARIHY29udmVydBIGUgQKAggNGoABCgtpbnB1dF90eXBlcxJxygJuChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIrsgooCgqaAQcKBQiAgIAIEhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIjsgogCgJAARIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwaggEKC2lucHV0X25hbWVzEnPKAnAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEimyDCYKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEghMT0NBVElPThInsgwkChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIGVEVNUF9DIjsKFQoKCghsb2NhdGlvbhIFmgECCgAYAQoQCggKBnRlbXBfYxICSAEYAQoQCggKBnRlbXBfZhICSAEYASoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSABgPIgIIDwpfCl0KU5IJUBInsgwkChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIGdGVtcF9jGAEiB4ICBAoCCA8qGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEgAYECICCBAKMwoxCifKBiQIARABGgIIEDIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSABgRIgIIEQoIEgYIEhICCBEQARoREg8KDQoFZmluYWwQAxgJIBIiBhABGBYgAQ==
CvQECvEECuIE8gXeBAqfBAqcBAqxAdIMrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEiG6Ah4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEAESIrIMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISAUESIroCHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHIQkE4SJLIMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISA0pBTgqxAdIMrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEiG6Ah4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEAESIrIMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISAUISIroCHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHIQkAMSJLIMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISA0pBTgqxAdIMrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEiG6Ah4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEAESIrIMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISAUISIroCHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHIQiCcSJLIMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISA0ZFQhIeChwKBWVtcGlkCgR0ZWFtCgZhbW91bnQKBW1vbnRoGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUochIECgJkZhgTIgIIEwpgCl4KVMIHUQoqCiayDCMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh3EgVlbXBpZBABEgeCAgQKAggTGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodxIAGBQiAggUCs8BCswBCsEBsgu9ARIGUgQKAggUGiayDCMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh3EgVtb250aCIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHcqbxJtCmvKAmgKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh3EiSyDCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh3EgNKQU4SJLIMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHcSA0ZFQhIAGBUiAggVCmUKYwpZqgtWCgNzdW0SKwonsgwkChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodxIGYW1vdW50EAEaBlIECgIIFSIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHcSABgWIgIIFgoTChEKB4oJBAoCCBYSABgXIgIIFwoIEgYIGBICCBcQARoREg8KDQoFZmluYWwQAxgJIBIiBhABGBYgAQ==
CoYBCoMBCnnCB3YKTwomsgwjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeRIFZW1waWQKJbIMIgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHkSBHRlYW0SB4ICBAoCCBMaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh5EgAYGSICCBkKWwpZCk+yC0wSBlIECgIIGRomsgwjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeRIFbW9udGgiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh5EgAYGiICCBoKZQpjClmqC1YKA3N1bRIrCieyDCQKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh5EgZhbW91bnQQARoGUgQKAggaIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeRIAGBsiAggbCoYBCoMBCnmSCXYSJrIMIwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHkSBWVtcGlkEiWyDCIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh5EgR0ZWFtGAEiB4ICBAoCCBsqGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh5EgAYHCICCBwKEwoRCgeKCQQKAggcEgAYHSICCB0KCBIGCB4SAggdEAEaERIPCg0KBWZpbmFsEAMYCSASIgYQARgWIAE=
EAEaERIPCg0KBWZpbmFsEAMYCSASIgYQARgWIAE=
