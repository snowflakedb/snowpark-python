## TEST CASE

df = session.create_dataframe([(1, 1),(1, 2),(2, 1),(2, 2),(3, 1),(3, 2)], schema=["a", "b"])

df.group_by("a").median("b").collect()

df.group_by("a").function("avg")("b").collect()

df.group_by("a").count()

import pandas as pd

from snowflake.snowpark.types import StructType, StructField, StringType, FloatType

def convert(pandas_df):
    return pandas_df.assign(TEMP_F = lambda x: x.TEMP_C * 9 / 5 + 32)

df = session.createDataFrame([('SF', 21.0), ('SF', 17.5), ('SF', 24.0), ('NY', 30.9), ('NY', 33.6)],
        schema=['location', 'temp_c'])

df.group_by("location").apply_in_pandas(convert,
    output_schema=StructType([StructField("location", StringType()),
                              StructField("temp_c", FloatType()),
                              StructField("temp_f", FloatType())])).order_by("temp_c").collect()


df = session.create_dataframe([(1, 'A', 10000, 'JAN'), (1, 'B', 400, 'JAN'), (1, 'B', 5000, 'FEB')], schema=['empid', 'team', 'amount', 'month'])

# Does not work because __getitem__ is missing.
# df.group_by("empid").pivot("month", ['JAN', 'FEB']).sum("amount").sort(df["empid"]).show()

df.group_by("empid").pivot("month", ['JAN', 'FEB']).sum("amount").show()

df.group_by(["empid", "team"]).pivot("month").sum("amount").sort("empid", "team").show()

## EXPECTED UNPARSER OUTPUT

df = session.create_dataframe([(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2)], schema=["a", "b"])

df.group_by("a").median("b").collect()

df.group_by("a").avg("b").collect()

res8 = df.group_by("a").count()

df = session.create_dataframe([("SF", 21.0), ("SF", 17.5), ("SF", 24.0), ("NY", 30.9), ("NY", 33.6)], schema=["location", "temp_c"])

res10 = udtf(_ApplyInPandas, output_schema=StructType([StructField("location", StringType(), nullable=True), StructField("temp_c", FloatType(), nullable=True), StructField("temp_f", FloatType(), nullable=True)], structured=False), input_types=[StringType(16777216)]DoubleType()])

df.group_by("location").apply_in_pandas(convert, StructType([StructField("location", StringType(), nullable=True), StructField("temp_c", FloatType(), nullable=True), StructField("temp_f", FloatType(), nullable=True)], structured=False), input_types=[StringType(16777216), DoubleType()], input_names=["LOCATION", "TEMP_C"]).sort("temp_c").collect()

df = session.create_dataframe([(1, "A", 10000, "JAN"), (1, "B", 400, "JAN"), (1, "B", 5000, "FEB")], schema=["empid", "team", "amount", "month"])

df.group_by("empid").pivot("month", values=["JAN", "FEB"]).sum("amount").show()

df.group_by(["empid", "team"]).pivot("month").sum("amount").sort("empid", "team").show()

## EXPECTED ENCODED AST

Cp4GCpsGCowG0gWIBgrZBQrWBQp3sgx0CiAIZRBaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oWhInkgIkCiAIZRBaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oWhABEieSAiQKIAhlEFoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShaEAEKd7IMdAogCGUQWhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKFoSJ5ICJAogCGUQWhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKFoQARInkgIkCiAIZRBaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oWhACCneyDHQKIAhlEFoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShaEieSAiQKIAhlEFoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShaEAISJ5ICJAogCGUQWhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKFoQAQp3sgx0CiAIZRBaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oWhInkgIkCiAIZRBaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oWhACEieSAiQKIAhlEFoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShaEAIKd7IMdAogCGUQWhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKFoSJ5ICJAogCGUQWhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKFoQAxInkgIkCiAIZRBaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oWhABCneyDHQKIAhlEFoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShaEieSAiQKIAhlEFoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShaEAMSJ5ICJAogCGUQWhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKFoQAhIICgYKAWEKAWIaIAhlEFoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShaEgQKAmRmGAEiAggBCmgKZgpcogdZCiwKKIoMJQogCBgQXBoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKFwSAWEQARIHigIECgIIARogCBgQXBoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKFwS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
EAEaERIPCg0KBWZpbmFsEAMYCyAJIgQQARgV
