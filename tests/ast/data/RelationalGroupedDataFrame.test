## TEST CASE

df = session.create_dataframe([(1, 1),(1, 2),(2, 1),(2, 2),(3, 1),(3, 2)], schema=["a", "b"])

df.group_by("a").median("b").collect()

df.group_by("a").function("avg")("b").collect()

df.group_by("a").count()

import pandas as pd

from snowflake.snowpark.types import StructType, StructField, StringType, FloatType

def convert(pandas_df):
    return pandas_df.assign(TEMP_F = lambda x: x.TEMP_C * 9 / 5 + 32)

df = session.createDataFrame([('SF', 21.0), ('SF', 17.5), ('SF', 24.0), ('NY', 30.9), ('NY', 33.6)],
        schema=['location', 'temp_c'])

df.group_by("location").apply_in_pandas(convert,
    output_schema=StructType([StructField("location", StringType()),
                              StructField("temp_c", FloatType()),
                              StructField("temp_f", FloatType())])).order_by("temp_c").collect()


df = session.create_dataframe([(1, 'A', 10000, 'JAN'), (1, 'B', 400, 'JAN'), (1, 'B', 5000, 'FEB')], schema=['empid', 'team', 'amount', 'month'])

# Does not work because __getitem__ is missing.
# df.group_by("empid").pivot("month", ['JAN', 'FEB']).sum("amount").sort(df["empid"]).show()

df.group_by("empid").pivot("month", ['JAN', 'FEB']).sum("amount").show()

df.group_by(["empid", "team"]).pivot("month").sum("amount").sort("empid", "team").show()

## EXPECTED UNPARSER OUTPUT

df = session.create_dataframe([(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2)], schema=["a", "b"])

df.group_by("a").median("b").collect()

df.group_by("a").avg("b").collect()

res8 = df.group_by("a").count()

df = session.create_dataframe([("SF", 21.0), ("SF", 17.5), ("SF", 24.0), ("NY", 30.9), ("NY", 33.6)], schema=["location", "temp_c"])

res10 = udtf(_ApplyInPandas, output_schema=StructType([StructField("location", StringType(), nullable=True), StructField("temp_c", FloatType(), nullable=True), StructField("temp_f", FloatType(), nullable=True)], structured=False), input_types=[StringType(16777216), DoubleType()])

df.group_by("location").apply_in_pandas(convert, StructType([StructField("location", StringType(), nullable=True), StructField("temp_c", FloatType(), nullable=True), StructField("temp_f", FloatType(), nullable=True)], structured=False), input_types=[StringType(16777216), DoubleType()], input_names=["LOCATION", "TEMP_C"]).sort("temp_c").collect()

df = session.create_dataframe([(1, "A", 10000, "JAN"), (1, "B", 400, "JAN"), (1, "B", 5000, "FEB")], schema=["empid", "team", "amount", "month"])

df.group_by("empid").pivot("month", values=["JAN", "FEB"]).sum("amount").show()

df.group_by(["empid", "team"]).pivot("month").sum("amount").sort("empid", "team").show()

## EXPECTED ENCODED AST

CqwFCqkFCpoF+gWWBQrtBArqBAplmg1iChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhABEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAEKZZoNYgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQARIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhACCmWaDWIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAISIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQAQplmg1iChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhACEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAIKZZoNYgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQAxIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhABCmWaDWIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAMSIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoQAhIICgYKAWEKAWIaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEgQKAmRmGAEiAggBClwKWgpQygdNCiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwSAWEQARIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwSABgCIgIIAgpjCmEKV8oLVAoGbWVkaWFuEiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwSAWIQARoGUgQKAggCIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXBIAGAMiAggDCjMKMQon0gYkCAEQARoCCAMyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShcEgAYBCICCAQKCBIGCAUSAggEEAEaERIPCg0KBWZpbmFsEAMYCSASIgQQARgX
ClwKWgpQygdNCiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SAWEQARIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SABgGIgIIBgpgCl4KVMoLUQoDYXZnEiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SAWIQARoGUgQKAggGIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXhIAGAciAggHCjMKMQon0gYkCAEQARoCCAcyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEgAYCCICCAgKCBIGCAkSAggIEAEaERIPCg0KBWZpbmFsEAMYCSASIgQQARgX
ClwKWgpQygdNCiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGASAWEQARIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGASABgKIgIICgo6CjgKLsoLKwoFY291bnQaBlIECgIICiIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGASABgLIgIICwr+BAr7BArsBPoF6AQKswQKsAQKbpoNawoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSI/oMIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSAlNGEiiCAiUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEQAAAAAAADVACm6aDWsKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEiP6DCAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEgJTRhIoggIlChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaREAAAAAAIAxQApumg1rChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaRIj+gwgChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaRICU0YSKIICJQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkRAAAAAAAAOEAKbpoNawoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSI/oMIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGkSAk5ZEiiCAiUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEWZmZmZm5j5ACm6aDWsKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEiP6DCAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEgJOWRIoggIlChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaRHNzMzMzMxAQBIUChIKCGxvY2F0aW9uCgZ0ZW1wX2MaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShpEgQKAmRmGAwiAggMCmMKYQpXygdUCi0KKfoMJgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSCGxvY2F0aW9uEAESB4ICBAoCCAwaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEgAYDSICCA0KmQEKlgEKiwGyDYcBGhASDl9BcHBseUluUGFuZGFzOhAKCpoBBwoFCICAgAgKAkABWkISQAo+qgE7ChUKCgoIbG9jYXRpb24SBZoBAgoAGAEKEAoICgZ0ZW1wX2MSAkgBGAEKEAoICgZ0ZW1wX2YSAkgBGAFoBIoBGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEgAYDiICCA4KiAMKhQMK+gLCC/YCCgsIARIHY29udmVydBIGUgQKAggNGoABCgtpbnB1dF90eXBlcxJx0gJuChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIrugooCgqaAQcKBQiAgIAIEhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIjugogCgJAARIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwaggEKC2lucHV0X25hbWVzEnPSAnAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEin6DCYKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEghMT0NBVElPThIn+gwkChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIGVEVNUF9DIjsKFQoKCghsb2NhdGlvbhIFmgECCgAYAQoQCggKBnRlbXBfYxICSAEYAQoQCggKBnRlbXBfZhICSAEYASoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSABgPIgIIDwpfCl0KU5oJUBIn+gwkChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIGdGVtcF9jGAEiB4ICBAoCCA8qGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEgAYECICCBAKMwoxCifSBiQIARABGgIIEDIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSABgRIgIIEQoIEgYIEhICCBEQARoREg8KDQoFZmluYWwQAxgJIBIiBBABGBc=
CvQECvEECuIE+gXeBAqfBAqcBAqxAZoNrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEAESIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISAUESIsICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHIQkE4SJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISA0pBTgqxAZoNrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEAESIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISAUISIsICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHIQkAMSJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISA0pBTgqxAZoNrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEAESIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISAUISIsICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHIQiCcSJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISA0ZFQhIeChwKBWVtcGlkCgR0ZWFtCgZhbW91bnQKBW1vbnRoGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUochIECgJkZhgTIgIIEwpgCl4KVMoHUQoqCib6DCMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh3EgVlbXBpZBABEgeCAgQKAggTGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodxIAGBQiAggUCs8BCswBCsEB0gu9ARIGUgQKAggUGib6DCMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh3EgVtb250aCIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHcqbxJtCmvSAmgKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh3EiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh3EgNKQU4SJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHcSA0ZFQhIAGBUiAggVCmUKYwpZygtWCgNzdW0SKwon+gwkChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodxIGYW1vdW50EAEaBlIECgIIFSIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHcSABgWIgIIFgoTChEKB5IJBAoCCBYSABgXIgIIFwoIEgYIGBICCBcQARoREg8KDQoFZmluYWwQAxgJIBIiBBABGBc=
CoYBCoMBCnnKB3YKTwom+gwjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeRIFZW1waWQKJfoMIgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHkSBHRlYW0SB4ICBAoCCBMaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh5EgAYGSICCBkKWwpZCk/SC0wSBlIECgIIGRom+gwjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeRIFbW9udGgiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh5EgAYGiICCBoKZQpjClnKC1YKA3N1bRIrCif6DCQKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh5EgZhbW91bnQQARoGUgQKAggaIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeRIAGBsiAggbCoYBCoMBCnmaCXYSJvoMIwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHkSBWVtcGlkEiX6DCIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh5EgR0ZWFtGAEiB4ICBAoCCBsqGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh5EgAYHCICCBwKEwoRCgeSCQQKAggcEgAYHSICCB0KCBIGCB4SAggdEAEaERIPCg0KBWZpbmFsEAMYCSASIgQQARgX
EAEaERIPCg0KBWZpbmFsEAMYCSASIgQQARgX
