## TEST CASE

df = session.create_dataframe([(1, 1),(1, 2),(2, 1),(2, 2),(3, 1),(3, 2)], schema=["a", "b"])

df.group_by("a").median("b").collect()

df.group_by("a").function("avg")("b").collect()

df.group_by("a").count()

import pandas as pd

from snowflake.snowpark.types import StructType, StructField, StringType, FloatType

def convert(pandas_df):
    return pandas_df.assign(TEMP_F = lambda x: x.TEMP_C * 9 / 5 + 32)

df = session.createDataFrame([('SF', 21.0), ('SF', 17.5), ('SF', 24.0), ('NY', 30.9), ('NY', 33.6)],
        schema=['location', 'temp_c'])

df.group_by("location").apply_in_pandas(convert,
    output_schema=StructType([StructField("location", StringType()),
                              StructField("temp_c", FloatType()),
                              StructField("temp_f", FloatType())])).order_by("temp_c").collect()


df = session.create_dataframe([(1, 'A', 10000, 'JAN'), (1, 'B', 400, 'JAN'), (1, 'B', 5000, 'FEB')], schema=['empid', 'team', 'amount', 'month'])

# Does not work because __getitem__ is missing.
# df.group_by("empid").pivot("month", ['JAN', 'FEB']).sum("amount").sort(df["empid"]).show()

df.group_by("empid").pivot("month", ['JAN', 'FEB']).sum("amount").show()

df.group_by(["empid", "team"]).pivot("month").sum("amount").sort("empid", "team").show()

## EXPECTED UNPARSER OUTPUT

df = session.create_dataframe([(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2)], schema=["a", "b"])

df.group_by("a").median("b").collect()

df.group_by("a").avg("b").collect()

res8 = df.group_by("a").count()

df = session.create_dataframe([("SF", 21.0), ("SF", 17.5), ("SF", 24.0), ("NY", 30.9), ("NY", 33.6)], schema=["location", "temp_c"])

res10 = udtf(_ApplyInPandas, output_schema=StructType([StructField("location", StringType(), nullable=True), StructField("temp_c", FloatType(), nullable=True), StructField("temp_f", FloatType(), nullable=True)], structured=False), input_types=[StringType(16777216)]DoubleType()])

df.group_by("location").apply_in_pandas(convert, StructType([StructField("location", StringType(), nullable=True), StructField("temp_c", FloatType(), nullable=True), StructField("temp_f", FloatType(), nullable=True)], structured=False), input_types=[StringType(16777216), DoubleType()], input_names=["LOCATION", "TEMP_C"]).sort("temp_c").collect()

df = session.create_dataframe([(1, "A", 10000, "JAN"), (1, "B", 400, "JAN"), (1, "B", 5000, "FEB")], schema=["empid", "team", "amount", "month"])

df.group_by("empid").pivot("month", values=["JAN", "FEB"]).sum("amount").show()

df.group_by(["empid", "team"]).pivot("month").sum("amount").sort("empid", "team").show()

## EXPECTED ENCODED AST

Cp4GCpsGCowGggaIBgrZBQrWBQp34gx0CiAIZRBaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oWhInygIkCiAIZRBaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oWhABEifKAiQKIAhlEFoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShaEAEKd+IMdAogCGUQWhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKFoSJ8oCJAogCGUQWhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKFoQARInygIkCiAIZRBaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oWhACCnfiDHQKIAhlEFoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShaEifKAiQKIAhlEFoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShaEAISJ8oCJAogCGUQWhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKFoQAQp34gx0CiAIZRBaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oWhInygIkCiAIZRBaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oWhACEifKAiQKIAhlEFoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShaEAIKd+IMdAogCGUQWhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKFoSJ8oCJAogCGUQWhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKFoQAxInygIkCiAIZRBaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oWhABCnfiDHQKIAhlEFoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShaEifKAiQKIAhlEFoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShaEAMSJ8oCJAogCGUQWhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKFoQAhIICgYKAWEKAWIaIAhlEFoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShaEgQKAmRmGAEiAggBCmgKZgpc0gdZCiwKKMIMJQogCBgQXBoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKFwSAWEQARIHggIECgIIARogCBgQXBoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKFwSABgCIgIIAgpvCm0KY7oLYAoGbWVkaWFuEiwKKMIMJQogCCQQXBoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKFwSAWIQARoGUgQKAggCIiAIJBBcGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgoXBIAGAMiAggDCjkKNwot2gYqCAEQARoCCAMyIAguEFwaFlNSQ19QT1NJVElPTl9URVNUX01PREUgCChcEgAYBCICCAQKCBIGCAUSAggEEAEaERIPCg0KBWZpbmFsEAMYCyAJIgQQARgV
CmgKZgpc0gdZCiwKKMIMJQogCBgQXhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKF4SAWEQARIHggIECgIIARogCBgQXhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKF4SABgGIgIIBgpsCmoKYLoLXQoDYXZnEiwKKMIMJQogCC0QXhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKF4SAWIQARoGUgQKAggGIiAILRBeGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgoXhIAGAciAggHCjkKNwot2gYqCAEQARoCCAcyIAg3EF4aFlNSQ19QT1NJVElPTl9URVNUX01PREUgCCheEgAYCCICCAgKCBIGCAkSAggIEAEaERIPCg0KBWZpbmFsEAMYCyAJIgQQARgV
CmgKZgpc0gdZCiwKKMIMJQogCBgQYBoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKGASAWEQARIHggIECgIIARogCBgQYBoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKGASABgKIgIICgpACj4KNLoLMQoFY291bnQaBlIECgIICiIgCCAQYBoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKGASABgLIgIICwrjBQrgBQrRBYIGzQUKkgUKjwUKgAHiDH0KIAguEGoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShpEinCDCYKIAguEGoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShpEgJTRhIuigIrCiAILhBqGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oaREAAAAAAAA1QAqAAeIMfQogCC4QahoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKGkSKcIMJgogCC4QahoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKGkSAlNGEi6KAisKIAguEGoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShpEQAAAAAAgDFACoAB4gx9CiAILhBqGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oaRIpwgwmCiAILhBqGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oaRICU0YSLooCKwogCC4QahoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKGkRAAAAAAAAOEAKgAHiDH0KIAguEGoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShpEinCDCYKIAguEGoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShpEgJOWRIuigIrCiAILhBqGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oaRFmZmZmZuY+QAqAAeIMfQogCC4QahoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKGkSKcIMJgogCC4QahoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKGkSAk5ZEi6KAisKIAguEGoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShpEc3MzMzMzEBAEhQKEgoIbG9jYXRpb24KBnRlbXBfYxogCC4QahoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKGkSBAoCZGYYDCICCAwKbwptCmPSB2AKMwovwgwsCiAIHxBsGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgobBIIbG9jYXRpb24QARIHggIECgIIDBogCB8QbBoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKGwSABgNIgIIDQqfAQqcAQqRAfoMjQEaEBIOX0FwcGx5SW5QYW5kYXM6EAoKmgEHCgUIgICACAoCQAFaQhJACj6qATsKFQoKCghsb2NhdGlvbhIFmgECCgAYAQoQCggKBnRlbXBfYxICSAEYAQoQCggKBnRlbXBfZhICSAEYAWgEigEgCEsQbxoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKGwSABgOIgIIDgq2AwqzAwqoA7ILpAMKCwgBEgdjb252ZXJ0EgZSBAoCCA0alAEKC2lucHV0X3R5cGVzEoQB2gKAAQogCEsQbxoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKGwSMcIKLgoKmgEHCgUIgICACBIgCEsQbxoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKGwSKcIKJgoCQAESIAhLEG8aFlNSQ19QT1NJVElPTl9URVNUX01PREUgCChsGpYBCgtpbnB1dF9uYW1lcxKGAdoCggEKIAhLEG8aFlNSQ19QT1NJVElPTl9URVNUX01PREUgCChsEi/CDCwKIAhLEG8aFlNSQ19QT1NJVElPTl9URVNUX01PREUgCChsEghMT0NBVElPThItwgwqCiAISxBvGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgobBIGVEVNUF9DIjsKFQoKCghsb2NhdGlvbhIFmgECCgAYAQoQCggKBnRlbXBfYxICSAEYAQoQCggKBnRlbXBfZhICSAEYASogCEsQbxoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKGwSABgPIgIIDwprCmkKX6IJXBItwgwqCiAIXhBvGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIEwobxIGdGVtcF9jGAEiB4ICBAoCCA8qIAheEG8aFlNSQ19QT1NJVElPTl9URVNUX01PREUgTChvEgAYECICCBAKOQo3Ci3aBioIARABGgIIEDIgCGgQbxoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSBfKG8SABgRIgIIEQoIEgYIEhICCBEQARoREg8KDQoFZmluYWwQAxgLIAkiBBABGBU=
CuQFCuEFCtIFggbOBQqIBQqFBQrUAeIM0AEKIQiZARByGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0ochIoygIlCiEImQEQchoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKHIQARIpwgwmCiEImQEQchoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKHISAUESKcoCJgohCJkBEHIaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShyEJBOEivCDCgKIQiZARByGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0ochIDSkFOCtQB4gzQAQohCJkBEHIaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShyEijKAiUKIQiZARByGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0ochABEinCDCYKIQiZARByGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0ochIBQhIpygImCiEImQEQchoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKHIQkAMSK8IMKAohCJkBEHIaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShyEgNKQU4K1AHiDNABCiEImQEQchoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKHISKMoCJQohCJkBEHIaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShyEAESKcIMJgohCJkBEHIaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShyEgFCEinKAiYKIQiZARByGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0ochCIJxIrwgwoCiEImQEQchoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKHISA0ZFQhIeChwKBWVtcGlkCgR0ZWFtCgZhbW91bnQKBW1vbnRoGiEImQEQchoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKHISBAoCZGYYEyICCBMKbApqCmDSB10KMAoswgwpCiAIHBB3GhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgodxIFZW1waWQQARIHggIECgIIExogCBwQdxoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKHcSABgUIgIIFAruAQrrAQrgAcIL3AESBlIECgIIFBoswgwpCiAIOxB3GhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgodxIFbW9udGgiIAg7EHcaFlNSQ19QT1NJVElPTl9URVNUX01PREUgCCh3KoEBEn8KfdoCegogCDsQdxoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKHcSKsIMJwogCDsQdxoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKHcSA0pBThIqwgwnCiAIOxB3GhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgodxIDRkVCEgAYFSICCBUKcQpvCmW6C2IKA3N1bRIxCi3CDCoKIAhJEHcaFlNSQ19QT1NJVElPTl9URVNUX01PREUgCCh3EgZhbW91bnQQARoGUgQKAggVIiAISRB3GhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgodxIAGBYiAggWChMKEQoHmgkECgIIFhIAGBciAggXCggSBggYEgIIFxABGhESDwoNCgVmaW5hbBADGAsgCSIEEAEYFQ==
CpoBCpcBCowB0geIAQpbCizCDCkKIAgmEHkaFlNSQ19QT1NJVElPTl9URVNUX01PREUgCCh5EgVlbXBpZAorwgwoCiAIJhB5GhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgoeRIEdGVhbRIHggIECgIIExogCCYQeRoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKHkSABgZIgIIGQpnCmUKW8ILWBIGUgQKAggZGizCDCkKIAg1EHkaFlNSQ19QT1NJVElPTl9URVNUX01PREUgCCh5EgVtb250aCIgCDUQeRoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKHkSABgaIgIIGgpxCm8KZboLYgoDc3VtEjEKLcIMKgogCEMQeRoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKHkSBmFtb3VudBABGgZSBAoCCBoiIAhDEHkaFlNSQ19QT1NJVElPTl9URVNUX01PREUgCCh5EgAYGyICCBsKmgEKlwEKjAGiCYgBEizCDCkKIAhZEHkaFlNSQ19QT1NJVElPTl9URVNUX01PREUgCCh5EgVlbXBpZBIrwgwoCiAIWRB5GhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgoeRIEdGVhbRgBIgeCAgQKAggbKiAIWRB5GhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgoeRIAGBwiAggcChMKEQoHmgkECgIIHBIAGB0iAggdCggSBggeEgIIHRABGhESDwoNCgVmaW5hbBADGAsgCSIEEAEYFQ==
EAEaERIPCg0KBWZpbmFsEAMYCyAJIgQQARgV
