## TEST CASE

df = session.create_dataframe([(1, 1),(1, 2),(2, 1),(2, 2),(3, 1),(3, 2)], schema=["a", "b"])

df.group_by("a").median("b").collect()

df.group_by("a").function("avg")("b").collect()

df.group_by("a").count()

import pandas as pd

from snowflake.snowpark.types import StructType, StructField, StringType, FloatType

def convert(pandas_df):
    return pandas_df.assign(TEMP_F = lambda x: x.TEMP_C * 9 / 5 + 32)

df = session.createDataFrame([('SF', 21.0), ('SF', 17.5), ('SF', 24.0), ('NY', 30.9), ('NY', 33.6)],
        schema=['location', 'temp_c'])

df.group_by("location").apply_in_pandas(convert,
    output_schema=StructType([StructField("location", StringType()),
                              StructField("temp_c", FloatType()),
                              StructField("temp_f", FloatType())])).order_by("temp_c").collect()


df = session.create_dataframe([(1, 'A', 10000, 'JAN'), (1, 'B', 400, 'JAN'), (1, 'B', 5000, 'FEB')], schema=['empid', 'team', 'amount', 'month'])

# Does not work because __getitem__ is missing.
# df.group_by("empid").pivot("month", ['JAN', 'FEB']).sum("amount").sort(df["empid"]).show()

df.group_by("empid").pivot("month", ['JAN', 'FEB']).sum("amount").show()

df.group_by(["empid", "team"]).pivot("month").sum("amount").sort("empid", "team").show()

## EXPECTED UNPARSER OUTPUT

df = session.create_dataframe([(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2)], schema=["a", "b"])

df.group_by("a").median("b").collect()

df.group_by("a").avg("b").collect()

res8 = df.group_by("a").count()

df = session.create_dataframe([("SF", 21.0), ("SF", 17.5), ("SF", 24.0), ("NY", 30.9), ("NY", 33.6)], schema=["location", "temp_c"])

res10 = udtf(_ApplyInPandas, output_schema=StructType([StructField("location", StringType(), nullable=True), StructField("temp_c", FloatType(), nullable=True), StructField("temp_f", FloatType(), nullable=True)], structured=False), input_types=[StringType(16777216), DoubleType()])

df.group_by("location").apply_in_pandas(convert, StructType([StructField("location", StringType(), nullable=True), StructField("temp_c", FloatType(), nullable=True), StructField("temp_f", FloatType(), nullable=True)], structured=False), input_types=[StringType(16777216), DoubleType()], input_names=["LOCATION", "TEMP_C"]).sort("temp_c").collect()

df = session.create_dataframe([(1, "A", 10000, "JAN"), (1, "B", 400, "JAN"), (1, "B", 5000, "FEB")], schema=["empid", "team", "amount", "month"])

df.group_by("empid").pivot("month", values=["JAN", "FEB"]).sum("amount").show()

df.group_by(["empid", "team"]).pivot("month").sum("amount").sort("empid", "team").show()

## EXPECTED ENCODED AST

CqwFCqkFCpoF+gWWBQrtBArqBAplmg1iChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoRhIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoRhABEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEAEKZZoNYgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEYSIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEYQARIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoRhACCmWaDWIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEAISIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEYQAQplmg1iChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoRhIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoRhACEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEAIKZZoNYgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEYSIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEYQAxIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoRhABCmWaDWIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEAMSIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEYQAhIICgYKAWEKAWIaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEgQKAmRmGAEiAggBClwKWgpQygdNCiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEgSAWEQARIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEgSABgCIgIIAgpjCmEKV8oLVAoGbWVkaWFuEiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEgSAWIQARoGUgQKAggCIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoSBIAGAMiAggDCjMKMQon0gYkCAEQARoCCAMyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShIEgAYBCICCAQKCBIGCAUSAggEEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
ClwKWgpQygdNCiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEoSAWEQARIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEoSABgGIgIIBgpgCl4KVMoLUQoDYXZnEiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEoSAWIQARoGUgQKAggGIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoShIAGAciAggHCjMKMQon0gYkCAEQARoCCAcyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShKEgAYCCICCAgKCBIGCAkSAggIEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
ClwKWgpQygdNCiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEwSAWEQARIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEwSABgKIgIICgo6CjgKLsoLKwoFY291bnQaBlIECgIICiIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEwSABgLIgIICwr+BAr7BArsBPoF6AQKswQKsAQKbpoNawoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFUSI/oMIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFUSAlNGEiiCAiUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShVEQAAAAAAADVACm6aDWsKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShVEiP6DCAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShVEgJTRhIoggIlChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVREAAAAAAIAxQApumg1rChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVRIj+gwgChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVRICU0YSKIICJQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFURAAAAAAAAOEAKbpoNawoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFUSI/oMIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFUSAk5ZEiiCAiUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShVEWZmZmZm5j5ACm6aDWsKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShVEiP6DCAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShVEgJOWRIoggIlChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVRHNzMzMzMxAQBIUChIKCGxvY2F0aW9uCgZ0ZW1wX2MaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShVEgQKAmRmGAwiAggMCmMKYQpXygdUCi0KKfoMJgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFgSCGxvY2F0aW9uEAESB4ICBAoCCAwaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShYEgAYDSICCA0KmQEKlgEKiwGyDYcBGhASDl9BcHBseUluUGFuZGFzOhAKCpoBBwoFCICAgAgKAkABWkISQAo+qgE7ChUKCgoIbG9jYXRpb24SBZoBAgoAGAEKEAoICgZ0ZW1wX2MSAkgBGAEKEAoICgZ0ZW1wX2YSAkgBGAFoBIoBGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShYEgAYDiICCA4KiAMKhQMK+gLCC/YCCgsIARIHY29udmVydBIGUgQKAggNGoABCgtpbnB1dF90eXBlcxJx0gJuChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWBIrugooCgqaAQcKBQiAgIAIEhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWBIjugogCgJAARIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFgaggEKC2lucHV0X25hbWVzEnPSAnAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShYEin6DCYKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShYEghMT0NBVElPThIn+gwkChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWBIGVEVNUF9DIjsKFQoKCghsb2NhdGlvbhIFmgECCgAYAQoQCggKBnRlbXBfYxICSAEYAQoQCggKBnRlbXBfZhICSAEYASoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFgSABgPIgIIDwpfCl0KU5oJUBIn+gwkChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWBIGdGVtcF9jGAEiB4ICBAoCCA8qGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShYEgAYECICCBAKMwoxCifSBiQIARABGgIIEDIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFgSABgRIgIIEQoIEgYIEhICCBEQARoREg8KDQoFZmluYWwQAxgJIBQiBBABGBc=
CvQECvEECuIE+gXeBAqfBAqcBAqxAZoNrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEAESIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SAUESIsICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4QkE4SJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SA0pBTgqxAZoNrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEAESIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SAUISIsICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4QkAMSJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SA0pBTgqxAZoNrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEAESIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SAUISIsICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4QiCcSJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SA0ZFQhIeChwKBWVtcGlkCgR0ZWFtCgZhbW91bnQKBW1vbnRoGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXhIECgJkZhgTIgIIEwpgCl4KVMoHUQoqCib6DCMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShjEgVlbXBpZBABEgeCAgQKAggTGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYxIAGBQiAggUCs8BCswBCsEB0gu9ARIGUgQKAggUGib6DCMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShjEgVtb250aCIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGMqbxJtCmvSAmgKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShjEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShjEgNKQU4SJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGMSA0ZFQhIAGBUiAggVCmUKYwpZygtWCgNzdW0SKwon+gwkChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYxIGYW1vdW50EAEaBlIECgIIFSIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGMSABgWIgIIFgoTChEKB5IJBAoCCBYSABgXIgIIFwoIEgYIGBICCBcQARoREg8KDQoFZmluYWwQAxgJIBQiBBABGBc=
CoYBCoMBCnnKB3YKTwom+gwjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZRIFZW1waWQKJfoMIgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGUSBHRlYW0SB4ICBAoCCBMaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShlEgAYGSICCBkKWwpZCk/SC0wSBlIECgIIGRom+gwjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZRIFbW9udGgiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShlEgAYGiICCBoKZQpjClnKC1YKA3N1bRIrCif6DCQKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShlEgZhbW91bnQQARoGUgQKAggaIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZRIAGBsiAggbCoYBCoMBCnmaCXYSJvoMIwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGUSBWVtcGlkEiX6DCIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShlEgR0ZWFtGAEiB4ICBAoCCBsqGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShlEgAYHCICCBwKEwoRCgeSCQQKAggcEgAYHSICCB0KCBIGCB4SAggdEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
EAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
