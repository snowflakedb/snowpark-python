## TEST CASE

df = session.create_dataframe([(1, 1),(1, 2),(2, 1),(2, 2),(3, 1),(3, 2)], schema=["a", "b"])

df.group_by("a").median("b").collect()

df.group_by("a").function("avg")("b").collect()

df.group_by("a").count()

import pandas as pd

from snowflake.snowpark.types import StructType, StructField, StringType, FloatType

def convert(pandas_df):
    return pandas_df.assign(TEMP_F = lambda x: x.TEMP_C * 9 / 5 + 32)

df = session.createDataFrame([('SF', 21.0), ('SF', 17.5), ('SF', 24.0), ('NY', 30.9), ('NY', 33.6)],
        schema=['location', 'temp_c'])

df.group_by("location").apply_in_pandas(convert,
    output_schema=StructType([StructField("location", StringType()),
                              StructField("temp_c", FloatType()),
                              StructField("temp_f", FloatType())])).order_by("temp_c").collect()


df = session.create_dataframe([(1, 'A', 10000, 'JAN'), (1, 'B', 400, 'JAN'), (1, 'B', 5000, 'FEB')], schema=['empid', 'team', 'amount', 'month'])

# Does not work because __getitem__ is missing.
# df.group_by("empid").pivot("month", ['JAN', 'FEB']).sum("amount").sort(df["empid"]).show()

df.group_by("empid").pivot("month", ['JAN', 'FEB']).sum("amount").show()

df.group_by(["empid", "team"]).pivot("month").sum("amount").sort("empid", "team").show()

## EXPECTED ENCODED AST

CqwFCqkFCpoFygWWBQrtBArqBAplkgxiChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVBIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVBABEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShUEAEKZZIMYgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFQSIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFQQARIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVBACCmWSDGIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShUEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShUEAISIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFQQAQplkgxiChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVBIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVBACEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShUEAIKZZIMYgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFQSIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFQQAxIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVBABCmWSDGIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShUEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShUEAMSIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFQQAhIICgYKAWEKAWIaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShUEgQKAmRmGB0iAggdClwKWgpQmgdNCiYKIuoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFYSAWEQARIHigIECgIIHRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFYSABgeIgIIHgpjCmEKV/IKVAoGbWVkaWFuEiYKIuoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFYSAWIQARoGWgQKAggeIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVhIAGB8iAggfCjMKMQonogYkCAEQARoCCB8yGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShWEgAYICICCCAKCBIGCCESAgggEAEaERIPCg0KBWZpbmFsEAMYCCATIgQQARgV
ClwKWgpQmgdNCiYKIuoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFgSAWEQARIHigIECgIIHRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFgSABgiIgIIIgpgCl4KVPIKUQoDYXZnEiYKIuoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFgSAWIQARoGWgQKAggiIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWBIAGCMiAggjCjMKMQonogYkCAEQARoCCCMyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShYEgAYJCICCCQKCBIGCCUSAggkEAEaERIPCg0KBWZpbmFsEAMYCCATIgQQARgV
ClwKWgpQmgdNCiYKIuoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSAWEQARIHigIECgIIHRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSABgmIgIIJgo6CjgKLvIKKwoFY291bnQaBloECgIIJiIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSABgnIgIIJwr+BAr7BArsBMoF6AQKswQKsAQKbpIMawoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGMSI+oLIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGMSAlNGEijiASUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShjEQAAAAAAADVACm6SDGsKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShjEiPqCyAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShjEgJTRhIo4gElChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYxEAAAAAAIAxQApukgxrChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYxIj6gsgChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYxICU0YSKOIBJQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGMRAAAAAAAAOEAKbpIMawoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGMSI+oLIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGMSAk5ZEijiASUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShjEWZmZmZm5j5ACm6SDGsKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShjEiPqCyAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShjEgJOWRIo4gElChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYxHNzMzMzMxAQBIUChIKCGxvY2F0aW9uCgZ0ZW1wX2MaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShjEgQKAmRmGCgiAggoCmMKYQpXmgdUCi0KKeoLJgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGYSCGxvY2F0aW9uEAESB4oCBAoCCCgaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShmEgAYKSICCCkKhgMKgwMK+ALqCvQCCgkSB2NvbnZlcnQSBloECgIIKRqAAQoLaW5wdXRfdHlwZXMScaICbgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGYSK/oJKAoKigEHCgUIgICACBIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGYSI/oJIAoCQAESGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShmGoIBCgtpbnB1dF9uYW1lcxJzogJwChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZhIp6gsmChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZhIITE9DQVRJT04SJ+oLJAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGYSBlRFTVBfQyI7ChUKCgoIbG9jYXRpb24SBYoBAgoAGAEKEAoICgZ0ZW1wX2MSAkgBGAEKEAoICgZ0ZW1wX2YSAkgBGAEqGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShmEgAYKiICCCoKXwpdClP6CFASJ+oLJAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGYSBnRlbXBfYxgBIgeKAgQKAggqKhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZhIAGCsiAggrCjMKMQonogYkCAEQARoCCCsyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShmEgAYLCICCCwKCBIGCC0SAggsEAEaERIPCg0KBWZpbmFsEAMYCCATIgQQARgV
CvQECvEECuIEygXeBAqfBAqcBAqxAZIMrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEAESIuoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSAUESIpICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwQkE4SJOoLIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSA0pBTgqxAZIMrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEAESIuoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSAUISIpICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwQkAMSJOoLIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSA0pBTgqxAZIMrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEAESIuoLHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSAUISIpICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwQiCcSJOoLIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSA0ZFQhIeChwKBWVtcGlkCgR0ZWFtCgZhbW91bnQKBW1vbnRoGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIECgJkZhguIgIILgpgCl4KVJoHUQoqCibqCyMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShxEgVlbXBpZBABEgeKAgQKAgguGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUocRIAGC8iAggvCs8BCswBCsEB+gq9ARIGWgQKAggvGibqCyMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShxEgVtb250aCIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHEqbxJtCmuiAmgKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShxEiTqCyEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShxEgNKQU4SJOoLIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHESA0ZFQhIAGDAiAggwCmUKYwpZ8gpWCgNzdW0SKwon6gskChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUocRIGYW1vdW50EAEaBloECgIIMCIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHESABgxIgIIMQoTChEKB/IIBAoCCDESABgyIgIIMgoIEgYIMxICCDIQARoREg8KDQoFZmluYWwQAxgIIBMiBBABGBU=
CoYBCoMBCnmaB3YKTwom6gsjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUocxIFZW1waWQKJeoLIgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHMSBHRlYW0SB4oCBAoCCC4aGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShzEgAYNCICCDQKWwpZCk/6CkwSBloECgIINBom6gsjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUocxIFbW9udGgiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShzEgAYNSICCDUKZQpjClnyClYKA3N1bRIrCifqCyQKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShzEgZhbW91bnQQARoGWgQKAgg1IhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUocxIAGDYiAgg2CoYBCoMBCnn6CHYSJuoLIwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHMSBWVtcGlkEiXqCyIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShzEgR0ZWFtGAEiB4oCBAoCCDYqGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShzEgAYNyICCDcKEwoRCgfyCAQKAgg3EgAYOCICCDgKCBIGCDkSAgg4EAEaERIPCg0KBWZpbmFsEAMYCCATIgQQARgV
EAEaERIPCg0KBWZpbmFsEAMYCCATIgQQARgV

## EXPECTED UNPARSER OUTPUT

df = session.create_dataframe([(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2)], schema=["a", "b"])

df.group_by("a").median("b").collect()

df.group_by("a").avg("b").collect()

res8 = df.group_by("a").count()

df = session.create_dataframe([("SF", 21.0), ("SF", 17.5), ("SF", 24.0), ("NY", 30.9), ("NY", 33.6)], schema=["location", "temp_c"])

df.group_by("location").apply_in_pandas(convert, StructType([StructField("location", StringType(), nullable=True), StructField("temp_c", FloatType(), nullable=True), StructField("temp_f", FloatType(), nullable=True)], structured=False), input_types=[StringType(16777216), DoubleType()], input_names=["LOCATION", "TEMP_C"]).sort("temp_c").collect()

df = session.create_dataframe([(1, "A", 10000, "JAN"), (1, "B", 400, "JAN"), (1, "B", 5000, "FEB")], schema=["empid", "team", "amount", "month"])

df.group_by("empid").pivot("month", values=["JAN", "FEB"]).sum("amount").show()

df.group_by(["empid", "team"]).pivot("month").sum("amount").sort("empid", "team").show()
