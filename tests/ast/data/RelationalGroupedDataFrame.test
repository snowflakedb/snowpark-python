## TEST CASE

df = session.create_dataframe([(1, 1),(1, 2),(2, 1),(2, 2),(3, 1),(3, 2)], schema=["a", "b"])

df.group_by("a").median("b").collect()

df.group_by("a").function("avg")("b").collect()

df.group_by("a").count()

import pandas as pd

from snowflake.snowpark.types import StructType, StructField, StringType, FloatType

def convert(pandas_df):
    return pandas_df.assign(TEMP_F = lambda x: x.TEMP_C * 9 / 5 + 32)

df = session.createDataFrame([('SF', 21.0), ('SF', 17.5), ('SF', 24.0), ('NY', 30.9), ('NY', 33.6)],
        schema=['location', 'temp_c'])

df.group_by("location").apply_in_pandas(convert,
    output_schema=StructType([StructField("location", StringType()),
                              StructField("temp_c", FloatType()),
                              StructField("temp_f", FloatType())])).order_by("temp_c").collect()


df = session.create_dataframe([(1, 'A', 10000, 'JAN'), (1, 'B', 400, 'JAN'), (1, 'B', 5000, 'FEB')], schema=['empid', 'team', 'amount', 'month'])

# Does not work because __getitem__ is missing.
# df.group_by("empid").pivot("month", ['JAN', 'FEB']).sum("amount").sort(df["empid"]).show()

df.group_by("empid").pivot("month", ['JAN', 'FEB']).sum("amount").show()

df.group_by(["empid", "team"]).pivot("month").sum("amount").sort("empid", "team").show()

## EXPECTED UNPARSER OUTPUT

df = session.create_dataframe([(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2)], schema=["a", "b"])

df.group_by("a").median("b").collect()

df.group_by("a").avg("b").collect()

res8 = df.group_by("a").count()

df = session.create_dataframe([("SF", 21.0), ("SF", 17.5), ("SF", 24.0), ("NY", 30.9), ("NY", 33.6)], schema=["location", "temp_c"])

res10 = udtf(_ApplyInPandas, output_schema=StructType([StructField("location", StringType(), nullable=True), StructField("temp_c", FloatType(), nullable=True), StructField("temp_f", FloatType(), nullable=True)], structured=False), input_types=[StringType(16777216), DoubleType()])

res12 = session.sql("ls '@\"OPLATON_SVC_TDB\".\"AST_20241017_175512254283_Z54988P2_TEST\".SNOWPARK_TEMP_STAGE_8JIQK4WL3B'").select(col("\"name\""))

df.group_by("location").apply_in_pandas(convert, StructType([StructField("location", StringType(), nullable=True), StructField("temp_c", FloatType(), nullable=True), StructField("temp_f", FloatType(), nullable=True)], structured=False), input_types=[StringType(16777216), DoubleType()], input_names=["LOCATION", "TEMP_C"]).sort("temp_c").collect()

df = session.create_dataframe([(1, "A", 10000, "JAN"), (1, "B", 400, "JAN"), (1, "B", 5000, "FEB")], schema=["empid", "team", "amount", "month"])

df.group_by("empid").pivot("month", values=["JAN", "FEB"]).sum("amount").show()

df.group_by(["empid", "team"]).pivot("month").sum("amount").sort("empid", "team").show()

## EXPECTED ENCODED AST

CqwFCqkFCpoF+gWWBQrtBArqBAplmg1iChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoGRIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoGRABEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEAEKZZoNYgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKBkSIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKBkQARIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoGRACCmWaDWIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEAISIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKBkQAQplmg1iChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoGRIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoGRACEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEAIKZZoNYgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKBkSIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKBkQAxIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoGRABCmWaDWIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEAMSIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKBkQAhIICgYKAWEKAWIaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgZEgQKAmRmGAEiAggBClwKWgpQygdNCiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKBsSAWEQARIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKBsSABgCIgIIAgpjCmEKV8oLVAoGbWVkaWFuEiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKBsSAWIQARoGUgQKAggCIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoGxIAGAMiAggDCjMKMQon0gYkCAEQARoCCAMyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgbEgAYBCICCAQKCBIGCAUSAggEEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
ClwKWgpQygdNCiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKB0SAWEQARIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKB0SABgGIgIIBgpgCl4KVMoLUQoDYXZnEiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKB0SAWIQARoGUgQKAggGIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoHRIAGAciAggHCjMKMQon0gYkCAEQARoCCAcyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgdEgAYCCICCAgKCBIGCAkSAggIEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
ClwKWgpQygdNCiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKB8SAWEQARIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKB8SABgKIgIICgo6CjgKLsoLKwoFY291bnQaBlIECgIICiIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKB8SABgLIgIICwr+BAr7BArsBPoF6AQKswQKsAQKbpoNawoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCgSI/oMIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCgSAlNGEiiCAiUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgoEQAAAAAAADVACm6aDWsKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgoEiP6DCAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgoEgJTRhIoggIlChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKBEAAAAAAIAxQApumg1rChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKBIj+gwgChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKBICU0YSKIICJQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCgRAAAAAAAAOEAKbpoNawoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCgSI/oMIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCgSAk5ZEiiCAiUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgoEWZmZmZm5j5ACm6aDWsKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgoEiP6DCAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgoEgJOWRIoggIlChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKBHNzMzMzMxAQBIUChIKCGxvY2F0aW9uCgZ0ZW1wX2MaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgoEgQKAmRmGAwiAggMCmMKYQpXygdUCi0KKfoMJgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCsSCGxvY2F0aW9uEAESB4ICBAoCCAwaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgrEgAYDSICCA0KmQEKlgEKiwGyDYcBGhASDl9BcHBseUluUGFuZGFzOhAKCpoBBwoFCICAgAgKAkABWkISQAo+qgE7ChUKCgoIbG9jYXRpb24SBZoBAgoAGAEKEAoICgZ0ZW1wX2MSAkgBGAEKEAoICgZ0ZW1wX2YSAkgBGAFoBIoBGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgrEgAYDiICCA4KjwEKjAEKgQHyC34SYGxzICdAIk9QTEFUT05fU1ZDX1REQiIuIkFTVF8yMDI0MTAxN18xNzU1MTIyNTQyODNfWjU0OTg4UDJfVEVTVCIuU05PV1BBUktfVEVNUF9TVEFHRV84SklRSzRXTDNCJxoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCsSABgPIgIIDwqPAQqMAQqBAYIJfgpVkgFSCgsaCQoHCgUKA2NvbBon+gwkChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKxIGIm5hbWUiIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKxIHggIECgIIDxoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCsgARIAGBAiAggQCogDCoUDCvoCwgv2AgoLCAESB2NvbnZlcnQSBlIECgIIDRqAAQoLaW5wdXRfdHlwZXMScdICbgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCsSK7oKKAoKmgEHCgUIgICACBIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCsSI7oKIAoCQAESGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgrGoIBCgtpbnB1dF9uYW1lcxJz0gJwChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKxIp+gwmChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKxIITE9DQVRJT04SJ/oMJAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCsSBlRFTVBfQyI7ChUKCgoIbG9jYXRpb24SBZoBAgoAGAEKEAoICgZ0ZW1wX2MSAkgBGAEKEAoICgZ0ZW1wX2YSAkgBGAEqGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgrEgAYESICCBEKXwpdClOaCVASJ/oMJAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKCsSBnRlbXBfYxgBIgeCAgQKAggRKhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoKxIAGBIiAggSCjMKMQon0gYkCAEQARoCCBIyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgrEgAYEyICCBMKCBIGCBQSAggTEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
CvQECvEECuIE+gXeBAqfBAqcBAqxAZoNrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgxEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgxEAESIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDESAUESIsICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDEQkE4SJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDESA0pBTgqxAZoNrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgxEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgxEAESIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDESAUISIsICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDEQkAMSJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDESA0pBTgqxAZoNrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgxEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSgxEAESIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDESAUISIsICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDEQiCcSJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDESA0ZFQhIeChwKBWVtcGlkCgR0ZWFtCgZhbW91bnQKBW1vbnRoGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoMRIECgJkZhgVIgIIFQpgCl4KVMoHUQoqCib6DCMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSg2EgVlbXBpZBABEgeCAgQKAggVGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoNhIAGBYiAggWCs8BCswBCsEB0gu9ARIGUgQKAggWGib6DCMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSg2EgVtb250aCIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDYqbxJtCmvSAmgKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSg2EiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSg2EgNKQU4SJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDYSA0ZFQhIAGBciAggXCmUKYwpZygtWCgNzdW0SKwon+gwkChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoNhIGYW1vdW50EAEaBlIECgIIFyIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDYSABgYIgIIGAoTChEKB5IJBAoCCBgSABgZIgIIGQoIEgYIGhICCBkQARoREg8KDQoFZmluYWwQAxgJIBQiBBABGBc=
CoYBCoMBCnnKB3YKTwom+gwjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoOBIFZW1waWQKJfoMIgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDgSBHRlYW0SB4ICBAoCCBUaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSg4EgAYGyICCBsKWwpZCk/SC0wSBlIECgIIGxom+gwjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoOBIFbW9udGgiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSg4EgAYHCICCBwKZQpjClnKC1YKA3N1bRIrCif6DCQKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSg4EgZhbW91bnQQARoGUgQKAggcIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoOBIAGB0iAggdCoYBCoMBCnmaCXYSJvoMIwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKDgSBWVtcGlkEiX6DCIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSg4EgR0ZWFtGAEiB4ICBAoCCB0qGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSg4EgAYHiICCB4KEwoRCgeSCQQKAggeEgAYHyICCB8KCBIGCCASAggfEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
EAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
