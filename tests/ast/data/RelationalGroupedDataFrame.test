## TEST CASE

df = session.create_dataframe([(1, 1),(1, 2),(2, 1),(2, 2),(3, 1),(3, 2)], schema=["a", "b"])

df.group_by("a").median("b").collect()

df.group_by("a").function("avg")("b").collect()

df.group_by("a").count()

import pandas as pd

from snowflake.snowpark.types import StructType, StructField, StringType, FloatType

def convert(pandas_df):
    return pandas_df.assign(TEMP_F = lambda x: x.TEMP_C * 9 / 5 + 32)

df = session.createDataFrame([('SF', 21.0), ('SF', 17.5), ('SF', 24.0), ('NY', 30.9), ('NY', 33.6)],
        schema=['location', 'temp_c'])

df.group_by("location").apply_in_pandas(convert,
    output_schema=StructType([StructField("location", StringType()),
                              StructField("temp_c", FloatType()),
                              StructField("temp_f", FloatType())])).order_by("temp_c").collect()


df = session.create_dataframe([(1, 'A', 10000, 'JAN'), (1, 'B', 400, 'JAN'), (1, 'B', 5000, 'FEB')], schema=['empid', 'team', 'amount', 'month'])

# Does not work because __getitem__ is missing.
# df.group_by("empid").pivot("month", ['JAN', 'FEB']).sum("amount").sort(df["empid"]).show()

df.group_by("empid").pivot("month", ['JAN', 'FEB']).sum("amount").show()

df.group_by(["empid", "team"]).pivot("month").sum("amount").sort("empid", "team").show()

## EXPECTED UNPARSER OUTPUT

df = session.create_dataframe([(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2)], schema=["a", "b"])

df.group_by("a").median("b").collect()

df.group_by("a").avg("b").collect()

res8 = df.group_by("a").count()

df = session.create_dataframe([("SF", 21.0), ("SF", 17.5), ("SF", 24.0), ("NY", 30.9), ("NY", 33.6)], schema=["location", "temp_c"])

res10 = udtf(_ApplyInPandas, output_schema=StructType([StructField("location", StringType(), nullable=True), StructField("temp_c", FloatType(), nullable=True), StructField("temp_f", FloatType(), nullable=True)], structured=False), input_types=[StringType(16777216), DoubleType()])

df.group_by("location").apply_in_pandas(convert, StructType([StructField("location", StringType(), nullable=True), StructField("temp_c", FloatType(), nullable=True), StructField("temp_f", FloatType(), nullable=True)], structured=False), input_types=[StringType(16777216), DoubleType()], input_names=["LOCATION", "TEMP_C"]).sort("temp_c").collect()

df = session.create_dataframe([(1, "A", 10000, "JAN"), (1, "B", 400, "JAN"), (1, "B", 5000, "FEB")], schema=["empid", "team", "amount", "month"])

df.group_by("empid").pivot("month", values=["JAN", "FEB"]).sum("amount").show()

df.group_by(["empid", "team"]).pivot("month").sum("amount").sort("empid", "team").show()

## EXPECTED ENCODED AST

CqwFCqkFCpoF+gWWBQrtBArqBAplmg1iChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoPxIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoPxABEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSg/EAEKZZoNYgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKD8SIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKD8QARIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoPxACCmWaDWIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSg/EiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSg/EAISIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKD8QAQplmg1iChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoPxIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoPxACEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSg/EAIKZZoNYgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKD8SIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKD8QAxIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoPxABCmWaDWIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSg/EiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSg/EAMSIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKD8QAhIICgYKAWEKAWIaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSg/EgQKAmRmGAEiAggBClwKWgpQygdNCiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEESAWEQARIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEESABgCIgIIAgpjCmEKV8oLVAoGbWVkaWFuEiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEESAWIQARoGUgQKAggCIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoQRIAGAMiAggDCjMKMQon0gYkCAEQARoCCAMyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShBEgAYBCICCAQKCBIGCAUSAggEEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
ClwKWgpQygdNCiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEMSAWEQARIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEMSABgGIgIIBgpgCl4KVMoLUQoDYXZnEiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEMSAWIQARoGUgQKAggGIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoQxIAGAciAggHCjMKMQon0gYkCAEQARoCCAcyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShDEgAYCCICCAgKCBIGCAkSAggIEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
ClwKWgpQygdNCiYKIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEUSAWEQARIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEUSABgKIgIICgo6CjgKLsoLKwoFY291bnQaBlIECgIICiIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEUSABgLIgIICwr+BAr7BArsBPoF6AQKswQKsAQKbpoNawoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKE4SI/oMIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKE4SAlNGEiiCAiUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShOEQAAAAAAADVACm6aDWsKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShOEiP6DCAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShOEgJTRhIoggIlChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoThEAAAAAAIAxQApumg1rChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoThIj+gwgChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoThICU0YSKIICJQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKE4RAAAAAAAAOEAKbpoNawoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKE4SI/oMIAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKE4SAk5ZEiiCAiUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShOEWZmZmZm5j5ACm6aDWsKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShOEiP6DCAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShOEgJOWRIoggIlChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoThHNzMzMzMxAQBIUChIKCGxvY2F0aW9uCgZ0ZW1wX2MaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShOEgQKAmRmGAwiAggMCmMKYQpXygdUCi0KKfoMJgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFESCGxvY2F0aW9uEAESB4ICBAoCCAwaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShREgAYDSICCA0KmQEKlgEKiwGyDYcBGhASDl9BcHBseUluUGFuZGFzOhAKCpoBBwoFCICAgAgKAkABWkISQAo+qgE7ChUKCgoIbG9jYXRpb24SBZoBAgoAGAEKEAoICgZ0ZW1wX2MSAkgBGAEKEAoICgZ0ZW1wX2YSAkgBGAFoBIoBGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShREgAYDiICCA4KiAMKhQMK+gLCC/YCCgsIARIHY29udmVydBIGUgQKAggNGoABCgtpbnB1dF90eXBlcxJx0gJuChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoURIrugooCgqaAQcKBQiAgIAIEhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoURIjugogCgJAARIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFEaggEKC2lucHV0X25hbWVzEnPSAnAKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShREin6DCYKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShREghMT0NBVElPThIn+gwkChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoURIGVEVNUF9DIjsKFQoKCghsb2NhdGlvbhIFmgECCgAYAQoQCggKBnRlbXBfYxICSAEYAQoQCggKBnRlbXBfZhICSAEYASoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFESABgPIgIIDwpfCl0KU5oJUBIn+gwkChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoURIGdGVtcF9jGAEiB4ICBAoCCA8qGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShREgAYECICCBAKMwoxCifSBiQIARABGgIIEDIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFESABgRIgIIEQoIEgYIEhICCBEQARoREg8KDQoFZmluYWwQAxgJIBQiBBABGBc=
CvQECvEECuIE+gXeBAqfBAqcBAqxAZoNrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShXEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShXEAESIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFcSAUESIsICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFcQkE4SJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFcSA0pBTgqxAZoNrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShXEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShXEAESIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFcSAUISIsICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFcQkAMSJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFcSA0pBTgqxAZoNrQEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShXEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShXEAESIvoMHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFcSAUISIsICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFcQiCcSJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFcSA0ZFQhIeChwKBWVtcGlkCgR0ZWFtCgZhbW91bnQKBW1vbnRoGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVxIECgJkZhgTIgIIEwpgCl4KVMoHUQoqCib6DCMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShcEgVlbXBpZBABEgeCAgQKAggTGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXBIAGBQiAggUCs8BCswBCsEB0gu9ARIGUgQKAggUGib6DCMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShcEgVtb250aCIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwqbxJtCmvSAmgKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShcEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShcEgNKQU4SJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwSA0ZFQhIAGBUiAggVCmUKYwpZygtWCgNzdW0SKwon+gwkChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXBIGYW1vdW50EAEaBlIECgIIFSIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwSABgWIgIIFgoTChEKB5IJBAoCCBYSABgXIgIIFwoIEgYIGBICCBcQARoREg8KDQoFZmluYWwQAxgJIBQiBBABGBc=
CoYBCoMBCnnKB3YKTwom+gwjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXhIFZW1waWQKJfoMIgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SBHRlYW0SB4ICBAoCCBMaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEgAYGSICCBkKWwpZCk/SC0wSBlIECgIIGRom+gwjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXhIFbW9udGgiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEgAYGiICCBoKZQpjClnKC1YKA3N1bRIrCif6DCQKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEgZhbW91bnQQARoGUgQKAggaIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXhIAGBsiAggbCoYBCoMBCnmaCXYSJvoMIwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SBWVtcGlkEiX6DCIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEgR0ZWFtGAEiB4ICBAoCCBsqGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEgAYHCICCBwKEwoRCgeSCQQKAggcEgAYHSICCB0KCBIGCB4SAggdEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
EAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
