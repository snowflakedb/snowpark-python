## TEST CASE

from snowflake.snowpark.functions import sproc

def my_sproc(session: snowflake.snowpark.Session, foo: int, bar: str, baz: dict, qux: bool) -> str:
    return "SUCCESS!"

my_sproc_sp = session.sproc.register(my_sproc, name="my_sproc", replace=True, comment="The parameters are useless.")

df = session.call("my_sproc", 1, "two", {"param1": 10, "param2": "twenty"}, True)

df2 = session.call("my_sproc", 2, "one", dict(), False)

## EXPECTED UNPARSER OUTPUT

my_sproc_sp = sproc("my_sproc", return_type=StringType(), input_types=[LongType(), StringType(), MapType(StringType(), StringType(), structured=False), BooleanType()], name="my_sproc", replace=True, comment="The parameters are useless.", _registered_object_name="\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"MY_SPROC\"")

df = session.call("my_sproc", 1, "two", {"param1": 10, "param2": "twenty"}, True)

df

df2 = session.call("my_sproc", 2, "one", {}, False)

df2

## EXPECTED ENCODED AST

interned_value_table {
  string_values {
    key: -1
  }
  string_values {
    key: 2
    value: "SRC_POSITION_TEST_MODE"
  }
}
body {
  assign {
    expr {
      stored_procedure {
        comment {
          value: "The parameters are useless."
        }
        execute_as: "owner"
        func {
          name: "my_sproc"
          object_name {
            name {
              name_flat {
                name: "\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"MY_SPROC\""
              }
            }
          }
        }
        input_types {
          long_type: true
        }
        input_types {
          string_type {
            length {
            }
          }
        }
        input_types {
          map_type {
            key_ty {
              string_type {
                length {
                }
              }
            }
            value_ty {
              string_type {
                length {
                }
              }
            }
          }
        }
        input_types {
          boolean_type: true
        }
        name {
          name {
            name_flat {
              name: "my_sproc"
            }
          }
        }
        parallel: 4
        replace: true
        return_type {
          string_type {
            length {
            }
          }
        }
        source_code_display: true
        src {
          end_column: 124
          end_line: 30
          file: 2
          start_column: 22
          start_line: 30
        }
      }
    }
    symbol {
      value: "my_sproc_sp"
    }
    uid: 1
    var_id {
      bitfield1: 1
    }
  }
}
body {
  assign {
    expr {
      apply_expr {
        fn {
          stored_procedure {
            log_on_exception {
            }
            name {
              name {
                name_flat {
                  name: "my_sproc"
                }
              }
            }
          }
        }
        pos_args {
          int64_val {
            src {
              end_column: 89
              end_line: 32
              file: 2
              start_column: 13
              start_line: 32
            }
            v: 1
          }
        }
        pos_args {
          string_val {
            src {
              end_column: 89
              end_line: 32
              file: 2
              start_column: 13
              start_line: 32
            }
            v: "two"
          }
        }
        pos_args {
          seq_map_val {
            kvs {
              vs {
                string_val {
                  src {
                    end_column: 89
                    end_line: 32
                    file: 2
                    start_column: 13
                    start_line: 32
                  }
                  v: "param1"
                }
              }
              vs {
                int64_val {
                  src {
                    end_column: 89
                    end_line: 32
                    file: 2
                    start_column: 13
                    start_line: 32
                  }
                  v: 10
                }
              }
            }
            kvs {
              vs {
                string_val {
                  src {
                    end_column: 89
                    end_line: 32
                    file: 2
                    start_column: 13
                    start_line: 32
                  }
                  v: "param2"
                }
              }
              vs {
                string_val {
                  src {
                    end_column: 89
                    end_line: 32
                    file: 2
                    start_column: 13
                    start_line: 32
                  }
                  v: "twenty"
                }
              }
            }
            src {
              end_column: 89
              end_line: 32
              file: 2
              start_column: 13
              start_line: 32
            }
          }
        }
        pos_args {
          bool_val {
            src {
              end_column: 89
              end_line: 32
              file: 2
              start_column: 13
              start_line: 32
            }
            v: true
          }
        }
        src {
          end_column: 89
          end_line: 32
          file: 2
          start_column: 13
          start_line: 32
        }
      }
    }
    symbol {
      value: "df"
    }
    uid: 2
    var_id {
      bitfield1: 2
    }
  }
}
body {
  eval {
    uid: 3
    var_id {
      bitfield1: 2
    }
  }
}
body {
  assign {
    expr {
      apply_expr {
        fn {
          stored_procedure {
            log_on_exception {
            }
            name {
              name {
                name_flat {
                  name: "my_sproc"
                }
              }
            }
          }
        }
        pos_args {
          int64_val {
            src {
              end_column: 63
              end_line: 34
              file: 2
              start_column: 14
              start_line: 34
            }
            v: 2
          }
        }
        pos_args {
          string_val {
            src {
              end_column: 63
              end_line: 34
              file: 2
              start_column: 14
              start_line: 34
            }
            v: "one"
          }
        }
        pos_args {
          seq_map_val {
            src {
              end_column: 63
              end_line: 34
              file: 2
              start_column: 14
              start_line: 34
            }
          }
        }
        pos_args {
          bool_val {
            src {
              end_column: 63
              end_line: 34
              file: 2
              start_column: 14
              start_line: 34
            }
          }
        }
        src {
          end_column: 63
          end_line: 34
          file: 2
          start_column: 14
          start_line: 34
        }
      }
    }
    symbol {
      value: "df2"
    }
    uid: 4
    var_id {
      bitfield1: 4
    }
  }
}
body {
  eval {
    uid: 5
    var_id {
      bitfield1: 4
    }
  }
}
client_ast_version: 1
client_language {
  python_language {
    version {
      label: "final"
      major: 3
      minor: 9
      patch: 1
    }
  }
}
client_version {
  major: 1
  minor: 29
}
