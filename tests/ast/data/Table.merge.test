## TEST CASE

schema = StructType([StructField("num", IntegerType()), StructField("str", StringType())])

source = session.create_dataframe([(1, "one"), (2, "two"), (3, "three")], schema=schema)

df1 = session.create_dataframe([[1, "one"], [2, "two"], [3, "three"], ], schema=['num', 'str'], _emit_ast=False)

df1.write.save_as_table("test_table_1", _emit_ast=False)
target = Table("test_table_1", session)

target.merge(source, (target["num"] == source["num"]) & (target["str"] == "too_old"), [when_matched().update({"str": "value"})])

df1.write.save_as_table("test_table_1b", _emit_ast=False)
target = Table("test_table_1b", session)

target.merge(source, "bar" != source["str"], clauses=[when_matched(source["str"] == "too_new").update({"str": "value2"}), when_matched().update({"num": 123})])

df1.write.save_as_table("test_table_2", _emit_ast=False)
target = Table("test_table_2", session)

target.merge(source, (target["num"] != source["num"]) & (target["str"] != "too_old"), [when_not_matched().insert({"str": "value"})])

target = Table("test_table_2b", session)
df1.write.save_as_table("test_table_2b", _emit_ast=False)

target.merge(source, source["str"] != "foo", clauses=[when_not_matched(source["str"] == "too_new").insert({"str": "value"}), when_matched().update({"str": "value3"})])

df1.write.save_as_table("test_table_3", _emit_ast=False)
target = Table("test_table_3", session)

target.merge(source=source, join_expr=(target["num"] == source["num"]), clauses=[when_matched().delete()])

df1.write.save_as_table("test_table_4", _emit_ast=False)
target = Table("test_table_4", session)

target.merge(source, (source["num"] == 1) & (target["num"] == source["num"]), [when_matched(source["str"] == "too_new").delete()], block=False)

df1.write.save_as_table("test_table_5", _emit_ast=False)
target = Table("test_table_5", session)

target.merge(source, join_expr=(target["num"] == source["num"]), clauses=[when_matched()], block=False, statement_params={"SF_PARTNER": "FAKE_PARTNER"})

## EXPECTED UNPARSER OUTPUT

source = session.create_dataframe([(1, "one"), (2, "two"), (3, "three")], schema=StructType([StructField("num", IntegerType(), nullable=True), StructField("str", StringType(16777216), nullable=True)], structured=False))

target = Table("test_table_1", session)

target.merge(source=source, join_expr=(target["num"] == source["num"]) & (target["str"] == "too_old"), clauses=[when_matched().update({"str": "value"})])

target = Table("test_table_1b", session)

target.merge(source=source, join_expr=source["str"] != "bar", clauses=[when_matched(source["str"] == "too_new").update({"str": "value2"}), when_matched().update({"num": 123})])

target = Table("test_table_2", session)

target.merge(source=source, join_expr=(target["num"] != source["num"]) & (target["str"] != "too_old"), clauses=[when_not_matched().insert({"str": "value"})])

target = Table("test_table_2b", session)

target.merge(source=source, join_expr=source["str"] != "foo", clauses=[when_not_matched(source["str"] == "too_new").insert({"str": "value"}), when_matched().update({"str": "value3"})])

target = Table("test_table_3", session)

target.merge(source=source, join_expr=target["num"] == source["num"], clauses=[when_matched().delete()])

target = Table("test_table_4", session)

target.merge(source=source, join_expr=(source["num"] == 1) & (target["num"] == source["num"]), clauses=[when_matched(source["str"] == "too_new").delete()], block=False)

target = Table("test_table_5", session)

target.merge(source=source, join_expr=target["num"] == source["num"], statement_params={"SF_PARTNER": "FAKE_PARTNER"}, block=False)

## EXPECTED ENCODED AST

CqgDCqUDCpID+gWOAwrDAgrAAgpomg1lChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoQRIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoQRABEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShBEgNvbmUKaJoNZQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEESIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEEQAhIk+gwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoQRIDdHdvCmqaDWcKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShBEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShBEAMSJvoMIwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEESBXRocmVlEioSKAomCg0KBQoDbnVtEgJgARgBChUKBQoDc3RyEgqaAQcKBQiAgIAIGAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShBEggKBnNvdXJjZRgBIgIIAQpJCkcKNYIMMhIQCg4KDHRlc3RfdGFibGVfMRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEYiAhABEggKBnRhcmdldBgCIgIIAgqvAwqsAwqhA6oMnQMIARJUGlIaUApOCiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShIEgNzdHISJvoMIwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEgSBXZhbHVlGgIIAiKZAooBlQIKffoBegotygYqCgNudW0SB4ICBAoCCAIaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShIEi3KBioKA251bRIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEgaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShIEnj6AXUKLcoGKgoDc3RyEgeCAgQKAggCGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoSBIo+gwlChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoSBIHdG9vX29sZBoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEgaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShIKgeCAgQKAggBMhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoSBIAGAMiAggDCggSBggEEgIIAxABGhESDwoNCgVmaW5hbBADGAkgFCIEEAEYFw==
CkoKSAo2ggwzEhEKDwoNdGVzdF90YWJsZV8xYhoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEsiAhABEggKBnRhcmdldBgFIgIIBQrXAwrUAwrJA6oMxQMIARLQARrNAQp4+gF1Ci3KBioKA3N0chIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKE0SKPoMJQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKE0SB3Rvb19uZXcaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShNGlEKTwok+gwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoTRIDc3RyEif6DCQKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShNEgZ2YWx1ZTISTxpNGksKSQok+gwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoTRIDbnVtEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShNEHsaAggFInT6AnEKLcoGKgoDc3RyEgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoTRIk+gwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoTRIDYmFyGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoTSoHggIECgIIATIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKE0SABgGIgIIBgoIEgYIBxICCAYQARoREg8KDQoFZmluYWwQAxgJIBQiBBABGBc=
CkkKRwo1ggwyEhAKDgoMdGVzdF90YWJsZV8yGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoUCICEAESCAoGdGFyZ2V0GAgiAggICq8DCqwDCqEDqgydAwgBElQSUhImCiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShSEgNzdHIaKAom+gwjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoUhIFdmFsdWUaAggIIpkCigGVAgp9+gJ6Ci3KBioKA251bRIHggIECgIICBoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFISLcoGKgoDbnVtEgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoUhoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFISePoCdQotygYqCgNzdHISB4ICBAoCCAgaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShSEij6DCUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShSEgd0b29fb2xkGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoUhoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFIqB4ICBAoCCAEyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShSEgAYCSICCAkKCBIGCAoSAggJEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
CkoKSAo2ggwzEhEKDwoNdGVzdF90YWJsZV8yYhoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFQiAhABEggKBnRhcmdldBgLIgIICwrcAwrZAwrOA6oMygMIARLPARLMAQp4+gF1Ci3KBioKA3N0chIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFcSKPoMJQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFcSB3Rvb19uZXcaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShXEiYKJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFcSA3N0chooCib6DCMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShXEgV2YWx1ZRJVGlMaUQpPCiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShXEgNzdHISJ/oMJAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFcSBnZhbHVlMxoCCAsidPoCcQotygYqCgNzdHISB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShXEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShXEgNmb28aGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShXKgeCAgQKAggBMhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVxIAGAwiAggMCggSBggNEgIIDBABGhESDwoNCgVmaW5hbBADGAkgFCIEEAEYFw==
CkkKRwo1ggwyEhAKDgoMdGVzdF90YWJsZV8zGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWiICEAESCAoGdGFyZ2V0GA4iAggOCsABCr0BCrIBqgyuAQgBEgIKABoCCA4iffoBegotygYqCgNudW0SB4ICBAoCCA4aGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShcEi3KBioKA251bRIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShcKgeCAgQKAggBMhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXBIAGA8iAggPCggSBggQEgIIDxABGhESDwoNCgVmaW5hbBADGAkgFCIEEAEYFw==
CkkKRwo1ggwyEhAKDgoMdGVzdF90YWJsZV80GhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXyICEAESCAoGdGFyZ2V0GBEiAggRCs4DCssDCsADqgy8AxJ8CnoKePoBdQotygYqCgNzdHISB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShhEij6DCUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShhEgd0b29fbmV3GhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRoCCBEikgKKAY4CCnH6AW4KLcoGKgoDbnVtEgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRABGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRJ9+gF6Ci3KBioKA251bRIHggIECgIIERoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGESLcoGKgoDbnVtEgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShhKgeCAgQKAggBMhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRIAGBIiAggSCggSBggTEgIIEhABGhESDwoNCgVmaW5hbBADGAkgFCIEEAEYFw==
CkkKRwo1ggwyEhAKDgoMdGVzdF90YWJsZV81GhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZCICEAESCAoGdGFyZ2V0GBQiAggUCtYBCtMBCsgBqgzEARoCCBQiffoBegotygYqCgNudW0SB4ICBAoCCBQaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShmEi3KBioKA251bRIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGYaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShmKgeCAgQKAggBMhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZjoaCgpTRl9QQVJUTkVSEgxGQUtFX1BBUlRORVISABgVIgIIFQoIEgYIFhICCBUQARoREg8KDQoFZmluYWwQAxgJIBQiBBABGBc=
EAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
