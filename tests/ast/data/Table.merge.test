## TEST CASE

schema = StructType([StructField("num", IntegerType()), StructField("str", StringType())])

source = session.create_dataframe([(1, "one"), (2, "two"), (3, "three")], schema=schema)

df1 = session.create_dataframe([[1, "one"], [2, "two"], [3, "three"], ], schema=['num', 'str'], _emit_ast=False)

df1.write.save_as_table("test_table_1", _emit_ast=False)
target = Table("test_table_1", session)

target.merge(source, (target["num"] == source["num"]) & (target["str"] == "too_old"), [when_matched().update({"str": "value"})])

df1.write.save_as_table("test_table_1b", _emit_ast=False)
target = Table("test_table_1b", session)

target.merge(source, "bar" != source["str"], clauses=[when_matched(source["str"] == "too_new").update({"str": "value2"}), when_matched().update({"num": 123})])

df1.write.save_as_table("test_table_2", _emit_ast=False)
target = Table("test_table_2", session)

target.merge(source, (target["num"] != source["num"]) & (target["str"] != "too_old"), [when_not_matched().insert({"str": "value"})])

target = Table("test_table_2b", session)
df1.write.save_as_table("test_table_2b", _emit_ast=False)

target.merge(source, source["str"] != "foo", clauses=[when_not_matched(source["str"] == "too_new").insert({"str": "value"}), when_matched().update({"str": "value3"})])

df1.write.save_as_table("test_table_3", _emit_ast=False)
target = Table("test_table_3", session)

target.merge(source=source, join_expr=(target["num"] == source["num"]), clauses=[when_matched().delete()])

df1.write.save_as_table("test_table_4", _emit_ast=False)
target = Table("test_table_4", session)

target.merge(source, (source["num"] == 1) & (target["num"] == source["num"]), [when_matched(source["str"] == "too_new").delete()], block=False)

df1.write.save_as_table("test_table_5", _emit_ast=False)
target = Table("test_table_5", session)

target.merge(source, join_expr=(target["num"] == source["num"]), clauses=[when_matched()], block=False, statement_params={"SF_PARTNER": "FAKE_PARTNER"})

## EXPECTED UNPARSER OUTPUT

source = session.create_dataframe([(1, "one"), (2, "two"), (3, "three")], schema=StructType([StructField("num", IntegerType(), nullable=True), StructField("str", StringType(16777216), nullable=True)], structured=False))

target = Table("test_table_1", session)

target.merge(source=source, join_expr=(target["num"] == source["num"]) & (target["str"] == "too_old"), clauses=[when_matched().update({"str": "value"})])

target = Table("test_table_1b", session)

target.merge(source=source, join_expr=source["str"] != "bar", clauses=[when_matched(source["str"] == "too_new").update({"str": "value2"}), when_matched().update({"num": 123})])

target = Table("test_table_2", session)

target.merge(source=source, join_expr=(target["num"] != source["num"]) & (target["str"] != "too_old"), clauses=[when_not_matched().insert({"str": "value"})])

target = Table("test_table_2b", session)

target.merge(source=source, join_expr=source["str"] != "foo", clauses=[when_not_matched(source["str"] == "too_new").insert({"str": "value"}), when_matched().update({"str": "value3"})])

target = Table("test_table_3", session)

target.merge(source=source, join_expr=target["num"] == source["num"], clauses=[when_matched().delete()])

target = Table("test_table_4", session)

target.merge(source=source, join_expr=(source["num"] == 1) & (target["num"] == source["num"]), clauses=[when_matched(source["str"] == "too_new").delete()], block=False)

target = Table("test_table_5", session)

target.merge(source=source, join_expr=target["num"] == source["num"], statement_params={"SF_PARTNER": "FAKE_PARTNER"}, block=False)

## EXPECTED ENCODED AST

CqgDCqUDCpID+gWOAwrDAgrAAgpomg1lChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXBIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXBABEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShcEgNvbmUKaJoNZQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwSIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwQAhIk+gwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXBIDdHdvCmqaDWcKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShcEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShcEAMSJvoMIwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwSBXRocmVlEioSKAomCg0KBQoDbnVtEgJgARgBChUKBQoDc3RyEgqaAQcKBQiAgIAIGAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShcEggKBnNvdXJjZRgBIgIIAQpJCkcKNYIMMhIQCg4KDHRlc3RfdGFibGVfMRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGEiAhABEggKBnRhcmdldBgCIgIIAgqvAwqsAwqhA6oMnQMIARJUGlIaUApOCiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShjEgNzdHISJvoMIwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGMSBXZhbHVlGgIIAiKZAooBlQIKffoBegotygYqCgNudW0SB4ICBAoCCAIaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShjEi3KBioKA251bRIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGMaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShjEnj6AXUKLcoGKgoDc3RyEgeCAgQKAggCGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYxIo+gwlChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYxIHdG9vX29sZBoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGMaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShjKgeCAgQKAggBMhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYxIAGAMiAggDCggSBggEEgIIAxABGhESDwoNCgVmaW5hbBADGAkgEiIEEAEYFw==
CkoKSAo2ggwzEhEKDwoNdGVzdF90YWJsZV8xYhoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGYiAhABEggKBnRhcmdldBgFIgIIBQrXAwrUAwrJA6oMxQMIARLQARrNAQp4+gF1Ci3KBioKA3N0chIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGgSKPoMJQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGgSB3Rvb19uZXcaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShoGlEKTwok+gwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBIDc3RyEif6DCQKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShoEgZ2YWx1ZTISTxpNGksKSQok+gwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBIDbnVtEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShoEHsaAggFInT6AnEKLcoGKgoDc3RyEgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBIk+gwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBIDYmFyGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaCoHggIECgIIATIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGgSABgGIgIIBgoIEgYIBxICCAYQARoREg8KDQoFZmluYWwQAxgJIBIiBBABGBc=
CkkKRwo1ggwyEhAKDgoMdGVzdF90YWJsZV8yGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoayICEAESCAoGdGFyZ2V0GAgiAggICq8DCqwDCqEDqgydAwgBElQSUhImCiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShtEgNzdHIaKAom+gwjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobRIFdmFsdWUaAggIIpkCigGVAgp9+gJ6Ci3KBioKA251bRIHggIECgIICBoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKG0SLcoGKgoDbnVtEgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKG0SePoCdQotygYqCgNzdHISB4ICBAoCCAgaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShtEij6DCUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShtEgd0b29fb2xkGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKG0qB4ICBAoCCAEyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShtEgAYCSICCAkKCBIGCAoSAggJEAEaERIPCg0KBWZpbmFsEAMYCSASIgQQARgX
CkoKSAo2ggwzEhEKDwoNdGVzdF90YWJsZV8yYhoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKG8iAhABEggKBnRhcmdldBgLIgIICwrcAwrZAwrOA6oMygMIARLPARLMAQp4+gF1Ci3KBioKA3N0chIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISKPoMJQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISB3Rvb19uZXcaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEiYKJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISA3N0chooCib6DCMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEgV2YWx1ZRJVGlMaUQpPCiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEgNzdHISJ/oMJAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHISBnZhbHVlMxoCCAsidPoCcQotygYqCgNzdHISB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEgNmb28aGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyKgeCAgQKAggBMhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUochIAGAwiAggMCggSBggNEgIIDBABGhESDwoNCgVmaW5hbBADGAkgEiIEEAEYFw==
CkkKRwo1ggwyEhAKDgoMdGVzdF90YWJsZV8zGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodSICEAESCAoGdGFyZ2V0GA4iAggOCsABCr0BCrIBqgyuAQgBEgIKABoCCA4iffoBegotygYqCgNudW0SB4ICBAoCCA4aGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh3Ei3KBioKA251bRIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHcaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh3KgeCAgQKAggBMhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodxIAGA8iAggPCggSBggQEgIIDxABGhESDwoNCgVmaW5hbBADGAkgEiIEEAEYFw==
CkkKRwo1ggwyEhAKDgoMdGVzdF90YWJsZV80GhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeiICEAESCAoGdGFyZ2V0GBEiAggRCs4DCssDCsADqgy8AxJ8CnoKePoBdQotygYqCgNzdHISB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh8Eij6DCUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh8Egd0b29fbmV3GhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUofBoCCBEikgKKAY4CCnH6AW4KLcoGKgoDbnVtEgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUofBIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUofBABGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUofBJ9+gF6Ci3KBioKA251bRIHggIECgIIERoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHwSLcoGKgoDbnVtEgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUofBoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHwaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh8KgeCAgQKAggBMhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUofBIAGBIiAggSCggSBggTEgIIEhABGhESDwoNCgVmaW5hbBADGAkgEiIEEAEYFw==
CkkKRwo1ggwyEhAKDgoMdGVzdF90YWJsZV81GhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUofyICEAESCAoGdGFyZ2V0GBQiAggUCtsBCtgBCs0BqgzJARoCCBQigAH6AX0KLsoGKwoDbnVtEgeCAgQKAggUGhsaFlNSQ19QT1NJVElPTl9URVNUX01PREUogQESLsoGKwoDbnVtEgeCAgQKAggBGhsaFlNSQ19QT1NJVElPTl9URVNUX01PREUogQEaGxoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSiBASoHggIECgIIATIbGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKIEBOhoKClNGX1BBUlRORVISDEZBS0VfUEFSVE5FUhIAGBUiAggVCggSBggWEgIIFRABGhESDwoNCgVmaW5hbBADGAkgEiIEEAEYFw==
EAEaERIPCg0KBWZpbmFsEAMYCSASIgQQARgX
