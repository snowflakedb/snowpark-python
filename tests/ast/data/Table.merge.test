## TEST CASE

schema = StructType([StructField("num", IntegerType()), StructField("str", StringType())])

source = session.create_dataframe([(1, "one"), (2, "two"), (3, "three")], schema=schema)

df1 = session.create_dataframe([[1, "one"], [2, "two"], [3, "three"], ], schema=['num', 'str'], _emit_ast=False)

df1.write.save_as_table("test_table_1", _emit_ast=False)
target = Table("test_table_1", session)

target.merge(source, (target["num"] == source["num"]) & (target["str"] == "too_old"), [when_matched().update({"str": "value"})])

df1.write.save_as_table("test_table_1b", _emit_ast=False)
target = Table("test_table_1b", session)

target.merge(source, "bar" != source["str"], clauses=[when_matched(source["str"] == "too_new").update({"str": "value2"}), when_matched().update({"num": 123})])

df1.write.save_as_table("test_table_2", _emit_ast=False)
target = Table("test_table_2", session)

target.merge(source, (target["num"] != source["num"]) & (target["str"] != "too_old"), [when_not_matched().insert({"str": "value"})])

target = Table("test_table_2b", session)
df1.write.save_as_table("test_table_2b", _emit_ast=False)

target.merge(source, source["str"] != "foo", clauses=[when_not_matched(source["str"] == "too_new").insert({"str": "value"}), when_matched().update({"str": "value3"})])

df1.write.save_as_table("test_table_3", _emit_ast=False)
target = Table("test_table_3", session)

target.merge(source=source, join_expr=(target["num"] == source["num"]), clauses=[when_matched().delete()])

df1.write.save_as_table("test_table_4", _emit_ast=False)
target = Table("test_table_4", session)

target.merge(source, (source["num"] == 1) & (target["num"] == source["num"]), [when_matched(source["str"] == "too_new").delete()], block=False)

df1.write.save_as_table("test_table_5", _emit_ast=False)
target = Table("test_table_5", session)

target.merge(source, join_expr=(target["num"] == source["num"]), clauses=[when_matched()], block=False, statement_params={"SF_PARTNER": "FAKE_PARTNER"})

## EXPECTED UNPARSER OUTPUT

source = session.create_dataframe([(1, "one"), (2, "two"), (3, "three")], schema=StructType([StructField("num", IntegerType(), nullable=True), StructField("str", StringType(16777216), nullable=True)], structured=False))

target = Table("test_table_1", session)

target.merge(source=source, join_expr=(target["num"] == source["num"]) & (target["str"] == "too_old"), clauses=[when_matched().update({"str": "value"})])

target = Table("test_table_1b", session)

target.merge(source=source, join_expr=source["str"] != "bar", clauses=[when_matched(source["str"] == "too_new").update({"str": "value2"}), when_matched().update({"num": 123})])

target = Table("test_table_2", session)

target.merge(source=source, join_expr=(target["num"] != source["num"]) & (target["str"] != "too_old"), clauses=[when_not_matched().insert({"str": "value"})])

target = Table("test_table_2b", session)

target.merge(source=source, join_expr=source["str"] != "foo", clauses=[when_not_matched(source["str"] == "too_new").insert({"str": "value"}), when_matched().update({"str": "value3"})])

target = Table("test_table_3", session)

target.merge(source=source, join_expr=target["num"] == source["num"], clauses=[when_matched().delete()])

target = Table("test_table_4", session)

target.merge(source=source, join_expr=(source["num"] == 1) & (target["num"] == source["num"]), clauses=[when_matched(source["str"] == "too_new").delete()], block=False)

target = Table("test_table_5", session)

target.merge(source=source, join_expr=target["num"] == source["num"], statement_params={"SF_PARTNER": "FAKE_PARTNER"}, block=False)

## EXPECTED ENCODED AST

CqgDCqUDCpID+gWOAwrDAgrAAgpomg1lChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoSBIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoSBABEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShIEgNvbmUKaJoNZQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEgSIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEgQAhIk+gwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoSBIDdHdvCmqaDWcKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShIEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShIEAMSJvoMIwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEgSBXRocmVlEioSKAomCg0KBQoDbnVtEgJgARgBChUKBQoDc3RyEgqaAQcKBQiAgIAIGAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShIEggKBnNvdXJjZRgBIgIIAQpJCkcKNYIMMhIQCg4KDHRlc3RfdGFibGVfMRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKE0iAhABEggKBnRhcmdldBgCIgIIAgqvAwqsAwqhA6oMnQMIARJUGlIaUApOCiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShPEgNzdHISJvoMIwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKE8SBXZhbHVlGgIIAiKZAooBlQIKffoBegotygYqCgNudW0SB4ICBAoCCAIaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShPEi3KBioKA251bRIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKE8aGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShPEnj6AXUKLcoGKgoDc3RyEgeCAgQKAggCGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoTxIo+gwlChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoTxIHdG9vX29sZBoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKE8aGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShPKgeCAgQKAggBMhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoTxIAGAMiAggDCggSBggEEgIIAxABGhESDwoNCgVmaW5hbBADGAkgFCIEEAEYFw==
CkoKSAo2ggwzEhEKDwoNdGVzdF90YWJsZV8xYhoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFIiAhABEggKBnRhcmdldBgFIgIIBQrXAwrUAwrJA6oMxQMIARLQARrNAQp4+gF1Ci3KBioKA3N0chIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFQSKPoMJQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFQSB3Rvb19uZXcaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShUGlEKTwok+gwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVBIDc3RyEif6DCQKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShUEgZ2YWx1ZTISTxpNGksKSQok+gwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVBIDbnVtEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShUEHsaAggFInT6AnEKLcoGKgoDc3RyEgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVBIk+gwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVBIDYmFyGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVCoHggIECgIIATIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFQSABgGIgIIBgoIEgYIBxICCAYQARoREg8KDQoFZmluYWwQAxgJIBQiBBABGBc=
CkkKRwo1ggwyEhAKDgoMdGVzdF90YWJsZV8yGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVyICEAESCAoGdGFyZ2V0GAgiAggICq8DCqwDCqEDqgydAwgBElQSUhImCiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShZEgNzdHIaKAom+gwjChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWRIFdmFsdWUaAggIIpkCigGVAgp9+gJ6Ci3KBioKA251bRIHggIECgIICBoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFkSLcoGKgoDbnVtEgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFkSePoCdQotygYqCgNzdHISB4ICBAoCCAgaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShZEij6DCUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShZEgd0b29fb2xkGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFkqB4ICBAoCCAEyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShZEgAYCSICCAkKCBIGCAoSAggJEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
CkoKSAo2ggwzEhEKDwoNdGVzdF90YWJsZV8yYhoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFsiAhABEggKBnRhcmdldBgLIgIICwrcAwrZAwrOA6oMygMIARLPARLMAQp4+gF1Ci3KBioKA3N0chIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SKPoMJQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SB3Rvb19uZXcaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEiYKJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SA3N0chooCib6DCMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEgV2YWx1ZRJVGlMaUQpPCiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEgNzdHISJ/oMJAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SBnZhbHVlMxoCCAsidPoCcQotygYqCgNzdHISB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEgNmb28aGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheKgeCAgQKAggBMhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXhIAGAwiAggMCggSBggNEgIIDBABGhESDwoNCgVmaW5hbBADGAkgFCIEEAEYFw==
CkkKRwo1ggwyEhAKDgoMdGVzdF90YWJsZV8zGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYSICEAESCAoGdGFyZ2V0GA4iAggOCsABCr0BCrIBqgyuAQgBEgIKABoCCA4iffoBegotygYqCgNudW0SB4ICBAoCCA4aGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShjEi3KBioKA251bRIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGMaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShjKgeCAgQKAggBMhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYxIAGA8iAggPCggSBggQEgIIDxABGhESDwoNCgVmaW5hbBADGAkgFCIEEAEYFw==
CkkKRwo1ggwyEhAKDgoMdGVzdF90YWJsZV80GhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZiICEAESCAoGdGFyZ2V0GBEiAggRCs4DCssDCsADqgy8AxJ8CnoKePoBdQotygYqCgNzdHISB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShoEij6DCUKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShoEgd0b29fbmV3GhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBoCCBEikgKKAY4CCnH6AW4KLcoGKgoDbnVtEgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBABGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBJ9+gF6Ci3KBioKA251bRIHggIECgIIERoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGgSLcoGKgoDbnVtEgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGgaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShoKgeCAgQKAggBMhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBIAGBIiAggSCggSBggTEgIIEhABGhESDwoNCgVmaW5hbBADGAkgFCIEEAEYFw==
CkkKRwo1ggwyEhAKDgoMdGVzdF90YWJsZV81GhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoayICEAESCAoGdGFyZ2V0GBQiAggUCtYBCtMBCsgBqgzEARoCCBQiffoBegotygYqCgNudW0SB4ICBAoCCBQaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShtEi3KBioKA251bRIHggIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKG0aGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShtKgeCAgQKAggBMhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobToaCgpTRl9QQVJUTkVSEgxGQUtFX1BBUlRORVISABgVIgIIFQoIEgYIFhICCBUQARoREg8KDQoFZmluYWwQAxgJIBQiBBABGBc=
EAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
