## TEST CASE

schema = StructType([StructField("num", IntegerType()), StructField("str", StringType())])

source = session.create_dataframe([(1, "one"), (2, "two"), (3, "three")], schema=schema)

df1 = session.create_dataframe([[1, "one"], [2, "two"], [3, "three"], ], schema=['num', 'str'], _emit_ast=False)

df1.write.save_as_table("test_table_1", _emit_ast=False)
target = Table("test_table_1", session)

target.merge(source, (target["num"] == source["num"]) & (target["str"] == "too_old"), [when_matched().update({"str": "value"})])

df1.write.save_as_table("test_table_1b", _emit_ast=False)
target = Table("test_table_1b", session)

target.merge(source, "bar" != source["str"], clauses=[when_matched(source["str"] == "too_new").update({"str": "value2"}), when_matched().update({"num": 123})])

df1.write.save_as_table("test_table_2", _emit_ast=False)
target = Table("test_table_2", session)

target.merge(source, (target["num"] != source["num"]) & (target["str"] != "too_old"), [when_not_matched().insert({"str": "value"})])

target = Table("test_table_2b", session)
df1.write.save_as_table("test_table_2b", _emit_ast=False)

target.merge(source, source["str"] != "foo", clauses=[when_not_matched(source["str"] == "too_new").insert({"str": "value"}), when_matched().update({"str": "value3"})])

df1.write.save_as_table("test_table_3", _emit_ast=False)
target = Table("test_table_3", session)

target.merge(source=source, join_expr=(target["num"] == source["num"]), clauses=[when_matched().delete()])

df1.write.save_as_table("test_table_4", _emit_ast=False)
target = Table("test_table_4", session)

target.merge(source, (source["num"] == 1) & (target["num"] == source["num"]), [when_matched(source["str"] == "too_new").delete()], block=False)

df1.write.save_as_table("test_table_5", _emit_ast=False)
target = Table("test_table_5", session)

target.merge(source, join_expr=(target["num"] == source["num"]), clauses=[when_matched()], block=False, statement_params={"SF_PARTNER": "FAKE_PARTNER"})

## EXPECTED UNPARSER OUTPUT

source = session.create_dataframe([(1, "one"), (2, "two"), (3, "three")], schema=StructType([StructField("num", IntegerType(), nullable=True), StructField("str", StringType(16777216), nullable=True)], structured=False))

target = Table("test_table_1", session)

target.merge(source=source, join_expr=(target["num"] == source["num"]) & (target["str"] == "too_old"), clauses=[when_matched().update({"str": "value"})])

target = Table("test_table_1b", session)

target.merge(source=source, join_expr=source["str"] != "bar", clauses=[when_matched(source["str"] == "too_new").update({"str": "value2"}), when_matched().update({"num": 123})])

target = Table("test_table_2", session)

target.merge(source=source, join_expr=(target["num"] != source["num"]) & (target["str"] != "too_old"), clauses=[when_not_matched().insert({"str": "value"})])

target = Table("test_table_2b", session)

target.merge(source=source, join_expr=source["str"] != "foo", clauses=[when_not_matched(source["str"] == "too_new").insert({"str": "value"}), when_matched().update({"str": "value3"})])

target = Table("test_table_3", session)

target.merge(source=source, join_expr=target["num"] == source["num"], clauses=[when_matched().delete()])

target = Table("test_table_4", session)

target.merge(source=source, join_expr=(source["num"] == 1) & (target["num"] == source["num"]), clauses=[when_matched(source["str"] == "too_new").delete()], block=False)

target = Table("test_table_5", session)

target.merge(source=source, join_expr=target["num"] == source["num"], statement_params={"SF_PARTNER": "FAKE_PARTNER"}, block=False)

## EXPECTED ENCODED AST

body {
  assign {
    expr {
      sp_create_dataframe {
        data {
          sp_dataframe_data__list {
            vs {
              tuple_val {
                src {
                  file: "SRC_POSITION_TEST_MODE"
                  start_line: 27
                }
                vs {
                  int64_val {
                    src {
                      file: "SRC_POSITION_TEST_MODE"
                      start_line: 27
                    }
                    v: 1
                  }
                }
                vs {
                  string_val {
                    src {
                      file: "SRC_POSITION_TEST_MODE"
                      start_line: 27
                    }
                    v: "one"
                  }
                }
              }
            }
            vs {
              tuple_val {
                src {
                  file: "SRC_POSITION_TEST_MODE"
                  start_line: 27
                }
                vs {
                  int64_val {
                    src {
                      file: "SRC_POSITION_TEST_MODE"
                      start_line: 27
                    }
                    v: 2
                  }
                }
                vs {
                  string_val {
                    src {
                      file: "SRC_POSITION_TEST_MODE"
                      start_line: 27
                    }
                    v: "two"
                  }
                }
              }
            }
            vs {
              tuple_val {
                src {
                  file: "SRC_POSITION_TEST_MODE"
                  start_line: 27
                }
                vs {
                  int64_val {
                    src {
                      file: "SRC_POSITION_TEST_MODE"
                      start_line: 27
                    }
                    v: 3
                  }
                }
                vs {
                  string_val {
                    src {
                      file: "SRC_POSITION_TEST_MODE"
                      start_line: 27
                    }
                    v: "three"
                  }
                }
              }
            }
          }
        }
        schema {
          sp_dataframe_schema__struct {
            v {
              fields {
                column_identifier {
                  name: "num"
                }
                data_type {
                  sp_integer_type: true
                }
                nullable: true
              }
              fields {
                column_identifier {
                  name: "str"
                }
                data_type {
                  sp_string_type {
                    length {
                      value: 16777216
                    }
                  }
                }
                nullable: true
              }
            }
          }
        }
        src {
          file: "SRC_POSITION_TEST_MODE"
          start_line: 27
        }
      }
    }
    symbol {
      value: "source"
    }
    uid: 1
    var_id {
      bitfield1: 1
    }
  }
}
body {
  assign {
    expr {
      sp_table {
        name {
          sp_table_name_flat {
            name: "test_table_1"
          }
        }
        src {
          file: "SRC_POSITION_TEST_MODE"
          start_line: 32
        }
        variant {
          sp_table_init: true
        }
      }
    }
    symbol {
      value: "target"
    }
    uid: 2
    var_id {
      bitfield1: 2
    }
  }
}
body {
  assign {
    expr {
      sp_table_merge {
        block: true
        clauses {
          sp_merge_update_when_matched_clause {
            update_assignments {
              list {
                _1 {
                  string_val {
                    src {
                      file: "SRC_POSITION_TEST_MODE"
                      start_line: 34
                    }
                    v: "str"
                  }
                }
                _2 {
                  string_val {
                    src {
                      file: "SRC_POSITION_TEST_MODE"
                      start_line: 34
                    }
                    v: "value"
                  }
                }
              }
            }
          }
        }
        id {
          bitfield1: 2
        }
        join_expr {
          and {
            lhs {
              eq {
                lhs {
                  sp_dataframe_col {
                    col_name: "num"
                    df {
                      sp_dataframe_ref {
                        id {
                          bitfield1: 2
                        }
                      }
                    }
                    src {
                      file: "SRC_POSITION_TEST_MODE"
                      start_line: 34
                    }
                  }
                }
                rhs {
                  sp_dataframe_col {
                    col_name: "num"
                    df {
                      sp_dataframe_ref {
                        id {
                          bitfield1: 1
                        }
                      }
                    }
                    src {
                      file: "SRC_POSITION_TEST_MODE"
                      start_line: 34
                    }
                  }
                }
                src {
                  file: "SRC_POSITION_TEST_MODE"
                  start_line: 34
                }
              }
            }
            rhs {
              eq {
                lhs {
                  sp_dataframe_col {
                    col_name: "str"
                    df {
                      sp_dataframe_ref {
                        id {
                          bitfield1: 2
                        }
                      }
                    }
                    src {
                      file: "SRC_POSITION_TEST_MODE"
                      start_line: 34
                    }
                  }
                }
                rhs {
                  string_val {
                    src {
                      file: "SRC_POSITION_TEST_MODE"
                      start_line: 34
                    }
                    v: "too_old"
                  }
                }
                src {
                  file: "SRC_POSITION_TEST_MODE"
                  start_line: 34
                }
              }
            }
            src {
              file: "SRC_POSITION_TEST_MODE"
              start_line: 34
            }
          }
        }
        source {
          sp_dataframe_ref {
            id {
              bitfield1: 1
            }
          }
        }
        src {
          file: "SRC_POSITION_TEST_MODE"
          start_line: 34
        }
      }
    }
    symbol {
    }
    uid: 3
    var_id {
      bitfield1: 3
    }
  }
}
body {
  eval {
    uid: 4
    var_id {
      bitfield1: 3
    }
  }
}
client_ast_version: 1
client_language {
  python_language {
    version {
      label: "final"
      major: 3
      minor: 9
      patch: 1
    }
  }
}
client_version {
  major: 1
  minor: 23
}
