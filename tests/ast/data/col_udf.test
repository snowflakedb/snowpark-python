## TEST CASE

from snowflake.snowpark.functions import col, udf

from snowflake.snowpark.types import IntegerType, FloatType

add_one = udf(lambda x: x + 1, return_type=IntegerType(), input_types=[IntegerType()])

df = session.create_dataframe([1, 2, 3], schema=["a"])

df.select(add_one(col("a")).as_("ans")).collect()

# call_udf should be encoded as builtin applexpr. It only works for named (& permanently) registered udfs.

add_two = udf(lambda x: x + 2, return_type=IntegerType(), input_types=[IntegerType()], name="add_two", replace=True)

df.select(call_udf("add_two", col("A")).as_("a_Ans")).collect()

param_udf = udf(lambda x, y: str(y + x**2), return_type=VariantType(), input_types=[IntegerType(), FloatType()],
                name="param_udf", is_permanent=True, stage_location="@", imports=["numpy"], packages=["bla"],
                replace=True, if_not_exists=False, parallel=8, max_batch_size=2, source_code_display=False,
                strict=True, secure=True, external_access_integrations=["s3"], secrets={'a':'b', 'c':'d'},
                immutable=True, comment="some udf", force_inline_code=True)

# Another test udf because if_not_exists and replace need to be xor.
param_udf2 = udf(lambda x, y: str(y + x**2), return_type=VariantType(), input_types=[IntegerType(), FloatType()],
                 name="param_udf2", is_permanent=True, stage_location="@", imports=["numpy"], packages=["bla"],
                 replace=False, if_not_exists=True, parallel=8, max_batch_size=2, source_code_display=False,
                 strict=True, secure=True, external_access_integrations=["s3"], secrets={'a':'b', 'c':'d'},
                 immutable=True, comment="some udf", force_inline_code=True)

df.select(param_udf(col("A"), col("A")))

# Test registering UDF from file
mod5_udf = session.udf.register_from_file(
    test_files.test_udf_py_file,
    "mod5",
    return_type=IntegerType(),
    input_types=[IntegerType()],
    immutable=True,
)
df.select(mod5_udf("a"), mod5_udf("b")).collect()

# Test registeringb vectorized UDF from file
mod5_pandas_udf = session.udf.register_from_file(
    test_files.test_pandas_udf_py_file,
    "pandas_apply_mod5",
    return_type=IntegerType(),
    input_types=[IntegerType()],
)
df.select(mod5_pandas_udf("a"), mod5_pandas_udf("b")).collect()

# Test artifact_repository parameters
def test_urllib() -> str:
    import urllib3

    return str(urllib3.exceptions.HTTPError("test"))

udf(
    func=test_urllib,
    name="artifact_repository_udf",
    artifact_repository="EXAMPLE_REPO",
    artifact_repository_packages=["urllib3", "requests"],
    resource_constraint={"architecture": "x86"},
)

## EXPECTED UNPARSER OUTPUT

add_one = udf("<lambda>", return_type=IntegerType(), input_types=[IntegerType()], _registered_object_name="\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"SNOWPARK_TEMP_FUNCTION_xxx\"")

df = session.create_dataframe([1, 2, 3], schema=["a"])

df.select(add_one(col("a")).as_("ans")).collect()

df = session.create_dataframe([1, 2, 3], schema=["a"])

add_two = udf("<lambda [1]>", return_type=IntegerType(), input_types=[IntegerType()], name="add_two", replace=True, _registered_object_name="\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"ADD_TWO\"")

df.select(call_udf("add_two", col("A")).as_("a_Ans")).collect()

df = session.create_dataframe([1, 2, 3], schema=["a"])

param_udf = udf("<lambda [2]>", return_type=VariantType(), input_types=[IntegerType(), FloatType()], name="param_udf", is_permanent=True, stage_location="@", imports=["numpy"], packages=["bla"], replace=True, parallel=8, max_batch_size=2, source_code_display=False, strict=True, secure=True, external_access_integrations=["s3"], secrets={"a": "b", "c": "d"}, immutable=True, comment="some udf", force_inline_code=True, _registered_object_name="\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"PARAM_UDF\"")

param_udf2 = udf("<lambda [3]>", return_type=VariantType(), input_types=[IntegerType(), FloatType()], name="param_udf2", is_permanent=True, stage_location="@", imports=["numpy"], packages=["bla"], if_not_exists=True, parallel=8, max_batch_size=2, source_code_display=False, strict=True, secure=True, external_access_integrations=["s3"], secrets={"a": "b", "c": "d"}, immutable=True, comment="some udf", force_inline_code=True, _registered_object_name="\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"PARAM_UDF2\"")

res5 = df.select(param_udf(col("A"), col("A")))

mod5_udf = udf("mod5", return_type=IntegerType(), input_types=[IntegerType()], max_batch_size=0, immutable=True, _registered_object_name="\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"SNOWPARK_TEMP_FUNCTION_xxx\"")

df.select(mod5_udf("a"), mod5_udf("b")).collect()

df = session.create_dataframe([1, 2, 3], schema=["a"])

mod5_pandas_udf = udf("pandas_apply_mod5", return_type=IntegerType(), input_types=[IntegerType()], max_batch_size=0, _registered_object_name="\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"SNOWPARK_TEMP_FUNCTION_xxx\"")

df.select(mod5_pandas_udf("a"), mod5_pandas_udf("b")).collect()

res10 = udf("test_urllib", return_type=StringType(), name="artifact_repository_udf", artifact_repository="EXAMPLE_REPO", artifact_repository_packages=["urllib3", "requests"], resource_constraint={"architecture": "x86"}, _registered_object_name="\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"ARTIFACT_REPOSITORY_UDF\"")

## EXPECTED ENCODED AST

interned_value_table {
  string_values {
    key: -1
  }
  string_values {
    key: 2
    value: "SRC_POSITION_TEST_MODE"
  }
}
body {
  bind {
    expr {
      udf {
        func {
          name: "<lambda>"
          object_name {
            name {
              name_flat {
                name: "\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"SNOWPARK_TEMP_FUNCTION_xxx\""
              }
            }
          }
        }
        input_types {
          integer_type: true
        }
        parallel: 4
        return_type {
          integer_type: true
        }
        source_code_display: true
        src {
          end_column: 94
          end_line: 29
          file: 2
          start_column: 18
          start_line: 29
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "add_one"
    }
    uid: 1
  }
}
body {
  bind {
    expr {
      create_dataframe {
        data {
          dataframe_data__list {
            vs {
              int64_val {
                src {
                  end_column: 62
                  end_line: 31
                  file: 2
                  start_column: 13
                  start_line: 31
                }
                v: 1
              }
            }
            vs {
              int64_val {
                src {
                  end_column: 62
                  end_line: 31
                  file: 2
                  start_column: 13
                  start_line: 31
                }
                v: 2
              }
            }
            vs {
              int64_val {
                src {
                  end_column: 62
                  end_line: 31
                  file: 2
                  start_column: 13
                  start_line: 31
                }
                v: 3
              }
            }
          }
        }
        schema {
          dataframe_schema__list {
            vs: "a"
          }
        }
        src {
          end_column: 62
          end_line: 31
          file: 2
          start_column: 13
          start_line: 31
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "df"
    }
    uid: 2
  }
}
body {
  bind {
    expr {
      dataframe_select {
        cols {
          args {
            column_alias {
              col {
                apply_expr {
                  fn {
                    fn_ref {
                      id: 1
                    }
                  }
                  pos_args {
                    apply_expr {
                      fn {
                        builtin_fn {
                          name {
                            name {
                              name_flat {
                                name: "col"
                              }
                            }
                          }
                        }
                      }
                      pos_args {
                        string_val {
                          src {
                            end_column: 34
                            end_line: 33
                            file: 2
                            start_column: 26
                            start_line: 33
                          }
                          v: "a"
                        }
                      }
                      src {
                        end_column: 34
                        end_line: 33
                        file: 2
                        start_column: 26
                        start_line: 33
                      }
                    }
                  }
                  src {
                    end_column: 35
                    end_line: 33
                    file: 2
                    start_column: 18
                    start_line: 33
                  }
                }
              }
              fn {
                column_alias_fn_as: true
              }
              name: "ans"
              src {
                end_column: 46
                end_line: 33
                file: 2
                start_column: 18
                start_line: 33
              }
            }
          }
          variadic: true
        }
        df {
          dataframe_ref {
            id: 2
          }
        }
        src {
          end_column: 47
          end_line: 33
          file: 2
          start_column: 8
          start_line: 33
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 3
  }
}
body {
  bind {
    expr {
      dataframe_collect {
        block: true
        case_sensitive: true
        df {
          dataframe_ref {
            id: 3
          }
        }
        src {
          end_column: 57
          end_line: 33
          file: 2
          start_column: 8
          start_line: 33
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 4
  }
}
body {
  eval {
    bind_id: 4
  }
}
body {
  bind {
    expr {
      create_dataframe {
        data {
          dataframe_data__list {
            vs {
              int64_val {
                src {
                  end_column: 62
                  end_line: 31
                  file: 2
                  start_column: 13
                  start_line: 31
                }
                v: 1
              }
            }
            vs {
              int64_val {
                src {
                  end_column: 62
                  end_line: 31
                  file: 2
                  start_column: 13
                  start_line: 31
                }
                v: 2
              }
            }
            vs {
              int64_val {
                src {
                  end_column: 62
                  end_line: 31
                  file: 2
                  start_column: 13
                  start_line: 31
                }
                v: 3
              }
            }
          }
        }
        schema {
          dataframe_schema__list {
            vs: "a"
          }
        }
        src {
          end_column: 62
          end_line: 31
          file: 2
          start_column: 13
          start_line: 31
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "df"
    }
    uid: 2
  }
}
body {
  bind {
    expr {
      udf {
        func {
          id: 1
          name: "<lambda [1]>"
          object_name {
            name {
              name_flat {
                name: "\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"ADD_TWO\""
              }
            }
          }
        }
        input_types {
          integer_type: true
        }
        name {
          name {
            name_flat {
              name: "add_two"
            }
          }
        }
        parallel: 4
        replace: true
        return_type {
          integer_type: true
        }
        source_code_display: true
        src {
          end_column: 124
          end_line: 37
          file: 2
          start_column: 18
          start_line: 37
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "add_two"
    }
    uid: 5
  }
}
body {
  bind {
    expr {
      dataframe_select {
        cols {
          args {
            column_alias {
              col {
                apply_expr {
                  fn {
                    builtin_fn {
                      name {
                        name {
                          name_flat {
                            name: "call_udf"
                          }
                        }
                      }
                    }
                  }
                  pos_args {
                    string_val {
                      src {
                        end_column: 47
                        end_line: 39
                        file: 2
                        start_column: 18
                        start_line: 39
                      }
                      v: "add_two"
                    }
                  }
                  pos_args {
                    apply_expr {
                      fn {
                        builtin_fn {
                          name {
                            name {
                              name_flat {
                                name: "col"
                              }
                            }
                          }
                        }
                      }
                      pos_args {
                        string_val {
                          src {
                            end_column: 46
                            end_line: 39
                            file: 2
                            start_column: 38
                            start_line: 39
                          }
                          v: "A"
                        }
                      }
                      src {
                        end_column: 46
                        end_line: 39
                        file: 2
                        start_column: 38
                        start_line: 39
                      }
                    }
                  }
                  src {
                    end_column: 47
                    end_line: 39
                    file: 2
                    start_column: 18
                    start_line: 39
                  }
                }
              }
              fn {
                column_alias_fn_as: true
              }
              name: "a_Ans"
              src {
                end_column: 60
                end_line: 39
                file: 2
                start_column: 18
                start_line: 39
              }
            }
          }
          variadic: true
        }
        df {
          dataframe_ref {
            id: 2
          }
        }
        src {
          end_column: 61
          end_line: 39
          file: 2
          start_column: 8
          start_line: 39
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 6
  }
}
body {
  bind {
    expr {
      dataframe_collect {
        block: true
        case_sensitive: true
        df {
          dataframe_ref {
            id: 6
          }
        }
        src {
          end_column: 71
          end_line: 39
          file: 2
          start_column: 8
          start_line: 39
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 7
  }
}
body {
  eval {
    bind_id: 7
  }
}
body {
  bind {
    expr {
      create_dataframe {
        data {
          dataframe_data__list {
            vs {
              int64_val {
                src {
                  end_column: 62
                  end_line: 31
                  file: 2
                  start_column: 13
                  start_line: 31
                }
                v: 1
              }
            }
            vs {
              int64_val {
                src {
                  end_column: 62
                  end_line: 31
                  file: 2
                  start_column: 13
                  start_line: 31
                }
                v: 2
              }
            }
            vs {
              int64_val {
                src {
                  end_column: 62
                  end_line: 31
                  file: 2
                  start_column: 13
                  start_line: 31
                }
                v: 3
              }
            }
          }
        }
        schema {
          dataframe_schema__list {
            vs: "a"
          }
        }
        src {
          end_column: 62
          end_line: 31
          file: 2
          start_column: 13
          start_line: 31
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "df"
    }
    uid: 2
  }
}
body {
  bind {
    expr {
      udf {
        comment {
          value: "some udf"
        }
        external_access_integrations: "s3"
        func {
          id: 2
          name: "<lambda [2]>"
          object_name {
            name {
              name_flat {
                name: "\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"PARAM_UDF\""
              }
            }
          }
        }
        immutable: true
        imports {
          name {
            name_flat {
              name: "numpy"
            }
          }
        }
        input_types {
          integer_type: true
        }
        input_types {
          float_type: true
        }
        is_permanent: true
        kwargs {
          _1: "force_inline_code"
          _2 {
            bool_val {
              src {
                end_column: 83
                end_line: 45
                file: 2
                start_column: 20
                start_line: 41
              }
              v: true
            }
          }
        }
        max_batch_size {
          value: 2
        }
        name {
          name {
            name_flat {
              name: "param_udf"
            }
          }
        }
        packages: "bla"
        parallel: 8
        replace: true
        return_type {
          variant_type: true
        }
        secrets {
          _1: "a"
          _2: "b"
        }
        secrets {
          _1: "c"
          _2: "d"
        }
        secure: true
        src {
          end_column: 83
          end_line: 45
          file: 2
          start_column: 20
          start_line: 41
        }
        stage_location: "@"
        strict: true
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "param_udf"
    }
    uid: 8
  }
}
body {
  bind {
    expr {
      udf {
        comment {
          value: "some udf"
        }
        external_access_integrations: "s3"
        func {
          id: 3
          name: "<lambda [3]>"
          object_name {
            name {
              name_flat {
                name: "\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"PARAM_UDF2\""
              }
            }
          }
        }
        if_not_exists: true
        immutable: true
        imports {
          name {
            name_flat {
              name: "numpy"
            }
          }
        }
        input_types {
          integer_type: true
        }
        input_types {
          float_type: true
        }
        is_permanent: true
        kwargs {
          _1: "force_inline_code"
          _2 {
            bool_val {
              src {
                end_column: 84
                end_line: 52
                file: 2
                start_column: 21
                start_line: 48
              }
              v: true
            }
          }
        }
        max_batch_size {
          value: 2
        }
        name {
          name {
            name_flat {
              name: "param_udf2"
            }
          }
        }
        packages: "bla"
        parallel: 8
        return_type {
          variant_type: true
        }
        secrets {
          _1: "a"
          _2: "b"
        }
        secrets {
          _1: "c"
          _2: "d"
        }
        secure: true
        src {
          end_column: 84
          end_line: 52
          file: 2
          start_column: 21
          start_line: 48
        }
        stage_location: "@"
        strict: true
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "param_udf2"
    }
    uid: 9
  }
}
body {
  bind {
    expr {
      dataframe_select {
        cols {
          args {
            apply_expr {
              fn {
                fn_ref {
                  id: 8
                }
              }
              pos_args {
                apply_expr {
                  fn {
                    builtin_fn {
                      name {
                        name {
                          name_flat {
                            name: "col"
                          }
                        }
                      }
                    }
                  }
                  pos_args {
                    string_val {
                      src {
                        end_column: 36
                        end_line: 54
                        file: 2
                        start_column: 28
                        start_line: 54
                      }
                      v: "A"
                    }
                  }
                  src {
                    end_column: 36
                    end_line: 54
                    file: 2
                    start_column: 28
                    start_line: 54
                  }
                }
              }
              pos_args {
                apply_expr {
                  fn {
                    builtin_fn {
                      name {
                        name {
                          name_flat {
                            name: "col"
                          }
                        }
                      }
                    }
                  }
                  pos_args {
                    string_val {
                      src {
                        end_column: 46
                        end_line: 54
                        file: 2
                        start_column: 38
                        start_line: 54
                      }
                      v: "A"
                    }
                  }
                  src {
                    end_column: 46
                    end_line: 54
                    file: 2
                    start_column: 38
                    start_line: 54
                  }
                }
              }
              src {
                end_column: 47
                end_line: 54
                file: 2
                start_column: 18
                start_line: 54
              }
            }
          }
          variadic: true
        }
        df {
          dataframe_ref {
            id: 2
          }
        }
        src {
          end_column: 48
          end_line: 54
          file: 2
          start_column: 8
          start_line: 54
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 10
  }
}
body {
  bind {
    expr {
      udf {
        func {
          id: 4
          name: "mod5"
          object_name {
            name {
              name_flat {
                name: "\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"SNOWPARK_TEMP_FUNCTION_xxx\""
              }
            }
          }
        }
        immutable: true
        input_types {
          integer_type: true
        }
        max_batch_size {
        }
        parallel: 4
        return_type {
          integer_type: true
        }
        source_code_display: true
        src {
          end_column: 9
          end_line: 63
          file: 2
          start_column: 19
          start_line: 57
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "mod5_udf"
    }
    uid: 11
  }
}
body {
  bind {
    expr {
      dataframe_select {
        cols {
          args {
            apply_expr {
              fn {
                fn_ref {
                  id: 11
                }
              }
              pos_args {
                string_val {
                  src {
                    end_column: 31
                    end_line: 64
                    file: 2
                    start_column: 18
                    start_line: 64
                  }
                  v: "a"
                }
              }
              src {
                end_column: 31
                end_line: 64
                file: 2
                start_column: 18
                start_line: 64
              }
            }
          }
          args {
            apply_expr {
              fn {
                fn_ref {
                  id: 11
                }
              }
              pos_args {
                string_val {
                  src {
                    end_column: 46
                    end_line: 64
                    file: 2
                    start_column: 33
                    start_line: 64
                  }
                  v: "b"
                }
              }
              src {
                end_column: 46
                end_line: 64
                file: 2
                start_column: 33
                start_line: 64
              }
            }
          }
          variadic: true
        }
        df {
          dataframe_ref {
            id: 2
          }
        }
        src {
          end_column: 47
          end_line: 64
          file: 2
          start_column: 8
          start_line: 64
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 12
  }
}
body {
  bind {
    expr {
      dataframe_collect {
        block: true
        case_sensitive: true
        df {
          dataframe_ref {
            id: 12
          }
        }
        src {
          end_column: 57
          end_line: 64
          file: 2
          start_column: 8
          start_line: 64
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 13
  }
}
body {
  eval {
    bind_id: 13
  }
}
body {
  bind {
    expr {
      create_dataframe {
        data {
          dataframe_data__list {
            vs {
              int64_val {
                src {
                  end_column: 62
                  end_line: 31
                  file: 2
                  start_column: 13
                  start_line: 31
                }
                v: 1
              }
            }
            vs {
              int64_val {
                src {
                  end_column: 62
                  end_line: 31
                  file: 2
                  start_column: 13
                  start_line: 31
                }
                v: 2
              }
            }
            vs {
              int64_val {
                src {
                  end_column: 62
                  end_line: 31
                  file: 2
                  start_column: 13
                  start_line: 31
                }
                v: 3
              }
            }
          }
        }
        schema {
          dataframe_schema__list {
            vs: "a"
          }
        }
        src {
          end_column: 62
          end_line: 31
          file: 2
          start_column: 13
          start_line: 31
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "df"
    }
    uid: 2
  }
}
body {
  bind {
    expr {
      udf {
        func {
          id: 5
          name: "pandas_apply_mod5"
          object_name {
            name {
              name_flat {
                name: "\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"SNOWPARK_TEMP_FUNCTION_xxx\""
              }
            }
          }
        }
        input_types {
          integer_type: true
        }
        max_batch_size {
        }
        parallel: 4
        return_type {
          integer_type: true
        }
        source_code_display: true
        src {
          end_column: 9
          end_line: 72
          file: 2
          start_column: 26
          start_line: 67
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "mod5_pandas_udf"
    }
    uid: 14
  }
}
body {
  bind {
    expr {
      dataframe_select {
        cols {
          args {
            apply_expr {
              fn {
                fn_ref {
                  id: 14
                }
              }
              pos_args {
                string_val {
                  src {
                    end_column: 38
                    end_line: 73
                    file: 2
                    start_column: 18
                    start_line: 73
                  }
                  v: "a"
                }
              }
              src {
                end_column: 38
                end_line: 73
                file: 2
                start_column: 18
                start_line: 73
              }
            }
          }
          args {
            apply_expr {
              fn {
                fn_ref {
                  id: 14
                }
              }
              pos_args {
                string_val {
                  src {
                    end_column: 60
                    end_line: 73
                    file: 2
                    start_column: 40
                    start_line: 73
                  }
                  v: "b"
                }
              }
              src {
                end_column: 60
                end_line: 73
                file: 2
                start_column: 40
                start_line: 73
              }
            }
          }
          variadic: true
        }
        df {
          dataframe_ref {
            id: 2
          }
        }
        src {
          end_column: 61
          end_line: 73
          file: 2
          start_column: 8
          start_line: 73
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 15
  }
}
body {
  bind {
    expr {
      dataframe_collect {
        block: true
        case_sensitive: true
        df {
          dataframe_ref {
            id: 15
          }
        }
        src {
          end_column: 71
          end_line: 73
          file: 2
          start_column: 8
          start_line: 73
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 16
  }
}
body {
  eval {
    bind_id: 16
  }
}
body {
  bind {
    expr {
      udf {
        artifact_repository {
          value: "EXAMPLE_REPO"
        }
        artifact_repository_packages: "urllib3"
        artifact_repository_packages: "requests"
        func {
          id: 6
          name: "test_urllib"
          object_name {
            name {
              name_flat {
                name: "\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"ARTIFACT_REPOSITORY_UDF\""
              }
            }
          }
        }
        name {
          name {
            name_flat {
              name: "artifact_repository_udf"
            }
          }
        }
        parallel: 4
        resource_constraint {
          _1: "architecture"
          _2: "x86"
        }
        return_type {
          string_type {
            length {
            }
          }
        }
        source_code_display: true
        src {
          end_column: 9
          end_line: 87
          file: 2
          start_column: 8
          start_line: 81
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 17
  }
}
client_ast_version: 1
client_language {
  python_language {
    version {
      label: "final"
      major: 3
      minor: 9
      patch: 1
    }
  }
}
client_version {
  major: 1
  minor: 31
}
id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
