## TEST CASE

from snowflake.snowpark.functions import col, udf

from snowflake.snowpark.types import IntegerType, FloatType

add_one = udf(lambda x: x + 1, return_type=IntegerType(), input_types=[IntegerType()])

df = session.create_dataframe([1, 2, 3], schema=["a"])

df.select(add_one(col("a")).as_("ans")).collect()

# call_udf should be encoded as builtin applexpr. It only works for named (& permanently) registered udfs.

add_two = udf(lambda x: x + 2, return_type=IntegerType(), input_types=[IntegerType()], name="add_two", replace=True)

df.select(call_udf("add_two", col("A")).as_("a_Ans")).collect()

param_udf = udf(lambda x, y: str(y + x**2), return_type=VariantType(), input_types=[IntegerType(), FloatType()],
                name="param_udf", is_permanent=True, stage_location="@", imports=["numpy"], packages=["bla"],
                replace=True, if_not_exists=False, parallel=8, max_batch_size=2, source_code_display=False,
                strict=True, secure=True, external_access_integrations=["s3"], secrets={'a':'b', 'c':'d'},
                immutable=True, comment="some udf", force_inline_code=True)

# Another test udf because if_not_exists and replace need to be xor.
param_udf2 = udf(lambda x, y: str(y + x**2), return_type=VariantType(), input_types=[IntegerType(), FloatType()],
                 name="param_udf2", is_permanent=True, stage_location="@", imports=["numpy"], packages=["bla"],
                 replace=False, if_not_exists=True, parallel=8, max_batch_size=2, source_code_display=False,
                 strict=True, secure=True, external_access_integrations=["s3"], secrets={'a':'b', 'c':'d'},
                 immutable=True, comment="some udf", force_inline_code=True)

df.select(param_udf(col("A"), col("A")))

## EXPECTED UNPARSER OUTPUT

add_one = udf(<lambda>, return_type=IntegerType(), input_types=[IntegerType()])

df = session.create_dataframe([1, 2, 3], schema=["a"])

df.select(add_one(col("a")).as_("ans")).collect()

add_two = udf(<lambda [1]>, return_type=IntegerType(), input_types=[IntegerType()], name="add_two", replace=True)

df.select(call_udf("add_two", col("A")).as_("a_Ans")).collect()

param_udf = udf(<lambda [2]>, return_type=VariantType(), input_types=[IntegerType(), FloatType()], name="param_udf", is_permanent=True, stage_location="@", imports=["numpy"], packages=["bla"], replace=True, parallel=8, max_batch_size=2, source_code_display=False, strict=True, secure=True, external_access_integrations=["s3"], secrets={"a": "b"}{"c": "d"}, immutable=True, comment="some udf")

param_udf2 = udf(<lambda [3]>, return_type=VariantType(), input_types=[IntegerType(), FloatType()], name="param_udf2", is_permanent=True, stage_location="@", imports=["numpy"], packages=["bla"], if_not_exists=True, parallel=8, max_batch_size=2, source_code_display=False, strict=True, secure=True, external_access_integrations=["s3"], secrets={"a": "b"}{"c": "d"}, immutable=True, comment="some udf")

res5 = df.select(param_udf(col("A"), col("A")))

## EXPECTED ENCODED AST

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
