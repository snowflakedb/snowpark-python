## TEST CASE

from snowflake.snowpark.functions import col, udf

from snowflake.snowpark.types import IntegerType, FloatType

add_one = udf(lambda x: x + 1, return_type=IntegerType(), input_types=[IntegerType()])

df = session.create_dataframe([1, 2, 3], schema=["a"])

df.select(add_one(col("a")).as_("ans")).collect()

# call_udf should be encoded as builtin applexpr. It only works for named (& permanently) registered udfs.

add_two = udf(lambda x: x + 2, return_type=IntegerType(), input_types=[IntegerType()], name="add_two", replace=True)

df.select(call_udf("add_two", col("A")).as_("a_Ans")).collect()

param_udf = udf(lambda x, y: str(y + x**2), return_type=VariantType(), input_types=[IntegerType(), FloatType()],
                name="param_udf", is_permanent=True, stage_location="@", imports=["numpy"], packages=["bla"],
                replace=True, if_not_exists=False, parallel=8, max_batch_size=2, source_code_display=False,
                strict=True, secure=True, external_access_integrations=["s3"], secrets={'a':'b', 'c':'d'},
                immutable=True, comment="some udf", force_inline_code=True)

# Another test udf because if_not_exists and replace need to be xor.
param_udf2 = udf(lambda x, y: str(y + x**2), return_type=VariantType(), input_types=[IntegerType(), FloatType()],
                 name="param_udf2", is_permanent=True, stage_location="@", imports=["numpy"], packages=["bla"],
                 replace=False, if_not_exists=True, parallel=8, max_batch_size=2, source_code_display=False,
                 strict=True, secure=True, external_access_integrations=["s3"], secrets={'a':'b', 'c':'d'},
                 immutable=True, comment="some udf", force_inline_code=True)

df.select(param_udf(col("A"), col("A")))

## EXPECTED UNPARSER OUTPUT

add_one = udf(<lambda>, return_type=IntegerType(), input_types=[IntegerType()])

df = session.create_dataframe([1, 2, 3], schema=["a"])

df.select(add_one(col("a")).as_("ans")).collect()

add_two = udf(<lambda [1]>, return_type=IntegerType(), input_types=[IntegerType()], name="add_two", replace=True)

df.select(call_udf("add_two", col("A")).as_("a_Ans")).collect()

param_udf = udf(<lambda [2]>, return_type=VariantType(), input_types=[IntegerType()]FloatType()], name="param_udf", is_permanent=True, stage_location="@", imports=["numpy"], packages=["bla"], replace=True, parallel=8, max_batch_size=2, source_code_display=False, strict=True, secure=True, external_access_integrations=["s3"], secrets={"a": "b"}{"c": "d"}, immutable=True, comment="some udf")

param_udf2 = udf(<lambda [3]>, return_type=VariantType(), input_types=[IntegerType()]FloatType()], name="param_udf2", is_permanent=True, stage_location="@", imports=["numpy"], packages=["bla"], if_not_exists=True, parallel=8, max_batch_size=2, source_code_display=False, strict=True, secure=True, external_access_integrations=["s3"], secrets={"a": "b"}{"c": "d"}, immutable=True, comment="some udf")

res5 = df.select(param_udf(col("A"), col("A")))

## EXPECTED ENCODED AST

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
