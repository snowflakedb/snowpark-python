## TEST CASE

df = session.table("test_table")

drop1 = df.na.drop()

drop2 = df.na.drop(how="all")

drop3 = df.na.drop(how="any", thresh=42)

drop4 = df.na.drop(subset="STR")

drop5 = df.na.drop(how="all", subset=["NUM", "STR"])

drop6 = df.na.drop(how="any", thresh=42, subset=["NUM"])

fill1 = df.na.fill(42)

fill2 = df.na.fill({"NUM": 42, "STR": "abc"})

fill3 = df.na.fill(42, subset="NUM")

fill4 = df.na.fill("def", subset=["STR"])

replace1 = df.na.replace({1: 10, "three": "trzy"})

replace2 = df.na.replace([1, 2], [10, 20])

replace3 = df.na.replace(1, 10, subset=["NUM"])

## EXPECTED UNPARSER OUTPUT

df = session.table("test_table")

drop1 = df.na.drop("any")

drop2 = df.na.drop("all")

drop3 = df.na.drop("any", 42)

drop4 = df.na.drop("any", ["STR"])

drop5 = df.na.drop("all", ["NUM", "STR"])

drop6 = df.na.drop("any", 42, ["NUM"])

fill1 = df.na.fill(42)

fill2 = df.na.fill({"NUM": 42, "STR": "abc"}})

fill3 = df.na.fill(42, ["NUM"])

fill4 = df.na.fill("def", ["STR"])

replace1 = df.na.replace({1: 10, "three": "trzy"}, None)

replace2 = df.na.replace([1, 2], [10, 20])

replace3 = df.na.replace(1, 10, ["NUM"])

## EXPECTED ENCODED AST

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
