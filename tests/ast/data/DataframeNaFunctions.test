## TEST CASE

df = session.table("test_table")

drop1 = df.na.drop()

drop2 = df.na.drop(how="all")

drop3 = df.na.drop(how="any", thresh=42)

drop4 = df.na.drop(subset="STR")

drop5 = df.na.drop(how="all", subset=["NUM", "STR"])

drop6 = df.na.drop(how="any", thresh=42, subset=["NUM"])

fill1 = df.na.fill(42)

fill2 = df.na.fill({"NUM": 42, "STR": "abc"})

fill3 = df.na.fill(42, subset="NUM")

fill4 = df.na.fill("def", subset=["STR"])

replace1 = df.na.replace({1: 10, "three": "trzy"})

replace2 = df.na.replace([1, 2], [10, 20])

replace3 = df.na.replace(1, 10, subset=["NUM"])

## EXPECTED UNPARSER OUTPUT

df = session.table("test_table")

drop1 = df.na.drop("any")

drop2 = df.na.drop("all")

drop3 = df.na.drop("any", 42)

drop4 = df.na.drop("any", ["STR"])

drop5 = df.na.drop("all", ["NUM", "STR"])

drop6 = df.na.drop("any", 42, ["NUM"])

fill1 = df.na.fill(42)

fill2 = df.na.fill({"NUM": 42, "STR": "abc"}})

fill3 = df.na.fill(42, ["NUM"])

fill4 = df.na.fill("def", ["STR"])

replace1 = df.na.replace({1: 10, "three": "trzy"}, None)

replace2 = df.na.replace([1, 2], [10, 20])

replace3 = df.na.replace(1, 10, ["NUM"])

## EXPECTED ENCODED AST

<<<<<<< HEAD
CkMKQQoz4gswEg4KDAoKdGVzdF90YWJsZRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoiAggBEgQKAmRmGAEiAggBCkAKPgotkggqCgeCAgQKAggBEgNhbnkaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShcEgcKBWRyb3AxGAIiAggCCkAKPgotkggqCgeCAgQKAggBEgNhbGwaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEgcKBWRyb3AyGAMiAggDCkQKQgoxkgguCgeCAgQKAggBEgNhbnkaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShgKgIIKhIHCgVkcm9wMxgEIgIIBApHCkUKNJIIMQoHggIECgIIARIDYW55GhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYiIFCgNTVFISBwoFZHJvcDQYBSICCAUKTApKCjmSCDYKB4ICBAoCCAESA2FsbBoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGQiCgoDTlVNCgNTVFISBwoFZHJvcDUYBiICCAYKSwpJCjiSCDUKB4ICBAoCCAESA2FueRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGYiBQoDTlVNKgIIKhIHCgVkcm9wNhgHIgIIBwpeClwKS6IISAoHggIECgIIARIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGgiIboCHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGgQKhIHCgVmaWxsMRgIIgIICAqWAQqTAQqBAaIIfgoHggIECgIIARIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGoqVwooCgNOVU0SIboCHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGoQKgorCgNTVFISJLIMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGoSA2FiYxIHCgVmaWxsMhgJIgIICQplCmMKUqIITwoHggIECgIIARIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwaBQoDTlVNIiG6Ah4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsECoSBwoFZmlsbDMYCiICCAoKaApmClWiCFIKB4ICBAoCCAESGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShuGgUKA1NUUiIksgwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobhIDZGVmEgcKBWZpbGw0GAsiAggLCv4BCvsBCuYBqgjiAQoHggIECgIIARKZAQpGCiG6Ah4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShwEAESIboCHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHAQCgpPCiayDCMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShwEgV0aHJlZRIlsgwiChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUocBIEdHJ6eRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHA6H4oDHAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHASCgoIcmVwbGFjZTEYDCICCAwK0QEKzgEKuQGqCLUBCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUocipGCiG6Ah4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEAEKIboCHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHIQAkJGCiG6Ah4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEAoKIboCHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHIQFBIKCghyZXBsYWNlMhgNIgIIDQqMAQqJAQp1qghyCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodCIFCgNOVU0yIboCHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHQQATohugIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodBAKEgoKCHJlcGxhY2UzGA4iAggOEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
=======
CkMKQQoz4gswEg4KDAoKdGVzdF90YWJsZRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoiAggBEgQKAmRmGAEiAggBCkAKPgotkggqCgeCAgQKAggBEgNhbnkaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShcEgcKBWRyb3AxGAIiAggCCkAKPgotkggqCgeCAgQKAggBEgNhbGwaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEgcKBWRyb3AyGAMiAggDCkQKQgoxkgguCgeCAgQKAggBEgNhbnkaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShgKgIIKhIHCgVkcm9wMxgEIgIIBApHCkUKNJIIMQoHggIECgIIARIDYW55GhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYiIFCgNTVFISBwoFZHJvcDQYBSICCAUKTApKCjmSCDYKB4ICBAoCCAESA2FsbBoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGQiCgoDTlVNCgNTVFISBwoFZHJvcDUYBiICCAYKSwpJCjiSCDUKB4ICBAoCCAESA2FueRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGYiBQoDTlVNKgIIKhIHCgVkcm9wNhgHIgIIBwpeClwKS6IISAoHggIECgIIARIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGgiIboCHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGgQKhIHCgVmaWxsMRgIIgIICAqWAQqTAQqBAaIIfgoHggIECgIIARIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGoqVwooCgNOVU0SIboCHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGoQKgorCgNTVFISJNoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGoSA2FiYxIHCgVmaWxsMhgJIgIICQplCmMKUqIITwoHggIECgIIARIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwaBQoDTlVNIiG6Ah4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsECoSBwoFZmlsbDMYCiICCAoKaApmClWiCFIKB4ICBAoCCAESGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShuGgUKA1NUUiIk2gwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobhIDZGVmEgcKBWZpbGw0GAsiAggLCv4BCvsBCuYBqgjiAQoHggIECgIIARKZAQpGCiG6Ah4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShwEAESIboCHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHAQCgpPCibaDCMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShwEgV0aHJlZRIl2gwiChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUocBIEdHJ6eRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHA6H4oDHAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHASCgoIcmVwbGFjZTEYDCICCAwK0QEKzgEKuQGqCLUBCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUocipGCiG6Ah4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEAEKIboCHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHIQAkJGCiG6Ah4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEAoKIboCHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHIQFBIKCghyZXBsYWNlMhgNIgIIDQqMAQqJAQp1qghyCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodCIFCgNOVU0yIboCHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHQQATohugIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodBAKEgoKCHJlcGxhY2UzGA4iAggOEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
>>>>>>> 10efa4a6b (SNOW-1677859 Add table functions passthough dataframeAst)
