## TEST CASE

df = session.table("test_table")

drop1 = df.na.drop()

drop2 = df.na.drop(how="all")

drop3 = df.na.drop(how="any", thresh=42)

drop4 = df.na.drop(subset="STR")

drop5 = df.na.drop(how="all", subset=["NUM", "STR"])

drop6 = df.na.drop(how="any", thresh=42, subset=["NUM"])

fill1 = df.na.fill(42)

fill2 = df.na.fill({"NUM": 42, "STR": "abc"})

fill3 = df.na.fill(42, subset="NUM")

fill4 = df.na.fill("def", subset=["STR"])

replace1 = df.na.replace({1: 10, "three": "trzy"})

replace2 = df.na.replace([1, 2], [10, 20])

replace3 = df.na.replace(1, 10, subset=["NUM"])

## EXPECTED UNPARSER OUTPUT

df = session.table("test_table")

drop1 = df.na.drop("any")

drop2 = df.na.drop("all")

drop3 = df.na.drop("any", 42)

drop4 = df.na.drop("any", ["STR"])

drop5 = df.na.drop("all", ["NUM", "STR"])

drop6 = df.na.drop("any", 42, ["NUM"])

fill1 = df.na.fill(42)

fill2 = df.na.fill({"NUM": 42, "STR": "abc"}})

fill3 = df.na.fill(42, ["NUM"])

fill4 = df.na.fill("def", ["STR"])

replace1 = df.na.replace({1: 10, "three": "trzy"}, None)

replace2 = df.na.replace([1, 2], [10, 20])

replace3 = df.na.replace(1, 10, ["NUM"])

## EXPECTED ENCODED AST

CkMKQQozggwwEg4KDAoKdGVzdF90YWJsZRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoiAggBEgQKAmRmGAEiAggBCkAKPgotmggqCgeCAgQKAggBEgNhbnkaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShcEgcKBWRyb3AxGAIiAggCCkAKPgotmggqCgeCAgQKAggBEgNhbGwaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEgcKBWRyb3AyGAMiAggDCkQKQgoxmgguCgeCAgQKAggBEgNhbnkaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShgKgIIKhIHCgVkcm9wMxgEIgIIBApHCkUKNJoIMQoHggIECgIIARIDYW55GhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYiIFCgNTVFISBwoFZHJvcDQYBSICCAUKTApKCjmaCDYKB4ICBAoCCAESA2FsbBoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGQiCgoDTlVNCgNTVFISBwoFZHJvcDUYBiICCAYKSwpJCjiaCDUKB4ICBAoCCAESA2FueRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGYiBQoDTlVNKgIIKhIHCgVkcm9wNhgHIgIIBwpeClwKS6oISAoHggIECgIIARIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGgiIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGgQKhIHCgVmaWxsMRgIIgIICAqWAQqTAQqBAaoIfgoHggIECgIIARIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGoqVwooCgNOVU0SIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGoQKgorCgNTVFISJPoMIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGoSA2FiYxIHCgVmaWxsMhgJIgIICQplCmMKUqoITwoHggIECgIIARIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwaBQoDTlVNIiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsECoSBwoFZmlsbDMYCiICCAoKaApmClWqCFIKB4ICBAoCCAESGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShuGgUKA1NUUiIk+gwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobhIDZGVmEgcKBWZpbGw0GAsiAggLCv4BCvsBCuYBsgjiAQoHggIECgIIARKZAQpGCiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShwEAESIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHAQCgpPCib6DCMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShwEgV0aHJlZRIl+gwiChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUocBIEdHJ6eRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHA6H5IDHAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHASCgoIcmVwbGFjZTEYDCICCAwK0QEKzgEKuQGyCLUBCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUocipGCiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEAEKIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHIQAkJGCiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEAoKIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHIQFBIKCghyZXBsYWNlMhgNIgIIDQqMAQqJAQp1sghyCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodCIFCgNOVU0yIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHQQATohwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodBAKEgoKCHJlcGxhY2UzGA4iAggOEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
