## TEST CASE

df = session.table("test_table")

drop1 = df.na.drop()

drop2 = df.na.drop(how="all")

drop3 = df.na.drop(how="any", thresh=42)

drop4 = df.na.drop(subset="STR")

drop5 = df.na.drop(how="all", subset=["NUM", "STR"])

drop6 = df.na.drop(how="any", thresh=42, subset=["NUM"])

fill1 = df.na.fill(42)

fill2 = df.na.fill({"NUM": 42, "STR": "abc"})

fill3 = df.na.fill(42, subset="NUM")

fill4 = df.na.fill("def", subset=["STR"])

replace1 = df.na.replace({1: 10, "three": "trzy"})

replace2 = df.na.replace([1, 2], [10, 20])

replace3 = df.na.replace(1, 10, subset=["NUM"])

## EXPECTED UNPARSER OUTPUT

df = session.table("test_table")

drop1 = df.na.drop("any")

drop2 = df.na.drop("all")

drop3 = df.na.drop("any", 42)

drop4 = df.na.drop("any", ["STR"])

drop5 = df.na.drop("all", ["NUM", "STR"])

drop6 = df.na.drop("any", 42, ["NUM"])

fill1 = df.na.fill(42)

fill2 = df.na.fill({"NUM": 42, "STR": "abc"}})

fill3 = df.na.fill(42, ["NUM"])

fill4 = df.na.fill("def", ["STR"])

replace1 = df.na.replace({1: 10, "three": "trzy"}, None)

replace2 = df.na.replace([1, 2], [10, 20])

replace3 = df.na.replace(1, 10, ["NUM"])

## EXPECTED ENCODED AST

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
