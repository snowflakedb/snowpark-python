## TEST CASE

df = session.table("test_table")

drop1 = df.na.drop()

drop2 = df.na.drop(how="all")

drop3 = df.na.drop(how="any", thresh=42)

drop4 = df.na.drop(subset="STR")

drop5 = df.na.drop(how="all", subset=["NUM", "STR"])

drop6 = df.na.drop(how="any", thresh=42, subset=["NUM"])

fill1 = df.na.fill(42)

fill2 = df.na.fill({"NUM": 42, "STR": "abc"})

fill3 = df.na.fill(42, subset="NUM")

fill4 = df.na.fill("def", subset=["STR"])

replace1 = df.na.replace({1: 10, "three": "trzy"})

replace2 = df.na.replace([1, 2], [10, 20])

replace3 = df.na.replace(1, 10, subset=["NUM"])

## EXPECTED UNPARSER OUTPUT

df = session.table("test_table")

drop1 = df.na.drop("any")

drop2 = df.na.drop("all")

drop3 = df.na.drop("any", 42)

drop4 = df.na.drop("any", ["STR"])

drop5 = df.na.drop("all", ["NUM", "STR"])

drop6 = df.na.drop("any", 42, ["NUM"])

fill1 = df.na.fill(42)

fill2 = df.na.fill({"NUM": 42, "STR": "abc"}})

fill3 = df.na.fill(42, ["NUM"])

fill4 = df.na.fill("def", ["STR"])

replace1 = df.na.replace({1: 10, "three": "trzy"}, None)

replace2 = df.na.replace([1, 2], [10, 20])

replace3 = df.na.replace(1, 10, ["NUM"])

## EXPECTED ENCODED AST

CkMKQQozogswEg4KDAoKdGVzdF90YWJsZRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFQiAggBEgQKAmRmGB0iAggdCkAKPgot8gcqCgeKAgQKAggdEgNhbnkaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShWEgcKBWRyb3AxGB4iAggeCkAKPgot8gcqCgeKAgQKAggdEgNhbGwaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShYEgcKBWRyb3AyGB8iAggfCkQKQgox8gcuCgeKAgQKAggdEgNhbnkaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaKgIIKhIHCgVkcm9wMxggIgIIIApHCkUKNPIHMQoHigIECgIIHRIDYW55GhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXCIFCgNTVFISBwoFZHJvcDQYISICCCEKTApKCjnyBzYKB4oCBAoCCB0SA2FsbBoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4iCgoDTlVNCgNTVFISBwoFZHJvcDUYIiICCCIKSwpJCjjyBzUKB4oCBAoCCB0SA2FueRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGAiBQoDTlVNKgIIKhIHCgVkcm9wNhgjIgIIIwpeClwKS4IISAoHigIECgIIHRIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGIiIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGIQKhIHCgVmaWxsMRgkIgIIJAqWAQqTAQqBAYIIfgoHigIECgIIHRIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGQqVwooCgNOVU0SIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGQQKgorCgNTVFISJOoLIQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGQSA2FiYxIHCgVmaWxsMhglIgIIJQplCmMKUoIITwoHigIECgIIHRIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGYaBQoDTlVNIiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShmECoSBwoFZmlsbDMYJiICCCYKaApmClWCCFIKB4oCBAoCCB0SGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShoGgUKA1NUUiIk6gshChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBIDZGVmEgcKBWZpbGw0GCciAggnCv4BCvsBCuYBigjiAQoHigIECgIIHRKZAQpGCiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShqEAESIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGoQCgpPCibqCyMKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShqEgV0aHJlZRIl6gsiChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoahIEdHJ6eRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGo6H+ICHAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGoSCgoIcmVwbGFjZTEYKCICCCgK0QEKzgEKuQGKCLUBCgeKAgQKAggdGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobCpGCiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEAEKIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwQAkJGCiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEAoKIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwQFBIKCghyZXBsYWNlMhgpIgIIKQqMAQqJAQp1ighyCgeKAgQKAggdGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobiIFCgNOVU0yIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKG4QATohkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobhAKEgoKCHJlcGxhY2UzGCoiAggqEAEaERIPCg0KBWZpbmFsEAMYCSATIgQQARgV
