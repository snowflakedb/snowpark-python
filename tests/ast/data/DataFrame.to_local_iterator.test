## TEST CASE

df = session.table(tables.table1)

rows = [row for row in df.to_local_iterator()]

rows = [row for row in df.to_local_iterator(block=False)]

rows = [row for row in df.select("*").to_local_iterator()]

rows = [row for row in df.to_local_iterator(statement_params={"SF_PARTNER": "FAKE_PARTNER"})]

rows = [row for row in df.filter(df["num"] > 1).to_local_iterator(block=False)]

rows = [row for row in df.to_local_iterator(statement_params={"SF_PARTNER": "FAKE_PARTNER"}, case_sensitive=False)]


## EXPECTED UNPARSER OUTPUT

df = session.table("table1")

df.to_local_iterator()

df.to_local_iterator(block=False)

df.select("*").to_local_iterator()

df.to_local_iterator(statement_params={"SF_PARTNER": "FAKE_PARTNER"})

df.filter(df["num"] > 1).to_local_iterator(block=False)

df.to_local_iterator(statement_params={"SF_PARTNER": "FAKE_PARTNER"}, case_sensitive=False)

## EXPECTED ENCODED AST

interned_value_table {
  string_values {
    key: -1
  }
  string_values {
    key: 2
    value: "SRC_POSITION_TEST_MODE"
  }
}
body {
  bind {
    expr {
      table {
        name {
          name {
            name_flat {
              name: "table1"
            }
          }
        }
        src {
          end_column: 41
          end_line: 25
          file: 2
          start_column: 13
          start_line: 25
        }
        variant {
          session_table: true
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "df"
    }
    uid: 1
  }
}
body {
  bind {
    expr {
      dataframe_to_local_iterator {
        block: true
        case_sensitive: true
        df {
          dataframe_ref {
            id: 1
          }
        }
        src {
          end_column: 53
          end_line: 27
          file: 2
          start_column: 31
          start_line: 27
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 2
  }
}
body {
  eval {
    bind_id: 2
  }
}
body {
  bind {
    expr {
      dataframe_to_local_iterator {
        case_sensitive: true
        df {
          dataframe_ref {
            id: 1
          }
        }
        src {
          end_column: 64
          end_line: 29
          file: 2
          start_column: 31
          start_line: 29
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 3
  }
}
body {
  eval {
    bind_id: 3
  }
}
body {
  bind {
    expr {
      dataframe_select {
        cols {
          args {
            sql_expr {
              sql: "*"
              src {
                end_column: 45
                end_line: 31
                file: 2
                start_column: 31
                start_line: 31
              }
            }
          }
          variadic: true
        }
        df {
          dataframe_ref {
            id: 1
          }
        }
        src {
          end_column: 45
          end_line: 31
          file: 2
          start_column: 31
          start_line: 31
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 4
  }
}
body {
  bind {
    expr {
      dataframe_to_local_iterator {
        block: true
        case_sensitive: true
        df {
          dataframe_ref {
            id: 4
          }
        }
        src {
          end_column: 65
          end_line: 31
          file: 2
          start_column: 31
          start_line: 31
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 5
  }
}
body {
  eval {
    bind_id: 5
  }
}
body {
  bind {
    expr {
      dataframe_to_local_iterator {
        block: true
        case_sensitive: true
        df {
          dataframe_ref {
            id: 1
          }
        }
        src {
          end_column: 100
          end_line: 33
          file: 2
          start_column: 31
          start_line: 33
        }
        statement_params {
          _1: "SF_PARTNER"
          _2: "FAKE_PARTNER"
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 6
  }
}
body {
  eval {
    bind_id: 6
  }
}
body {
  bind {
    expr {
      dataframe_filter {
        condition {
          gt {
            lhs {
              dataframe_col {
                col_name: "num"
                df {
                  dataframe_ref {
                    id: 1
                  }
                }
                src {
                  end_column: 50
                  end_line: 35
                  file: 2
                  start_column: 41
                  start_line: 35
                }
              }
            }
            rhs {
              int64_val {
                src {
                  end_column: 54
                  end_line: 35
                  file: 2
                  start_column: 41
                  start_line: 35
                }
                v: 1
              }
            }
            src {
              end_column: 54
              end_line: 35
              file: 2
              start_column: 41
              start_line: 35
            }
          }
        }
        df {
          dataframe_ref {
            id: 1
          }
        }
        src {
          end_column: 55
          end_line: 35
          file: 2
          start_column: 31
          start_line: 35
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 7
  }
}
body {
  bind {
    expr {
      dataframe_to_local_iterator {
        case_sensitive: true
        df {
          dataframe_ref {
            id: 7
          }
        }
        src {
          end_column: 86
          end_line: 35
          file: 2
          start_column: 31
          start_line: 35
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 8
  }
}
body {
  eval {
    bind_id: 8
  }
}
body {
  bind {
    expr {
      dataframe_to_local_iterator {
        block: true
        df {
          dataframe_ref {
            id: 1
          }
        }
        src {
          end_column: 122
          end_line: 37
          file: 2
          start_column: 31
          start_line: 37
        }
        statement_params {
          _1: "SF_PARTNER"
          _2: "FAKE_PARTNER"
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 9
  }
}
body {
  eval {
    bind_id: 9
  }
}
client_ast_version: 1
client_language {
  python_language {
    version {
      label: "final"
      major: 3
      minor: 9
      patch: 1
    }
  }
}
client_version {
  major: 1
  minor: 30
}
id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
