## TEST CASE

df = session.table(tables.table1)

rows = [row for row in df.to_local_iterator()]

rows = [row for row in df.to_local_iterator(block=False)]

rows = [row for row in df.select("*").to_local_iterator()]

rows = [row for row in df.to_local_iterator(statement_params={"SF_PARTNER": "FAKE_PARTNER"})]

rows = [row for row in df.filter(df["num"] > 1).to_local_iterator(block=False)]

rows = [row for row in df.to_local_iterator(statement_params={"SF_PARTNER": "FAKE_PARTNER"}, case_sensitive=False)]


## EXPECTED UNPARSER OUTPUT

df = session.table("table1")

df.to_local_iterator()

df.to_local_iterator(block=False)

rows = df.select("*")

rows.to_local_iterator()

df.to_local_iterator(statement_params={"SF_PARTNER": "FAKE_PARTNER"})

rows = df.filter(df["num"] > 1)

rows.to_local_iterator(block=False)

df.to_local_iterator(statement_params={"SF_PARTNER": "FAKE_PARTNER"}, case_sensitive=False)

## EXPECTED ENCODED AST

body {
  assign {
    expr {
      sp_table {
        name {
          sp_table_name_flat {
            name: "table1"
          }
        }
        src {
          file: "SRC_POSITION_TEST_MODE"
          start_line: 25
        }
        variant {
          sp_session_table: true
        }
      }
    }
    symbol {
      value: "df"
    }
    uid: 1
    var_id {
      bitfield1: 1
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_to_local_iterator {
        block: true
        case_sensitive: true
        id {
          bitfield1: 1
        }
        src {
          file: "SRC_POSITION_TEST_MODE"
          start_line: 27
        }
      }
    }
    symbol {
    }
    uid: 2
    var_id {
      bitfield1: 2
    }
  }
}
body {
  eval {
    uid: 3
    var_id {
      bitfield1: 2
    }
  }
}
client_ast_version: 1
client_language {
  python_language {
    version {
      label: "final"
      major: 3
      minor: 9
      patch: 20
    }
  }
}
client_version {
  major: 1
  minor: 23
}

