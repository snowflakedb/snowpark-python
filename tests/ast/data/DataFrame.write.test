## TEST CASE

from snowflake.snowpark.functions import col

df = session.table("test_table")

df.write.save_as_table("saved_table")

df.write.mode("overwrite").save_as_table("saved_table", table_type="temporary")

df.write.mode("overwrite").save_as_table("saved_table", table_type="temporary", mode="ignore")

df.write.mode("truncate").save_as_table("test_destination", column_order="name", create_temp_table=False, table_type="transient", clustering_keys=['STR', col('num1')], comment="test", block=True, statement_params={"k":"v"})

stage_created_result = session.sql("create temp stage if not exists test_stage").collect()

df.write.copy_into_location("@test_stage/copied_from_dataframe")

remote_file_path = "@test_stage/copied_from_dataframe"

df.write.copy_into_location(remote_file_path, file_format_type="parquet", header=True, overwrite=True, single=True)

df.write.copy_into_location(remote_file_path, file_format_name="csv", format_type_options={"compression":"bzip2"}, block=False, INCLUDE_QUERY_ID=True, DETAILED_OUTPUT=False)

df.write.copy_into_location(remote_file_path, file_format_name="csv", format_type_options={"compression":"bzip2", "binary_format":"base64"}, block=False, INCLUDE_QUERY_ID=True, DETAILED_OUTPUT=False)

remote_file_path = "@test_stage/test.csv"

df.write.csv(remote_file_path, header=True, format_type_options={"compression":"bzip2"}, overwrite=True, single=True)

remote_file_path = "@test_stage/test.json"

df.write.json(remote_file_path, overwrite=True, single=True, format_type_options={"compression":"bzip2"},)

remote_file_path = "@test_stage/test.parquet"

df.write.parquet(remote_file_path, format_type_options={"compression":"bzip2"}, header=False, overwrite=True, single=True)

## EXPECTED UNPARSER OUTPUT

df = session.table("test_table")

df.write.save_as_table("saved_table")

df.write.mode("overwrite").save_as_table("saved_table", table_type="temporary")

df.write.mode("overwrite").save_as_table("saved_table", mode="ignore", table_type="temporary")

df.write.mode("truncate").save_as_table("test_destination", column_order="name", table_type="transient", clustering_keys=["STR", col("num1")], statement_params={"k": "v"}, comment="test")

stage_created_result = session.sql("create temp stage if not exists test_stage")

stage_created_result.collect()

df.write.copy_into_location("@test_stage/copied_from_dataframe")

df.write.copy_into_location("@test_stage/copied_from_dataframe", file_format_type="parquet", header=True, overwrite=True, single=True)

df.write.copy_into_location("@test_stage/copied_from_dataframe", file_format_name="csv", format_type_options={"compression": "bzip2"}, block=False, INCLUDE_QUERY_ID=True, DETAILED_OUTPUT=False)

df.write.copy_into_location("@test_stage/copied_from_dataframe", file_format_name="csv", format_type_options={"compression": "bzip2", "binary_format": "base64"}, block=False, INCLUDE_QUERY_ID=True, DETAILED_OUTPUT=False)

df.write.csv("@test_stage/test.csv", format_type_options={"compression": "bzip2"}, header=True, overwrite=True, single=True)

df.write.json("@test_stage/test.json", format_type_options={"compression": "bzip2"}, overwrite=True, single=True)

df.write.parquet("@test_stage/test.parquet", format_type_options={"compression": "bzip2"}, overwrite=True, single=True)

## EXPECTED ENCODED AST

<<<<<<< HEAD
CkMKQQozggwwEg4KDAoKdGVzdF90YWJsZRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwiAggBEgQKAmRmGAEiAggBCjQKMgoosgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXhIAGAIiAggCCkkKRwo96gw6CAEaBWluZGV4MgIIAkIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF5SDwoNCgtzYXZlZF90YWJsZRIAGAMiAggDCggSBggEEgIIAxABGhESDwoNCgVmaW5hbBADGAkgFCIEEAEYFw==
CjgKNgossgopCgeCAgQKAggBEgIgARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGASABgFIgIIBQpUClIKSOoMRQgBGgVpbmRleDICCAVCGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShgUg8KDQoLc2F2ZWRfdGFibGVaCXRlbXBvcmFyeRIAGAYiAggGCggSBggHEgIIBhABGhESDwoNCgVmaW5hbBADGAkgFCIEEAEYFw==
CjgKNgossgopCgeCAgQKAggBEgIgARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGISABgIIgIICApYClYKTOoMSQgBGgVpbmRleDICCAg6AhgBQhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYlIPCg0KC3NhdmVkX3RhYmxlWgl0ZW1wb3JhcnkSABgJIgIICQoIEgYIChICCAkQARoREg8KDQoFZmluYWwQAxgJIBQiBBABGBc=
CjgKNgossgopCgeCAgQKAggBEgIoARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGQSABgLIgIICwroAQrlAQraAeoM1gEIARJ7CiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShkEgNTVFIKU5IBUAoLGgkKBwoFCgNjb2waJfoMIgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGQSBG51bTEiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShkGgRuYW1lIgYKBHRlc3QyAggLQhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZEoGCgFrEgF2UhQKEgoQdGVzdF9kZXN0aW5hdGlvbloJdHJhbnNpZW50EgAYDCICCAwKCBIGCA0SAggMEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
Cm0KawpL8gtIEipjcmVhdGUgdGVtcCBzdGFnZSBpZiBub3QgZXhpc3RzIHRlc3Rfc3RhZ2UaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShmEhYKFHN0YWdlX2NyZWF0ZWRfcmVzdWx0GA4iAggOCjMKMQon0gYkCAEQARoCCA4yGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShmEgAYDyICCA8KCBIGCBASAggPEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
CjQKMgoosgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBIAGBEiAggRClQKUgpIwgxFCAE6AggRQiFAdGVzdF9zdGFnZS9jb3BpZWRfZnJvbV9kYXRhZnJhbWVSGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShoEgAYEiICCBIKCBIGCBMSAggSEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
CjQKMgoosgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIAGBQiAggUCsEBCr4BCrMBwgyvAQgBEi4KCW92ZXJ3cml0ZRIhygEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBABEisKBnNpbmdsZRIhygEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBABIgkKB3BhcnF1ZXQwAToCCBRCIUB0ZXN0X3N0YWdlL2NvcGllZF9mcm9tX2RhdGFmcmFtZVIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSABgVIgIIFQoIEgYIFhICCBUQARoREg8KDQoFZmluYWwQAxgJIBQiBBABGBc=
CjQKMgoosgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobhIAGBciAggXCt0BCtoBCs8BwgzLARI1ChBJTkNMVURFX1FVRVJZX0lEEiHKAR4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShuEAESMgoPREVUQUlMRURfT1VUUFVUEh/KARwKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShuGgUKA2NzdioUCgtjb21wcmVzc2lvbhIFYnppcDI6AggXQiFAdGVzdF9zdGFnZS9jb3BpZWRfZnJvbV9kYXRhZnJhbWVSGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShuEgAYGCICCBgKCBIGCBkSAggYEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
CjQKMgoosgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUochIAGBoiAggaCr8BCrwBCrEBygytAQgBEi4KCW92ZXJ3cml0ZRIhygEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUochABEisKBnNpbmdsZRIhygEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUochABGhQKC2NvbXByZXNzaW9uEgViemlwMiABKgIIGjIUQHRlc3Rfc3RhZ2UvdGVzdC5jc3ZCGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEgAYGyICCBsKCBIGCBwSAggbCjQKMgoosgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodhIAGB0iAggdCr4BCrsBCrAB0gysAQgBEi4KCW92ZXJ3cml0ZRIhygEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodhABEisKBnNpbmdsZRIhygEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodhABGhQKC2NvbXByZXNzaW9uEgViemlwMioCCB0yFUB0ZXN0X3N0YWdlL3Rlc3QuanNvbkIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHYSABgeIgIIHgoIEgYIHxICCB4KNAoyCiiyCiUKB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh6EgAYICICCCAKwQEKvgEKswHiDK8BCAESLgoJb3ZlcndyaXRlEiHKAR4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh6EAESKwoGc2luZ2xlEiHKAR4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh6EAEaFAoLY29tcHJlc3Npb24SBWJ6aXAyKgIIIDIYQHRlc3Rfc3RhZ2UvdGVzdC5wYXJxdWV0QhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoehIAGCEiAgghCggSBggiEgIIIRABGhESDwoNCgVmaW5hbBADGAkgFCIEEAEYFw==
=======
CkMKQQoz4gswEg4KDAoKdGVzdF90YWJsZRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwiAggBEgQKAmRmGAEiAggBCjQKMgooqgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXhIAGAIiAggCCkkKRwo9ogw6CAEaBWluZGV4MgIIAkIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF5SDwoNCgtzYXZlZF90YWJsZRIAGAMiAggDCggSBggEEgIIAxABGhESDwoNCgVmaW5hbBADGAkgFCIEEAEYFw==
CjgKNgosqgopCgeCAgQKAggBEgIgARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGASABgFIgIIBQpUClIKSKIMRQgBGgVpbmRleDICCAVCGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShgUg8KDQoLc2F2ZWRfdGFibGVaCXRlbXBvcmFyeRIAGAYiAggGCggSBggHEgIIBhABGhESDwoNCgVmaW5hbBADGAkgFCIEEAEYFw==
CjgKNgosqgopCgeCAgQKAggBEgIgARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGISABgIIgIICApYClYKTKIMSQgBGgVpbmRleDICCAg6AhgBQhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYlIPCg0KC3NhdmVkX3RhYmxlWgl0ZW1wb3JhcnkSABgJIgIICQoIEgYIChICCAkQARoREg8KDQoFZmluYWwQAxgJIBQiBBABGBc=
CjgKNgosqgopCgeCAgQKAggBEgIoARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGQSABgLIgIICwroAQrlAQraAaIM1gEIARJ7CiSyDCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShkEgNTVFIKU4oBUAoLGgkKBwoFCgNjb2waJbIMIgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGQSBG51bTEiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShkGgRuYW1lIgYKBHRlc3QyAggLQhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZEoGCgFrEgF2UhQKEgoQdGVzdF9kZXN0aW5hdGlvbloJdHJhbnNpZW50EgAYDCICCAwKCBIGCA0SAggMEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
Cm0KawpL0gtIEipjcmVhdGUgdGVtcCBzdGFnZSBpZiBub3QgZXhpc3RzIHRlc3Rfc3RhZ2UaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShmEhYKFHN0YWdlX2NyZWF0ZWRfcmVzdWx0GA4iAggOCjMKMQonygYkCAEQARoCCA4yGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShmEgAYDyICCA8KCBIGCBASAggPEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
CjQKMgooqgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBIAGBEiAggRClQKUgpI+gtFCAE6AggRQiFAdGVzdF9zdGFnZS9jb3BpZWRfZnJvbV9kYXRhZnJhbWVSGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShoEgAYEiICCBIKCBIGCBMSAggSEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
CjQKMgooqgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIAGBQiAggUCsEBCr4BCrMB+guvAQgBEi4KCW92ZXJ3cml0ZRIhwgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBABEisKBnNpbmdsZRIhwgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBABIgkKB3BhcnF1ZXQwAToCCBRCIUB0ZXN0X3N0YWdlL2NvcGllZF9mcm9tX2RhdGFmcmFtZVIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSABgVIgIIFQoIEgYIFhICCBUQARoREg8KDQoFZmluYWwQAxgJIBQiBBABGBc=
CjQKMgooqgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobhIAGBciAggXCt0BCtoBCs8B+gvLARI1ChBJTkNMVURFX1FVRVJZX0lEEiHCAR4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShuEAESMgoPREVUQUlMRURfT1VUUFVUEh/CARwKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShuGgUKA2NzdioUCgtjb21wcmVzc2lvbhIFYnppcDI6AggXQiFAdGVzdF9zdGFnZS9jb3BpZWRfZnJvbV9kYXRhZnJhbWVSGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShuEgAYGCICCBgKCBIGCBkSAggYEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
CjQKMgooqgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUocBIAGBoiAggaCvYBCvMBCugB+gvkARI1ChBJTkNMVURFX1FVRVJZX0lEEiHCAR4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShwEAESMgoPREVUQUlMRURfT1VUUFVUEh/CARwKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShwGgUKA2NzdioUCgtjb21wcmVzc2lvbhIFYnppcDIqFwoNYmluYXJ5X2Zvcm1hdBIGYmFzZTY0OgIIGkIhQHRlc3Rfc3RhZ2UvY29waWVkX2Zyb21fZGF0YWZyYW1lUhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUocBIAGBsiAggbCggSBggcEgIIGxABGhESDwoNCgVmaW5hbBADGAkgFCIEEAEYFw==
CjQKMgooqgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodBIAGB0iAggdCr8BCrwBCrEBggytAQgBEi4KCW92ZXJ3cml0ZRIhwgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodBABEisKBnNpbmdsZRIhwgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodBABGhQKC2NvbXByZXNzaW9uEgViemlwMiABKgIIHTIUQHRlc3Rfc3RhZ2UvdGVzdC5jc3ZCGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh0EgAYHiICCB4KCBIGCB8SAggeCjQKMgooqgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeBIAGCAiAgggCr4BCrsBCrABigysAQgBEi4KCW92ZXJ3cml0ZRIhwgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeBABEisKBnNpbmdsZRIhwgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoeBABGhQKC2NvbXByZXNzaW9uEgViemlwMioCCCAyFUB0ZXN0X3N0YWdlL3Rlc3QuanNvbkIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHgSABghIgIIIQoIEgYIIhICCCEKNAoyCiiqCiUKB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh8EgAYIyICCCMKwQEKvgEKswGaDK8BCAESLgoJb3ZlcndyaXRlEiHCAR4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh8EAESKwoGc2luZ2xlEiHCAR4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh8EAEaFAoLY29tcHJlc3Npb24SBWJ6aXAyKgIIIzIYQHRlc3Rfc3RhZ2UvdGVzdC5wYXJxdWV0QhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUofBIAGCQiAggkCggSBgglEgIIJBABGhESDwoNCgVmaW5hbBADGAkgFCIEEAEYFw==
>>>>>>> 80975ccea (SNOW-1737248 Fix map output in expectation tests)
