## TEST CASE

from snowflake.snowpark.functions import col

df = session.table("test_table")

df.write.save_as_table("saved_table")

df.write.mode("overwrite").save_as_table("saved_table", table_type="temporary")

df.write.mode("overwrite").save_as_table("saved_table", table_type="temporary", mode="ignore")

df.write.mode("truncate").save_as_table("test_destination", column_order="name", create_temp_table=False, table_type="transient", clustering_keys=['STR', col('num1')], comment="test", block=True, statement_params={"k":"v"})

stage_created_result = session.sql("create temp stage if not exists test_stage").collect()

df.write.copy_into_location("@test_stage/copied_from_dataframe")

remote_file_path = "@test_stage/copied_from_dataframe"

df.write.copy_into_location(remote_file_path, file_format_type="parquet", header=True, overwrite=True, single=True)

df.write.copy_into_location(remote_file_path, file_format_name="csv", format_type_options={"compression":"bzip2"}, block=False, INCLUDE_QUERY_ID=True, DETAILED_OUTPUT=False)

remote_file_path = "@test_stage/test.csv"

df.write.csv(remote_file_path, header=True, format_type_options={"compression":"bzip2"}, overwrite=True, single=True)

remote_file_path = "@test_stage/test.json"

df.write.json(remote_file_path, overwrite=True, single=True, format_type_options={"compression":"bzip2"},)

remote_file_path = "@test_stage/test.parquet"

df.write.parquet(remote_file_path, format_type_options={"compression":"bzip2"}, header=False, overwrite=True, single=True)

## EXPECTED UNPARSER OUTPUT

df = session.table("test_table")

df.write.save_as_table("saved_table")

df.write.mode("overwrite").save_as_table("saved_table", table_type="temporary")

df.write.mode("overwrite").save_as_table("saved_table", mode="ignore", table_type="temporary")

df.write.mode("truncate").save_as_table("test_destination", column_order="name", table_type="transient", clustering_keys=["STR", col("num1")], statement_params={"k": "v"}, comment="test")

stage_created_result = session.sql("create temp stage if not exists test_stage")

stage_created_result.collect()

df.write.copy_into_location("@test_stage/copied_from_dataframe")

df.write.copy_into_location("@test_stage/copied_from_dataframe", file_format_type="parquet", header=True, overwrite=True, single=True)

df.write.copy_into_location("@test_stage/copied_from_dataframe", file_format_name="csv", format_type_options={"compression": "bzip2"}, block=False, INCLUDE_QUERY_ID=True, DETAILED_OUTPUT=False)

df.write.csv("@test_stage/test.csv", format_type_options={"compression": "bzip2"}, header=True, overwrite=True, single=True)

df.write.json("@test_stage/test.json", format_type_options={"compression": "bzip2"}, overwrite=True, single=True)

df.write.parquet("@test_stage/test.parquet", format_type_options={"compression": "bzip2"}, overwrite=True, single=True)

## EXPECTED ENCODED AST

CkMKQQozogswEg4KDAoKdGVzdF90YWJsZRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFYiAggBEgQKAmRmGB0iAggdCjQKMgoo8gklCgeKAgQKAggdGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWBIAGB4iAggeCkkKRwo92gs6CAEaBWluZGV4MgIIHkIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFhSDwoNCgtzYXZlZF90YWJsZRIAGB8iAggfCggSBgggEgIIHxABGhESDwoNCgVmaW5hbBADGAggEyIEEAEYFQ==
CjgKNgos8gkpCgeKAgQKAggdEgIgARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFoSABghIgIIIQpUClIKSNoLRQgBGgVpbmRleDICCCFCGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaUg8KDQoLc2F2ZWRfdGFibGVaCXRlbXBvcmFyeRIAGCIiAggiCggSBggjEgIIIhABGhESDwoNCgVmaW5hbBADGAggEyIEEAEYFQ==
CjgKNgos8gkpCgeKAgQKAggdEgIgARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwSABgkIgIIJApYClYKTNoLSQgBGgVpbmRleDICCCQ6AhgBQhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXFIPCg0KC3NhdmVkX3RhYmxlWgl0ZW1wb3JhcnkSABglIgIIJQoIEgYIJhICCCUQARoREg8KDQoFZmluYWwQAxgIIBMiBBABGBU=
CjgKNgos8gkpCgeKAgQKAggdEgIoARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF4SABgnIgIIJwqEAgqBAgr2AdoL8gEIARKWAQok6gshChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXhIDU1RSCm56bAonCiUKBwoFCgNjb2wSGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheGiXqCyIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSheEgRudW0xIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXhoEbmFtZSIGCgR0ZXN0MgIIJ0IaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF5KBgoBaxIBdlIUChIKEHRlc3RfZGVzdGluYXRpb25aCXRyYW5zaWVudBIAGCgiAggoCggSBggpEgIIKBABGhESDwoNCgVmaW5hbBADGAggEyIEEAEYFQ==
Cm0KawpLkgtIEipjcmVhdGUgdGVtcCBzdGFnZSBpZiBub3QgZXhpc3RzIHRlc3Rfc3RhZ2UaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShgEhYKFHN0YWdlX2NyZWF0ZWRfcmVzdWx0GCoiAggqCjMKMQonogYkCAEQARoCCCoyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShgEgAYKyICCCsKCBIGCCwSAggrEAEaERIPCg0KBWZpbmFsEAMYCCATIgQQARgV
CjQKMgoo8gklCgeKAgQKAggdGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYhIAGC0iAggtClQKUgpIsgtFCAE6AggtQiFAdGVzdF9zdGFnZS9jb3BpZWRfZnJvbV9kYXRhZnJhbWVSGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShiEgAYLiICCC4KCBIGCC8SAgguEAEaERIPCg0KBWZpbmFsEAMYCCATIgQQARgV
CjQKMgoo8gklCgeKAgQKAggdGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZhIAGDAiAggwCsEBCr4BCrMBsguvAQgBEi4KCW92ZXJ3cml0ZRIhsgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZhABEisKBnNpbmdsZRIhsgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZhABIgkKB3BhcnF1ZXQwAToCCDBCIUB0ZXN0X3N0YWdlL2NvcGllZF9mcm9tX2RhdGFmcmFtZVIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGYSABgxIgIIMQoIEgYIMhICCDEQARoREg8KDQoFZmluYWwQAxgIIBMiBBABGBU=
CjQKMgoo8gklCgeKAgQKAggdGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBIAGDMiAggzCt0BCtoBCs8BsgvLARI1ChBJTkNMVURFX1FVRVJZX0lEEiGyAR4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShoEAESMgoPREVUQUlMRURfT1VUUFVUEh+yARwKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShoGgUKA2NzdioUCgtjb21wcmVzc2lvbhIFYnppcDI6AggzQiFAdGVzdF9zdGFnZS9jb3BpZWRfZnJvbV9kYXRhZnJhbWVSGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShoEgAYNCICCDQKCBIGCDUSAgg0EAEaERIPCg0KBWZpbmFsEAMYCCATIgQQARgV
CjQKMgoo8gklCgeKAgQKAggdGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIAGDYiAgg2Cr8BCrwBCrEBugutAQgBEi4KCW92ZXJ3cml0ZRIhsgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBABEisKBnNpbmdsZRIhsgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBABGhQKC2NvbXByZXNzaW9uEgViemlwMiABKgIINjIUQHRlc3Rfc3RhZ2UvdGVzdC5jc3ZCGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEgAYNyICCDcKCBIGCDgSAgg3EAEaERIPCg0KBWZpbmFsEAMYCCATIgQQARgV
CjQKMgoo8gklCgeKAgQKAggdGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUocBIAGDkiAgg5Cr4BCrsBCrABwgusAQgBEi4KCW92ZXJ3cml0ZRIhsgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUocBABEisKBnNpbmdsZRIhsgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUocBABGhQKC2NvbXByZXNzaW9uEgViemlwMioCCDkyFUB0ZXN0X3N0YWdlL3Rlc3QuanNvbkIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHASABg6IgIIOgoIEgYIOxICCDoQARoREg8KDQoFZmluYWwQAxgIIBMiBBABGBU=
CjQKMgoo8gklCgeKAgQKAggdGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodBIAGDwiAgg8CsEBCr4BCrMB0guvAQgBEi4KCW92ZXJ3cml0ZRIhsgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodBABEisKBnNpbmdsZRIhsgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodBABGhQKC2NvbXByZXNzaW9uEgViemlwMioCCDwyGEB0ZXN0X3N0YWdlL3Rlc3QucGFycXVldEIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHQSABg9IgIIPQoIEgYIPhICCD0QARoREg8KDQoFZmluYWwQAxgIIBMiBBABGBU=
EAEaERIPCg0KBWZpbmFsEAMYCCATIgQQARgV
