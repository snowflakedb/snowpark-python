## TEST CASE

from snowflake.snowpark.functions import col

df = session.table("test_table")

df.write.save_as_table("saved_table")

df.write.mode("overwrite").save_as_table("saved_table", table_type="temporary")

df.write.mode("overwrite").save_as_table("saved_table", table_type="temporary", mode="ignore")

df.write.mode("truncate").save_as_table("test_destination", column_order="name", create_temp_table=False, table_type="transient", clustering_keys=['STR', col('num1')], comment="test", block=True, statement_params={"k":"v"})

stage_created_result = session.sql("create temp stage if not exists test_stage").collect()

df.write.copy_into_location("@test_stage/copied_from_dataframe")

remote_file_path = "@test_stage/copied_from_dataframe"

df.write.copy_into_location(remote_file_path, file_format_type="parquet", header=True, overwrite=True, single=True)

df.write.copy_into_location(remote_file_path, file_format_name="csv", format_type_options={"compression":"bzip2"}, block=False, INCLUDE_QUERY_ID=True, DETAILED_OUTPUT=False)

remote_file_path = "@test_stage/test.csv"

df.write.csv(remote_file_path, header=True, format_type_options={"compression":"bzip2"}, overwrite=True, single=True)

remote_file_path = "@test_stage/test.json"

df.write.json(remote_file_path, overwrite=True, single=True, format_type_options={"compression":"bzip2"},)

remote_file_path = "@test_stage/test.parquet"

df.write.parquet(remote_file_path, format_type_options={"compression":"bzip2"}, header=False, overwrite=True, single=True)

## EXPECTED UNPARSER OUTPUT



## EXPECTED ENCODED AST

CkMKQQozwgswEg4KDAoKdGVzdF90YWJsZRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwiAggBEgQKAmRmGAEiAggBCjQKMgookgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXhIAGAIiAggCCkkKRwo98gs6CAEaBWluZGV4MgIIAkIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF5SDwoNCgtzYXZlZF90YWJsZRIAGAMiAggDCggSBggEEgIIAxABGhESDwoNCgVmaW5hbBADGAkgEyIEEAEYFQ==
CjgKNgoskgopCgeCAgQKAggBEgIgARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGASABgFIgIIBQpUClIKSPILRQgBGgVpbmRleDICCAVCGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShgUg8KDQoLc2F2ZWRfdGFibGVaCXRlbXBvcmFyeRIAGAYiAggGCggSBggHEgIIBhABGhESDwoNCgVmaW5hbBADGAkgEyIEEAEYFQ==
CjgKNgoskgopCgeCAgQKAggBEgIgARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGISABgIIgIICApYClYKTPILSQgBGgVpbmRleDICCAg6AhgBQhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYlIPCg0KC3NhdmVkX3RhYmxlWgl0ZW1wb3JhcnkSABgJIgIICQoIEgYIChICCAkQARoREg8KDQoFZmluYWwQAxgJIBMiBBABGBU=
CjgKNgoskgopCgeCAgQKAggBEgIoARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGQSABgLIgIICwqFAgqCAgr3AfIL8wEIARKXAQokggwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZBIDU1RSCm+KAWwKJxolCgcKBQoDY29sEhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZBolggwiChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZBIEbnVtMSIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGQaBG5hbWUiBgoEdGVzdDICCAtCGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShkSgYKAWsSAXZSFAoSChB0ZXN0X2Rlc3RpbmF0aW9uWgl0cmFuc2llbnQSABgMIgIIDAoIEgYIDRICCAwQARoREg8KDQoFZmluYWwQAxgJIBMiBBABGBU=
Cm0KawpLsgtIEipjcmVhdGUgdGVtcCBzdGFnZSBpZiBub3QgZXhpc3RzIHRlc3Rfc3RhZ2UaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShmEhYKFHN0YWdlX2NyZWF0ZWRfcmVzdWx0GA4iAggOCjMKMQonygYkCAEQARoCCA4yGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShmEgAYDyICCA8KCBIGCBASAggPEAEaERIPCg0KBWZpbmFsEAMYCSATIgQQARgV
CjQKMgookgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBIAGBEiAggRClQKUgpIygtFCAE6AggRQiFAdGVzdF9zdGFnZS9jb3BpZWRfZnJvbV9kYXRhZnJhbWVSGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShoEgAYEiICCBIKCBIGCBMSAggSEAEaERIPCg0KBWZpbmFsEAMYCSATIgQQARgV
CjQKMgookgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIAGBQiAggUCsEBCr4BCrMByguvAQgBEi4KCW92ZXJ3cml0ZRIhwgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBABEisKBnNpbmdsZRIhwgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBABIgkKB3BhcnF1ZXQwAToCCBRCIUB0ZXN0X3N0YWdlL2NvcGllZF9mcm9tX2RhdGFmcmFtZVIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSABgVIgIIFQoIEgYIFhICCBUQARoREg8KDQoFZmluYWwQAxgJIBMiBBABGBU=
CjQKMgookgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobhIAGBciAggXCt0BCtoBCs8BygvLARI1ChBJTkNMVURFX1FVRVJZX0lEEiHCAR4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShuEAESMgoPREVUQUlMRURfT1VUUFVUEh/CARwKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShuGgUKA2NzdioUCgtjb21wcmVzc2lvbhIFYnppcDI6AggXQiFAdGVzdF9zdGFnZS9jb3BpZWRfZnJvbV9kYXRhZnJhbWVSGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShuEgAYGCICCBgKCBIGCBkSAggYEAEaERIPCg0KBWZpbmFsEAMYCSATIgQQARgV
CjQKMgookgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUochIAGBoiAggaCr8BCrwBCrEB0gutAQgBEi4KCW92ZXJ3cml0ZRIhwgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUochABEisKBnNpbmdsZRIhwgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUochABGhQKC2NvbXByZXNzaW9uEgViemlwMiABKgIIGjIUQHRlc3Rfc3RhZ2UvdGVzdC5jc3ZCGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEgAYGyICCBsKCBIGCBwSAggbCjQKMgookgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodhIAGB0iAggdCr4BCrsBCrAB2gusAQgBEi4KCW92ZXJ3cml0ZRIhwgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodhABEisKBnNpbmdsZRIhwgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodhABGhQKC2NvbXByZXNzaW9uEgViemlwMioCCB0yFUB0ZXN0X3N0YWdlL3Rlc3QuanNvbkIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHYSABgeIgIIHgoIEgYIHxICCB4KNAoyCiiSCiUKB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh6EgAYICICCCAKwQEKvgEKswHqC68BCAESLgoJb3ZlcndyaXRlEiHCAR4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh6EAESKwoGc2luZ2xlEiHCAR4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh6EAEaFAoLY29tcHJlc3Npb24SBWJ6aXAyKgIIIDIYQHRlc3Rfc3RhZ2UvdGVzdC5wYXJxdWV0QhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoehIAGCEiAgghCggSBggiEgIIIRABGhESDwoNCgVmaW5hbBADGAkgEyIEEAEYFQ==
