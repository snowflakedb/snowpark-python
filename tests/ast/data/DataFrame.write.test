## TEST CASE

from snowflake.snowpark.functions import col

df = session.table("test_table")

df.write.save_as_table("saved_table")

df.write.mode("overwrite").save_as_table("saved_table", table_type="temporary")

df.write.mode("overwrite").save_as_table("saved_table", table_type="temporary", mode="ignore")

df.write.mode("truncate").save_as_table("test_destination", column_order="name", create_temp_table=False, table_type="transient", clustering_keys=['STR', col('num1')], comment="test", block=True, statement_params={"k":"v"})

stage_created_result = session.sql("create temp stage if not exists test_stage").collect()

df.write.copy_into_location("@test_stage/copied_from_dataframe")

remote_file_path = "@test_stage/copied_from_dataframe"

df.write.copy_into_location(remote_file_path, file_format_type="parquet", header=True, overwrite=True, single=True)

df.write.copy_into_location(remote_file_path, file_format_name="csv", format_type_options={"compression":"bzip2"}, block=False, INCLUDE_QUERY_ID=True, DETAILED_OUTPUT=False)

remote_file_path = "@test_stage/test.csv"

df.write.csv(remote_file_path, header=True, format_type_options={"compression":"bzip2"}, overwrite=True, single=True)

remote_file_path = "@test_stage/test.json"

df.write.json(remote_file_path, overwrite=True, single=True, format_type_options={"compression":"bzip2"},)

remote_file_path = "@test_stage/test.parquet"

df.write.parquet(remote_file_path, format_type_options={"compression":"bzip2"}, header=False, overwrite=True, single=True)

## EXPECTED UNPARSER OUTPUT

df = session.table("test_table")

df.write.save_as_table("saved_table")

df.write.mode("overwrite").save_as_table("saved_table", table_type="temporary")

df.write.mode("overwrite").save_as_table("saved_table", mode="ignore", table_type="temporary")

df.write.mode("truncate").save_as_table("test_destination", column_order="name", table_type="transient", clustering_keys=["STR", col("num1")], statement_params={"k": "v"}, comment="test")

stage_created_result = session.sql("create temp stage if not exists test_stage")

stage_created_result.collect()

df.write.copy_into_location("@test_stage/copied_from_dataframe")

df.write.copy_into_location("@test_stage/copied_from_dataframe", file_format_type="parquet", header=True, overwrite=True, single=True)

df.write.copy_into_location("@test_stage/copied_from_dataframe", file_format_name="csv", format_type_options={"compression": "bzip2"}, block=False, INCLUDE_QUERY_ID=True, DETAILED_OUTPUT=False)

df.write.csv("@test_stage/test.csv", format_type_options={"compression": "bzip2"}, header=True, overwrite=True, single=True)

df.write.json("@test_stage/test.json", format_type_options={"compression": "bzip2"}, overwrite=True, single=True)

df.write.parquet("@test_stage/test.parquet", format_type_options={"compression": "bzip2"}, overwrite=True, single=True)

## EXPECTED ENCODED AST

CkMKQQozwgswEg4KDAoKdGVzdF90YWJsZRoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFwiAggBEgQKAmRmGAEiAggBCjQKMgookgolCgeKAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXhIAGAIiAggCCkkKRwo9+gs6CAEaBWluZGV4MgIIAkIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKF5SDwoNCgtzYXZlZF90YWJsZRIAGAMiAggDCggSBggEEgIIAxABGhESDwoNCgVmaW5hbBADGAkgFCIEEAEYFQ==
CjgKNgoskgopCgeKAgQKAggBEgIgARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGASABgFIgIIBQpUClIKSPoLRQgBGgVpbmRleDICCAVCGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShgUg8KDQoLc2F2ZWRfdGFibGVaCXRlbXBvcmFyeRIAGAYiAggGCggSBggHEgIIBhABGhESDwoNCgVmaW5hbBADGAkgFCIEEAEYFQ==
CjgKNgoskgopCgeKAgQKAggBEgIgARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGISABgIIgIICApYClYKTPoLSQgBGgVpbmRleDICCAg6AhgBQhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYlIPCg0KC3NhdmVkX3RhYmxlWgl0ZW1wb3JhcnkSABgJIgIICQoIEgYIChICCAkQARoREg8KDQoFZmluYWwQAxgJIBQiBBABGBU=
CjgKNgoskgopCgeKAgQKAggBEgIoARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGQSABgLIgIICwqEAgqBAgr2AfoL8gEIARKWAQokigwhChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZBIDU1RSCm56bAonCiUKBwoFCgNjb2wSGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShkGiWKDCIKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShkEgRudW0xIhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZBoEbmFtZSIGCgR0ZXN0MgIIC0IaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGRKBgoBaxIBdlIUChIKEHRlc3RfZGVzdGluYXRpb25aCXRyYW5zaWVudBIAGAwiAggMCggSBggNEgIIDBABGhESDwoNCgVmaW5hbBADGAkgFCIEEAEYFQ==
Cm0KawpLsgtIEipjcmVhdGUgdGVtcCBzdGFnZSBpZiBub3QgZXhpc3RzIHRlc3Rfc3RhZ2UaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShmEhYKFHN0YWdlX2NyZWF0ZWRfcmVzdWx0GA4iAggOCjMKMQonqgYkCAEQARoCCA4yGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShmEgAYDyICCA8KCBIGCBASAggPEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgV
CjQKMgookgolCgeKAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBIAGBEiAggRClQKUgpI0gtFCAE6AggRQiFAdGVzdF9zdGFnZS9jb3BpZWRfZnJvbV9kYXRhZnJhbWVSGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShoEgAYEiICCBIKCBIGCBMSAggSEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgV
CjQKMgookgolCgeKAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBIAGBQiAggUCsEBCr4BCrMB0guvAQgBEi4KCW92ZXJ3cml0ZRIhsgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBABEisKBnNpbmdsZRIhsgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobBABIgkKB3BhcnF1ZXQwAToCCBRCIUB0ZXN0X3N0YWdlL2NvcGllZF9mcm9tX2RhdGFmcmFtZVIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGwSABgVIgIIFQoIEgYIFhICCBUQARoREg8KDQoFZmluYWwQAxgJIBQiBBABGBU=
CjQKMgookgolCgeKAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobhIAGBciAggXCt0BCtoBCs8B0gvLARI1ChBJTkNMVURFX1FVRVJZX0lEEiGyAR4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShuEAESMgoPREVUQUlMRURfT1VUUFVUEh+yARwKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShuGgUKA2NzdioUCgtjb21wcmVzc2lvbhIFYnppcDI6AggXQiFAdGVzdF9zdGFnZS9jb3BpZWRfZnJvbV9kYXRhZnJhbWVSGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShuEgAYGCICCBgKCBIGCBkSAggYEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgV
CjQKMgookgolCgeKAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUochIAGBoiAggaCr8BCrwBCrEB2gutAQgBEi4KCW92ZXJ3cml0ZRIhsgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUochABEisKBnNpbmdsZRIhsgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUochABGhQKC2NvbXByZXNzaW9uEgViemlwMiABKgIIGjIUQHRlc3Rfc3RhZ2UvdGVzdC5jc3ZCGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShyEgAYGyICCBsKCBIGCBwSAggbCjQKMgookgolCgeKAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodhIAGB0iAggdCr4BCrsBCrAB4gusAQgBEi4KCW92ZXJ3cml0ZRIhsgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodhABEisKBnNpbmdsZRIhsgEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUodhABGhQKC2NvbXByZXNzaW9uEgViemlwMioCCB0yFUB0ZXN0X3N0YWdlL3Rlc3QuanNvbkIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHYSABgeIgIIHgoIEgYIHxICCB4KNAoyCiiSCiUKB4oCBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh6EgAYICICCCAKwQEKvgEKswHyC68BCAESLgoJb3ZlcndyaXRlEiGyAR4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh6EAESKwoGc2luZ2xlEiGyAR4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSh6EAEaFAoLY29tcHJlc3Npb24SBWJ6aXAyKgIIIDIYQHRlc3Rfc3RhZ2UvdGVzdC5wYXJxdWV0QhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoehIAGCEiAgghCggSBggiEgIIIRABGhESDwoNCgVmaW5hbBADGAkgFCIEEAEYFQ==
