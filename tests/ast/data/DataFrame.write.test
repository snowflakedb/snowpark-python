## TEST CASE

from snowflake.snowpark.functions import col

df = session.table("test_table")

df.write.save_as_table("saved_table")

df.write.mode("overwrite").save_as_table("saved_table", table_type="temporary")

df.write.mode("overwrite").save_as_table("saved_table", table_type="temporary", mode="ignore")

df.write.mode("truncate").save_as_table("test_destination", column_order="name", create_temp_table=False, table_type="transient", clustering_keys=['STR', col('num1')], comment="test", block=True, statement_params={"k":"v"})

stage_created_result = session.sql("create temp stage if not exists test_stage").collect()

df.write.copy_into_location("@test_stage/copied_from_dataframe")

remote_file_path = "@test_stage/copied_from_dataframe"

df.write.copy_into_location(remote_file_path, file_format_type="parquet", header=True, overwrite=True, single=True)

df.write.copy_into_location(remote_file_path, file_format_name="csv", format_type_options={"compression":"bzip2"}, block=False, INCLUDE_QUERY_ID=True, DETAILED_OUTPUT=False)

remote_file_path = "@test_stage/test.csv"

df.write.csv(remote_file_path, header=True, format_type_options={"compression":"bzip2"}, overwrite=True, single=True)

remote_file_path = "@test_stage/test.json"

df.write.json(remote_file_path, overwrite=True, single=True, format_type_options={"compression":"bzip2"},)

remote_file_path = "@test_stage/test.parquet"

df.write.parquet(remote_file_path, format_type_options={"compression":"bzip2"}, header=False, overwrite=True, single=True)

## EXPECTED UNPARSER OUTPUT

df = session.table("test_table")

df.write.save_as_table("saved_table")

df.write.mode("overwrite").save_as_table("saved_table", table_type="temporary")

df.write.mode("overwrite").save_as_table("saved_table", mode="ignore", table_type="temporary")

df.write.mode("truncate").save_as_table("test_destination", column_order="name", table_type="transient", clustering_keys=["STR", col("num1")], statement_params={"k": "v"}, comment="test")

stage_created_result = session.sql("create temp stage if not exists test_stage")

stage_created_result.collect()

df.write.copy_into_location("@test_stage/copied_from_dataframe")

df.write.copy_into_location("@test_stage/copied_from_dataframe", file_format_type="parquet", header=True, overwrite=True, single=True)

df.write.copy_into_location("@test_stage/copied_from_dataframe", file_format_name="csv", format_type_options={"compression": "bzip2"}, block=False, INCLUDE_QUERY_ID=True, DETAILED_OUTPUT=False)

df.write.csv("@test_stage/test.csv", format_type_options={"compression": "bzip2"}, header=True, overwrite=True, single=True)

df.write.json("@test_stage/test.json", format_type_options={"compression": "bzip2"}, overwrite=True, single=True)

df.write.parquet("@test_stage/test.parquet", format_type_options={"compression": "bzip2"}, overwrite=True, single=True)

## EXPECTED ENCODED AST

CkkKRwo5sgs2Eg4KDAoKdGVzdF90YWJsZRogCCgQXBoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKFwiAggBEgQKAmRmGAEiAggBCjoKOAouggorCgeKAgQKAggBGiAIEBBeGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgoXhIAGAIiAggCCk8KTQpD6gtACAEaBWluZGV4MgIIAkIgCC0QXhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKF5SDwoNCgtzYXZlZF90YWJsZRIAGAMiAggDCggSBggEEgIIAxABGhESDwoNCgVmaW5hbBADGAsgCSIEEAEYFQ==
Cj4KPAoyggovCgeKAgQKAggBEgIgARogCBAQYBoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKGASABgFIgIIBQpaClgKTuoLSwgBGgVpbmRleDICCAVCIAhXEGAaFlNSQ19QT1NJVElPTl9URVNUX01PREUgCChgUg8KDQoLc2F2ZWRfdGFibGVaCXRlbXBvcmFyeRIAGAYiAggGCggSBggHEgIIBhABGhESDwoNCgVmaW5hbBADGAsgCSIEEAEYFQ==
Cj4KPAoyggovCgeKAgQKAggBEgIgARogCBAQYhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKGISABgIIgIICApeClwKUuoLTwgBGgVpbmRleDICCAg6AhgBQiAIZhBiGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgoYlIPCg0KC3NhdmVkX3RhYmxlWgl0ZW1wb3JhcnkSABgJIgIICQoIEgYIChICCAkQARoREg8KDQoFZmluYWwQAxgLIAkiBBABGBU=
Cj4KPAoyggovCgeKAgQKAggBEgIoARogCBAQZBoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKGQSABgLIgIICwqsAgqpAgqeAuoLmgIIARK3AQor+gsoCiEI5wEQZBoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKGQSA1NUUgqHAXqEAQovCi0KBwoFCgNjb2wSIgitARBkGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIKIBKGQaLfoLKgoiCK0BEGQaFlNSQ19QT1NJVElPTl9URVNUX01PREUgogEoZBIEbnVtMSIiCK0BEGQaFlNSQ19QT1NJVElPTl9URVNUX01PREUgogEoZBoEbmFtZSIGCgR0ZXN0MgIIC0IhCOcBEGQaFlNSQ19QT1NJVElPTl9URVNUX01PREUgCChkSgYKAWsSAXZSFAoSChB0ZXN0X2Rlc3RpbmF0aW9uWgl0cmFuc2llbnQSABgMIgIIDAoIEgYIDRICCAwQARoREg8KDQoFZmluYWwQAxgLIAkiBBABGBU=
CnMKcQpRogtOEipjcmVhdGUgdGVtcCBzdGFnZSBpZiBub3QgZXhpc3RzIHRlc3Rfc3RhZ2UaIAhYEGYaFlNSQ19QT1NJVElPTl9URVNUX01PREUgHyhmEhYKFHN0YWdlX2NyZWF0ZWRfcmVzdWx0GA4iAggOCjkKNwotqgYqCAEQARoCCA4yIAhiEGYaFlNSQ19QT1NJVElPTl9URVNUX01PREUgHyhmEgAYDyICCA8KCBIGCBASAggPEAEaERIPCg0KBWZpbmFsEAMYCyAJIgQQARgV
CjoKOAouggorCgeKAgQKAggBGiAIEBBoGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgoaBIAGBEiAggRCloKWApOwgtLCAE6AggRQiFAdGVzdF9zdGFnZS9jb3BpZWRfZnJvbV9kYXRhZnJhbWVSIAhIEGgaFlNSQ19QT1NJVElPTl9URVNUX01PREUgCChoEgAYEiICCBIKCBIGCBMSAggSEAEaERIPCg0KBWZpbmFsEAMYCyAJIgQQARgV
CjoKOAouggorCgeKAgQKAggBGiAIEBBsGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgobBIAGBQiAggUCtMBCtABCsUBwgvBAQgBEjQKCW92ZXJ3cml0ZRInsgEkCiAIexBsGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgobBABEjEKBnNpbmdsZRInsgEkCiAIexBsGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgobBABIgkKB3BhcnF1ZXQwAToCCBRCIUB0ZXN0X3N0YWdlL2NvcGllZF9mcm9tX2RhdGFmcmFtZVIgCHsQbBoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKGwSABgVIgIIFQoIEgYIFhICCBUQARoREg8KDQoFZmluYWwQAxgLIAkiBBABGBU=
CjoKOAouggorCgeKAgQKAggBGiAIEBBuGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgobhIAGBciAggXCvIBCu8BCuQBwgvgARI8ChBJTkNMVURFX1FVRVJZX0lEEiiyASUKIQi1ARBuGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgobhABEjkKD0RFVEFJTEVEX09VVFBVVBImsgEjCiEItQEQbhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKG4aBQoDY3N2KhQKC2NvbXByZXNzaW9uEgViemlwMjoCCBdCIUB0ZXN0X3N0YWdlL2NvcGllZF9mcm9tX2RhdGFmcmFtZVIhCLUBEG4aFlNSQ19QT1NJVElPTl9URVNUX01PREUgCChuEgAYGCICCBgKCBIGCBkSAggYEAEaERIPCg0KBWZpbmFsEAMYCyAJIgQQARgV
CjoKOAouggorCgeKAgQKAggBGiAIEBByGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgochIAGBoiAggaCtEBCs4BCsMBygu/AQgBEjQKCW92ZXJ3cml0ZRInsgEkCiAIfRByGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgochABEjEKBnNpbmdsZRInsgEkCiAIfRByGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgochABGhQKC2NvbXByZXNzaW9uEgViemlwMiABKgIIGjIUQHRlc3Rfc3RhZ2UvdGVzdC5jc3ZCIAh9EHIaFlNSQ19QT1NJVElPTl9URVNUX01PREUgCChyEgAYGyICCBsKCBIGCBwSAggbCjoKOAouggorCgeKAgQKAggBGiAIEBB2GhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgodhIAGB0iAggdCtABCs0BCsIB0gu+AQgBEjQKCW92ZXJ3cml0ZRInsgEkCiAIchB2GhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgodhABEjEKBnNpbmdsZRInsgEkCiAIchB2GhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgodhABGhQKC2NvbXByZXNzaW9uEgViemlwMioCCB0yFUB0ZXN0X3N0YWdlL3Rlc3QuanNvbkIgCHIQdhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKHYSABgeIgIIHgoIEgYIHxICCB4KOgo4Ci6CCisKB4oCBAoCCAEaIAgQEHoaFlNSQ19QT1NJVElPTl9URVNUX01PREUgCCh6EgAYICICCCAK1gEK0wEKyAHiC8QBCAESNQoJb3ZlcndyaXRlEiiyASUKIQiCARB6GhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgoehABEjIKBnNpbmdsZRIosgElCiEIggEQehoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKHoQARoUCgtjb21wcmVzc2lvbhIFYnppcDIqAgggMhhAdGVzdF9zdGFnZS90ZXN0LnBhcnF1ZXRCIQiCARB6GhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgoehIAGCEiAgghCggSBggiEgIIIRABGhESDwoNCgVmaW5hbBADGAsgCSIEEAEYFQ==
