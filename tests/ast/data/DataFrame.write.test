## TEST CASE

from snowflake.snowpark.functions import col

df = session.table(tables.table1)

df.write.save_as_table("saved_table")

df.write.mode("overwrite").save_as_table("saved_table", table_type="temporary")

df.write.mode("overwrite").save_as_table("saved_table", table_type="temporary", mode="ignore")

df.write.mode("truncate").save_as_table("test_destination", column_order="name", create_temp_table=False, table_type="transient", clustering_keys=['STR', col('num1')], comment="test", block=True, statement_params={"k":"v"})

stage_created_result = session.sql("create temp stage if not exists test_stage").collect()

df.write.copy_into_location("@test_stage/copied_from_dataframe")

remote_file_path = "@test_stage/copied_from_dataframe"

df.write.copy_into_location(remote_file_path, file_format_type="parquet", header=True, overwrite=True, single=True)

df.write.copy_into_location(remote_file_path, file_format_name="csv", format_type_options={"compression":"bzip2"}, block=False, INCLUDE_QUERY_ID=True, DETAILED_OUTPUT=False)

df.write.copy_into_location(remote_file_path, file_format_name="csv", format_type_options={"compression":"bzip2", "binary_format":"base64"}, block=False, INCLUDE_QUERY_ID=True, DETAILED_OUTPUT=False)

remote_file_path = "@test_stage/test.csv"

df.write.csv(remote_file_path, header=True, format_type_options={"compression":"bzip2"}, overwrite=True, single=True)

remote_file_path = "@test_stage/test.json"

df.write.json(remote_file_path, overwrite=True, single=True, format_type_options={"compression":"bzip2"},)

remote_file_path = "@test_stage/test.parquet"

df.write.parquet(remote_file_path, format_type_options={"compression":"bzip2"}, header=False, overwrite=True, single=True)

## EXPECTED UNPARSER OUTPUT

df = session.table("table1")

df.write.save_as_table("saved_table")

df.write.mode("overwrite").save_as_table("saved_table", table_type="temporary")

df.write.mode("overwrite").save_as_table("saved_table", mode="ignore", table_type="temporary")

df.write.mode("truncate").save_as_table("test_destination", column_order="name", table_type="transient", clustering_keys=["STR", col("num1")], statement_params={"k": "v"}, comment="test")

stage_created_result = session.sql("create temp stage if not exists test_stage")

stage_created_result.collect()

df.write.copy_into_location("@test_stage/copied_from_dataframe")

df.write.copy_into_location("@test_stage/copied_from_dataframe", file_format_type="parquet", header=True, overwrite=True, single=True)

df.write.copy_into_location("@test_stage/copied_from_dataframe", file_format_name="csv", format_type_options={"compression": "bzip2"}, block=False, INCLUDE_QUERY_ID=True, DETAILED_OUTPUT=False)

df.write.copy_into_location("@test_stage/copied_from_dataframe", file_format_name="csv", format_type_options={"compression": "bzip2", "binary_format": "base64"}, block=False, INCLUDE_QUERY_ID=True, DETAILED_OUTPUT=False)

df.write.csv("@test_stage/test.csv", format_type_options={"compression": "bzip2"}, header=True, overwrite=True, single=True)

df.write.json("@test_stage/test.json", format_type_options={"compression": "bzip2"}, overwrite=True, single=True)

df.write.parquet("@test_stage/test.parquet", format_type_options={"compression": "bzip2"}, overwrite=True, single=True)

## EXPECTED ENCODED AST

Cj8KPQovggwsEgoKCAoGdGFibGUxGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoSCICCAESBAoCZGYYASICCAEKNAoyCiiyCiUKB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShKEgAYAiICCAIKSQpHCj3qDDoIARoFaW5kZXgyAggCQhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoSlIPCg0KC3NhdmVkX3RhYmxlEgAYAyICCAMKCBIGCAQSAggDEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
CjgKNgossgopCgeCAgQKAggBEgIgARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEwSABgFIgIIBQpUClIKSOoMRQgBGgVpbmRleDICCAVCGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShMUg8KDQoLc2F2ZWRfdGFibGVaCXRlbXBvcmFyeRIAGAYiAggGCggSBggHEgIIBhABGhESDwoNCgVmaW5hbBADGAkgFCIEEAEYFw==
CjgKNgossgopCgeCAgQKAggBEgIgARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKE4SABgIIgIICApYClYKTOoMSQgBGgVpbmRleDICCAg6AhgBQhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoTlIPCg0KC3NhdmVkX3RhYmxlWgl0ZW1wb3JhcnkSABgJIgIICQoIEgYIChICCAkQARoREg8KDQoFZmluYWwQAxgJIBQiBBABGBc=
CjgKNgossgopCgeCAgQKAggBEgIoARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFASABgLIgIICwroAQrlAQraAeoM1gEIARJ7CiT6DCEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShQEgNTVFIKU5IBUAoLGgkKBwoFCgNjb2waJfoMIgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFASBG51bTEiGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShQGgRuYW1lIgYKBHRlc3QyAggLQhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoUEoGCgFrEgF2UhQKEgoQdGVzdF9kZXN0aW5hdGlvbloJdHJhbnNpZW50EgAYDCICCAwKCBIGCA0SAggMEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
Cm0KawpL8gtIEipjcmVhdGUgdGVtcCBzdGFnZSBpZiBub3QgZXhpc3RzIHRlc3Rfc3RhZ2UaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShSEhYKFHN0YWdlX2NyZWF0ZWRfcmVzdWx0GA4iAggOCjMKMQon0gYkCAEQARoCCA4yGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShSEgAYDyICCA8KCBIGCBASAggPEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
CjQKMgoosgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoVBIAGBEiAggRClQKUgpIwgxFCAE6AggRQiFAdGVzdF9zdGFnZS9jb3BpZWRfZnJvbV9kYXRhZnJhbWVSGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShUEgAYEiICCBIKCBIGCBMSAggSEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
CjQKMgoosgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWBIAGBQiAggUCsEBCr4BCrMBwgyvAQgBEi4KCW92ZXJ3cml0ZRIhygEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWBABEisKBnNpbmdsZRIhygEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWBABIgkKB3BhcnF1ZXQwAToCCBRCIUB0ZXN0X3N0YWdlL2NvcGllZF9mcm9tX2RhdGFmcmFtZVIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKFgSABgVIgIIFQoIEgYIFhICCBUQARoREg8KDQoFZmluYWwQAxgJIBQiBBABGBc=
CjQKMgoosgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoWhIAGBciAggXCt0BCtoBCs8BwgzLARI1ChBJTkNMVURFX1FVRVJZX0lEEiHKAR4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEAESMgoPREVUQUlMRURfT1VUUFVUEh/KARwKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaGgUKA2NzdioUCgtjb21wcmVzc2lvbhIFYnppcDI6AggXQiFAdGVzdF9zdGFnZS9jb3BpZWRfZnJvbV9kYXRhZnJhbWVSGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEgAYGCICCBgKCBIGCBkSAggYEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
CjQKMgoosgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXBIAGBoiAggaCvYBCvMBCugBwgzkARI1ChBJTkNMVURFX1FVRVJZX0lEEiHKAR4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShcEAESMgoPREVUQUlMRURfT1VUUFVUEh/KARwKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShcGgUKA2NzdioUCgtjb21wcmVzc2lvbhIFYnppcDIqFwoNYmluYXJ5X2Zvcm1hdBIGYmFzZTY0OgIIGkIhQHRlc3Rfc3RhZ2UvY29waWVkX2Zyb21fZGF0YWZyYW1lUhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoXBIAGBsiAggbCggSBggcEgIIGxABGhESDwoNCgVmaW5hbBADGAkgFCIEEAEYFw==
CjQKMgoosgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYBIAGB0iAggdCr8BCrwBCrEBygytAQgBEi4KCW92ZXJ3cml0ZRIhygEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYBABEisKBnNpbmdsZRIhygEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYBABGhQKC2NvbXByZXNzaW9uEgViemlwMiABKgIIHTIUQHRlc3Rfc3RhZ2UvdGVzdC5jc3ZCGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShgEgAYHiICCB4KCBIGCB8SAggeCjQKMgoosgolCgeCAgQKAggBGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZBIAGCAiAgggCr4BCrsBCrAB0gysAQgBEi4KCW92ZXJ3cml0ZRIhygEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZBABEisKBnNpbmdsZRIhygEeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoZBABGhQKC2NvbXByZXNzaW9uEgViemlwMioCCCAyFUB0ZXN0X3N0YWdlL3Rlc3QuanNvbkIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGQSABghIgIIIQoIEgYIIhICCCEKNAoyCiiyCiUKB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShoEgAYIyICCCMKwQEKvgEKswHiDK8BCAESLgoJb3ZlcndyaXRlEiHKAR4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShoEAESKwoGc2luZ2xlEiHKAR4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShoEAEaFAoLY29tcHJlc3Npb24SBWJ6aXAyKgIIIzIYQHRlc3Rfc3RhZ2UvdGVzdC5wYXJxdWV0QhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoaBIAGCQiAggkCggSBgglEgIIJBABGhESDwoNCgVmaW5hbBADGAkgFCIEEAEYFw==
