## TEST CASE

from snowflake.snowpark.functions import sproc

from snowflake.snowpark import DataFrame

from snowflake.snowpark.types import IntegerType, StructField, StructType

session.add_packages('snowflake-snowpark-python')

import numpy as np

import math

# Example 1: Use stored procedure to copy data from one table to another.
def my_copy(session: snowflake.snowpark.Session, from_table: str, to_table: str, count: int) -> str:
    session.table(from_table).limit(count).write.save_as_table(to_table, mode="overwrite", table_type="temporary")
    return "SUCCESS"

my_copy_sp = session.sproc.register(my_copy, name="my_copy_sp", replace=True, comment="This is a comment")
_ = session.sql("create or replace temp table test_from(test_str varchar) as select randstr(20, random()) from table (generator(rowCount => 100))").collect()

# call using sql
from_df = session.create_dataframe([1, 2, 3], schema=["a"])
from_df.write.save_as_table("test_from", mode="overwrite", table_type="temporary")
to_df = session.create_dataframe([-1, -2], schema=["a"])
to_df.write.save_as_table("test_to", mode="overwrite", table_type="temporary")
session.sql("call my_copy_sp('test_from', 'test_to', 10)").collect()
session.table("test_to").count()

# call using session.call API
_ = session.sql("drop table if exists test_to").collect()
session.call("my_copy_sp", "test_from", "test_to", 10)
session.table("test_to").count()

# Example 2: Create a temporary stored procedure from a lambda and call it.
add_one_sp = sproc(
    lambda session_, x: session_.sql(f"select {x} + 1").collect(),
    return_type=IntegerType(),
    input_types=[IntegerType()],
    parallel=2,
    execute_as="caller",
)
add_one_sp(1)

# Example 3: Create a stored procedure with type hints and ``@sproc`` decorator and call it.
def add_sp(session_: snowflake.snowpark.Session, x: int, y: int) -> int:
    return session_.sql(f"select {x} + {y}").collect()
add_sp(session, 1, 2)

# Example 4: Create a permanent stored procedure with a name and call it in SQL.
_ = session.sql("create or replace temp stage mystage").collect()
_ = session.sproc.register(
     lambda session_, x, y: session_.sql(f"SELECT {x} * {y}").collect()[0][0],
     return_type=IntegerType(),
     input_types=[IntegerType(), IntegerType()],
     is_permanent=True,
     name="mul_sp",
     replace=True,
     stage_location="@mystage",
)
session.sql("call mul_sp(5, 6)").collect()

# skip stored proc creation if it already exists
_ = session.sproc.register(
     lambda session_, x, y: session_.sql(f"SELECT {x} * {y} + 1").collect()[0][0],
     return_type=IntegerType(),
     input_types=[IntegerType(), IntegerType()],
     is_permanent=True,
     name="mul_sp",
     if_not_exists=True,
     stage_location="@mystage",
)
session.sql("call mul_sp(5, 6)").collect()

# overwrite stored procedure
_ = session.sproc.register(
    lambda session_, x, y: session_.sql(f"SELECT {x} * {y} + 1").collect()[0][0],
    return_type=IntegerType(),
    input_types=[IntegerType(), IntegerType()],
    is_permanent=True,
    name="mul_sp",
    replace=True,
    stage_location="@mystage",
    strict=True,
    external_access_integrations=["s3"],
    secrets={"a": "b", "c": "d"},
)
session.sql("call mul_sp(5, 6)").collect()

# Example 5: Create a stored procedure with stored-procedure-level packages and call it.
@sproc(packages=["snowflake-snowpark-python", "numpy"], statement_params={"SF_PARTNER": "FAKE_PARTNER"})
def sin_sp(_: snowflake.snowpark.Session, x: float) -> float:
    return np.sin(x)
sin_sp(0.5 * math.pi)

# Example 6: Creating a table stored procedure with return type while defining return columns and datatypes.
@sproc(return_type=StructType([StructField("A", IntegerType()), StructField("B", IntegerType())]), input_types=[IntegerType(), IntegerType()])
def select_sp(session_, x, y):
    return session_.sql(f"SELECT {x} as A, {y} as B")
select_sp(1, 2).show()

# Example 7: Creating a table stored procedure with return type with free return columns.
@sproc(return_type=StructType(), input_types=[IntegerType(), IntegerType()], source_code_display=False, imports=[])
def select_sp(session_, x, y):
    return session_.sql(f"SELECT {x} as A, {y} as B")
select_sp(1, 2).show()

# Example 8: Creating a table stored procedure using implicit type hints.
@sproc
def select_sp(session_: snowflake.snowpark.Session, x: int, y: int) -> DataFrame:
    return session_.sql(f"SELECT {x} as A, {y} as B")
select_sp(1, 2).show()


## EXPECTED UNPARSER OUTPUT

my_copy_sp = sproc(my_copy, name="my_copy_sp", replace=True, comment="This is a comment")

_ = session.sql("create or replace temp table test_from(test_str varchar) as select randstr(20, random()) from table (generator(rowCount => 100))")

_.collect()

from_df = session.create_dataframe([1, 2, 3], schema=["a"])

from_df.write.save_as_table("test_from", mode="overwrite", table_type="temporary")

to_df = session.create_dataframe([-1, -2], schema=["a"])

to_df.write.save_as_table("test_to", mode="overwrite", table_type="temporary")

session.sql("call my_copy_sp('test_from', 'test_to', 10)").collect()

session.table("test_to").count()

_ = session.sql("drop table if exists test_to")

_.collect()

res11 = session.call("my_copy_sp", "test_from", "test_to", 10)

session.table("test_from").limit(10, 0).write.save_as_table("test_to", mode="overwrite", table_type="temporary")

my_copy_sp("test_from", "test_to", 10)

session.table("test_to").count()

add_one_sp = sproc(<lambda [1]>, return_type=IntegerType(), input_types=[IntegerType()], parallel=2, execute_as="caller")

session.sql("select 1 + 1").collect()

add_one_sp(1)

session.sql("select 1 + 2").collect()

_ = session.sql("create or replace temp stage mystage")

_.collect()

_ = sproc(<lambda [2]>, return_type=IntegerType(), input_types=[IntegerType(), IntegerType()], name="mul_sp", is_permanent=True, stage_location="@mystage", replace=True)

session.sql("call mul_sp(5, 6)").collect()

_ = sproc(<lambda [3]>, return_type=IntegerType(), input_types=[IntegerType(), IntegerType()], name="mul_sp", is_permanent=True, stage_location="@mystage", if_not_exists=True)

session.sql("call mul_sp(5, 6)").collect()

_ = sproc(<lambda [4]>, return_type=IntegerType(), input_types=[IntegerType(), IntegerType()], name="mul_sp", is_permanent=True, stage_location="@mystage", replace=True, strict=True, external_access_integrations=["s3"], secrets={"a": "b", "c": "d"})

session.sql("call mul_sp(5, 6)").collect()

sproc(sin_sp, , statement_params={"SF_PARTNER": "FAKE_PARTNER"}packages=["snowflake-snowpark-python", "numpy"])(1.5707963267948966)

res34 = sproc(select_sp, return_type=StructType([StructField("A", IntegerType(), nullable=True), StructField("B", IntegerType(), nullable=True)], structured=False), input_types=[IntegerType(), IntegerType()])(1, 2)

session.sql("SELECT 1 as A, 2 as B").show()

res38 = sproc(select_sp, return_type=StructType([], structured=False), input_types=[IntegerType(), IntegerType()], source_code_display=False)(1, 2)

session.sql("SELECT 1 as A, 2 as B").show()

res42 = sproc(select_sp)(1, 2)

session.sql("SELECT 1 as A, 2 as B").show()

## EXPECTED ENCODED AST

{
  "body": [
    {
      "assign": {
        "expr": {
          "stored_procedure": {
            "comment": "This is a comment",
            "execute_as": "owner",
            "func": {
              "name": "my_copy"
            },
            "name": {
              "fn_name_flat": {
                "name": "my_copy_sp"
              }
            },
            "parallel": "4",
            "replace": true,
            "source_code_display": true,
            "src": {
              "file": "SRC_POSITION_TEST_MODE",
              "start_line": "107"
            }
          }
        },
        "symbol": "my_copy_sp",
        "uid": "1",
        "var_id": {
          "bitfield1": "1"
        }
      }
    },
    {
      "assign": {
        "expr": {
          "sp_sql": {
            "query": "create or replace temp table test_from(test_str varchar) as select randstr(20, random()) from table (generator(rowCount => 100))",
            "src": {
              "file": "SRC_POSITION_TEST_MODE",
              "start_line": "108"
            }
          }
        },
        "symbol": "_",
        "uid": "2",
        "var_id": {
          "bitfield1": "2"
        }
      }
    },
    {
      "assign": {
        "expr": {
          "sp_dataframe_collect": {
            "block": true,
            "case_sensitive": true,
            "id": {
              "bitfield1": "2"
            },
            "src": {
              "file": "SRC_POSITION_TEST_MODE",
              "start_line": "108"
            }
          }
        },
        "symbol": "",
        "uid": "3",
        "var_id": {
          "bitfield1": "3"
        }
      }
    },
    {
      "eval": {
        "uid": "4",
        "var_id": {
          "bitfield1": "3"
        }
      }
    },
    {
      "assign": {
        "expr": {
          "sp_create_dataframe": {
            "data": {
              "sp_dataframe_data__list": {
                "vs": [
                  {
                    "int64_val": {
                      "src": {
                        "file": "SRC_POSITION_TEST_MODE",
                        "start_line": "111"
                      },
                      "v": "1"
                    }
                  },
                  {
                    "int64_val": {
                      "src": {
                        "file": "SRC_POSITION_TEST_MODE",
                        "start_line": "111"
                      },
                      "v": "2"
                    }
                  },
                  {
                    "int64_val": {
                      "src": {
                        "file": "SRC_POSITION_TEST_MODE",
                        "start_line": "111"
                      },
                      "v": "3"
                    }
                  }
                ]
              }
            },
            "schema": {
              "sp_dataframe_schema__list": {
                "vs": [
                  "a"
                ]
              }
            },
            "src": {
              "file": "SRC_POSITION_TEST_MODE",
              "start_line": "111"
            }
          }
        },
        "symbol": "from_df",
        "uid": "5",
        "var_id": {
          "bitfield1": "5"
        }
      }
    },
    {
      "assign": {
        "expr": {
          "sp_dataframe_write": {
            "df": {
              "sp_dataframe_ref": {
                "id": {
                  "bitfield1": "5"
                }
              }
            },
            "src": {
              "file": "SRC_POSITION_TEST_MODE",
              "start_line": "112"
            }
          }
        },
        "symbol": "",
        "uid": "6",
        "var_id": {
          "bitfield1": "6"
        }
      }
    },
    {
      "assign": {
        "expr": {
          "sp_write_table": {
            "block": true,
            "column_order": "index",
            "id": {
              "bitfield1": "6"
            },
            "mode": {
              "sp_save_mode_overwrite": true
            },
            "src": {
              "file": "SRC_POSITION_TEST_MODE",
              "start_line": "112"
            },
            "table_name": {
              "sp_table_name_flat": {
                "name": "test_from"
              }
            },
            "table_type": "temporary"
          }
        },
        "symbol": "",
        "uid": "7",
        "var_id": {
          "bitfield1": "7"
        }
      }
    },
    {
      "eval": {
        "uid": "8",
        "var_id": {
          "bitfield1": "7"
        }
      }
    }
  ],
  "client_ast_version": "1",
  "client_language": {
    "python_language": {
      "version": {
        "label": "final",
        "major": "3",
        "minor": "9",
        "patch": "20"
      }
    }
  },
  "client_version": {
    "major": "1",
    "minor": "23"
  }
}
