## TEST CASE

import snowflake.snowpark

from snowflake.snowpark.functions import sproc

from snowflake.snowpark import DataFrame

from snowflake.snowpark.types import IntegerType, StructField, StructType

session.add_packages('snowflake-snowpark-python')

import numpy as np

import math

# Example 1: Use stored procedure to copy data from one table to another.
def my_copy(session: snowflake.snowpark.Session, from_table: str, to_table: str, count: int) -> str:
    session.table(from_table).limit(count).write.save_as_table(to_table, mode="overwrite", table_type="temporary")
    return "SUCCESS"

my_copy_sp = session.sproc.register(my_copy, name="my_copy_sp", replace=True, comment="This is a comment")
_ = session.sql("create or replace temp table test_from(test_str varchar) as select randstr(20, random()) from table (generator(rowCount => 100))").collect()

# call using sql
from_df = session.create_dataframe([1, 2, 3], schema=["a"])
from_df.write.save_as_table("test_from", mode="overwrite", table_type="temporary")
to_df = session.create_dataframe([-1, -2], schema=["a"])
to_df.write.save_as_table("test_to", mode="overwrite", table_type="temporary")
session.sql("call my_copy_sp('test_from', 'test_to', 10)").collect()
session.table("test_to").count()

# call using session.call API
_ = session.sql("drop table if exists test_to").collect()
session.call("my_copy_sp", "test_from", "test_to", 10)
session.table("test_to").count()

# Example 2: Create a temporary stored procedure from a lambda and call it.
add_one_sp = sproc(
    lambda session_, x: session_.sql(f"select {x} + 1").collect(),
    return_type=IntegerType(),
    input_types=[IntegerType()],
    parallel=2,
    execute_as="caller",
)
add_one_sp(1)

# Example 3: Create a stored procedure with type hints and ``@sproc`` decorator and call it.
def add_sp(session_: snowflake.snowpark.Session, x: int, y: int) -> int:
    return session_.sql(f"select {x} + {y}").collect()
add_sp(session, 1, 2)

# Example 4: Create a permanent stored procedure with a name and call it in SQL.
_ = session.sql("create or replace temp stage mystage").collect()
_ = session.sproc.register(
     lambda session_, x, y: session_.sql(f"SELECT {x} * {y}").collect()[0][0],
     return_type=IntegerType(),
     input_types=[IntegerType(), IntegerType()],
     is_permanent=True,
     name="mul_sp",
     replace=True,
     stage_location="@mystage",
)
session.sql("call mul_sp(5, 6)").collect()

# skip stored proc creation if it already exists
_ = session.sproc.register(
     lambda session_, x, y: session_.sql(f"SELECT {x} * {y} + 1").collect()[0][0],
     return_type=IntegerType(),
     input_types=[IntegerType(), IntegerType()],
     is_permanent=True,
     name="mul_sp",
     if_not_exists=True,
     stage_location="@mystage",
)
session.sql("call mul_sp(5, 6)").collect()

# overwrite stored procedure
_ = session.sproc.register(
    lambda session_, x, y: session_.sql(f"SELECT {x} * {y} + 1").collect()[0][0],
    return_type=IntegerType(),
    input_types=[IntegerType(), IntegerType()],
    is_permanent=True,
    name="mul_sp",
    replace=True,
    stage_location="@mystage",
    strict=True,
    external_access_integrations=["s3"],
    secrets={"a": "b", "c": "d"},
)
session.sql("call mul_sp(5, 6)").collect()

# Example 5: Create a stored procedure with stored-procedure-level packages and call it.
@sproc(packages=["snowflake-snowpark-python", "numpy"], statement_params={"SF_PARTNER": "FAKE_PARTNER"})
def sin_sp(_: snowflake.snowpark.Session, x: float) -> float:
    return np.sin(x)
sin_sp(0.5 * math.pi)

# Example 6: Creating a table stored procedure with return type while defining return columns and datatypes.
@sproc(return_type=StructType([StructField("A", IntegerType()), StructField("B", IntegerType())]), input_types=[IntegerType(), IntegerType()])
def select_sp(session_, x, y):
    return session_.sql(f"SELECT {x} as A, {y} as B")
select_sp(1, 2).show()

# Example 7: Creating a table stored procedure with return type with free return columns.
@sproc(return_type=StructType(), input_types=[IntegerType(), IntegerType()], source_code_display=False, imports=[])
def select_sp(session_, x, y):
    return session_.sql(f"SELECT {x} as A, {y} as B")
select_sp(1, 2).show()

# Example 8: Creating a table stored procedure using implicit type hints.
@sproc
def select_sp(session_: snowflake.snowpark.Session, x: int, y: int) -> DataFrame:
    return session_.sql(f"SELECT {x} as A, {y} as B")
select_sp(1, 2).show()


## EXPECTED UNPARSER OUTPUT

my_copy_sp = sproc(my_copy, name="my_copy_sp", replace=True, comment="This is a comment")

_ = session.sql("create or replace temp table test_from(test_str varchar) as select randstr(20, random()) from table (generator(rowCount => 100))")

_.collect()

from_df = session.create_dataframe([1, 2, 3], schema=["a"])

from_df.write.save_as_table("test_from", mode="overwrite", table_type="temporary")

to_df = session.create_dataframe([-1, -2], schema=["a"])

to_df.write.save_as_table("test_to", mode="overwrite", table_type="temporary")

session.sql("call my_copy_sp('test_from', 'test_to', 10)").collect()

session.table("test_to").count()

_ = session.sql("drop table if exists test_to")

_.collect()

res11 = session.call("my_copy_sp", "test_from", "test_to", 10)

session.table("test_from").limit(10, 0).write.save_as_table("test_to", mode="overwrite", table_type="temporary")

my_copy_sp("test_from", "test_to", 10)

session.table("test_to").count()

add_one_sp = sproc(<lambda [1]>, return_type=IntegerType(), input_types=[IntegerType()], parallel=2, execute_as="caller")

session.sql("select 1 + 1").collect()

add_one_sp(1)

session.sql("select 1 + 2").collect()

_ = session.sql("create or replace temp stage mystage")

_.collect()

_ = sproc(<lambda [2]>, return_type=IntegerType(), input_types=[IntegerType()]IntegerType()], name="mul_sp", is_permanent=True, stage_location="@mystage", replace=True)

session.sql("call mul_sp(5, 6)").collect()

_ = sproc(<lambda [3]>, return_type=IntegerType(), input_types=[IntegerType()]IntegerType()], name="mul_sp", is_permanent=True, stage_location="@mystage", if_not_exists=True)

session.sql("call mul_sp(5, 6)").collect()

_ = sproc(<lambda [4]>, return_type=IntegerType(), input_types=[IntegerType()]IntegerType()], name="mul_sp", is_permanent=True, stage_location="@mystage", replace=True, strict=True, external_access_integrations=["s3"], secrets={"a": "b"}{"c": "d"})

session.sql("call mul_sp(5, 6)").collect()

sproc(sin_sp, , statement_params={"SF_PARTNER": "FAKE_PARTNER"}packages=["snowflake-snowpark-python"]"numpy"])(1.5707963267948966)

res34 = sproc(select_sp, return_type=StructType([StructField("A", IntegerType(), nullable=True), StructField("B", IntegerType(), nullable=True)], structured=False), input_types=[IntegerType()]IntegerType()])(1, 2)

session.sql("SELECT 1 as A, 2 as B").show()

res38 = sproc(select_sp, return_type=StructType([], structured=False), input_types=[IntegerType()]IntegerType()], source_code_display=False)(1, 2)

session.sql("SELECT 1 as A, 2 as B").show()

res42 = sproc(select_sp)(1, 2)

session.sql("SELECT 1 as A, 2 as B").show()

## EXPECTED ENCODED AST

CnwKegpkqgxhChMKEVRoaXMgaXMgYSBjb21tZW50EgVvd25lciIJEgdteV9jb3B5Wg4KDAoKbXlfY29weV9zcGgEcAGIAQGSASAIchBtGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIBUobRIMCgpteV9jb3B5X3NwGAEiAggBCrsBCrgBCqoB0gumARKAAWNyZWF0ZSBvciByZXBsYWNlIHRlbXAgdGFibGUgdGVzdF9mcm9tKHRlc3Rfc3RyIHZhcmNoYXIpIGFzIHNlbGVjdCByYW5kc3RyKDIwLCByYW5kb20oKSkgZnJvbSB0YWJsZSAoZ2VuZXJhdG9yKHJvd0NvdW50ID0+IDEwMCkpGiEImwEQbhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAMKG4SAwoBXxgCIgIIAgo6CjgKLsoGKwgBEAEaAggCMiEIpQEQbhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAMKG4SABgDIgIIAwoIEgYIBBICCAMQARoREg8KDQoFZmluYWwQAxgLIAkiBBABGBU=
CsMBCsABCqwB8gWoAQp9CnsKJ7oCJAogCEMQcRoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSASKHEQAQonugIkCiAIQxBxGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIBIocRACCie6AiQKIAhDEHEaFlNSQ19QT1NJVElPTl9URVNUX01PREUgEihxEAMSBQoDCgFhGiAIQxBxGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIBIocRIJCgdmcm9tX2RmGAUiAggFCjoKOAouqgorCgeCAgQKAggFGiAIFRByGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgochIAGAYiAggGClwKWgpQogxNCAEaBWluZGV4MgIIBjoCIAFCIAhaEHIaFlNSQ19QT1NJVElPTl9URVNUX01PREUgCChyUg0KCwoJdGVzdF9mcm9tWgl0ZW1wb3JhcnkSABgHIgIIBwoIEgYICBICCAcQARoREg8KDQoFZmluYWwQAxgLIAkiBBABGBU=
CqoBCqcBCpUB8gWRAQpmCmQKMLoCLQogCEAQcxoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAQKHMQ////////////AQowugItCiAIQBBzGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIBAocxD+//////////8BEgUKAwoBYRogCEAQcxoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAQKHMSBwoFdG9fZGYYCSICCAkKOgo4Ci6qCisKB4ICBAoCCAkaIAgTEHQaFlNSQ19QT1NJVElPTl9URVNUX01PREUgCCh0EgAYCiICCAoKWgpYCk6iDEsIARoFaW5kZXgyAggKOgIgAUIgCFYQdBoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKHRSCwoJCgd0ZXN0X3RvWgl0ZW1wb3JhcnkSABgLIgIICwoIEgYIDBICCAsQARoREg8KDQoFZmluYWwQAxgLIAkiBBABGBU=
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
EAEaERIPCg0KBWZpbmFsEAMYCyAJIgQQARgV
