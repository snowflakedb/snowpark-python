## TEST CASE

from snowflake.snowpark.functions import sproc

from snowflake.snowpark import DataFrame

from snowflake.snowpark.types import IntegerType, StructField, StructType

session.add_packages('snowflake-snowpark-python')

import numpy as np

import math

# Example 1: Use stored procedure to copy data from one table to another.
def my_copy(session: snowflake.snowpark.Session, from_table: str, to_table: str, count: int) -> str:
    session.table(from_table).limit(count).write.save_as_table(to_table, mode="overwrite", table_type="temporary")
    return "SUCCESS"

my_copy_sp = session.sproc.register(my_copy, name="my_copy_sp", replace=True, comment="This is a comment")
_ = session.sql("create or replace temp table test_from(test_str varchar) as select randstr(20, random()) from table (generator(rowCount => 100))").collect()

# call using sql
from_df = session.create_dataframe([1, 2, 3], schema=["a"])
from_df.write.save_as_table("test_from", mode="overwrite", table_type="temporary")
to_df = session.create_dataframe([-1, -2], schema=["a"])
to_df.write.save_as_table("test_to", mode="overwrite", table_type="temporary")
session.sql("call my_copy_sp('test_from', 'test_to', 10)").collect()
session.table("test_to").count()

# call using session.call API
_ = session.sql("drop table if exists test_to").collect()
session.call("my_copy_sp", "test_from", "test_to", 10)
session.table("test_to").count()

# Example 2: Create a temporary stored procedure from a lambda and call it.
add_one_sp = sproc(
    lambda session_, x: session_.sql(f"select {x} + 1").collect(),
    return_type=IntegerType(),
    input_types=[IntegerType()],
    parallel=2,
    execute_as="caller",
)
add_one_sp(1)

# Example 3: Create a stored procedure with type hints and ``@sproc`` decorator and call it.
def add_sp(session_: snowflake.snowpark.Session, x: int, y: int) -> int:
    return session_.sql(f"select {x} + {y}").collect()
add_sp(session, 1, 2)

# Example 4: Create a permanent stored procedure with a name and call it in SQL.
_ = session.sql("create or replace temp stage mystage").collect()
_ = session.sproc.register(
     lambda session_, x, y: session_.sql(f"SELECT {x} * {y}").collect()[0][0],
     return_type=IntegerType(),
     input_types=[IntegerType(), IntegerType()],
     is_permanent=True,
     name="mul_sp",
     replace=True,
     stage_location="@mystage",
)
session.sql("call mul_sp(5, 6)").collect()

# skip stored proc creation if it already exists
_ = session.sproc.register(
     lambda session_, x, y: session_.sql(f"SELECT {x} * {y} + 1").collect()[0][0],
     return_type=IntegerType(),
     input_types=[IntegerType(), IntegerType()],
     is_permanent=True,
     name="mul_sp",
     if_not_exists=True,
     stage_location="@mystage",
)
session.sql("call mul_sp(5, 6)").collect()

# overwrite stored procedure
_ = session.sproc.register(
    lambda session_, x, y: session_.sql(f"SELECT {x} * {y} + 1").collect()[0][0],
    return_type=IntegerType(),
    input_types=[IntegerType(), IntegerType()],
    is_permanent=True,
    name="mul_sp",
    replace=True,
    stage_location="@mystage",
    strict=True,
    external_access_integrations=["s3"],
    secrets={"a": "b", "c": "d"},
)
session.sql("call mul_sp(5, 6)").collect()

# Example 5: Create a stored procedure with stored-procedure-level packages and call it.
@sproc(packages=["snowflake-snowpark-python", "numpy"], statement_params={"SF_PARTNER": "FAKE_PARTNER"})
def sin_sp(_: snowflake.snowpark.Session, x: float) -> float:
    return np.sin(x)
sin_sp(0.5 * math.pi)

# Example 6: Creating a table stored procedure with return type while defining return columns and datatypes.
@sproc(return_type=StructType([StructField("A", IntegerType()), StructField("B", IntegerType())]), input_types=[IntegerType(), IntegerType()])
def select_sp(session_, x, y):
    return session_.sql(f"SELECT {x} as A, {y} as B")
select_sp(1, 2).show()

# Example 7: Creating a table stored procedure with return type with free return columns.
@sproc(return_type=StructType(), input_types=[IntegerType(), IntegerType()], source_code_display=False, imports=[])
def select_sp(session_, x, y):
    return session_.sql(f"SELECT {x} as A, {y} as B")
select_sp(1, 2).show()

# Example 8: Creating a table stored procedure using implicit type hints.
@sproc
def select_sp(session_: snowflake.snowpark.Session, x: int, y: int) -> DataFrame:
    return session_.sql(f"SELECT {x} as A, {y} as B")
select_sp(1, 2).show()


## EXPECTED UNPARSER OUTPUT

my_copy_sp = sproc(my_copy, name="my_copy_sp", replace=True, comment="This is a comment")

_ = session.sql("create or replace temp table test_from(test_str varchar) as select randstr(20, random()) from table (generator(rowCount => 100))")

_.collect()

from_df = session.create_dataframe([1, 2, 3], schema=["a"])

from_df.write.save_as_table("test_from", mode="overwrite", table_type="temporary")

to_df = session.create_dataframe([-1, -2], schema=["a"])

to_df.write.save_as_table("test_to", mode="overwrite", table_type="temporary")

session.sql("call my_copy_sp('test_from', 'test_to', 10)").collect()

session.table("test_to").count()

_ = session.sql("drop table if exists test_to")

_.collect()

res11 = session.call("my_copy_sp", "test_from", "test_to", 10)

session.table("test_from").limit(10, 0).write.save_as_table("test_to", mode="overwrite", table_type="temporary")

my_copy_sp("test_from", "test_to", 10)

session.table("test_to").count()

add_one_sp = sproc(<lambda [1]>, return_type=IntegerType(), input_types=[IntegerType()], parallel=2, execute_as="caller")

session.sql("select 1 + 1").collect()

add_one_sp(1)

session.sql("select 1 + 2").collect()

_ = session.sql("create or replace temp stage mystage")

_.collect()

_ = sproc(<lambda [2]>, return_type=IntegerType(), input_types=[IntegerType(), IntegerType()], name="mul_sp", is_permanent=True, stage_location="@mystage", replace=True)

session.sql("call mul_sp(5, 6)").collect()

_ = sproc(<lambda [3]>, return_type=IntegerType(), input_types=[IntegerType(), IntegerType()], name="mul_sp", is_permanent=True, stage_location="@mystage", if_not_exists=True)

session.sql("call mul_sp(5, 6)").collect()

_ = sproc(<lambda [4]>, return_type=IntegerType(), input_types=[IntegerType(), IntegerType()], name="mul_sp", is_permanent=True, stage_location="@mystage", replace=True, strict=True, external_access_integrations=["s3"], secrets={"a": "b"}{"c": "d"})

session.sql("call mul_sp(5, 6)").collect()

sproc(sin_sp, , statement_params={"SF_PARTNER": "FAKE_PARTNER"}packages=["snowflake-snowpark-python", "numpy"])(1.5707963267948966)

res34 = sproc(select_sp, return_type=StructType([StructField("A", IntegerType(), nullable=True), StructField("B", IntegerType(), nullable=True)], structured=False), input_types=[IntegerType(), IntegerType()])(1, 2)

session.sql("SELECT 1 as A, 2 as B").show()

res38 = sproc(select_sp, return_type=StructType([], structured=False), input_types=[IntegerType(), IntegerType()], source_code_display=False)(1, 2)

session.sql("SELECT 1 as A, 2 as B").show()

res42 = sproc(select_sp)(1, 2)

session.sql("SELECT 1 as A, 2 as B").show()

## EXPECTED ENCODED AST

CnwKegpksgxhChMKEVRoaXMgaXMgYSBjb21tZW50EgVvd25lciIJEgdteV9jb3B5Wg4KDAoKbXlfY29weV9zcGgEcAGIAQGSASAIchBrGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIBUoaxIMCgpteV9jb3B5X3NwGAEiAggBCrsBCrgBCqoB2gumARKAAWNyZWF0ZSBvciByZXBsYWNlIHRlbXAgdGFibGUgdGVzdF9mcm9tKHRlc3Rfc3RyIHZhcmNoYXIpIGFzIHNlbGVjdCByYW5kc3RyKDIwLCByYW5kb20oKSkgZnJvbSB0YWJsZSAoZ2VuZXJhdG9yKHJvd0NvdW50ID0+IDEwMCkpGiEImwEQbBoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAMKGwSAwoBXxgCIgIIAgo6CjgKLsoGKwgBEAEaAggCMiEIpQEQbBoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAMKGwSABgDIgIIAwoIEgYIBBICCAMQARoREg8KDQoFZmluYWwQAxgLIAkiBBABGBc=
CsMBCsABCqwB8gWoAQp9CnsKJ7oCJAogCEMQbxoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSASKG8QAQonugIkCiAIQxBvGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIBIobxACCie6AiQKIAhDEG8aFlNSQ19QT1NJVElPTl9URVNUX01PREUgEihvEAMSBQoDCgFhGiAIQxBvGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIBIobxIJCgdmcm9tX2RmGAUiAggFCjoKOAouqgorCgeCAgQKAggFGiAIFRBwGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIAgocBIAGAYiAggGClwKWgpQqgxNCAEaBWluZGV4MgIIBjoCIAFCIAhaEHAaFlNSQ19QT1NJVElPTl9URVNUX01PREUgCChwUg0KCwoJdGVzdF9mcm9tWgl0ZW1wb3JhcnkSABgHIgIIBwoIEgYICBICCAcQARoREg8KDQoFZmluYWwQAxgLIAkiBBABGBc=
CqoBCqcBCpUB8gWRAQpmCmQKMLoCLQogCEAQcRoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAQKHEQ////////////AQowugItCiAIQBBxGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIBAocRD+//////////8BEgUKAwoBYRogCEAQcRoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAQKHESBwoFdG9fZGYYCSICCAkKOgo4Ci6qCisKB4ICBAoCCAkaIAgTEHIaFlNSQ19QT1NJVElPTl9URVNUX01PREUgCChyEgAYCiICCAoKWgpYCk6qDEsIARoFaW5kZXgyAggKOgIgAUIgCFYQchoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAIKHJSCwoJCgd0ZXN0X3RvWgl0ZW1wb3JhcnkSABgLIgIICwoIEgYIDBICCAsQARoREg8KDQoFZmluYWwQAxgLIAkiBBABGBc=
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
EAEaERIPCg0KBWZpbmFsEAMYCyAJIgQQARgX
