## TEST CASE

from snowflake.snowpark.functions import sproc

from snowflake.snowpark import DataFrame

from snowflake.snowpark.types import IntegerType, StructField, StructType

session.add_packages('snowflake-snowpark-python')

import numpy as np

import math

# Example 1: Use stored procedure to copy data from one table to another.
def my_copy(session: snowflake.snowpark.Session, from_table: str, to_table: str, count: int) -> str:
    session.table(from_table).limit(count).write.save_as_table(to_table, mode="overwrite", table_type="temporary")
    return "SUCCESS"

my_copy_sp = session.sproc.register(my_copy, name="my_copy_sp", replace=True, comment="This is a comment")
_ = session.sql("create or replace temp table test_from(test_str varchar) as select randstr(20, random()) from table (generator(rowCount => 100))").collect()

# call using sql
from_df = session.create_dataframe([1, 2, 3], schema=["a"])
from_df.write.save_as_table("test_from", mode="overwrite", table_type="temporary")
to_df = session.create_dataframe([-1, -2], schema=["a"])
to_df.write.save_as_table("test_to", mode="overwrite", table_type="temporary")
session.sql("call my_copy_sp('test_from', 'test_to', 10)").collect()
session.table("test_to").count()

# call using session.call API
_ = session.sql("drop table if exists test_to").collect()
session.call("my_copy_sp", "test_from", "test_to", 10)
session.table("test_to").count()

# Example 2: Create a temporary stored procedure from a lambda and call it.
add_one_sp = sproc(
    lambda session_, x: session_.sql(f"select {x} + 1").collect(),
    return_type=IntegerType(),
    input_types=[IntegerType()],
    parallel=2,
    execute_as="caller",
)
add_one_sp(1)

# Example 3: Create a stored procedure with type hints and ``@sproc`` decorator and call it.
def add_sp(session_: snowflake.snowpark.Session, x: int, y: int) -> int:
    return session_.sql(f"select {x} + {y}").collect()
add_sp(session, 1, 2)

# Example 4: Create a permanent stored procedure with a name and call it in SQL.
_ = session.sql("create or replace temp stage mystage").collect()
_ = session.sproc.register(
     lambda session_, x, y: session_.sql(f"SELECT {x} * {y}").collect()[0][0],
     return_type=IntegerType(),
     input_types=[IntegerType(), IntegerType()],
     is_permanent=True,
     name="mul_sp",
     replace=True,
     stage_location="@mystage",
)
session.sql("call mul_sp(5, 6)").collect()

# skip stored proc creation if it already exists
_ = session.sproc.register(
     lambda session_, x, y: session_.sql(f"SELECT {x} * {y} + 1").collect()[0][0],
     return_type=IntegerType(),
     input_types=[IntegerType(), IntegerType()],
     is_permanent=True,
     name="mul_sp",
     if_not_exists=True,
     stage_location="@mystage",
)
session.sql("call mul_sp(5, 6)").collect()

# overwrite stored procedure
_ = session.sproc.register(
    lambda session_, x, y: session_.sql(f"SELECT {x} * {y} + 1").collect()[0][0],
    return_type=IntegerType(),
    input_types=[IntegerType(), IntegerType()],
    is_permanent=True,
    name="mul_sp",
    replace=True,
    stage_location="@mystage",
    strict=True,
    external_access_integrations=["s3"],
    secrets={"a": "b", "c": "d"},
)
session.sql("call mul_sp(5, 6)").collect()

# Example 5: Create a stored procedure with stored-procedure-level packages and call it.
@sproc(packages=["snowflake-snowpark-python", "numpy"], statement_params={"SF_PARTNER": "FAKE_PARTNER"})
def sin_sp(_: snowflake.snowpark.Session, x: float) -> float:
    return np.sin(x)
sin_sp(0.5 * math.pi)

# Example 6: Creating a table stored procedure with return type while defining return columns and datatypes.
@sproc(return_type=StructType([StructField("A", IntegerType()), StructField("B", IntegerType())]), input_types=[IntegerType(), IntegerType()])
def select_sp(session_, x, y):
    return session_.sql(f"SELECT {x} as A, {y} as B")
select_sp(1, 2).show()

# Example 7: Creating a table stored procedure with return type with free return columns.
@sproc(return_type=StructType(), input_types=[IntegerType(), IntegerType()], source_code_display=False, imports=[])
def select_sp(session_, x, y):
    return session_.sql(f"SELECT {x} as A, {y} as B")
select_sp(1, 2).show()

# Example 8: Creating a table stored procedure using implicit type hints.
@sproc
def select_sp(session_: snowflake.snowpark.Session, x: int, y: int) -> DataFrame:
    return session_.sql(f"SELECT {x} as A, {y} as B")
select_sp(1, 2).show()

# Example 9: Registering a stored procedure from a file
mod5_sp = session.sproc.register_from_file(
    test_files.test_sp_py_file,
    "mod5",
    return_type=IntegerType(),
    input_types=[IntegerType()],
)
mod5_sp(3)

# Example 10: Registering a stored procedure from a file with type hints
range5_sproc = session.sproc.register_from_file(
    test_files.test_table_sp_py_file,
    "range5_sproc",
)
range5_sproc()

## EXPECTED UNPARSER OUTPUT

my_copy_sp = sproc("my_copy", return_type=StringType(), input_types=[StringType(), StringType(), LongType()], name="my_copy_sp", replace=True, comment="This is a comment", _registered_object_name="\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"MY_COPY_SP\"")

_ = session.sql("create or replace temp table test_from(test_str varchar) as select randstr(20, random()) from table (generator(rowCount => 100))")

_.collect()

from_df = session.create_dataframe([1, 2, 3], schema=["a"])

from_df.write.save_as_table("test_from", mode="overwrite", table_type="temporary")

to_df = session.create_dataframe([-1, -2], schema=["a"])

to_df.write.save_as_table("test_to", mode="overwrite", table_type="temporary")

session.sql("call my_copy_sp('test_from', 'test_to', 10)").collect()

session.table("test_to").count()

_ = session.sql("drop table if exists test_to")

_.collect()

session.call("my_copy_sp", "test_from", "test_to", 10)

session.table("test_from").limit(10, 0).write.save_as_table("test_to", mode="overwrite", table_type="temporary")

session.table("test_to").count()

add_one_sp = sproc("<lambda [1]>", return_type=IntegerType(), input_types=[IntegerType()], parallel=2, execute_as="caller", _registered_object_name="\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"SNOWPARK_TEMP_PROCEDURE_xxx\"")

session.sql("select 1 + 1").collect()

add_one_sp(1)

session.sql("select 1 + 2").collect()

_ = session.sql("create or replace temp stage mystage")

_.collect()

_ = sproc("<lambda [2]>", return_type=IntegerType(), input_types=[IntegerType(), IntegerType()], name="mul_sp", is_permanent=True, stage_location="@mystage", replace=True, _registered_object_name="\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"MUL_SP\"")

session.sql("call mul_sp(5, 6)").collect()

_ = sproc("<lambda [3]>", return_type=IntegerType(), input_types=[IntegerType(), IntegerType()], name="mul_sp", is_permanent=True, stage_location="@mystage", if_not_exists=True, _registered_object_name="\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"MUL_SP\"")

session.sql("call mul_sp(5, 6)").collect()

_ = sproc("<lambda [4]>", return_type=IntegerType(), input_types=[IntegerType(), IntegerType()], name="mul_sp", is_permanent=True, stage_location="@mystage", replace=True, strict=True, external_access_integrations=["s3"], secrets={"a": "b", "c": "d"}, _registered_object_name="\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"MUL_SP\"")

session.sql("call mul_sp(5, 6)").collect()

sproc("sin_sp", return_type=FloatType(), input_types=[FloatType()], packages=["snowflake-snowpark-python", "numpy"], statement_params={"SF_PARTNER": "FAKE_PARTNER"}, _registered_object_name="\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"SNOWPARK_TEMP_PROCEDURE_xxx\"")(1.5707963267948966)

res30 = sproc("select_sp", return_type=StructType(fields=[StructField("A", IntegerType(), nullable=True), StructField("B", IntegerType(), nullable=True)], structured=False), input_types=[IntegerType(), IntegerType()], _registered_object_name="\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"SNOWPARK_TEMP_PROCEDURE_xxx\"")(1, 2)

session.sql("SELECT 1 as A, 2 as B").show()

res34 = sproc("select_sp", return_type=StructType(structured=False), input_types=[IntegerType(), IntegerType()], source_code_display=False, _registered_object_name="\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"SNOWPARK_TEMP_PROCEDURE_xxx\"")(1, 2)

session.sql("SELECT 1 as A, 2 as B").show()

res38 = sproc("select_sp", return_type=StructType(structured=False), input_types=[LongType(), LongType()], _registered_object_name="\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"SNOWPARK_TEMP_PROCEDURE_xxx\"")(1, 2)

session.sql("SELECT 1 as A, 2 as B").show()

mod5_sp = sproc("mod5", return_type=IntegerType(), input_types=[IntegerType()], _registered_object_name="\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"SNOWPARK_TEMP_PROCEDURE_xxx\"")

session.create_dataframe([[3]], schema=["a"]).select(col("a") % 5).collect()

mod5_sp(3)

range5_sproc = sproc("range5_sproc", return_type=StructType(structured=False), _registered_object_name="\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"SNOWPARK_TEMP_PROCEDURE_xxx\"")

res45 = range5_sproc()

res46 = session.range(5, None, 1)

## EXPECTED ENCODED AST

interned_value_table {
  string_values {
    key: -1
  }
  string_values {
    key: 2
    value: "SRC_POSITION_TEST_MODE"
  }
}
body {
  bind {
    expr {
      stored_procedure {
        comment {
          value: "This is a comment"
        }
        execute_as: "owner"
        func {
          name: "my_copy"
          object_name {
            name {
              name_flat {
                name: "\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"MY_COPY_SP\""
              }
            }
          }
        }
        input_types {
          string_type {
            length {
            }
          }
        }
        input_types {
          string_type {
            length {
            }
          }
        }
        input_types {
          long_type: true
        }
        name {
          name {
            name_flat {
              name: "my_copy_sp"
            }
          }
        }
        parallel: 4
        replace: true
        return_type {
          string_type {
            length {
            }
          }
        }
        source_code_display: true
        src {
          end_column: 114
          end_line: 42
          file: 2
          start_column: 21
          start_line: 42
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "my_copy_sp"
    }
    uid: 1
  }
}
body {
  bind {
    expr {
      sql {
        query: "create or replace temp table test_from(test_str varchar) as select randstr(20, random()) from table (generator(rowCount => 100))"
        src {
          end_column: 155
          end_line: 43
          file: 2
          start_column: 12
          start_line: 43
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "_"
    }
    uid: 2
  }
}
body {
  bind {
    expr {
      dataframe_collect {
        block: true
        case_sensitive: true
        df {
          dataframe_ref {
            id: 2
          }
        }
        src {
          end_column: 165
          end_line: 43
          file: 2
          start_column: 12
          start_line: 43
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 3
  }
}
body {
  eval {
    bind_id: 3
  }
}
body {
  bind {
    expr {
      create_dataframe {
        data {
          dataframe_data__list {
            vs {
              int64_val {
                src {
                  end_column: 67
                  end_line: 46
                  file: 2
                  start_column: 18
                  start_line: 46
                }
                v: 1
              }
            }
            vs {
              int64_val {
                src {
                  end_column: 67
                  end_line: 46
                  file: 2
                  start_column: 18
                  start_line: 46
                }
                v: 2
              }
            }
            vs {
              int64_val {
                src {
                  end_column: 67
                  end_line: 46
                  file: 2
                  start_column: 18
                  start_line: 46
                }
                v: 3
              }
            }
          }
        }
        schema {
          dataframe_schema__list {
            vs: "a"
          }
        }
        src {
          end_column: 67
          end_line: 46
          file: 2
          start_column: 18
          start_line: 46
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "from_df"
    }
    uid: 4
  }
}
body {
  bind {
    expr {
      write_table {
        block: true
        column_order: "index"
        mode {
          save_mode_overwrite: true
        }
        src {
          end_column: 90
          end_line: 47
          file: 2
          start_column: 8
          start_line: 47
        }
        table_name {
          name {
            name_flat {
              name: "test_from"
            }
          }
        }
        table_type: "temporary"
        writer {
          dataframe_writer {
            df {
              dataframe_ref {
                id: 4
              }
            }
            src {
              end_column: 21
              end_line: 47
              file: 2
              start_column: 8
              start_line: 47
            }
          }
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 5
  }
}
body {
  eval {
    bind_id: 5
  }
}
body {
  bind {
    expr {
      create_dataframe {
        data {
          dataframe_data__list {
            vs {
              int64_val {
                src {
                  end_column: 64
                  end_line: 48
                  file: 2
                  start_column: 16
                  start_line: 48
                }
                v: -1
              }
            }
            vs {
              int64_val {
                src {
                  end_column: 64
                  end_line: 48
                  file: 2
                  start_column: 16
                  start_line: 48
                }
                v: -2
              }
            }
          }
        }
        schema {
          dataframe_schema__list {
            vs: "a"
          }
        }
        src {
          end_column: 64
          end_line: 48
          file: 2
          start_column: 16
          start_line: 48
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "to_df"
    }
    uid: 6
  }
}
body {
  bind {
    expr {
      write_table {
        block: true
        column_order: "index"
        mode {
          save_mode_overwrite: true
        }
        src {
          end_column: 86
          end_line: 49
          file: 2
          start_column: 8
          start_line: 49
        }
        table_name {
          name {
            name_flat {
              name: "test_to"
            }
          }
        }
        table_type: "temporary"
        writer {
          dataframe_writer {
            df {
              dataframe_ref {
                id: 6
              }
            }
            src {
              end_column: 19
              end_line: 49
              file: 2
              start_column: 8
              start_line: 49
            }
          }
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 7
  }
}
body {
  eval {
    bind_id: 7
  }
}
body {
  bind {
    expr {
      sql {
        query: "call my_copy_sp(\'test_from\', \'test_to\', 10)"
        src {
          end_column: 66
          end_line: 50
          file: 2
          start_column: 8
          start_line: 50
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 8
  }
}
body {
  bind {
    expr {
      dataframe_collect {
        block: true
        case_sensitive: true
        df {
          dataframe_ref {
            id: 8
          }
        }
        src {
          end_column: 76
          end_line: 50
          file: 2
          start_column: 8
          start_line: 50
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 9
  }
}
body {
  eval {
    bind_id: 9
  }
}
body {
  bind {
    expr {
      table {
        name {
          name {
            name_flat {
              name: "test_to"
            }
          }
        }
        src {
          end_column: 32
          end_line: 51
          file: 2
          start_column: 8
          start_line: 51
        }
        variant {
          session_table: true
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 10
  }
}
body {
  bind {
    expr {
      dataframe_count {
        block: true
        df {
          dataframe_ref {
            id: 10
          }
        }
        src {
          end_column: 40
          end_line: 51
          file: 2
          start_column: 8
          start_line: 51
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 11
  }
}
body {
  eval {
    bind_id: 11
  }
}
body {
  bind {
    expr {
      sql {
        query: "drop table if exists test_to"
        src {
          end_column: 55
          end_line: 54
          file: 2
          start_column: 12
          start_line: 54
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "_"
    }
    uid: 12
  }
}
body {
  bind {
    expr {
      dataframe_collect {
        block: true
        case_sensitive: true
        df {
          dataframe_ref {
            id: 12
          }
        }
        src {
          end_column: 65
          end_line: 54
          file: 2
          start_column: 12
          start_line: 54
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 13
  }
}
body {
  eval {
    bind_id: 13
  }
}
body {
  bind {
    expr {
      apply_expr {
        fn {
          stored_procedure {
            log_on_exception {
            }
            name {
              name {
                name_flat {
                  name: "my_copy_sp"
                }
              }
            }
          }
        }
        pos_args {
          string_val {
            src {
              end_column: 62
              end_line: 55
              file: 2
              start_column: 8
              start_line: 55
            }
            v: "test_from"
          }
        }
        pos_args {
          string_val {
            src {
              end_column: 62
              end_line: 55
              file: 2
              start_column: 8
              start_line: 55
            }
            v: "test_to"
          }
        }
        pos_args {
          int64_val {
            src {
              end_column: 62
              end_line: 55
              file: 2
              start_column: 8
              start_line: 55
            }
            v: 10
          }
        }
        src {
          end_column: 62
          end_line: 55
          file: 2
          start_column: 8
          start_line: 55
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 14
  }
}
body {
  eval {
    bind_id: 14
  }
}
body {
  bind {
    expr {
      table {
        name {
          name {
            name_flat {
              name: "test_from"
            }
          }
        }
        src {
          end_column: 37
          end_line: 39
          file: 2
          start_column: 12
          start_line: 39
        }
        variant {
          session_table: true
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 15
  }
}
body {
  bind {
    expr {
      dataframe_limit {
        df {
          dataframe_ref {
            id: 15
          }
        }
        n: 10
        src {
          end_column: 50
          end_line: 39
          file: 2
          start_column: 12
          start_line: 39
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 16
  }
}
body {
  bind {
    expr {
      write_table {
        block: true
        column_order: "index"
        mode {
          save_mode_overwrite: true
        }
        src {
          end_column: 122
          end_line: 39
          file: 2
          start_column: 12
          start_line: 39
        }
        table_name {
          name {
            name_flat {
              name: "test_to"
            }
          }
        }
        table_type: "temporary"
        writer {
          dataframe_writer {
            df {
              dataframe_ref {
                id: 16
              }
            }
            src {
              end_column: 56
              end_line: 39
              file: 2
              start_column: 12
              start_line: 39
            }
          }
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 17
  }
}
body {
  eval {
    bind_id: 17
  }
}
body {
  bind {
    expr {
      table {
        name {
          name {
            name_flat {
              name: "test_to"
            }
          }
        }
        src {
          end_column: 32
          end_line: 56
          file: 2
          start_column: 8
          start_line: 56
        }
        variant {
          session_table: true
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 18
  }
}
body {
  bind {
    expr {
      dataframe_count {
        block: true
        df {
          dataframe_ref {
            id: 18
          }
        }
        src {
          end_column: 40
          end_line: 56
          file: 2
          start_column: 8
          start_line: 56
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 19
  }
}
body {
  eval {
    bind_id: 19
  }
}
body {
  bind {
    expr {
      stored_procedure {
        execute_as: "caller"
        func {
          id: 1
          name: "<lambda [1]>"
          object_name {
            name {
              name_flat {
                name: "\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"SNOWPARK_TEMP_PROCEDURE_xxx\""
              }
            }
          }
        }
        input_types {
          integer_type: true
        }
        parallel: 2
        return_type {
          integer_type: true
        }
        source_code_display: true
        src {
          end_column: 9
          end_line: 65
          file: 2
          start_column: 21
          start_line: 59
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "add_one_sp"
    }
    uid: 20
  }
}
body {
  bind {
    expr {
      apply_expr {
        fn {
          fn_ref {
            id: 20
          }
        }
        pos_args {
          int64_val {
            src {
              end_column: 21
              end_line: 66
              file: 2
              start_column: 8
              start_line: 66
            }
            v: 1
          }
        }
        src {
          end_column: 21
          end_line: 66
          file: 2
          start_column: 8
          start_line: 66
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 21
  }
}
body {
  bind {
    expr {
      sql {
        query: "select 1 + 1"
        src {
          end_column: 63
          end_line: 60
          file: 2
          start_column: 32
          start_line: 60
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 22
  }
}
body {
  bind {
    expr {
      dataframe_collect {
        block: true
        case_sensitive: true
        df {
          dataframe_ref {
            id: 22
          }
        }
        src {
          end_column: 73
          end_line: 60
          file: 2
          start_column: 32
          start_line: 60
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 23
  }
}
body {
  eval {
    bind_id: 23
  }
}
body {
  eval {
    bind_id: 21
  }
}
body {
  bind {
    expr {
      sql {
        query: "select 1 + 2"
        src {
          end_column: 52
          end_line: 70
          file: 2
          start_column: 19
          start_line: 70
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 24
  }
}
body {
  bind {
    expr {
      dataframe_collect {
        block: true
        case_sensitive: true
        df {
          dataframe_ref {
            id: 24
          }
        }
        src {
          end_column: 62
          end_line: 70
          file: 2
          start_column: 19
          start_line: 70
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 25
  }
}
body {
  eval {
    bind_id: 25
  }
}
body {
  bind {
    expr {
      sql {
        query: "create or replace temp stage mystage"
        src {
          end_column: 63
          end_line: 74
          file: 2
          start_column: 12
          start_line: 74
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "_"
    }
    uid: 26
  }
}
body {
  bind {
    expr {
      dataframe_collect {
        block: true
        case_sensitive: true
        df {
          dataframe_ref {
            id: 26
          }
        }
        src {
          end_column: 73
          end_line: 74
          file: 2
          start_column: 12
          start_line: 74
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 27
  }
}
body {
  eval {
    bind_id: 27
  }
}
body {
  bind {
    expr {
      stored_procedure {
        execute_as: "owner"
        func {
          id: 2
          name: "<lambda [2]>"
          object_name {
            name {
              name_flat {
                name: "\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"MUL_SP\""
              }
            }
          }
        }
        input_types {
          integer_type: true
        }
        input_types {
          integer_type: true
        }
        is_permanent: true
        name {
          name {
            name_flat {
              name: "mul_sp"
            }
          }
        }
        parallel: 4
        replace: true
        return_type {
          integer_type: true
        }
        source_code_display: true
        src {
          end_column: 9
          end_line: 83
          file: 2
          start_column: 12
          start_line: 75
        }
        stage_location: "@mystage"
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "_"
    }
    uid: 28
  }
}
body {
  bind {
    expr {
      sql {
        query: "call mul_sp(5, 6)"
        src {
          end_column: 40
          end_line: 84
          file: 2
          start_column: 8
          start_line: 84
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 29
  }
}
body {
  bind {
    expr {
      dataframe_collect {
        block: true
        case_sensitive: true
        df {
          dataframe_ref {
            id: 29
          }
        }
        src {
          end_column: 50
          end_line: 84
          file: 2
          start_column: 8
          start_line: 84
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 30
  }
}
body {
  eval {
    bind_id: 30
  }
}
body {
  bind {
    expr {
      stored_procedure {
        execute_as: "owner"
        func {
          id: 3
          name: "<lambda [3]>"
          object_name {
            name {
              name_flat {
                name: "\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"MUL_SP\""
              }
            }
          }
        }
        if_not_exists: true
        input_types {
          integer_type: true
        }
        input_types {
          integer_type: true
        }
        is_permanent: true
        name {
          name {
            name_flat {
              name: "mul_sp"
            }
          }
        }
        parallel: 4
        return_type {
          integer_type: true
        }
        source_code_display: true
        src {
          end_column: 9
          end_line: 95
          file: 2
          start_column: 12
          start_line: 87
        }
        stage_location: "@mystage"
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "_"
    }
    uid: 31
  }
}
body {
  bind {
    expr {
      sql {
        query: "call mul_sp(5, 6)"
        src {
          end_column: 40
          end_line: 96
          file: 2
          start_column: 8
          start_line: 96
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 32
  }
}
body {
  bind {
    expr {
      dataframe_collect {
        block: true
        case_sensitive: true
        df {
          dataframe_ref {
            id: 32
          }
        }
        src {
          end_column: 50
          end_line: 96
          file: 2
          start_column: 8
          start_line: 96
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 33
  }
}
body {
  eval {
    bind_id: 33
  }
}
body {
  bind {
    expr {
      stored_procedure {
        execute_as: "owner"
        external_access_integrations: "s3"
        func {
          id: 4
          name: "<lambda [4]>"
          object_name {
            name {
              name_flat {
                name: "\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"MUL_SP\""
              }
            }
          }
        }
        input_types {
          integer_type: true
        }
        input_types {
          integer_type: true
        }
        is_permanent: true
        name {
          name {
            name_flat {
              name: "mul_sp"
            }
          }
        }
        parallel: 4
        replace: true
        return_type {
          integer_type: true
        }
        secrets {
          _1: "a"
          _2: "b"
        }
        secrets {
          _1: "c"
          _2: "d"
        }
        source_code_display: true
        src {
          end_column: 9
          end_line: 110
          file: 2
          start_column: 12
          start_line: 99
        }
        stage_location: "@mystage"
        strict: true
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "_"
    }
    uid: 34
  }
}
body {
  bind {
    expr {
      sql {
        query: "call mul_sp(5, 6)"
        src {
          end_column: 40
          end_line: 111
          file: 2
          start_column: 8
          start_line: 111
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 35
  }
}
body {
  bind {
    expr {
      dataframe_collect {
        block: true
        case_sensitive: true
        df {
          dataframe_ref {
            id: 35
          }
        }
        src {
          end_column: 50
          end_line: 111
          file: 2
          start_column: 8
          start_line: 111
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 36
  }
}
body {
  eval {
    bind_id: 36
  }
}
body {
  bind {
    expr {
      stored_procedure {
        execute_as: "owner"
        func {
          id: 5
          name: "sin_sp"
          object_name {
            name {
              name_flat {
                name: "\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"SNOWPARK_TEMP_PROCEDURE_xxx\""
              }
            }
          }
        }
        input_types {
          float_type: true
        }
        packages: "snowflake-snowpark-python"
        packages: "numpy"
        parallel: 4
        return_type {
          float_type: true
        }
        source_code_display: true
        src {
          end_column: 112
          end_line: 114
          file: 2
          start_column: 9
          start_line: 114
        }
        statement_params {
          _1: "SF_PARTNER"
          _2: "FAKE_PARTNER"
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 37
  }
}
body {
  bind {
    expr {
      apply_expr {
        fn {
          fn_ref {
            id: 37
          }
        }
        pos_args {
          float64_val {
            src {
              end_column: 29
              end_line: 117
              file: 2
              start_column: 8
              start_line: 117
            }
            v: 1.5707963267948966
          }
        }
        src {
          end_column: 29
          end_line: 117
          file: 2
          start_column: 8
          start_line: 117
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 38
  }
}
body {
  eval {
    bind_id: 38
  }
}
body {
  bind {
    expr {
      stored_procedure {
        execute_as: "owner"
        func {
          id: 6
          name: "select_sp"
          object_name {
            name {
              name_flat {
                name: "\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"SNOWPARK_TEMP_PROCEDURE_xxx\""
              }
            }
          }
        }
        input_types {
          integer_type: true
        }
        input_types {
          integer_type: true
        }
        parallel: 4
        return_type {
          struct_type {
            fields {
              column_identifier {
                column_name {
                  name: "A"
                }
              }
              data_type {
                integer_type: true
              }
              nullable: true
            }
            fields {
              column_identifier {
                column_name {
                  name: "B"
                }
              }
              data_type {
                integer_type: true
              }
              nullable: true
            }
          }
        }
        source_code_display: true
        src {
          end_column: 150
          end_line: 120
          file: 2
          start_column: 9
          start_line: 120
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 39
  }
}
body {
  bind {
    expr {
      apply_expr {
        fn {
          fn_ref {
            id: 39
          }
        }
        pos_args {
          int64_val {
            src {
              end_column: 23
              end_line: 123
              file: 2
              start_column: 8
              start_line: 123
            }
            v: 1
          }
        }
        pos_args {
          int64_val {
            src {
              end_column: 23
              end_line: 123
              file: 2
              start_column: 8
              start_line: 123
            }
            v: 2
          }
        }
        src {
          end_column: 23
          end_line: 123
          file: 2
          start_column: 8
          start_line: 123
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 40
  }
}
body {
  bind {
    expr {
      sql {
        query: "SELECT 1 as A, 2 as B"
        src {
          end_column: 61
          end_line: 122
          file: 2
          start_column: 19
          start_line: 122
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 41
  }
}
body {
  bind {
    expr {
      dataframe_show {
        df {
          dataframe_ref {
            id: 41
          }
        }
        n: 10
        src {
          end_column: 30
          end_line: 123
          file: 2
          start_column: 8
          start_line: 123
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 42
  }
}
body {
  eval {
    bind_id: 42
  }
}
body {
  bind {
    expr {
      stored_procedure {
        execute_as: "owner"
        func {
          id: 7
          name: "select_sp"
          object_name {
            name {
              name_flat {
                name: "\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"SNOWPARK_TEMP_PROCEDURE_xxx\""
              }
            }
          }
        }
        input_types {
          integer_type: true
        }
        input_types {
          integer_type: true
        }
        parallel: 4
        return_type {
          struct_type {
          }
        }
        src {
          end_column: 123
          end_line: 126
          file: 2
          start_column: 9
          start_line: 126
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 43
  }
}
body {
  bind {
    expr {
      apply_expr {
        fn {
          fn_ref {
            id: 43
          }
        }
        pos_args {
          int64_val {
            src {
              end_column: 23
              end_line: 129
              file: 2
              start_column: 8
              start_line: 129
            }
            v: 1
          }
        }
        pos_args {
          int64_val {
            src {
              end_column: 23
              end_line: 129
              file: 2
              start_column: 8
              start_line: 129
            }
            v: 2
          }
        }
        src {
          end_column: 23
          end_line: 129
          file: 2
          start_column: 8
          start_line: 129
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 44
  }
}
body {
  bind {
    expr {
      sql {
        query: "SELECT 1 as A, 2 as B"
        src {
          end_column: 61
          end_line: 128
          file: 2
          start_column: 19
          start_line: 128
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 45
  }
}
body {
  bind {
    expr {
      dataframe_show {
        df {
          dataframe_ref {
            id: 45
          }
        }
        n: 10
        src {
          end_column: 30
          end_line: 129
          file: 2
          start_column: 8
          start_line: 129
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 46
  }
}
body {
  eval {
    bind_id: 46
  }
}
body {
  bind {
    expr {
      stored_procedure {
        execute_as: "owner"
        func {
          id: 8
          name: "select_sp"
          object_name {
            name {
              name_flat {
                name: "\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"SNOWPARK_TEMP_PROCEDURE_xxx\""
              }
            }
          }
        }
        input_types {
          long_type: true
        }
        input_types {
          long_type: true
        }
        parallel: 4
        return_type {
          struct_type {
          }
        }
        source_code_display: true
        src {
          end_column: 14
          end_line: 132
          file: 2
          start_column: 9
          start_line: 132
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 47
  }
}
body {
  bind {
    expr {
      apply_expr {
        fn {
          fn_ref {
            id: 47
          }
        }
        pos_args {
          int64_val {
            src {
              end_column: 23
              end_line: 135
              file: 2
              start_column: 8
              start_line: 135
            }
            v: 1
          }
        }
        pos_args {
          int64_val {
            src {
              end_column: 23
              end_line: 135
              file: 2
              start_column: 8
              start_line: 135
            }
            v: 2
          }
        }
        src {
          end_column: 23
          end_line: 135
          file: 2
          start_column: 8
          start_line: 135
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 48
  }
}
body {
  bind {
    expr {
      sql {
        query: "SELECT 1 as A, 2 as B"
        src {
          end_column: 61
          end_line: 134
          file: 2
          start_column: 19
          start_line: 134
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 49
  }
}
body {
  bind {
    expr {
      dataframe_show {
        df {
          dataframe_ref {
            id: 49
          }
        }
        n: 10
        src {
          end_column: 30
          end_line: 135
          file: 2
          start_column: 8
          start_line: 135
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 50
  }
}
body {
  eval {
    bind_id: 50
  }
}
body {
  bind {
    expr {
      stored_procedure {
        execute_as: "owner"
        func {
          id: 9
          name: "mod5"
          object_name {
            name {
              name_flat {
                name: "\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"SNOWPARK_TEMP_PROCEDURE_xxx\""
              }
            }
          }
        }
        input_types {
          integer_type: true
        }
        parallel: 4
        return_type {
          integer_type: true
        }
        source_code_display: true
        src {
          end_column: 9
          end_line: 143
          file: 2
          start_column: 18
          start_line: 138
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "mod5_sp"
    }
    uid: 51
  }
}
body {
  bind {
    expr {
      apply_expr {
        fn {
          fn_ref {
            id: 51
          }
        }
        pos_args {
          int64_val {
            src {
              end_column: 18
              end_line: 144
              file: 2
              start_column: 8
              start_line: 144
            }
            v: 3
          }
        }
        src {
          end_column: 18
          end_line: 144
          file: 2
          start_column: 8
          start_line: 144
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 52
  }
}
body {
  bind {
    expr {
      create_dataframe {
        data {
          dataframe_data__list {
            vs {
              list_val {
                src {
                  end_column: 53
                  end_line: 7
                  file: 2
                  start_column: 8
                  start_line: 7
                }
                vs {
                  int64_val {
                    src {
                      end_column: 53
                      end_line: 7
                      file: 2
                      start_column: 8
                      start_line: 7
                    }
                    v: 3
                  }
                }
              }
            }
          }
        }
        schema {
          dataframe_schema__list {
            vs: "a"
          }
        }
        src {
          end_column: 53
          end_line: 7
          file: 2
          start_column: 8
          start_line: 7
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 53
  }
}
body {
  bind {
    expr {
      dataframe_select {
        cols {
          args {
            mod {
              lhs {
                apply_expr {
                  fn {
                    builtin_fn {
                      name {
                        name {
                          name_flat {
                            name: "col"
                          }
                        }
                      }
                    }
                  }
                  pos_args {
                    string_val {
                      src {
                        end_column: 24
                        end_line: 8
                        file: 2
                        start_column: 16
                        start_line: 8
                      }
                      v: "a"
                    }
                  }
                  src {
                    end_column: 24
                    end_line: 8
                    file: 2
                    start_column: 16
                    start_line: 8
                  }
                }
              }
              rhs {
                int64_val {
                  src {
                    end_column: 28
                    end_line: 8
                    file: 2
                    start_column: 16
                    start_line: 8
                  }
                  v: 5
                }
              }
              src {
                end_column: 28
                end_line: 8
                file: 2
                start_column: 16
                start_line: 8
              }
            }
          }
          variadic: true
        }
        df {
          dataframe_ref {
            id: 53
          }
        }
        src {
          end_column: 29
          end_line: 8
          file: 2
          start_column: 9
          start_line: 8
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 54
  }
}
body {
  bind {
    expr {
      dataframe_collect {
        block: true
        case_sensitive: true
        df {
          dataframe_ref {
            id: 54
          }
        }
        src {
          end_column: 18
          end_line: 9
          file: 2
          start_column: 9
          start_line: 9
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 55
  }
}
body {
  eval {
    bind_id: 55
  }
}
body {
  eval {
    bind_id: 52
  }
}
body {
  bind {
    expr {
      stored_procedure {
        execute_as: "owner"
        func {
          id: 10
          name: "range5_sproc"
          object_name {
            name {
              name_flat {
                name: "\"MOCK_DATABASE\".\"MOCK_SCHEMA\".\"SNOWPARK_TEMP_PROCEDURE_xxx\""
              }
            }
          }
        }
        parallel: 4
        return_type {
          struct_type {
          }
        }
        source_code_display: true
        src {
          end_column: 9
          end_line: 150
          file: 2
          start_column: 23
          start_line: 147
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
      value: "range5_sproc"
    }
    uid: 56
  }
}
body {
  bind {
    expr {
      apply_expr {
        fn {
          fn_ref {
            id: 56
          }
        }
        src {
          end_column: 22
          end_line: 151
          file: 2
          start_column: 8
          start_line: 151
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 57
  }
}
body {
  bind {
    expr {
      range {
        src {
          end_column: 27
          end_line: 6
          file: 2
          start_column: 11
          start_line: 6
        }
        start: 5
        step {
          value: 1
        }
      }
    }
    first_request_id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
    symbol {
    }
    uid: 58
  }
}
client_ast_version: 1
client_language {
  python_language {
    version {
      label: "final"
      major: 3
      minor: 9
      patch: 1
    }
  }
}
client_version {
  major: 1
  minor: 30
}
id: "\003U\"\366q\366P\346\260\261?\234\303\254\316\353"
