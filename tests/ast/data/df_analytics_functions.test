## TEST CASE

data = [
    ["2023-01-01", 101, 200],
    ["2023-01-02", 101, 100],
    ["2023-01-03", 101, 300],
    ["2023-01-04", 102, 250],
]

df = session.create_dataframe(data).to_df(
    "ORDERDATE", "PRODUCTKEY", "SALESAMOUNT"
)

moving_agg_res = df.analytics.moving_agg(
    aggs={"SALESAMOUNT": ["SUM", "AVG"]},
    window_sizes=[2, 3],
    order_by=["ORDERDATE"],
    group_by=["PRODUCTKEY"],
)

cumulative_agg_res = df.analytics.cumulative_agg(
    aggs={"SALESAMOUNT": ["SUM", "MIN", "MAX"]},
    group_by=["PRODUCTKEY"],
    order_by=["ORDERDATE"],
    is_forward=True
)

compute_lag_res = df.analytics.compute_lag(
    cols=["SALESAMOUNT"],
    lags=[1, 2],
    order_by=["ORDERDATE"],
    group_by=["PRODUCTKEY"],
)

compute_lead_res = df.analytics.compute_lead(
    cols=["SALESAMOUNT"],
    leads=[1, 2],
    order_by=["ORDERDATE"],
    group_by=["PRODUCTKEY"],
)

df = df.with_column("ORDERDATE", to_timestamp(df["ORDERDATE"]))

def custom_formatter(input_col, agg, window):
    return f"{agg}_{input_col}_{window}"

time_series_agg_res = df.analytics.time_series_agg(
    time_col="ORDERDATE",
    aggs={"SALESAMOUNT": ["SUM", "MAX"]},
    windows=["1D", "-1D"],
    group_by=["PRODUCTKEY"],
    sliding_interval="12H",
    col_formatter=custom_formatter,
)

## EXPECTED UNPARSER OUTPUT

df = session.create_dataframe([["2023-01-01", 101, 200], ["2023-01-02", 101, 100], ["2023-01-03", 101, 300], ["2023-01-04", 102, 250]])

df = df.to_df("ORDERDATE", "PRODUCTKEY", "SALESAMOUNT")

moving_agg_res = df.analytics.moving_agg(aggs={"SALESAMOUNT": ["SUM", "AVG"]}, window_sizes=[2, 3], order_by=["ORDERDATE"], group_by=["PRODUCTKEY"], formatted_col_names=["SALESAMOUNT_SUM_2", "SALESAMOUNT_AVG_2", "SALESAMOUNT_SUM_3", "SALESAMOUNT_AVG_3"])

cumulative_agg_res = df.analytics.cumulative_agg(aggs={"SALESAMOUNT": ["SUM", "MIN", "MAX"]}, order_by=["ORDERDATE"], group_by=["PRODUCTKEY"], is_forward=True, formatted_col_names=["SALESAMOUNT_SUM", "SALESAMOUNT_MIN", "SALESAMOUNT_MAX"])

compute_lag_res = df.analytics.compute_lag(cols=["SALESAMOUNT"], lags=[1, 2], order_by=["ORDERDATE"], group_by=["PRODUCTKEY"], formatted_col_names=["SALESAMOUNT_LAG_1", "SALESAMOUNT_LAG_2"])

compute_lead_res = df.analytics.compute_lead(cols=["SALESAMOUNT"], leads=[1, 2], order_by=["ORDERDATE"], group_by=["PRODUCTKEY"], formatted_col_names=["SALESAMOUNT_LEAD_1", "SALESAMOUNT_LEAD_2"])

df = df.with_column("ORDERDATE", to_timestamp(df["ORDERDATE"]))

time_series_agg_res = df.analytics.time_series_agg(time_col="ORDERDATE", aggs={"SALESAMOUNT": ["SUM", "MAX"]}, windows=["1D", "-1D"], group_by=["PRODUCTKEY"], sliding_interval="12H", formatted_col_names=["SUM_SALESAMOUNT_1D", "MAX_SALESAMOUNT_1D", "SUM_SALESAMOUNT_-1D", "MAX_SALESAMOUNT_-1D"])

## EXPECTED ENCODED AST

CvkFCvYFCucF0gXjBQq+BQq7BQqsAaICqAEKIAgrEGEaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShhEjH6Cy4KIAgrEGEaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShhEgoyMDIzLTAxLTAxEieSAiQKIAgrEGEaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShhEGUSKJICJQogCCsQYRoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKGEQyAEKqwGiAqcBCiAIKxBhGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oYRIx+gsuCiAIKxBhGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oYRIKMjAyMy0wMS0wMhInkgIkCiAIKxBhGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oYRBlEieSAiQKIAgrEGEaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShhEGQKrAGiAqgBCiAIKxBhGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oYRIx+gsuCiAIKxBhGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oYRIKMjAyMy0wMS0wMxInkgIkCiAIKxBhGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oYRBlEiiSAiUKIAgrEGEaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShhEKwCCqwBogKoAQogCCsQYRoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKGESMfoLLgogCCsQYRoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKGESCjIwMjMtMDEtMDQSJ5ICJAogCCsQYRoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKGEQZhIokgIlCiAIKxBhGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIA0oYRD6ARogCCsQYRoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKGESBAoCZGYYASICCAEKZApiClSqCVEKCU9SREVSREFURQoKUFJPRFVDVEtFWQoLU0FMRVNBTU9VTlQSB4oCBAoCCAEaIAgJEGMaFlNSQ19QT1NJVElPTl9URVNUX01PREUgDShhIAESBAoCZGYYAiICCAIKzQEKygEKrwGCBqsBChcKC1NBTEVTQU1PVU5UEgNTVU0SA0FWRxIHigIECgIIAhoRU0FMRVNBTU9VTlRfU1VNXzIaEVNBTEVTQU1PVU5UX0FWR18yGhFTQUxFU0FNT1VOVF9TVU1fMxoRU0FMRVNBTU9VTlRfQVZHXzMiClBST0RVQ1RLRVkqCU9SREVSREFURTIgCAkQahoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAZKGU6AgIDEhAKDm1vdmluZ19hZ2dfcmVzGAMiAggDCrsBCrgBCpkB+gWVAQocCgtTQUxFU0FNT1VOVBIDU1VNEgNNSU4SA01BWBIHigIECgIIAhoPU0FMRVNBTU9VTlRfU1VNGg9TQUxFU0FNT1VOVF9NSU4aD1NBTEVTQU1PVU5UX01BWCIKUFJPRFVDVEtFWSgBMglPUkRFUkRBVEU6IAgJEHEaFlNSQ19QT1NJVElPTl9URVNUX01PREUgHShsEhQKEmN1bXVsYXRpdmVfYWdnX3JlcxgEIgIIBArDAQrAAQqkAeoFoAEKMvoLLwogCAkQeBoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAaKHMSC1NBTEVTQU1PVU5UEgeKAgQKAggCGhFTQUxFU0FNT1VOVF9MQUdfMRoRU0FMRVNBTU9VTlRfTEFHXzIiClBST0RVQ1RLRVkqAgECMglPUkRFUkRBVEU6IAgJEHgaFlNSQ19QT1NJVElPTl9URVNUX01PREUgGihzEhEKD2NvbXB1dGVfbGFnX3JlcxgFIgIIBQrGAQrDAQqmAfIFogEKMvoLLwogCAkQfxoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAbKHoSC1NBTEVTQU1PVU5UEgeKAgQKAggCGhJTQUxFU0FNT1VOVF9MRUFEXzEaElNBTEVTQU1PVU5UX0xFQURfMiIKUFJPRFVDVEtFWSoCAQIyCU9SREVSREFURTogCAkQfxoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSAbKHoSEgoQY29tcHV0ZV9sZWFkX3JlcxgGIgIIBgrvAQrsAQrdAeoJ2QEKngF6mwEKOAo2ChAKDgoMdG9fdGltZXN0YW1wEiIIRhCBARoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSApKIEBGjuiBjgKCU9SREVSREFURRIHigIECgIIAhoiCEUQgQEaFlNSQ19QT1NJVElPTl9URVNUX01PREUgNiiBASIiCEYQgQEaFlNSQ19QT1NJVElPTl9URVNUX01PREUgKSiBARIJT1JERVJEQVRFGgeKAgQKAggCIiIIRxCBARoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSANKIEBEgQKAmRmGAciAggHCuQBCuEBCsEBiga9AQoXCgtTQUxFU0FNT1VOVBIDU1VNEgNNQVgSB4oCBAoCCAcaElNVTV9TQUxFU0FNT1VOVF8xRBoSTUFYX1NBTEVTQU1PVU5UXzFEGhNTVU1fU0FMRVNBTU9VTlRfLTFEGhNNQVhfU0FMRVNBTU9VTlRfLTFEIgpQUk9EVUNUS0VZKgMxMkgyIggJEI0BGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFIB4ohgE6CU9SREVSREFURUICMURCAy0xRBIVChN0aW1lX3Nlcmllc19hZ2dfcmVzGAgiAggIEAEaERIPCg0KBWZpbmFsEAMYCyAJIgQQARgV
