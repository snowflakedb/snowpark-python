## TEST CASE

data = [
    ["2023-01-01", 101, 200],
    ["2023-01-02", 101, 100],
    ["2023-01-03", 101, 300],
    ["2023-01-04", 102, 250],
]

df = session.create_dataframe(data).to_df(
    "ORDERDATE", "PRODUCTKEY", "SALESAMOUNT"
)

df2 = df.with_column("HALF_AMOUNT", df["SALESAMOUNT"] / 2)

moving_agg_res = df.analytics.moving_agg(
    aggs={"SALESAMOUNT": ["SUM", "AVG"]},
    window_sizes=[2, 3],
    order_by=["ORDERDATE"],
    group_by=["PRODUCTKEY"],
)

moving_agg_res2 = df2.analytics.moving_agg(
    aggs={"SALESAMOUNT": ["SUM"], "HALF_AMOUNT": ["MAX"]},
    window_sizes=[2, 3],
    order_by=["ORDERDATE"],
    group_by=["PRODUCTKEY"],
)

cumulative_agg_res = df.analytics.cumulative_agg(
    aggs={"SALESAMOUNT": ["SUM", "MIN", "MAX"]},
    group_by=["PRODUCTKEY"],
    order_by=["ORDERDATE"],
    is_forward=True
)

compute_lag_res = df.analytics.compute_lag(
    cols=["SALESAMOUNT"],
    lags=[1, 2],
    order_by=["ORDERDATE"],
    group_by=["PRODUCTKEY"],
)

compute_lead_res = df.analytics.compute_lead(
    cols=["SALESAMOUNT"],
    leads=[1, 2],
    order_by=["ORDERDATE"],
    group_by=["PRODUCTKEY"],
)

df = df.with_column("ORDERDATE", to_timestamp(df["ORDERDATE"]))

def custom_formatter(input_col, agg, window):
    return f"{agg}_{input_col}_{window}"

time_series_agg_res = df.analytics.time_series_agg(
    time_col="ORDERDATE",
    aggs={"SALESAMOUNT": ["SUM", "MAX"]},
    windows=["1D", "-1D"],
    group_by=["PRODUCTKEY"],
    sliding_interval="12H",
    col_formatter=custom_formatter,
)

## EXPECTED UNPARSER OUTPUT

df = session.create_dataframe([["2023-01-01", 101, 200], ["2023-01-02", 101, 100], ["2023-01-03", 101, 300], ["2023-01-04", 102, 250]])

df = df.to_df("ORDERDATE", "PRODUCTKEY", "SALESAMOUNT")

df2 = df.with_column("HALF_AMOUNT", df["SALESAMOUNT"] / 2)

moving_agg_res = df.analytics.moving_agg(aggs={"SALESAMOUNT": ["SUM", "AVG"]}, window_sizes=[2, 3], order_by=["ORDERDATE"], group_by=["PRODUCTKEY"], formatted_col_names=["SALESAMOUNT_SUM_2", "SALESAMOUNT_AVG_2", "SALESAMOUNT_SUM_3", "SALESAMOUNT_AVG_3"])

moving_agg_res2 = df2.analytics.moving_agg(aggs={"SALESAMOUNT": ["SUM"], "HALF_AMOUNT": ["MAX"]}, window_sizes=[2, 3], order_by=["ORDERDATE"], group_by=["PRODUCTKEY"], formatted_col_names=["SALESAMOUNT_SUM_2", "SALESAMOUNT_SUM_3", "HALF_AMOUNT_MAX_2", "HALF_AMOUNT_MAX_3"])

cumulative_agg_res = df.analytics.cumulative_agg(aggs={"SALESAMOUNT": ["SUM", "MIN", "MAX"]}, order_by=["ORDERDATE"], group_by=["PRODUCTKEY"], is_forward=True, formatted_col_names=["SALESAMOUNT_SUM", "SALESAMOUNT_MIN", "SALESAMOUNT_MAX"])

compute_lag_res = df.analytics.compute_lag(cols=["SALESAMOUNT"], lags=[1, 2], order_by=["ORDERDATE"], group_by=["PRODUCTKEY"], formatted_col_names=["SALESAMOUNT_LAG_1", "SALESAMOUNT_LAG_2"])

compute_lead_res = df.analytics.compute_lead(cols=["SALESAMOUNT"], leads=[1, 2], order_by=["ORDERDATE"], group_by=["PRODUCTKEY"], formatted_col_names=["SALESAMOUNT_LEAD_1", "SALESAMOUNT_LEAD_2"])

df = df.with_column("ORDERDATE", to_timestamp(df["ORDERDATE"]))

time_series_agg_res = df.analytics.time_series_agg(time_col="ORDERDATE", aggs={"SALESAMOUNT": ["SUM", "MAX"]}, windows=["1D", "-1D"], group_by=["PRODUCTKEY"], sliding_interval="12H", formatted_col_names=["SUM_SALESAMOUNT_1D", "MAX_SALESAMOUNT_1D", "SUM_SALESAMOUNT_-1D", "MAX_SALESAMOUNT_-1D"])

## EXPECTED ENCODED AST

CpMFCpAFCoEF+gX9BAreBArbBAqUAdICkAEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEiv6DCgKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEgoyMDIzLTAxLTAxEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEGUSIsICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEYQyAEKkwHSAo8BChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoRhIr+gwoChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoRhIKMjAyMy0wMS0wMhIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoRhBlEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEGQKlAHSApABChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoRhIr+gwoChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoRhIKMjAyMy0wMS0wMxIhwgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoRhBlEiLCAh8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGEKwCCpQB0gKQAQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEYSK/oMKAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEYSCjIwMjMtMDEtMDQSIcICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEYQZhIiwgIfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoRhD6ARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEYSBAoCZGYYASICCAEKXgpcCk7KCUsKCU9SREVSREFURQoKUFJPRFVDVEtFWQoLU0FMRVNBTU9VTlQSB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShGIAESBAoCZGYYAiICCAIKxAEKwQEKsQGaCq0BCnnyAXYKNcoGMgoLU0FMRVNBTU9VTlQSB4ICBAoCCAIaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShKEiHCAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShKEAIaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShKEgtIQUxGX0FNT1VOVBoHggIECgIIAiIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKEoSBQoDZGYyGAMiAggDCscBCsQBCqkBqgalAQoXCgtTQUxFU0FNT1VOVBIDU1VNEgNBVkcSB4ICBAoCCAIaEVNBTEVTQU1PVU5UX1NVTV8yGhFTQUxFU0FNT1VOVF9BVkdfMhoRU0FMRVNBTU9VTlRfU1VNXzMaEVNBTEVTQU1PVU5UX0FWR18zIgpQUk9EVUNUS0VZKglPUkRFUkRBVEUyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShMOgICAxIQCg5tb3ZpbmdfYWdnX3JlcxgEIgIIBArXAQrUAQq4AaoGtAEKEgoLU0FMRVNBTU9VTlQSA1NVTQoSCgtIQUxGX0FNT1VOVBIDTUFYEgeCAgQKAggDGhFTQUxFU0FNT1VOVF9TVU1fMhoRU0FMRVNBTU9VTlRfU1VNXzMaEUhBTEZfQU1PVU5UX01BWF8yGhFIQUxGX0FNT1VOVF9NQVhfMyIKUFJPRFVDVEtFWSoJT1JERVJEQVRFMhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoUzoCAgMSEQoPbW92aW5nX2FnZ19yZXMyGAUiAggFCrUBCrIBCpMBogaPAQocCgtTQUxFU0FNT1VOVBIDU1VNEgNNSU4SA01BWBIHggIECgIIAhoPU0FMRVNBTU9VTlRfU1VNGg9TQUxFU0FNT1VOVF9NSU4aD1NBTEVTQU1PVU5UX01BWCIKUFJPRFVDVEtFWSgBMglPUkRFUkRBVEU6GhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShaEhQKEmN1bXVsYXRpdmVfYWdnX3JlcxgGIgIIBgq3AQq0AQqYAZIGlAEKLPoMKQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGESC1NBTEVTQU1PVU5UEgeCAgQKAggCGhFTQUxFU0FNT1VOVF9MQUdfMRoRU0FMRVNBTU9VTlRfTEFHXzIiClBST0RVQ1RLRVkqAgECMglPUkRFUkRBVEU6GhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShhEhEKD2NvbXB1dGVfbGFnX3JlcxgHIgIIBwq6AQq3AQqaAZoGlgEKLPoMKQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGgSC1NBTEVTQU1PVU5UEgeCAgQKAggCGhJTQUxFU0FNT1VOVF9MRUFEXzEaElNBTEVTQU1PVU5UX0xFQURfMiIKUFJPRFVDVEtFWSoCAQIyCU9SREVSREFURToaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGgSEgoQY29tcHV0ZV9sZWFkX3JlcxgIIgIICAqyAQqvAQqgAZoKnAEKapIBZwoUGhIKEAoOCgx0b190aW1lc3RhbXAaM8oGMAoJT1JERVJEQVRFEgeCAgQKAggCGhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUobyIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKG8SCU9SREVSREFURRoHggIECgIIAiIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKG8SBAoCZGYYCSICCAkK3AEK2QEKuQGyBrUBChcKC1NBTEVTQU1PVU5UEgNTVU0SA01BWBIHggIECgIICRoSU1VNX1NBTEVTQU1PVU5UXzFEGhJNQVhfU0FMRVNBTU9VTlRfMUQaE1NVTV9TQUxFU0FNT1VOVF8tMUQaE01BWF9TQUxFU0FNT1VOVF8tMUQiClBST0RVQ1RLRVkqAzEySDIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHQ6CU9SREVSREFURUICMURCAy0xRBIVChN0aW1lX3Nlcmllc19hZ2dfcmVzGAoiAggKEAEaERIPCg0KBWZpbmFsEAMYCSAUIgQQARgX
