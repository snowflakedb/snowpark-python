## TEST CASE

data = [
    ["2023-01-01", 101, 200],
    ["2023-01-02", 101, 100],
    ["2023-01-03", 101, 300],
    ["2023-01-04", 102, 250],
]

df = session.create_dataframe(data).to_df(
    "ORDERDATE", "PRODUCTKEY", "SALESAMOUNT"
)

moving_agg_res = df.analytics.moving_agg(
    aggs={"SALESAMOUNT": ["SUM", "AVG"]},
    window_sizes=[2, 3],
    order_by=["ORDERDATE"],
    group_by=["PRODUCTKEY"],
)

cumulative_agg_res = df.analytics.cumulative_agg(
    aggs={"SALESAMOUNT": ["SUM", "MIN", "MAX"]},
    group_by=["PRODUCTKEY"],
    order_by=["ORDERDATE"],
    is_forward=True
)

compute_lag_res = df.analytics.compute_lag(
    cols=["SALESAMOUNT"],
    lags=[1, 2],
    order_by=["ORDERDATE"],
    group_by=["PRODUCTKEY"],
)

compute_lead_res = df.analytics.compute_lead(
    cols=["SALESAMOUNT"],
    leads=[1, 2],
    order_by=["ORDERDATE"],
    group_by=["PRODUCTKEY"],
)

df = df.with_column("ORDERDATE", to_timestamp(df["ORDERDATE"]))

def custom_formatter(input_col, agg, window):
    return f"{agg}_{input_col}_{window}"

time_series_agg_res = df.analytics.time_series_agg(
    time_col="ORDERDATE",
    aggs={"SALESAMOUNT": ["SUM", "MAX"]},
    windows=["1D", "-1D"],
    group_by=["PRODUCTKEY"],
    sliding_interval="12H",
    col_formatter=custom_formatter,
)

## EXPECTED UNPARSER OUTPUT

res2 = session.create_dataframe([["2023-01-01", 101, 200], ["2023-01-02", 101, 100], ["2023-01-03", 101, 300], ["2023-01-04", 102, 250]]).to_df("ORDERDATE", "PRODUCTKEY", "SALESAMOUNT")

res3 = res2.analytics.moving_agg(aggs={"SALESAMOUNT": ["SUM", "AVG"]}, window_sizes=[2, 3], order_by=["ORDERDATE"], group_by=["PRODUCTKEY"], formatted_col_names=["SALESAMOUNT_SUM_2", "SALESAMOUNT_AVG_2", "SALESAMOUNT_SUM_3", "SALESAMOUNT_AVG_3"])

res4 = res2.analytics.cumulative_agg(aggs={"SALESAMOUNT": ["SUM", "MIN", "MAX"]}, order_by=["ORDERDATE"], group_by=["PRODUCTKEY"], is_forward=True, formatted_col_names=["SALESAMOUNT_SUM", "SALESAMOUNT_MIN", "SALESAMOUNT_MAX"])

res5 = res2.analytics.compute_lag(cols=["SALESAMOUNT"], lags=[1, 2], order_by=["ORDERDATE"], group_by=["PRODUCTKEY"], formatted_col_names=["SALESAMOUNT_LAG_1", "SALESAMOUNT_LAG_2"])

res6 = res2.analytics.compute_lead(cols=["SALESAMOUNT"], leads=[1, 2], order_by=["ORDERDATE"], group_by=["PRODUCTKEY"], formatted_col_names=["SALESAMOUNT_LEAD_1", "SALESAMOUNT_LEAD_2"])

df = res2.with_column("ORDERDATE", to_timestamp(res2["ORDERDATE"]))

res7 = df.analytics.time_series_agg(time_col="ORDERDATE", aggs={"SALESAMOUNT": ["SUM", "MAX"]}, windows=["1D", "-1D"], group_by=["PRODUCTKEY"], sliding_interval="12H", formatted_col_names=["SUM_SALESAMOUNT_1D", "MAX_SALESAMOUNT_1D", "SUM_SALESAMOUNT_-1D", "MAX_SALESAMOUNT_-1D"])

## EXPECTED ENCODED AST

Co8FCowFCoEF0gX9BAreBArbBAqUAaICkAEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShhEivyCygKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShhEgoyMDIzLTAxLTAxEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShhEGUSIpICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGEQyAEKkwGiAo8BChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRIr8gsoChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRIKMjAyMy0wMS0wMhIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRBlEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShhEGQKlAGiApABChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRIr8gsoChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRIKMjAyMy0wMS0wMxIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRBlEiKSAh8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShhEKwCCpQBogKQAQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGESK/ILKAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGESCjIwMjMtMDEtMDQSIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGEQZhIikgIfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRD6ARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGESABgBIgIIAQpaClgKTrIJSwoJT1JERVJEQVRFCgpQUk9EVUNUS0VZCgtTQUxFU0FNT1VOVBIHigIECgIIARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGEgARIAGAIiAggCCrcBCrQBCqkBggalAQoXCgtTQUxFU0FNT1VOVBIDU1VNEgNBVkcSB4oCBAoCCAIaEVNBTEVTQU1PVU5UX1NVTV8yGhFTQUxFU0FNT1VOVF9BVkdfMhoRU0FMRVNBTU9VTlRfU1VNXzMaEVNBTEVTQU1PVU5UX0FWR18zIgpQUk9EVUNUS0VZKglPUkRFUkRBVEUyGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShlOgICAxIAGAMiAggDCqEBCp4BCpMB+gWPAQocCgtTQUxFU0FNT1VOVBIDU1VNEgNNSU4SA01BWBIHigIECgIIAhoPU0FMRVNBTU9VTlRfU1VNGg9TQUxFU0FNT1VOVF9NSU4aD1NBTEVTQU1PVU5UX01BWCIKUFJPRFVDVEtFWSgBMglPUkRFUkRBVEU6GhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEgAYBCICCAQKpgEKowEKmAHqBZQBCizyCykKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShzEgtTQUxFU0FNT1VOVBIHigIECgIIAhoRU0FMRVNBTU9VTlRfTEFHXzEaEVNBTEVTQU1PVU5UX0xBR18yIgpQUk9EVUNUS0VZKgIBAjIJT1JERVJEQVRFOhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUocxIAGAUiAggFCqgBCqUBCpoB8gWWAQos8gspChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoehILU0FMRVNBTU9VTlQSB4oCBAoCCAIaElNBTEVTQU1PVU5UX0xFQURfMRoSU0FMRVNBTU9VTlRfTEVBRF8yIgpQUk9EVUNUS0VZKgIBAjIJT1JERVJEQVRFOhoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoehIAGAYiAggGCtMBCtABCsEB4gm9AQqJAXqGAQoxCi8KEAoOCgx0b190aW1lc3RhbXASGxoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSiBARo0ogYxCglPUkRFUkRBVEUSB4oCBAoCCAIaGxoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSiBASIbGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKIEBEglPUkRFUkRBVEUaB4oCBAoCCAIiGxoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSiBARIECgJkZhgHIgIIBwrIAQrFAQq6AYoGtgEKFwoLU0FMRVNBTU9VTlQSA1NVTRIDTUFYEgeKAgQKAggHGhJTVU1fU0FMRVNBTU9VTlRfMUQaEk1BWF9TQUxFU0FNT1VOVF8xRBoTU1VNX1NBTEVTQU1PVU5UXy0xRBoTTUFYX1NBTEVTQU1PVU5UXy0xRCIKUFJPRFVDVEtFWSoDMTJIMhsaFlNSQ19QT1NJVElPTl9URVNUX01PREUohgE6CU9SREVSREFURUICMURCAy0xRBIAGAgiAggIEAEaERIPCg0KBWZpbmFsEAMYCCATIgQQARgV
