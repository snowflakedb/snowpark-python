## TEST CASE

data = [
    ["2023-01-01", 101, 200],
    ["2023-01-02", 101, 100],
    ["2023-01-03", 101, 300],
    ["2023-01-04", 102, 250],
]

df = session.create_dataframe(data).to_df(
    "ORDERDATE", "PRODUCTKEY", "SALESAMOUNT"
)

moving_agg_res = df.analytics.moving_agg(
    aggs={"SALESAMOUNT": ["SUM", "AVG"]},
    window_sizes=[2, 3],
    order_by=["ORDERDATE"],
    group_by=["PRODUCTKEY"],
)

cumulative_agg_res = df.analytics.cumulative_agg(
    aggs={"SALESAMOUNT": ["SUM", "MIN", "MAX"]},
    group_by=["PRODUCTKEY"],
    order_by=["ORDERDATE"],
    is_forward=True
)

compute_lag_res = df.analytics.compute_lag(
    cols=["SALESAMOUNT"],
    lags=[1, 2],
    order_by=["ORDERDATE"],
    group_by=["PRODUCTKEY"],
)

compute_lead_res = df.analytics.compute_lead(
    cols=["SALESAMOUNT"],
    leads=[1, 2],
    order_by=["ORDERDATE"],
    group_by=["PRODUCTKEY"],
)

df = df.with_column("ORDERDATE", to_timestamp(df["ORDERDATE"]))

def custom_formatter(input_col, agg, window):
    return f"{agg}_{input_col}_{window}"

time_series_agg_res = df.analytics.time_series_agg(
    time_col="ORDERDATE",
    aggs={"SALESAMOUNT": ["SUM", "MAX"]},
    windows=["1D", "-1D"],
    group_by=["PRODUCTKEY"],
    sliding_interval="12H",
    col_formatter=custom_formatter,
)

## EXPECTED UNPARSER OUTPUT

df = session.create_dataframe([["2023-01-01", 101, 200], ["2023-01-02", 101, 100], ["2023-01-03", 101, 300], ["2023-01-04", 102, 250]])

df = df.to_df("ORDERDATE", "PRODUCTKEY", "SALESAMOUNT")

moving_agg_res = df.analytics.moving_agg(aggs={"SALESAMOUNT": ["SUM", "AVG"]}, window_sizes=[2, 3], order_by=["ORDERDATE"], group_by=["PRODUCTKEY"], formatted_col_names=["SALESAMOUNT_SUM_2", "SALESAMOUNT_AVG_2", "SALESAMOUNT_SUM_3", "SALESAMOUNT_AVG_3"])

cumulative_agg_res = df.analytics.cumulative_agg(aggs={"SALESAMOUNT": ["SUM", "MIN", "MAX"]}, order_by=["ORDERDATE"], group_by=["PRODUCTKEY"], is_forward=True, formatted_col_names=["SALESAMOUNT_SUM", "SALESAMOUNT_MIN", "SALESAMOUNT_MAX"])

compute_lag_res = df.analytics.compute_lag(cols=["SALESAMOUNT"], lags=[1, 2], order_by=["ORDERDATE"], group_by=["PRODUCTKEY"], formatted_col_names=["SALESAMOUNT_LAG_1", "SALESAMOUNT_LAG_2"])

compute_lead_res = df.analytics.compute_lead(cols=["SALESAMOUNT"], leads=[1, 2], order_by=["ORDERDATE"], group_by=["PRODUCTKEY"], formatted_col_names=["SALESAMOUNT_LEAD_1", "SALESAMOUNT_LEAD_2"])

df = df.with_column("ORDERDATE", to_timestamp(df["ORDERDATE"]))

time_series_agg_res = df.analytics.time_series_agg(time_col="ORDERDATE", aggs={"SALESAMOUNT": ["SUM", "MAX"]}, windows=["1D", "-1D"], group_by=["PRODUCTKEY"], sliding_interval="12H", formatted_col_names=["SUM_SALESAMOUNT_1D", "MAX_SALESAMOUNT_1D", "SUM_SALESAMOUNT_-1D", "MAX_SALESAMOUNT_-1D"])

## EXPECTED ENCODED AST

CpMFCpAFCoEF0gX9BAreBArbBAqUAaICkAEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShhEiv6CygKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShhEgoyMDIzLTAxLTAxEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShhEGUSIpICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGEQyAEKkwGiAo8BChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRIr+gsoChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRIKMjAyMy0wMS0wMhIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRBlEiGSAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShhEGQKlAGiApABChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRIr+gsoChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRIKMjAyMy0wMS0wMxIhkgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRBlEiKSAh8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShhEKwCCpQBogKQAQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGESK/oLKAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGESCjIwMjMtMDEtMDQSIZICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGEQZhIikgIfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRD6ARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGESBAoCZGYYASICCAEKXgpcCk6yCUsKCU9SREVSREFURQoKUFJPRFVDVEtFWQoLU0FMRVNBTU9VTlQSB5ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShhIAESBAoCZGYYAiICCAIKxwEKxAEKqQGCBqUBChcKC1NBTEVTQU1PVU5UEgNTVU0SA0FWRxIHkgIECgIIAhoRU0FMRVNBTU9VTlRfU1VNXzIaEVNBTEVTQU1PVU5UX0FWR18yGhFTQUxFU0FNT1VOVF9TVU1fMxoRU0FMRVNBTU9VTlRfQVZHXzMiClBST0RVQ1RLRVkqCU9SREVSREFURTIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGU6AgIDEhAKDm1vdmluZ19hZ2dfcmVzGAMiAggDCrUBCrIBCpMB+gWPAQocCgtTQUxFU0FNT1VOVBIDU1VNEgNNSU4SA01BWBIHkgIECgIIAhoPU0FMRVNBTU9VTlRfU1VNGg9TQUxFU0FNT1VOVF9NSU4aD1NBTEVTQU1PVU5UX01BWCIKUFJPRFVDVEtFWSgBMglPUkRFUkRBVEU6GhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEhQKEmN1bXVsYXRpdmVfYWdnX3JlcxgEIgIIBAq3AQq0AQqYAeoFlAEKLPoLKQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHMSC1NBTEVTQU1PVU5UEgeSAgQKAggCGhFTQUxFU0FNT1VOVF9MQUdfMRoRU0FMRVNBTU9VTlRfTEFHXzIiClBST0RVQ1RLRVkqAgECMglPUkRFUkRBVEU6GhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShzEhEKD2NvbXB1dGVfbGFnX3JlcxgFIgIIBQq6AQq3AQqaAfIFlgEKLPoLKQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHoSC1NBTEVTQU1PVU5UEgeSAgQKAggCGhJTQUxFU0FNT1VOVF9MRUFEXzEaElNBTEVTQU1PVU5UX0xFQURfMiIKUFJPRFVDVEtFWSoCAQIyCU9SREVSREFURToaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHoSEgoQY29tcHV0ZV9sZWFkX3JlcxgGIgIIBgrTAQrQAQrBAeoJvQEKiQF6hgEKMQovChAKDgoMdG9fdGltZXN0YW1wEhsaFlNSQ19QT1NJVElPTl9URVNUX01PREUogQEaNKIGMQoJT1JERVJEQVRFEgeSAgQKAggCGhsaFlNSQ19QT1NJVElPTl9URVNUX01PREUogQEiGxoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSiBARIJT1JERVJEQVRFGgeSAgQKAggCIhsaFlNSQ19QT1NJVElPTl9URVNUX01PREUogQESBAoCZGYYByICCAcK3QEK2gEKugGKBrYBChcKC1NBTEVTQU1PVU5UEgNTVU0SA01BWBIHkgIECgIIBxoSU1VNX1NBTEVTQU1PVU5UXzFEGhJNQVhfU0FMRVNBTU9VTlRfMUQaE1NVTV9TQUxFU0FNT1VOVF8tMUQaE01BWF9TQUxFU0FNT1VOVF8tMUQiClBST0RVQ1RLRVkqAzEySDIbGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKIYBOglPUkRFUkRBVEVCAjFEQgMtMUQSFQoTdGltZV9zZXJpZXNfYWdnX3JlcxgIIgIICBABGhESDwoNCgVmaW5hbBADGAkgEyIEEAEYFQ==
