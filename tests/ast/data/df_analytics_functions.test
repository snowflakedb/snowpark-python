## TEST CASE

data = [
    ["2023-01-01", 101, 200],
    ["2023-01-02", 101, 100],
    ["2023-01-03", 101, 300],
    ["2023-01-04", 102, 250],
]

df = session.create_dataframe(data).to_df(
    "ORDERDATE", "PRODUCTKEY", "SALESAMOUNT"
)

df2 = df.with_column("HALF_AMOUNT", df["SALESAMOUNT"] / 2)

moving_agg_res = df.analytics.moving_agg(
    aggs={"SALESAMOUNT": ["SUM", "AVG"]},
    window_sizes=[2, 3],
    order_by=["ORDERDATE"],
    group_by=["PRODUCTKEY"],
)

def xy_col_formatter(input, agg, window_size):
    return f"{input}_X_{agg}_Y_{window_size}"

moving_agg_res2 = df2.analytics.moving_agg(
    aggs={"SALESAMOUNT": ["SUM"], "HALF_AMOUNT": ["MAX"]},
    window_sizes=[2, 3],
    order_by=["ORDERDATE"],
    group_by=["PRODUCTKEY"],
    col_formatter=xy_col_formatter
)

cumulative_agg_res = df.analytics.cumulative_agg(
    aggs={"SALESAMOUNT": ["SUM", "MIN", "MAX"]},
    group_by=["PRODUCTKEY"],
    order_by=["ORDERDATE"],
    is_forward=True
)

def w_col_formatter(input, agg):
    return f"{input}_W_{agg}"

cumulative_agg_res2 = df.analytics.cumulative_agg(
    aggs={"SALESAMOUNT": ["SUM", "MIN", "MAX"]},
    group_by=["PRODUCTKEY"],
    order_by=["ORDERDATE"],
    is_forward=True,
    col_formatter=w_col_formatter
)

compute_lag_res = df.analytics.compute_lag(
    cols=["SALESAMOUNT"],
    lags=[1, 2],
    order_by=["ORDERDATE"],
    group_by=["PRODUCTKEY"],
)

compute_lag_res2 = df.analytics.compute_lag(
    cols=["SALESAMOUNT"],
    lags=[1, 2],
    order_by=["ORDERDATE"],
    group_by=["PRODUCTKEY"],
    col_formatter=xy_col_formatter
)

compute_lead_res = df.analytics.compute_lead(
    cols=["SALESAMOUNT"],
    leads=[1, 2],
    order_by=["ORDERDATE"],
    group_by=["PRODUCTKEY"],
)

compute_lead_res2 = df.analytics.compute_lead(
    cols=["SALESAMOUNT"],
    leads=[1, 2],
    order_by=["ORDERDATE"],
    group_by=["PRODUCTKEY"],
    col_formatter=xy_col_formatter
)

df = df.with_column("ORDERDATE", to_timestamp(df["ORDERDATE"]))

time_series_agg_res = df.analytics.time_series_agg(
    time_col="ORDERDATE",
    aggs={"SALESAMOUNT": ["SUM", "MAX"]},
    windows=["1D", "-1D"],
    group_by=["PRODUCTKEY"],
    sliding_interval="12H"
)

def custom_formatter(input_col, agg, window):
    return f"{agg}_{input_col}_{window}"

time_series_agg_res2 = df.analytics.time_series_agg(
    time_col="ORDERDATE",
    aggs={"SALESAMOUNT": ["SUM", "MAX"]},
    windows=["1D", "-1D"],
    group_by=["PRODUCTKEY"],
    sliding_interval="12H",
    col_formatter=custom_formatter,
)

## EXPECTED UNPARSER OUTPUT

df = session.create_dataframe([["2023-01-01", 101, 200], ["2023-01-02", 101, 100], ["2023-01-03", 101, 300], ["2023-01-04", 102, 250]])

df = df.to_df("ORDERDATE", "PRODUCTKEY", "SALESAMOUNT")

df2 = df.with_column("HALF_AMOUNT", df["SALESAMOUNT"] / 2)

moving_agg_res = df.analytics.moving_agg(aggs={"SALESAMOUNT": ["SUM", "AVG"]}, window_sizes=[2, 3], order_by=["ORDERDATE"], group_by=["PRODUCTKEY"])

moving_agg_res2 = df2.analytics.moving_agg(aggs={"SALESAMOUNT": ["SUM"], "HALF_AMOUNT": ["MAX"]}, window_sizes=[2, 3], order_by=["ORDERDATE"], group_by=["PRODUCTKEY"], col_formatter=lambda column, agg, window: {"SALESAMOUNT": {2: {"SUM": "SALESAMOUNT_X_SUM_Y_2"}, 3: {"SUM": "SALESAMOUNT_X_SUM_Y_3"}}, "HALF_AMOUNT": {2: {"MAX": "HALF_AMOUNT_X_MAX_Y_2"}, 3: {"MAX": "HALF_AMOUNT_X_MAX_Y_3"}}}[column][window][agg])

cumulative_agg_res = df.analytics.cumulative_agg(aggs={"SALESAMOUNT": ["SUM", "MIN", "MAX"]}, order_by=["ORDERDATE"], group_by=["PRODUCTKEY"], is_forward=True)

cumulative_agg_res2 = df.analytics.cumulative_agg(aggs={"SALESAMOUNT": ["SUM", "MIN", "MAX"]}, order_by=["ORDERDATE"], group_by=["PRODUCTKEY"], is_forward=True, col_formatter=lambda column, agg: {"SALESAMOUNT": {"SUM": "SALESAMOUNT_W_SUM", "MIN": "SALESAMOUNT_W_MIN", "MAX": "SALESAMOUNT_W_MAX"}}[column][agg])

compute_lag_res = df.analytics.compute_lag(cols=["SALESAMOUNT"], lags=[1, 2], order_by=["ORDERDATE"], group_by=["PRODUCTKEY"])

compute_lag_res2 = df.analytics.compute_lag(cols=["SALESAMOUNT"], lags=[1, 2], order_by=["ORDERDATE"], group_by=["PRODUCTKEY"], col_formatter=lambda column, other, value: {"SALESAMOUNT": {1: "SALESAMOUNT_X_LAG_Y_1", 2: "SALESAMOUNT_X_LAG_Y_2"}}[column][value])

compute_lead_res = df.analytics.compute_lead(cols=["SALESAMOUNT"], leads=[1, 2], order_by=["ORDERDATE"], group_by=["PRODUCTKEY"])

compute_lead_res2 = df.analytics.compute_lead(cols=["SALESAMOUNT"], leads=[1, 2], order_by=["ORDERDATE"], group_by=["PRODUCTKEY"], col_formatter=lambda column, other, value: {"SALESAMOUNT": {1: "SALESAMOUNT_X_LEAD_Y_1", 2: "SALESAMOUNT_X_LEAD_Y_2"}}[column][value])

df = df.with_column("ORDERDATE", to_timestamp(df["ORDERDATE"]))

time_series_agg_res = df.analytics.time_series_agg(time_col="ORDERDATE", aggs={"SALESAMOUNT": ["SUM", "MAX"]}, windows=["1D", "-1D"], group_by=["PRODUCTKEY"], sliding_interval="12H")

time_series_agg_res2 = df.analytics.time_series_agg(time_col="ORDERDATE", aggs={"SALESAMOUNT": ["SUM", "MAX"]}, windows=["1D", "-1D"], group_by=["PRODUCTKEY"], sliding_interval="12H", col_formatter=lambda column, agg, window: {"SALESAMOUNT": {"1D": {"SUM": "SUM_SALESAMOUNT_1D", "MAX": "MAX_SALESAMOUNT_1D"}, "-1D": {"SUM": "SUM_SALESAMOUNT_-1D", "MAX": "MAX_SALESAMOUNT_-1D"}}}[column][window][agg])

## EXPECTED ENCODED AST

body {
  assign {
    expr {
      sp_create_dataframe {
        data {
          sp_dataframe_data__list {
            vs {
              list_val {
                src {
                  end_column: 43
                  end_line: 32
                  file: "SRC_POSITION_TEST_MODE"
                  start_column: 13
                  start_line: 32
                }
                vs {
                  string_val {
                    src {
                      end_column: 43
                      end_line: 32
                      file: "SRC_POSITION_TEST_MODE"
                      start_column: 13
                      start_line: 32
                    }
                    v: "2023-01-01"
                  }
                }
                vs {
                  int64_val {
                    src {
                      end_column: 43
                      end_line: 32
                      file: "SRC_POSITION_TEST_MODE"
                      start_column: 13
                      start_line: 32
                    }
                    v: 101
                  }
                }
                vs {
                  int64_val {
                    src {
                      end_column: 43
                      end_line: 32
                      file: "SRC_POSITION_TEST_MODE"
                      start_column: 13
                      start_line: 32
                    }
                    v: 200
                  }
                }
              }
            }
            vs {
              list_val {
                src {
                  end_column: 43
                  end_line: 32
                  file: "SRC_POSITION_TEST_MODE"
                  start_column: 13
                  start_line: 32
                }
                vs {
                  string_val {
                    src {
                      end_column: 43
                      end_line: 32
                      file: "SRC_POSITION_TEST_MODE"
                      start_column: 13
                      start_line: 32
                    }
                    v: "2023-01-02"
                  }
                }
                vs {
                  int64_val {
                    src {
                      end_column: 43
                      end_line: 32
                      file: "SRC_POSITION_TEST_MODE"
                      start_column: 13
                      start_line: 32
                    }
                    v: 101
                  }
                }
                vs {
                  int64_val {
                    src {
                      end_column: 43
                      end_line: 32
                      file: "SRC_POSITION_TEST_MODE"
                      start_column: 13
                      start_line: 32
                    }
                    v: 100
                  }
                }
              }
            }
            vs {
              list_val {
                src {
                  end_column: 43
                  end_line: 32
                  file: "SRC_POSITION_TEST_MODE"
                  start_column: 13
                  start_line: 32
                }
                vs {
                  string_val {
                    src {
                      end_column: 43
                      end_line: 32
                      file: "SRC_POSITION_TEST_MODE"
                      start_column: 13
                      start_line: 32
                    }
                    v: "2023-01-03"
                  }
                }
                vs {
                  int64_val {
                    src {
                      end_column: 43
                      end_line: 32
                      file: "SRC_POSITION_TEST_MODE"
                      start_column: 13
                      start_line: 32
                    }
                    v: 101
                  }
                }
                vs {
                  int64_val {
                    src {
                      end_column: 43
                      end_line: 32
                      file: "SRC_POSITION_TEST_MODE"
                      start_column: 13
                      start_line: 32
                    }
                    v: 300
                  }
                }
              }
            }
            vs {
              list_val {
                src {
                  end_column: 43
                  end_line: 32
                  file: "SRC_POSITION_TEST_MODE"
                  start_column: 13
                  start_line: 32
                }
                vs {
                  string_val {
                    src {
                      end_column: 43
                      end_line: 32
                      file: "SRC_POSITION_TEST_MODE"
                      start_column: 13
                      start_line: 32
                    }
                    v: "2023-01-04"
                  }
                }
                vs {
                  int64_val {
                    src {
                      end_column: 43
                      end_line: 32
                      file: "SRC_POSITION_TEST_MODE"
                      start_column: 13
                      start_line: 32
                    }
                    v: 102
                  }
                }
                vs {
                  int64_val {
                    src {
                      end_column: 43
                      end_line: 32
                      file: "SRC_POSITION_TEST_MODE"
                      start_column: 13
                      start_line: 32
                    }
                    v: 250
                  }
                }
              }
            }
          }
        }
        src {
          end_column: 43
          end_line: 32
          file: "SRC_POSITION_TEST_MODE"
          start_column: 13
          start_line: 32
        }
      }
    }
    symbol {
      value: "df"
    }
    uid: 1
    var_id {
      bitfield1: 1
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_to_df {
        col_names: "ORDERDATE"
        col_names: "PRODUCTKEY"
        col_names: "SALESAMOUNT"
        df {
          sp_dataframe_ref {
            id {
              bitfield1: 1
            }
          }
        }
        src {
          end_column: 9
          end_line: 34
          file: "SRC_POSITION_TEST_MODE"
          start_column: 13
          start_line: 32
        }
        variadic: true
      }
    }
    symbol {
      value: "df"
    }
    uid: 2
    var_id {
      bitfield1: 2
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_with_column {
        col {
          div {
            lhs {
              sp_dataframe_col {
                col_name: "SALESAMOUNT"
                df {
                  sp_dataframe_ref {
                    id {
                      bitfield1: 2
                    }
                  }
                }
                src {
                  end_column: 61
                  end_line: 36
                  file: "SRC_POSITION_TEST_MODE"
                  start_column: 44
                  start_line: 36
                }
              }
            }
            rhs {
              int64_val {
                src {
                  end_column: 65
                  end_line: 36
                  file: "SRC_POSITION_TEST_MODE"
                  start_column: 44
                  start_line: 36
                }
                v: 2
              }
            }
            src {
              end_column: 65
              end_line: 36
              file: "SRC_POSITION_TEST_MODE"
              start_column: 44
              start_line: 36
            }
          }
        }
        col_name: "HALF_AMOUNT"
        df {
          sp_dataframe_ref {
            id {
              bitfield1: 2
            }
          }
        }
        src {
          end_column: 66
          end_line: 36
          file: "SRC_POSITION_TEST_MODE"
          start_column: 14
          start_line: 36
        }
      }
    }
    symbol {
      value: "df2"
    }
    uid: 3
    var_id {
      bitfield1: 3
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_analytics_moving_agg {
        aggs {
          _1: "SALESAMOUNT"
          _2: "SUM"
          _2: "AVG"
        }
        df {
          sp_dataframe_ref {
            id {
              bitfield1: 2
            }
          }
        }
        group_by: "PRODUCTKEY"
        order_by: "ORDERDATE"
        src {
          end_column: 9
          end_line: 43
          file: "SRC_POSITION_TEST_MODE"
          start_column: 25
          start_line: 38
        }
        window_sizes: 2
        window_sizes: 3
      }
    }
    symbol {
      value: "moving_agg_res"
    }
    uid: 4
    var_id {
      bitfield1: 4
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_analytics_moving_agg {
        aggs {
          _1: "SALESAMOUNT"
          _2: "SUM"
        }
        aggs {
          _1: "HALF_AMOUNT"
          _2: "MAX"
        }
        df {
          sp_dataframe_ref {
            id {
              bitfield1: 3
            }
          }
        }
        formatted_col_names: "SALESAMOUNT_X_SUM_Y_2"
        formatted_col_names: "SALESAMOUNT_X_SUM_Y_3"
        formatted_col_names: "HALF_AMOUNT_X_MAX_Y_2"
        formatted_col_names: "HALF_AMOUNT_X_MAX_Y_3"
        group_by: "PRODUCTKEY"
        order_by: "ORDERDATE"
        src {
          end_column: 9
          end_line: 54
          file: "SRC_POSITION_TEST_MODE"
          start_column: 26
          start_line: 48
        }
        window_sizes: 2
        window_sizes: 3
      }
    }
    symbol {
      value: "moving_agg_res2"
    }
    uid: 5
    var_id {
      bitfield1: 5
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_analytics_cumulative_agg {
        aggs {
          _1: "SALESAMOUNT"
          _2: "SUM"
          _2: "MIN"
          _2: "MAX"
        }
        df {
          sp_dataframe_ref {
            id {
              bitfield1: 2
            }
          }
        }
        group_by: "PRODUCTKEY"
        is_forward: true
        order_by: "ORDERDATE"
        src {
          end_column: 9
          end_line: 61
          file: "SRC_POSITION_TEST_MODE"
          start_column: 29
          start_line: 56
        }
      }
    }
    symbol {
      value: "cumulative_agg_res"
    }
    uid: 6
    var_id {
      bitfield1: 6
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_analytics_cumulative_agg {
        aggs {
          _1: "SALESAMOUNT"
          _2: "SUM"
          _2: "MIN"
          _2: "MAX"
        }
        df {
          sp_dataframe_ref {
            id {
              bitfield1: 2
            }
          }
        }
        formatted_col_names: "SALESAMOUNT_W_SUM"
        formatted_col_names: "SALESAMOUNT_W_MIN"
        formatted_col_names: "SALESAMOUNT_W_MAX"
        group_by: "PRODUCTKEY"
        is_forward: true
        order_by: "ORDERDATE"
        src {
          end_column: 9
          end_line: 72
          file: "SRC_POSITION_TEST_MODE"
          start_column: 30
          start_line: 66
        }
      }
    }
    symbol {
      value: "cumulative_agg_res2"
    }
    uid: 7
    var_id {
      bitfield1: 7
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_analytics_compute_lag {
        cols {
          string_val {
            src {
              end_column: 9
              end_line: 79
              file: "SRC_POSITION_TEST_MODE"
              start_column: 26
              start_line: 74
            }
            v: "SALESAMOUNT"
          }
        }
        df {
          sp_dataframe_ref {
            id {
              bitfield1: 2
            }
          }
        }
        group_by: "PRODUCTKEY"
        lags: 1
        lags: 2
        order_by: "ORDERDATE"
        src {
          end_column: 9
          end_line: 79
          file: "SRC_POSITION_TEST_MODE"
          start_column: 26
          start_line: 74
        }
      }
    }
    symbol {
      value: "compute_lag_res"
    }
    uid: 8
    var_id {
      bitfield1: 8
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_analytics_compute_lag {
        cols {
          string_val {
            src {
              end_column: 9
              end_line: 87
              file: "SRC_POSITION_TEST_MODE"
              start_column: 27
              start_line: 81
            }
            v: "SALESAMOUNT"
          }
        }
        df {
          sp_dataframe_ref {
            id {
              bitfield1: 2
            }
          }
        }
        formatted_col_names: "SALESAMOUNT_X_LAG_Y_1"
        formatted_col_names: "SALESAMOUNT_X_LAG_Y_2"
        group_by: "PRODUCTKEY"
        lags: 1
        lags: 2
        order_by: "ORDERDATE"
        src {
          end_column: 9
          end_line: 87
          file: "SRC_POSITION_TEST_MODE"
          start_column: 27
          start_line: 81
        }
      }
    }
    symbol {
      value: "compute_lag_res2"
    }
    uid: 9
    var_id {
      bitfield1: 9
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_analytics_compute_lead {
        cols {
          string_val {
            src {
              end_column: 9
              end_line: 94
              file: "SRC_POSITION_TEST_MODE"
              start_column: 27
              start_line: 89
            }
            v: "SALESAMOUNT"
          }
        }
        df {
          sp_dataframe_ref {
            id {
              bitfield1: 2
            }
          }
        }
        group_by: "PRODUCTKEY"
        leads: 1
        leads: 2
        order_by: "ORDERDATE"
        src {
          end_column: 9
          end_line: 94
          file: "SRC_POSITION_TEST_MODE"
          start_column: 27
          start_line: 89
        }
      }
    }
    symbol {
      value: "compute_lead_res"
    }
    uid: 10
    var_id {
      bitfield1: 10
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_analytics_compute_lead {
        cols {
          string_val {
            src {
              end_column: 9
              end_line: 102
              file: "SRC_POSITION_TEST_MODE"
              start_column: 28
              start_line: 96
            }
            v: "SALESAMOUNT"
          }
        }
        df {
          sp_dataframe_ref {
            id {
              bitfield1: 2
            }
          }
        }
        formatted_col_names: "SALESAMOUNT_X_LEAD_Y_1"
        formatted_col_names: "SALESAMOUNT_X_LEAD_Y_2"
        group_by: "PRODUCTKEY"
        leads: 1
        leads: 2
        order_by: "ORDERDATE"
        src {
          end_column: 9
          end_line: 102
          file: "SRC_POSITION_TEST_MODE"
          start_column: 28
          start_line: 96
        }
      }
    }
    symbol {
      value: "compute_lead_res2"
    }
    uid: 11
    var_id {
      bitfield1: 11
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_with_column {
        col {
          apply_expr {
            fn {
              builtin_fn {
                name {
                  fn_name_flat {
                    name: "to_timestamp"
                  }
                }
              }
            }
            pos_args {
              sp_dataframe_col {
                col_name: "ORDERDATE"
                df {
                  sp_dataframe_ref {
                    id {
                      bitfield1: 2
                    }
                  }
                }
                src {
                  end_column: 69
                  end_line: 104
                  file: "SRC_POSITION_TEST_MODE"
                  start_column: 54
                  start_line: 104
                }
              }
            }
            src {
              end_column: 70
              end_line: 104
              file: "SRC_POSITION_TEST_MODE"
              start_column: 41
              start_line: 104
            }
          }
        }
        col_name: "ORDERDATE"
        df {
          sp_dataframe_ref {
            id {
              bitfield1: 2
            }
          }
        }
        src {
          end_column: 71
          end_line: 104
          file: "SRC_POSITION_TEST_MODE"
          start_column: 13
          start_line: 104
        }
      }
    }
    symbol {
      value: "df"
    }
    uid: 12
    var_id {
      bitfield1: 12
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_analytics_time_series_agg {
        aggs {
          _1: "SALESAMOUNT"
          _2: "SUM"
          _2: "MAX"
        }
        df {
          sp_dataframe_ref {
            id {
              bitfield1: 12
            }
          }
        }
        group_by: "PRODUCTKEY"
        sliding_interval: "12H"
        src {
          end_column: 9
          end_line: 112
          file: "SRC_POSITION_TEST_MODE"
          start_column: 30
          start_line: 106
        }
        time_col: "ORDERDATE"
        windows: "1D"
        windows: "-1D"
      }
    }
    symbol {
      value: "time_series_agg_res"
    }
    uid: 13
    var_id {
      bitfield1: 13
    }
  }
}
body {
  assign {
    expr {
      sp_dataframe_analytics_time_series_agg {
        aggs {
          _1: "SALESAMOUNT"
          _2: "SUM"
          _2: "MAX"
        }
        df {
          sp_dataframe_ref {
            id {
              bitfield1: 12
            }
          }
        }
        formatted_col_names: "SUM_SALESAMOUNT_1D"
        formatted_col_names: "MAX_SALESAMOUNT_1D"
        formatted_col_names: "SUM_SALESAMOUNT_-1D"
        formatted_col_names: "MAX_SALESAMOUNT_-1D"
        group_by: "PRODUCTKEY"
        sliding_interval: "12H"
        src {
          end_column: 9
          end_line: 124
          file: "SRC_POSITION_TEST_MODE"
          start_column: 31
          start_line: 117
        }
        time_col: "ORDERDATE"
        windows: "1D"
        windows: "-1D"
      }
    }
    symbol {
      value: "time_series_agg_res2"
    }
    uid: 14
    var_id {
      bitfield1: 14
    }
  }
}
client_ast_version: 1
client_language {
  python_language {
    version {
      label: "final"
      major: 3
      minor: 9
      patch: 1
    }
  }
}
client_version {
  major: 1
  minor: 25
}
