## TEST CASE

data = [
    ["2023-01-01", 101, 200],
    ["2023-01-02", 101, 100],
    ["2023-01-03", 101, 300],
    ["2023-01-04", 102, 250],
]

df = session.create_dataframe(data).to_df(
    "ORDERDATE", "PRODUCTKEY", "SALESAMOUNT"
)

moving_agg_res = df.analytics.moving_agg(
    aggs={"SALESAMOUNT": ["SUM", "AVG"]},
    window_sizes=[2, 3],
    order_by=["ORDERDATE"],
    group_by=["PRODUCTKEY"],
)

cumulative_agg_res = df.analytics.cumulative_agg(
    aggs={"SALESAMOUNT": ["SUM", "MIN", "MAX"]},
    group_by=["PRODUCTKEY"],
    order_by=["ORDERDATE"],
    is_forward=True
)

compute_lag_res = df.analytics.compute_lag(
    cols=["SALESAMOUNT"],
    lags=[1, 2],
    order_by=["ORDERDATE"],
    group_by=["PRODUCTKEY"],
)

compute_lead_res = df.analytics.compute_lead(
    cols=["SALESAMOUNT"],
    leads=[1, 2],
    order_by=["ORDERDATE"],
    group_by=["PRODUCTKEY"],
)

df = df.with_column("ORDERDATE", to_timestamp(df["ORDERDATE"]))

def custom_formatter(input_col, agg, window):
    return f"{agg}_{input_col}_{window}"

time_series_agg_res = df.analytics.time_series_agg(
    time_col="ORDERDATE",
    aggs={"SALESAMOUNT": ["SUM", "MAX"]},
    windows=["1D", "-1D"],
    group_by=["PRODUCTKEY"],
    sliding_interval="12H",
    col_formatter=custom_formatter,
)

## EXPECTED UNPARSER OUTPUT



## EXPECTED ENCODED AST

CpMFCpAFCoEF8gX9BAreBArbBAqUAcICkAEKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShhEiuCDCgKGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShhEgoyMDIzLTAxLTAxEiGyAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShhEGUSIrICHwoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGEQyAEKkwHCAo8BChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRIrggwoChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRIKMjAyMy0wMS0wMhIhsgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRBlEiGyAh4KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShhEGQKlAHCApABChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRIrggwoChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRIKMjAyMy0wMS0wMxIhsgIeChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRBlEiKyAh8KGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShhEKwCCpQBwgKQAQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGESK4IMKAoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGESCjIwMjMtMDEtMDQSIbICHgoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGEQZhIisgIfChoaFlNSQ19QT1NJVElPTl9URVNUX01PREUoYRD6ARoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGESBAoCZGYYASICCAEKXgpcCk7CCUsKCU9SREVSREFURQoKUFJPRFVDVEtFWQoLU0FMRVNBTU9VTlQSB4ICBAoCCAEaGhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShhIAESBAoCZGYYAiICCAIKxwEKxAEKqQGiBqUBChcKC1NBTEVTQU1PVU5UEgNTVU0SA0FWRxIHggIECgIIAhoRU0FMRVNBTU9VTlRfU1VNXzIaEVNBTEVTQU1PVU5UX0FWR18yGhFTQUxFU0FNT1VOVF9TVU1fMxoRU0FMRVNBTU9VTlRfQVZHXzMiClBST0RVQ1RLRVkqCU9SREVSREFURTIaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKGU6AgIDEhAKDm1vdmluZ19hZ2dfcmVzGAMiAggDCrUBCrIBCpMBmgaPAQocCgtTQUxFU0FNT1VOVBIDU1VNEgNNSU4SA01BWBIHggIECgIIAhoPU0FMRVNBTU9VTlRfU1VNGg9TQUxFU0FNT1VOVF9NSU4aD1NBTEVTQU1PVU5UX01BWCIKUFJPRFVDVEtFWSgBMglPUkRFUkRBVEU6GhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShsEhQKEmN1bXVsYXRpdmVfYWdnX3JlcxgEIgIIBAq3AQq0AQqYAYoGlAEKLIIMKQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHMSC1NBTEVTQU1PVU5UEgeCAgQKAggCGhFTQUxFU0FNT1VOVF9MQUdfMRoRU0FMRVNBTU9VTlRfTEFHXzIiClBST0RVQ1RLRVkqAgECMglPUkRFUkRBVEU6GhoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERShzEhEKD2NvbXB1dGVfbGFnX3JlcxgFIgIIBQq6AQq3AQqaAZIGlgEKLIIMKQoaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHoSC1NBTEVTQU1PVU5UEgeCAgQKAggCGhJTQUxFU0FNT1VOVF9MRUFEXzEaElNBTEVTQU1PVU5UX0xFQURfMiIKUFJPRFVDVEtFWSoCAQIyCU9SREVSREFURToaGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKHoSEgoQY29tcHV0ZV9sZWFkX3JlcxgGIgIIBgrUAQrRAQrCAfoJvgEKigGKAYYBCjEaLwoQCg4KDHRvX3RpbWVzdGFtcBIbGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKIEBGjTCBjEKCU9SREVSREFURRIHggIECgIIAhobGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKIEBIhsaFlNSQ19QT1NJVElPTl9URVNUX01PREUogQESCU9SREVSREFURRoHggIECgIIAiIbGhZTUkNfUE9TSVRJT05fVEVTVF9NT0RFKIEBEgQKAmRmGAciAggHCt0BCtoBCroBqga2AQoXCgtTQUxFU0FNT1VOVBIDU1VNEgNNQVgSB4ICBAoCCAcaElNVTV9TQUxFU0FNT1VOVF8xRBoSTUFYX1NBTEVTQU1PVU5UXzFEGhNTVU1fU0FMRVNBTU9VTlRfLTFEGhNNQVhfU0FMRVNBTU9VTlRfLTFEIgpQUk9EVUNUS0VZKgMxMkgyGxoWU1JDX1BPU0lUSU9OX1RFU1RfTU9ERSiGAToJT1JERVJEQVRFQgIxREIDLTFEEhUKE3RpbWVfc2VyaWVzX2FnZ19yZXMYCCICCAgQARoREg8KDQoFZmluYWwQAxgJIBMiBBABGBU=
