module,name,message,status
tests.integ.modin.binary.test_binary_not_implemented,test_binary_op_dot[<lambda>-DataFrame0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.binary.test_binary_not_implemented,test_binary_op_dot[<lambda>-DataFrame1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.binary.test_binary_not_implemented,test_binary_op_dot[<lambda>-Series0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.binary.test_binary_not_implemented,test_binary_op_dot[<lambda>-Series1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.binary.test_binary_not_implemented,test_binary_op_xor[<lambda>0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.binary.test_binary_not_implemented,test_binary_op_xor[<lambda>1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series[floordiv-rhs2-lhs0],AttributeError: 'bool' object has no attribute 'any',failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series[floordiv-rhs2-lhs1],AttributeError: 'bool' object has no attribute 'any',failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series[floordiv-rhs2-lhs2],AttributeError: 'bool' object has no attribute 'any',failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series[floordiv-rhs2-lhs3],AttributeError: 'bool' object has no attribute 'any',failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series[floordiv-rhs3-lhs0],AttributeError: 'bool' object has no attribute 'any',failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series[floordiv-rhs3-lhs1],AttributeError: 'bool' object has no attribute 'any',failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series[floordiv-rhs3-lhs2],AttributeError: 'bool' object has no attribute 'any',failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series[floordiv-rhs3-lhs3],AttributeError: 'bool' object has no attribute 'any',failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[floordiv-rhs0-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[floordiv-rhs0-lhs1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[floordiv-rhs0-lhs2],ZeroDivisionError: float floor division by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[floordiv-rhs0-lhs3],ZeroDivisionError: float floor division by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[floordiv-rhs0-lhs4],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[floordiv-rhs1-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[floordiv-rhs1-lhs1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[floordiv-rhs1-lhs2],ZeroDivisionError: float floor division by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[floordiv-rhs1-lhs3],ZeroDivisionError: float floor division by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[floordiv-rhs1-lhs4],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[floordiv-rhs2-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[floordiv-rhs2-lhs1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[floordiv-rhs2-lhs2],ZeroDivisionError: float floor division by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[floordiv-rhs2-lhs3],ZeroDivisionError: float floor division by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[floordiv-rhs2-lhs4],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[floordiv-rhs3-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[floordiv-rhs3-lhs1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[floordiv-rhs3-lhs2],ZeroDivisionError: float floor division by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[floordiv-rhs3-lhs3],ZeroDivisionError: float floor division by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[floordiv-rhs3-lhs4],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[truediv-rhs0-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[truediv-rhs0-lhs1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[truediv-rhs0-lhs2],ZeroDivisionError: float division by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[truediv-rhs0-lhs3],ZeroDivisionError: float division by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[truediv-rhs0-lhs4],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[truediv-rhs1-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[truediv-rhs1-lhs1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[truediv-rhs1-lhs2],ZeroDivisionError: float division by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[truediv-rhs1-lhs3],ZeroDivisionError: float division by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[truediv-rhs1-lhs4],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[truediv-rhs2-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[truediv-rhs2-lhs1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[truediv-rhs2-lhs2],ZeroDivisionError: float division by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[truediv-rhs2-lhs3],ZeroDivisionError: float division by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[truediv-rhs2-lhs4],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[truediv-rhs3-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[truediv-rhs3-lhs1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[truediv-rhs3-lhs2],ZeroDivisionError: float division by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[truediv-rhs3-lhs3],ZeroDivisionError: float division by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_division_between_series_div_by_zero_negative[truediv-rhs3-lhs4],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[add-rhs0-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[add-rhs1-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[add-rhs2-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[floordiv-rhs0-lhs0],ZeroDivisionError: integer division or modulo by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[floordiv-rhs1-lhs0],TypeError: '<' not supported between instances of 'NoneType' and 'int',failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[floordiv-rhs2-lhs0],AttributeError: 'bool' object has no attribute 'any',failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[mul-rhs0-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[mul-rhs1-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[mul-rhs2-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[radd-rhs0-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[radd-rhs1-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[radd-rhs2-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[rfloordiv-rhs0-lhs0],ZeroDivisionError: integer division or modulo by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[rfloordiv-rhs1-lhs0],ZeroDivisionError: float floor division by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[rfloordiv-rhs2-lhs0],ZeroDivisionError: float floor division by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[rmul-rhs0-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[rmul-rhs1-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[rmul-rhs2-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[rsub-rhs0-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[rsub-rhs1-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[rsub-rhs2-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[rtruediv-rhs0-lhs0],ZeroDivisionError: division by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[rtruediv-rhs1-lhs0],ZeroDivisionError: float division by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[rtruediv-rhs2-lhs0],ZeroDivisionError: float division by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[sub-rhs0-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[sub-rhs1-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[sub-rhs2-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[truediv-rhs0-lhs0],ZeroDivisionError: division by zero,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[truediv-rhs1-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_arithmetic_binary_ops_between_series_with_booleans_negative[truediv-rhs2-lhs0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_add_dataframe_and_series_axis0[df0-s0],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 3)
[right]: (4, 5)",failed
tests.integ.modin.binary.test_binary_op,test_binary_add_dataframe_and_series_axis0[df1-s1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 6)",failed
tests.integ.modin.binary.test_binary_op,test_binary_add_dataframe_and_series_axis0_with_type_mismatch_for_index_negative[df0-s0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_add_dataframe_sub_series_axis1[df0-s0],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (7, 5)
[right]: (2, 7)",failed
tests.integ.modin.binary.test_binary_op,test_binary_add_dataframe_sub_series_axis1[df1-s1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 6)",failed
tests.integ.modin.binary.test_binary_op,test_binary_add_dataframe_sub_series_axis1[df2-s2],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (7, 3)
[right]: (4, 3)",failed
tests.integ.modin.binary.test_binary_op,test_binary_add_dataframe_sub_series_axis1[df3-s3],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 5)
[right]: (2, 4)",failed
tests.integ.modin.binary.test_binary_op,test_binary_add_dataframe_sub_series_axis1[df4-s4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (7, 2)
[right]: (4, 6)",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_method_array_scalar,Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_method_number_scalar_negative[<lambda>0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_method_number_scalar_negative[<lambda>1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_method_number_scalar_negative[<lambda>2],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_method_number_scalar_negative[<lambda>3],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_method_number_scalar_negative[<lambda>4],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_method_number_scalar_negative[<lambda>5],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_method_number_scalar_negative[<lambda>6],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_method_string_scalar_negative[<lambda>0],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_method_string_scalar_negative[<lambda>1],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_df_and_scalar_nan_behavior_deviates[10.001-add],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [24.000999999999998, nan, nan]
At positional index 0, first diff: nan != 24.000999999999998",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_df_and_scalar_nan_behavior_deviates[10.001-floordiv],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [1.0, nan, nan]
At positional index 0, first diff: nan != 1.0",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_df_and_scalar_nan_behavior_deviates[10.001-mod],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [3.9990000000000006, nan, nan]
At positional index 0, first diff: nan != 3.9990000000000006",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_df_and_scalar_nan_behavior_deviates[10.001-mul],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [140.01399999999998, nan, nan]
At positional index 0, first diff: nan != 140.01399999999998",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_df_and_scalar_nan_behavior_deviates[10.001-pow],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [290019022754.90625, nan, nan]
At positional index 0, first diff: nan != 290019022754.90625",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_df_and_scalar_nan_behavior_deviates[10.001-radd],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [24.000999999999998, nan, nan]
At positional index 0, first diff: nan != 24.000999999999998",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_df_and_scalar_nan_behavior_deviates[10.001-rfloordiv],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [0.0, nan, nan]
At positional index 0, first diff: nan != 0.0",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_df_and_scalar_nan_behavior_deviates[10.001-rmod],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [10.001, nan, nan]
At positional index 0, first diff: nan != 10.001",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_df_and_scalar_nan_behavior_deviates[10.001-rmul],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [140.01399999999998, nan, nan]
At positional index 0, first diff: nan != 140.01399999999998",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_df_and_scalar_nan_behavior_deviates[10.001-rpow],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [100140091036409.94, nan, nan]
At positional index 0, first diff: nan != 100140091036409.94",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_df_and_scalar_nan_behavior_deviates[10.001-rsub],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [-3.9990000000000006, nan, nan]
At positional index 0, first diff: nan != -3.9990000000000006",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_df_and_scalar_nan_behavior_deviates[10.001-rtruediv],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [0.7143571428571428, nan, nan]
At positional index 0, first diff: nan != 0.7143571428571428",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_df_and_scalar_nan_behavior_deviates[10.001-sub],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [3.9990000000000006, nan, nan]
At positional index 0, first diff: nan != 3.9990000000000006",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_df_and_scalar_nan_behavior_deviates[10.001-truediv],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [1.3998600139986002, nan, nan]
At positional index 0, first diff: nan != 1.3998600139986002",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_series_and_scalar_nan[10.001-add],"AssertionError: Series are different

Series values are different (60.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [nan, nan, nan, nan, nan]
[right]: [24.000999999999998, 26.801000000000002, nan, 185.001, nan]
At positional index 0, first diff: nan != 24.000999999999998",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_series_and_scalar_nan[10.001-floordiv],"AssertionError: Series are different

Series values are different (60.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [nan, nan, nan, nan, nan]
[right]: [1.0, 1.0, nan, 17.0, nan]
At positional index 0, first diff: nan != 1.0",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_series_and_scalar_nan[10.001-mod],"AssertionError: Series are different

Series values are different (60.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [nan, nan, nan, nan, nan]
[right]: [3.9990000000000006, 6.799000000000001, nan, 4.983000000000009, nan]
At positional index 0, first diff: nan != 3.9990000000000006",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_series_and_scalar_nan[10.001-mul],"AssertionError: Series are different

Series values are different (60.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [nan, nan, nan, nan, nan]
[right]: [140.01399999999998, 168.0168, nan, 1750.175, nan]
At positional index 0, first diff: nan != 140.01399999999998",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_series_and_scalar_nan[10.001-pow],"AssertionError: Series are different

Series values are different (60.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [nan, nan, nan, nan, nan]
[right]: [290019022754.90625, 1796048774939.5837, nan, 2.7078432771126627e+22, nan]
At positional index 0, first diff: nan != 290019022754.90625",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_series_and_scalar_nan[10.001-radd],"AssertionError: Series are different

Series values are different (60.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [nan, nan, nan, nan, nan]
[right]: [24.000999999999998, 26.801000000000002, nan, 185.001, nan]
At positional index 0, first diff: nan != 24.000999999999998",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_series_and_scalar_nan[10.001-rfloordiv],"AssertionError: Series are different

Series values are different (60.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [nan, nan, nan, nan, nan]
[right]: [0.0, 0.0, nan, 0.0, nan]
At positional index 0, first diff: nan != 0.0",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_series_and_scalar_nan[10.001-rmod],"AssertionError: Series are different

Series values are different (60.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [nan, nan, nan, nan, nan]
[right]: [10.001, 10.001, nan, 10.001, nan]
At positional index 0, first diff: nan != 10.001",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_series_and_scalar_nan[10.001-rmul],"AssertionError: Series are different

Series values are different (60.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [nan, nan, nan, nan, nan]
[right]: [140.01399999999998, 168.0168, nan, 1750.175, nan]
At positional index 0, first diff: nan != 140.01399999999998",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_series_and_scalar_nan[10.001-rpow],"AssertionError: Series are different

Series values are different (60.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [nan, nan, nan, nan, nan]
[right]: [100140091036409.94, 6.320181906387712e+16, nan, 1.0176531317632308e+175, nan]
At positional index 0, first diff: nan != 100140091036409.94",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_series_and_scalar_nan[10.001-rsub],"AssertionError: Series are different

Series values are different (60.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [nan, nan, nan, nan, nan]
[right]: [-3.9990000000000006, -6.799000000000001, nan, -164.999, nan]
At positional index 0, first diff: nan != -3.9990000000000006",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_series_and_scalar_nan[10.001-rtruediv],"AssertionError: Series are different

Series values are different (60.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [nan, nan, nan, nan, nan]
[right]: [0.7143571428571428, 0.595297619047619, nan, 0.057148571428571424, nan]
At positional index 0, first diff: nan != 0.7143571428571428",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_series_and_scalar_nan[10.001-sub],"AssertionError: Series are different

Series values are different (60.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [nan, nan, nan, nan, nan]
[right]: [3.9990000000000006, 6.799000000000001, nan, 164.999, nan]
At positional index 0, first diff: nan != 3.9990000000000006",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_between_series_and_scalar_nan[10.001-truediv],"AssertionError: Series are different

Series values are different (60.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [nan, nan, nan, nan, nan]
[right]: [1.3998600139986002, 1.6798320167983203, nan, 17.498250174982502, nan]
At positional index 0, first diff: nan != 1.3998600139986002",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value0-add],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 3 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value0-floordiv],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 3 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value0-mod],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 3 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value0-mul],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 3 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value0-pow],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 3 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value0-radd],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 3 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value0-rfloordiv],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 3 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value0-rmod],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 3 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value0-rmul],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 3 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value0-rpow],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 3 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value0-rsub],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 3 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value0-rtruediv],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 3 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value0-sub],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 3 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value0-truediv],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 3 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value1-add],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 0 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value1-floordiv],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 0 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value1-mod],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 0 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value1-mul],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 0 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value1-pow],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 0 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value1-radd],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 0 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value1-rfloordiv],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 0 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value1-rmod],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 0 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value1-rmul],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 0 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value1-rpow],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 0 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value1-rsub],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 0 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value1-rtruediv],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 0 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value1-sub],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 0 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_non_scalar_fill_value_negative[fill_value1-truediv],"AssertionError: Regex pattern did not match.
 Regex: 'Only scalars can be used as fill_value.'
 Input: 'NumPy boolean array indexing assignment cannot assign 0 input values to the 1 output values where the mask is true'",failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_single_element_list_like_fill_value_negative[add],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_single_element_list_like_fill_value_negative[floordiv],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_single_element_list_like_fill_value_negative[mod],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_single_element_list_like_fill_value_negative[mul],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_single_element_list_like_fill_value_negative[pow],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_single_element_list_like_fill_value_negative[radd],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_single_element_list_like_fill_value_negative[rfloordiv],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_single_element_list_like_fill_value_negative[rmod],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_single_element_list_like_fill_value_negative[rmul],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_single_element_list_like_fill_value_negative[rpow],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_single_element_list_like_fill_value_negative[rsub],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_single_element_list_like_fill_value_negative[rtruediv],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_single_element_list_like_fill_value_negative[sub],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_arithmetic_ops_with_single_element_list_like_fill_value_negative[truediv],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_bitwise_op_on_df[df10-df20-<lambda>-expected0],"AssertionError: DataFrame.iloc[:, 1] (column name=""1"") are different

DataFrame.iloc[:, 1] (column name=""1"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [False, False, False]
[right]: [None, False, None]",failed
tests.integ.modin.binary.test_binary_op,test_binary_bitwise_op_on_df[df10-df20-<lambda>-expected1],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [True, False, False]
[right]: [True, None, None]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_between_non_supported_types[ge-data0-s],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_between_non_supported_types[ge-data1-s],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_between_non_supported_types[ge-data2-s],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_between_non_supported_types[ge-data3-s],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_between_non_supported_types[ge-data4-1672560000.0],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_between_non_supported_types[gt-data0-s],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_between_non_supported_types[gt-data1-s],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_between_non_supported_types[gt-data2-s],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_between_non_supported_types[gt-data3-s],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_between_non_supported_types[gt-data4-1672560000.0],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_between_non_supported_types[le-data0-s],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_between_non_supported_types[le-data1-s],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_between_non_supported_types[le-data2-s],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_between_non_supported_types[le-data3-s],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_between_non_supported_types[le-data4-1672560000.0],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_between_non_supported_types[lt-data0-s],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_between_non_supported_types[lt-data1-s],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_between_non_supported_types[lt-data2-s],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_between_non_supported_types[lt-data3-s],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_between_non_supported_types[lt-data4-1672560000.0],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_different_types[eq],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_different_types[ge],TypeError: '>=' not supported between instances of 'str' and 'int',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_different_types[gt],TypeError: '>' not supported between instances of 'str' and 'int',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_different_types[le],TypeError: '<=' not supported between instances of 'str' and 'int',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_different_types[lt],TypeError: '<' not supported between instances of 'str' and 'int',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_different_types[ne],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[eq-rhs0-lhs0],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
[right]: [True, <NA>, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[eq-rhs0-lhs1],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
[right]: [False, <NA>, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[eq-rhs0-lhs2],"AssertionError: Series are different

Series values are different (22.22222 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
[right]: [False, <NA>, False, False, False, False, False, False, <NA>, <NA>, False, False, False, False, False, False, False, <NA>]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[eq-rhs0-lhs3],"AssertionError: Series are different

Series values are different (16.66667 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
[right]: [False, <NA>, False, False, False, False, False, <NA>, False, <NA>, False, False, False, False, False, False, False, False]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[eq-rhs1-lhs0],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
[right]: [False, <NA>, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[eq-rhs1-lhs1],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
[right]: [True, <NA>, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[eq-rhs1-lhs2],"AssertionError: Series are different

Series values are different (22.22222 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
[right]: [False, <NA>, False, False, False, False, False, False, <NA>, <NA>, False, False, False, False, False, False, False, <NA>]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[eq-rhs1-lhs3],"AssertionError: Series are different

Series values are different (16.66667 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
[right]: [False, <NA>, False, False, False, False, False, <NA>, False, <NA>, False, False, False, False, False, False, False, False]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[eq-rhs2-lhs0],"AssertionError: Series are different

Series values are different (22.22222 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
[right]: [False, <NA>, False, False, False, False, False, False, <NA>, <NA>, False, False, False, False, False, False, False, <NA>]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[eq-rhs2-lhs1],"AssertionError: Series are different

Series values are different (22.22222 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
[right]: [False, <NA>, False, False, False, False, False, False, <NA>, <NA>, False, False, False, False, False, False, False, <NA>]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[eq-rhs2-lhs2],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
[right]: [True, True, True, True, True, True, True, True, <NA>, <NA>, True, True, True, True, True, True, True, <NA>]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[eq-rhs2-lhs3],"AssertionError: Series are different

Series values are different (27.77778 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
[right]: [False, <NA>, False, False, False, False, False, <NA>, <NA>, <NA>, False, False, False, False, False, False, False, <NA>]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[eq-rhs3-lhs0],"AssertionError: Series are different

Series values are different (16.66667 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
[right]: [False, <NA>, False, False, False, False, False, <NA>, False, <NA>, False, False, False, False, False, False, False, False]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[eq-rhs3-lhs1],"AssertionError: Series are different

Series values are different (16.66667 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
[right]: [False, <NA>, False, False, False, False, False, <NA>, False, <NA>, False, False, False, False, False, False, False, False]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[eq-rhs3-lhs2],"AssertionError: Series are different

Series values are different (27.77778 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
[right]: [False, <NA>, False, False, False, False, False, <NA>, <NA>, <NA>, False, False, False, False, False, False, False, <NA>]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[eq-rhs3-lhs3],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
[right]: [True, <NA>, True, True, True, True, True, <NA>, True, <NA>, True, True, True, True, True, True, True, True]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ge-rhs0-lhs0],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
[right]: [True, <NA>, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ge-rhs0-lhs1],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, False, True, True, True, False, True, True, True, True, False, True, True, True, False, True, True, False]
[right]: [True, <NA>, True, True, True, False, True, True, True, True, False, True, True, True, False, True, True, False]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ge-rhs0-lhs2],TypeError: '>=' not supported between instances of 'NoneType' and 'float',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ge-rhs0-lhs3],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ge-rhs1-lhs0],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, False, False, False, False, True, False, False, False, False, True, False, False, False, True, False, False, True]
[right]: [False, <NA>, False, False, False, True, False, False, False, False, True, False, False, False, True, False, False, True]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ge-rhs1-lhs1],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
[right]: [True, <NA>, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ge-rhs1-lhs2],TypeError: '>=' not supported between instances of 'NoneType' and 'float',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ge-rhs1-lhs3],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ge-rhs2-lhs0],TypeError: '>=' not supported between instances of 'float' and 'NoneType',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ge-rhs2-lhs1],TypeError: '>=' not supported between instances of 'float' and 'NoneType',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ge-rhs2-lhs2],TypeError: '>=' not supported between instances of 'NoneType' and 'NoneType',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ge-rhs2-lhs3],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ge-rhs3-lhs0],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ge-rhs3-lhs1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ge-rhs3-lhs2],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ge-rhs3-lhs3],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[gt-rhs0-lhs0],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
[right]: [False, <NA>, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[gt-rhs0-lhs1],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, False, True, True, True, False, True, True, True, True, False, True, True, True, False, True, True, False]
[right]: [True, <NA>, True, True, True, False, True, True, True, True, False, True, True, True, False, True, True, False]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[gt-rhs0-lhs2],TypeError: '>' not supported between instances of 'NoneType' and 'float',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[gt-rhs0-lhs3],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[gt-rhs1-lhs0],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, False, False, False, False, True, False, False, False, False, True, False, False, False, True, False, False, True]
[right]: [False, <NA>, False, False, False, True, False, False, False, False, True, False, False, False, True, False, False, True]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[gt-rhs1-lhs1],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
[right]: [False, <NA>, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[gt-rhs1-lhs2],TypeError: '>' not supported between instances of 'NoneType' and 'float',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[gt-rhs1-lhs3],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[gt-rhs2-lhs0],TypeError: '>' not supported between instances of 'float' and 'NoneType',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[gt-rhs2-lhs1],TypeError: '>' not supported between instances of 'float' and 'NoneType',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[gt-rhs2-lhs2],TypeError: '>' not supported between instances of 'NoneType' and 'NoneType',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[gt-rhs2-lhs3],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[gt-rhs3-lhs0],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[gt-rhs3-lhs1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[gt-rhs3-lhs2],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[gt-rhs3-lhs3],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[le-rhs0-lhs0],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
[right]: [True, <NA>, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[le-rhs0-lhs1],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, False, False, False, False, True, False, False, False, False, True, False, False, False, True, False, False, True]
[right]: [False, <NA>, False, False, False, True, False, False, False, False, True, False, False, False, True, False, False, True]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[le-rhs0-lhs2],TypeError: '<=' not supported between instances of 'NoneType' and 'float',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[le-rhs0-lhs3],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[le-rhs1-lhs0],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, False, True, True, True, False, True, True, True, True, False, True, True, True, False, True, True, False]
[right]: [True, <NA>, True, True, True, False, True, True, True, True, False, True, True, True, False, True, True, False]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[le-rhs1-lhs1],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
[right]: [True, <NA>, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[le-rhs1-lhs2],TypeError: '<=' not supported between instances of 'NoneType' and 'float',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[le-rhs1-lhs3],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[le-rhs2-lhs0],TypeError: '<=' not supported between instances of 'float' and 'NoneType',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[le-rhs2-lhs1],TypeError: '<=' not supported between instances of 'float' and 'NoneType',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[le-rhs2-lhs2],TypeError: '<=' not supported between instances of 'NoneType' and 'NoneType',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[le-rhs2-lhs3],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[le-rhs3-lhs0],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[le-rhs3-lhs1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[le-rhs3-lhs2],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[le-rhs3-lhs3],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[lt-rhs0-lhs0],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
[right]: [False, <NA>, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[lt-rhs0-lhs1],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, False, False, False, False, True, False, False, False, False, True, False, False, False, True, False, False, True]
[right]: [False, <NA>, False, False, False, True, False, False, False, False, True, False, False, False, True, False, False, True]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[lt-rhs0-lhs2],TypeError: '<' not supported between instances of 'NoneType' and 'float',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[lt-rhs0-lhs3],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[lt-rhs1-lhs0],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, False, True, True, True, False, True, True, True, True, False, True, True, True, False, True, True, False]
[right]: [True, <NA>, True, True, True, False, True, True, True, True, False, True, True, True, False, True, True, False]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[lt-rhs1-lhs1],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
[right]: [False, <NA>, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[lt-rhs1-lhs2],TypeError: '<' not supported between instances of 'NoneType' and 'float',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[lt-rhs1-lhs3],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[lt-rhs2-lhs0],TypeError: '<' not supported between instances of 'float' and 'NoneType',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[lt-rhs2-lhs1],TypeError: '<' not supported between instances of 'float' and 'NoneType',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[lt-rhs2-lhs2],TypeError: '<' not supported between instances of 'NoneType' and 'NoneType',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[lt-rhs2-lhs3],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[lt-rhs3-lhs0],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[lt-rhs3-lhs1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[lt-rhs3-lhs2],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[lt-rhs3-lhs3],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ne-rhs0-lhs0],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
[right]: [False, <NA>, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ne-rhs0-lhs1],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
[right]: [True, <NA>, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ne-rhs0-lhs2],"AssertionError: Series are different

Series values are different (22.22222 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
[right]: [True, <NA>, True, True, True, True, True, True, <NA>, <NA>, True, True, True, True, True, True, True, <NA>]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ne-rhs0-lhs3],"AssertionError: Series are different

Series values are different (16.66667 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
[right]: [True, <NA>, True, True, True, True, True, <NA>, True, <NA>, True, True, True, True, True, True, True, True]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ne-rhs1-lhs0],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
[right]: [True, <NA>, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ne-rhs1-lhs1],"AssertionError: Series are different

Series values are different (5.55556 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
[right]: [False, <NA>, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ne-rhs1-lhs2],"AssertionError: Series are different

Series values are different (22.22222 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
[right]: [True, <NA>, True, True, True, True, True, True, <NA>, <NA>, True, True, True, True, True, True, True, <NA>]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ne-rhs1-lhs3],"AssertionError: Series are different

Series values are different (16.66667 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
[right]: [True, <NA>, True, True, True, True, True, <NA>, True, <NA>, True, True, True, True, True, True, True, True]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ne-rhs2-lhs0],"AssertionError: Series are different

Series values are different (22.22222 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
[right]: [True, <NA>, True, True, True, True, True, True, <NA>, <NA>, True, True, True, True, True, True, True, <NA>]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ne-rhs2-lhs1],"AssertionError: Series are different

Series values are different (22.22222 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
[right]: [True, <NA>, True, True, True, True, True, True, <NA>, <NA>, True, True, True, True, True, True, True, <NA>]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ne-rhs2-lhs2],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
[right]: [False, False, False, False, False, False, False, False, <NA>, <NA>, False, False, False, False, False, False, False, <NA>]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ne-rhs2-lhs3],"AssertionError: Series are different

Series values are different (27.77778 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
[right]: [True, <NA>, True, True, True, True, True, <NA>, <NA>, <NA>, True, True, True, True, True, True, True, <NA>]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ne-rhs3-lhs0],"AssertionError: Series are different

Series values are different (16.66667 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
[right]: [True, <NA>, True, True, True, True, True, <NA>, True, <NA>, True, True, True, True, True, True, True, True]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ne-rhs3-lhs1],"AssertionError: Series are different

Series values are different (16.66667 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
[right]: [True, <NA>, True, True, True, True, True, <NA>, True, <NA>, True, True, True, True, True, True, True, True]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ne-rhs3-lhs2],"AssertionError: Series are different

Series values are different (27.77778 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
[right]: [True, <NA>, True, True, True, True, True, <NA>, <NA>, <NA>, True, True, True, True, True, True, True, <NA>]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_numeric[ne-rhs3-lhs3],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
[left]:  [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
[right]: [False, <NA>, False, False, False, False, False, <NA>, False, <NA>, False, False, False, False, False, False, False, False]",failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_variant[eq-rhs0-lhs0],assert True is None,failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_variant[ge-rhs0-lhs0],TypeError: '>=' not supported between instances of 'NoneType' and 'NoneType',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_variant[gt-rhs0-lhs0],TypeError: '>' not supported between instances of 'NoneType' and 'NoneType',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_variant[le-rhs0-lhs0],TypeError: '<=' not supported between instances of 'NoneType' and 'NoneType',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_variant[lt-rhs0-lhs0],TypeError: '<' not supported between instances of 'NoneType' and 'NoneType',failed
tests.integ.modin.binary.test_binary_op,test_binary_comparison_method_between_series_variant[ne-rhs0-lhs0],assert False is None,failed
tests.integ.modin.binary.test_binary_op,test_binary_fails_raises_not_implemented_error_for_series_mod[ser0],"TypeError: ufunc 'isnan' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''",failed
tests.integ.modin.binary.test_binary_op,test_binary_fails_raises_not_implemented_error_for_series_mod[ser1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_for_str_series_mod[ser0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_for_str_series_mod[ser1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_for_str_series_mod[ser2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_for_str_series_mod[ser3],TypeError: not all arguments converted during string formatting,failed
tests.integ.modin.binary.test_binary_op,test_binary_for_str_series_mod[ser4],ValueError: cannot convert float NaN to integer,failed
tests.integ.modin.binary.test_binary_op,test_binary_for_str_series_mod[ser5],ValueError: incomplete format,failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_df_and_list_like[index-__and__],"ValueError: Unable to coerce to Series, length must be 2: given 3",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_df_and_list_like[index-__or__],"ValueError: Unable to coerce to Series, length must be 2: given 3",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_df_and_list_like[index-__rand__],"ValueError: Unable to coerce to Series, length must be 2: given 3",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_df_and_list_like[index-__ror__],"ValueError: Unable to coerce to Series, length must be 2: given 3",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_df_and_list_like[index_with_name-__and__],"ValueError: Unable to coerce to Series, length must be 2: given 3",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_df_and_list_like[index_with_name-__or__],"ValueError: Unable to coerce to Series, length must be 2: given 3",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_df_and_list_like[index_with_name-__rand__],"ValueError: Unable to coerce to Series, length must be 2: given 3",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_df_and_list_like[index_with_name-__ror__],"ValueError: Unable to coerce to Series, length must be 2: given 3",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_df_and_list_like[list-__and__],"ValueError: Unable to coerce to Series, length must be 2: given 3",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_df_and_list_like[list-__or__],"ValueError: Unable to coerce to Series, length must be 2: given 3",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_df_and_list_like[list-__rand__],"ValueError: Unable to coerce to Series, length must be 2: given 3",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_df_and_list_like[list-__ror__],"ValueError: Unable to coerce to Series, length must be 2: given 3",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_df_and_list_like[ndarray-__and__],"ValueError: Unable to coerce to Series, length must be 2: given 3",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_df_and_list_like[ndarray-__or__],"ValueError: Unable to coerce to Series, length must be 2: given 3",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_df_and_list_like[ndarray-__rand__],"ValueError: Unable to coerce to Series, length must be 2: given 3",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_df_and_list_like[ndarray-__ror__],"ValueError: Unable to coerce to Series, length must be 2: given 3",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_series_and_list_like[index-__and__],"ValueError: Unable to coerce to Series, length must be 1: given 6",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_series_and_list_like[index-__or__],"ValueError: Unable to coerce to Series, length must be 1: given 6",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_series_and_list_like[index-__rand__],"ValueError: Unable to coerce to Series, length must be 1: given 6",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_series_and_list_like[index-__ror__],"ValueError: Unable to coerce to Series, length must be 1: given 6",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_series_and_list_like[index_with_name-__and__],"ValueError: Unable to coerce to Series, length must be 1: given 6",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_series_and_list_like[index_with_name-__or__],"ValueError: Unable to coerce to Series, length must be 1: given 6",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_series_and_list_like[index_with_name-__rand__],"ValueError: Unable to coerce to Series, length must be 1: given 6",failed
tests.integ.modin.binary.test_binary_op,test_binary_logic_operations_between_series_and_list_like[index_with_name-__ror__],"ValueError: Unable to coerce to Series, length must be 1: given 6",failed
tests.integ.modin.binary.test_binary_op,test_binary_method_datetime_with_dateoffset_replacement[dateoffset0],pandas._libs.tslibs.np_datetime.OutOfBoundsDatetime: Cannot cast 0001-01-02 03:04:05 to unit='ns' without overflow.,failed
tests.integ.modin.binary.test_binary_op,test_binary_method_datetime_with_dateoffset_replacement[dateoffset1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_method_datetime_with_dateoffset_replacement[dateoffset2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_method_datetime_with_dateoffset_replacement[dateoffset3],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_method_datetime_with_dateoffset_replacement[dateoffset4],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_method_datetime_with_dateoffset_replacement[dateoffset5],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_method_datetime_with_dateoffset_replacement[dateoffset6],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_method_datetime_with_dateoffset_replacement[dateoffset7],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_method_datetime_with_dateoffset_replacement[dateoffset8],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_method_datetime_with_dateoffset_replacement[dateoffset9],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_method_numpy_and_pandas_type_scalar[data3-scalars3],"assert [False, False, False, False] == [None, None, None, None]
  At index 0 diff: False != None
  Full diff:
  - [None, None, None, None]
  + [False, False, False, False]",failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_df_and_list_like_on_axis_0_deviating_behavior[index-mod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_df_and_list_like_on_axis_0_deviating_behavior[index-rmod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_df_and_list_like_on_axis_0_deviating_behavior[index_with_name-mod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_df_and_list_like_on_axis_0_deviating_behavior[index_with_name-rmod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_df_and_list_like_on_axis_0_deviating_behavior[list-mod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_df_and_list_like_on_axis_0_deviating_behavior[list-rmod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_df_and_list_like_on_axis_0_deviating_behavior[ndarray-mod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_df_and_list_like_on_axis_0_deviating_behavior[ndarray-rmod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_df_and_list_like_on_axis_1_deviating_behavior[index-mod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_df_and_list_like_on_axis_1_deviating_behavior[index-rmod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_df_and_list_like_on_axis_1_deviating_behavior[index_with_name-mod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_df_and_list_like_on_axis_1_deviating_behavior[index_with_name-rmod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_df_and_list_like_on_axis_1_deviating_behavior[list-mod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_df_and_list_like_on_axis_1_deviating_behavior[list-rmod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_df_and_list_like_on_axis_1_deviating_behavior[ndarray-mod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_df_and_list_like_on_axis_1_deviating_behavior[ndarray-rmod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_series_and_list_like_deviating_behavior[index-mod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_series_and_list_like_deviating_behavior[index-rmod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_series_and_list_like_deviating_behavior[index_with_name-mod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_series_and_list_like_deviating_behavior[index_with_name-rmod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_series_and_list_like_deviating_behavior[list-mod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_series_and_list_like_deviating_behavior[list-rmod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_series_and_list_like_deviating_behavior[ndarray-mod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_between_series_and_list_like_deviating_behavior[ndarray-rmod],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_deviates_between_df[native_df0-res0],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_deviates_between_df[native_df1-res1],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_deviates_between_df[native_df2-res2],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_mod_deviates_between_df[native_df3-res3],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df0-s0-add0],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 3)
[right]: (4, 5)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df0-s0-add1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 3)
[right]: (4, 5)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df0-s0-floordiv0],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 3)
[right]: (4, 5)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df0-s0-floordiv1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 3)
[right]: (4, 5)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df0-s0-mod],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 3)
[right]: (4, 5)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df0-s0-mul],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 3)
[right]: (4, 5)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df0-s0-pow],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 3)
[right]: (4, 5)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df0-s0-radd],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 3)
[right]: (4, 5)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df0-s0-rfloordiv0],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 3)
[right]: (4, 5)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df0-s0-rfloordiv1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 3)
[right]: (4, 5)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df0-s0-rmod],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 3)
[right]: (4, 5)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df0-s0-rmul],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 3)
[right]: (4, 5)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df0-s0-rpow],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 3)
[right]: (4, 5)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df0-s0-rsub],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 3)
[right]: (4, 5)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df0-s0-rtruediv],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 3)
[right]: (4, 5)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df0-s0-sub0],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 3)
[right]: (4, 5)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df0-s0-sub1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 3)
[right]: (4, 5)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df0-s0-truediv],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 3)
[right]: (4, 5)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df1-s1-add0],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 6)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df1-s1-add1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 6)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df1-s1-floordiv0],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 6)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df1-s1-floordiv1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 6)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df1-s1-mod],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 6)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df1-s1-mul],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 6)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df1-s1-pow],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 6)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df1-s1-radd],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 6)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df1-s1-rfloordiv0],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 6)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df1-s1-rfloordiv1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 6)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df1-s1-rmod],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 6)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df1-s1-rmul],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 6)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df1-s1-rpow],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 6)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df1-s1-rsub],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 6)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df1-s1-rtruediv],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 6)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df1-s1-sub0],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 6)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df1-s1-sub1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 6)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_dataframe_and_series_axis0[df1-s1-truediv],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 6)",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index0-add],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index0-floordiv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index0-mod],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index0-mul],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index0-pow],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index0-radd],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index0-rfloordiv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index0-rmod],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index0-rmul],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index0-rpow],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index0-rsub],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index0-rtruediv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index0-sub],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index0-truediv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index1-add],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index1-floordiv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index1-mod],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index1-mul],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index1-pow],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index1-radd],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index1-rfloordiv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index1-rmod],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index1-rmul],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index1-rpow],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index1-rsub],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index1-rtruediv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index1-sub],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index1-truediv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name0-add],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name0-floordiv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name0-mod],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name0-mul],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name0-pow],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name0-radd],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name0-rfloordiv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name0-rmod],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name0-rmul],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name0-rpow],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name0-rsub],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name0-rtruediv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name0-sub],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name0-truediv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name1-add],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name1-floordiv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name1-mod],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name1-mul],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name1-pow],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name1-radd],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name1-rfloordiv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name1-rmod],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name1-rmul],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name1-rpow],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name1-rsub],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name1-rtruediv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name1-sub],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[index_with_name1-truediv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list0-add],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list0-floordiv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list0-mod],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list0-mul],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list0-pow],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list0-radd],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list0-rfloordiv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list0-rmod],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list0-rmul],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list0-rpow],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list0-rsub],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list0-rtruediv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list0-sub],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list0-truediv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list1-add],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list1-floordiv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list1-mod],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list1-mul],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list1-pow],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list1-radd],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list1-rfloordiv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list1-rmod],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list1-rmul],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list1-rpow],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list1-rsub],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list1-rtruediv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list1-sub],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[list1-truediv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray0-add],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray0-floordiv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray0-mod],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray0-mul],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray0-pow],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray0-radd],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray0-rfloordiv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray0-rmod],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray0-rmul],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray0-rpow],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray0-rsub],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray0-rtruediv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray0-sub],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray0-truediv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray1-add],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray1-floordiv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray1-mod],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray1-mul],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray1-pow],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray1-radd],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray1-rfloordiv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray1-rmod],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray1-rmul],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray1-rpow],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray1-rsub],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray1-rtruediv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray1-sub],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_0[ndarray1-truediv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index0-add],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index0-floordiv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index0-mod],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index0-mul],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index0-pow],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index0-radd],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index0-rfloordiv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index0-rmod],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index0-rmul],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index0-rpow],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index0-rsub],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index0-rtruediv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index0-sub],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index0-truediv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index1-add],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index1-floordiv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index1-mod],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index1-mul],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index1-pow],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index1-radd],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index1-rfloordiv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index1-rmod],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index1-rmul],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index1-rpow],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index1-rsub],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index1-rtruediv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index1-sub],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index1-truediv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name0-add],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name0-floordiv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name0-mod],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name0-mul],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name0-pow],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name0-radd],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name0-rfloordiv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name0-rmod],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name0-rmul],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name0-rpow],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name0-rsub],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name0-rtruediv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name0-sub],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name0-truediv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name1-add],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name1-floordiv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name1-mod],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name1-mul],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name1-pow],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name1-radd],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name1-rfloordiv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name1-rmod],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name1-rmul],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name1-rpow],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name1-rsub],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name1-rtruediv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name1-sub],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[index_with_name1-truediv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list0-add],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list0-floordiv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list0-mod],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list0-mul],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list0-pow],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list0-radd],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list0-rfloordiv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list0-rmod],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list0-rmul],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list0-rpow],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list0-rsub],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list0-rtruediv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list0-sub],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list0-truediv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list1-add],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list1-floordiv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list1-mod],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list1-mul],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list1-pow],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list1-radd],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list1-rfloordiv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list1-rmod],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list1-rmul],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list1-rpow],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list1-rsub],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list1-rtruediv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list1-sub],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[list1-truediv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray0-add],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray0-floordiv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray0-mod],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray0-mul],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray0-pow],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray0-radd],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray0-rfloordiv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray0-rmod],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray0-rmul],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray0-rpow],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray0-rsub],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray0-rtruediv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray0-sub],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray0-truediv],"ValueError: Unable to coerce to Series, length must be 3: given 2",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray1-add],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray1-floordiv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray1-mod],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray1-mul],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray1-pow],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray1-radd],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray1-rfloordiv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray1-rmod],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray1-rmul],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray1-rpow],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray1-rsub],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray1-rtruediv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray1-sub],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_op_between_df_and_list_like_of_different_lengths_axis_1[ndarray1-truediv],"ValueError: Unable to coerce to Series, length must be 3: given 4",failed
tests.integ.modin.binary.test_binary_op,test_binary_pow_deviating_behavior_series[ser1-res1],"AssertionError: Attributes of Series are different

Attribute ""dtype"" are different
[left]:  object
[right]: float64",failed
tests.integ.modin.binary.test_binary_op,test_binary_pow_deviating_behavior_series[ser2-res2],"AssertionError: Attributes of Series are different

Attribute ""dtype"" are different
[left]:  object
[right]: float64",failed
tests.integ.modin.binary.test_binary_op,test_binary_pow_scalar_different_from_pandas,"AssertionError: Attributes of Series are different

Attribute ""dtype"" are different
[left]:  int64
[right]: float64",failed
tests.integ.modin.binary.test_binary_op,test_binary_single_row_dataframe_and_series[<lambda>2],AssertionError,failed
tests.integ.modin.binary.test_binary_op,test_binary_single_row_dataframe_and_series[<lambda>3],AssertionError,failed
tests.integ.modin.binary.test_binary_op,test_binary_sub_dataframe_and_dataframe_duplicate_labels_negative[df10-df20-True],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_sub_dataframe_and_dataframe_duplicate_labels_negative[df11-df21-False],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_sub_dataframe_and_dataframe_duplicate_labels_negative[df12-df22-True],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_sub_dataframe_and_dataframe_duplicate_labels_negative[df13-df23-False],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_that_deviates_for_series_mod[ser0-res0],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_that_deviates_for_series_mod[ser1-res1],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_that_deviates_for_series_mod[ser10-res10],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_that_deviates_for_series_mod[ser11-res11],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_that_deviates_for_series_mod[ser2-res2],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_that_deviates_for_series_mod[ser3-res3],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_that_deviates_for_series_mod[ser4-res4],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_that_deviates_for_series_mod[ser5-res5],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_that_deviates_for_series_mod[ser6-res6],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_that_deviates_for_series_mod[ser7-res7],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_that_deviates_for_series_mod[ser8-res8],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_binary_that_deviates_for_series_mod[ser9-res9],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.binary.test_binary_op,test_generated_docstring_examples[eq],"AssertionError: Series are different

Series values are different (40.0 %)
[index]: [a, b, c, d, f]
[left]:  [False, False, False, False, False]
[right]: [False, False, False, None, None]",failed
tests.integ.modin.binary.test_binary_op,test_generated_docstring_examples[ge],"AssertionError: Series are different

Series values are different (40.0 %)
[index]: [a, b, c, d, f]
[left]:  [True, False, False, False, False]
[right]: [True, False, False, None, None]",failed
tests.integ.modin.binary.test_binary_op,test_generated_docstring_examples[gt],"AssertionError: Series are different

Series values are different (40.0 %)
[index]: [a, b, c, d, f]
[left]:  [True, False, False, False, False]
[right]: [True, False, False, None, None]",failed
tests.integ.modin.binary.test_binary_op,test_generated_docstring_examples[le],"AssertionError: Series are different

Series values are different (40.0 %)
[index]: [a, b, c, d, f]
[left]:  [False, True, True, False, False]
[right]: [False, True, True, None, None]",failed
tests.integ.modin.binary.test_binary_op,test_generated_docstring_examples[lt],"AssertionError: Series are different

Series values are different (40.0 %)
[index]: [a, b, c, d, f]
[left]:  [False, True, True, False, False]
[right]: [False, True, True, None, None]",failed
tests.integ.modin.binary.test_binary_op,test_generated_docstring_examples[ne],"AssertionError: Series are different

Series values are different (40.0 %)
[index]: [a, b, c, d, f]
[left]:  [True, True, True, True, True]
[right]: [True, True, True, None, None]",failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[__and__],Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[__or__],Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[__rand__],Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[__ror__],Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[add],Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[eq],Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[floordiv],ZeroDivisionError: integer division or modulo by zero,failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[ge],"AssertionError: Regex pattern did not match.
 Regex: 'Please convert this to Snowpark pandas objects'
 Input: ""'>=' not supported between instances of 'NoneType' and 'NoneType'""",failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[gt],"AssertionError: Regex pattern did not match.
 Regex: 'Please convert this to Snowpark pandas objects'
 Input: ""'>' not supported between instances of 'NoneType' and 'NoneType'""",failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[le],"AssertionError: Regex pattern did not match.
 Regex: 'Please convert this to Snowpark pandas objects'
 Input: ""'<=' not supported between instances of 'NoneType' and 'NoneType'""",failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[lt],"AssertionError: Regex pattern did not match.
 Regex: 'Please convert this to Snowpark pandas objects'
 Input: ""'<' not supported between instances of 'NoneType' and 'NoneType'""",failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[mod],ZeroDivisionError: integer division or modulo by zero,failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[mul],Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[ne],Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[pow],Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[radd],Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[rfloordiv],ZeroDivisionError: integer division or modulo by zero,failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[rmod],ZeroDivisionError: integer division or modulo by zero,failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[rmul],Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[rpow],Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[rsub],Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[rtruediv],ZeroDivisionError: division by zero,failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[sub],Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.binary.test_binary_op,test_other_with_native_pandas_object_raises[truediv],ZeroDivisionError: division by zero,failed
tests.integ.modin.binary.test_timedelta,test_bitwise_timedelta_numeric[__and__-__and__],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ binary\\ operation\\ __and__\\ between\\ timedelta\\ and\\ a\\ non\\-timedelta\\ type'
 Input: ""unsupported operand type(s) for &: 'TimedeltaArray' and 'int'""",failed
tests.integ.modin.binary.test_timedelta,test_bitwise_timedelta_numeric[__or__-__or__],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ binary\\ operation\\ __or__\\ between\\ timedelta\\ and\\ a\\ non\\-timedelta\\ type'
 Input: ""unsupported operand type(s) for |: 'TimedeltaArray' and 'int'""",failed
tests.integ.modin.binary.test_timedelta,test_bitwise_timedelta_numeric[__rand__-__and__],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ binary\\ operation\\ __and__\\ between\\ timedelta\\ and\\ a\\ non\\-timedelta\\ type'
 Input: ""unsupported operand type(s) for &: 'int' and 'TimedeltaArray'""",failed
tests.integ.modin.binary.test_timedelta,test_bitwise_timedelta_numeric[__ror__-__or__],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ binary\\ operation\\ __or__\\ between\\ timedelta\\ and\\ a\\ non\\-timedelta\\ type'
 Input: ""unsupported operand type(s) for |: 'int' and 'TimedeltaArray'""",failed
tests.integ.modin.binary.test_timedelta,test_comparison_with_null[eq],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (100.0 %)
[index]: [0, 1]
[left]:  [False, False]
[right]: [None, None]",failed
tests.integ.modin.binary.test_timedelta,test_comparison_with_null[ge],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (100.0 %)
[index]: [0, 1]
[left]:  [False, False]
[right]: [None, None]",failed
tests.integ.modin.binary.test_timedelta,test_comparison_with_null[gt],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (100.0 %)
[index]: [0, 1]
[left]:  [False, False]
[right]: [None, None]",failed
tests.integ.modin.binary.test_timedelta,test_comparison_with_null[le],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (100.0 %)
[index]: [0, 1]
[left]:  [False, False]
[right]: [None, None]",failed
tests.integ.modin.binary.test_timedelta,test_comparison_with_null[lt],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (100.0 %)
[index]: [0, 1]
[left]:  [False, False]
[right]: [None, None]",failed
tests.integ.modin.binary.test_timedelta,test_comparison_with_null[ne],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (100.0 %)
[index]: [0, 1]
[left]:  [True, True]
[right]: [None, None]",failed
tests.integ.modin.binary.test_timedelta,test_datetime_timedelta_scalar_divide_by_numeric_dataframe,"AssertionError: Attributes of DataFrame.iloc[:, 0] (column name=""0"") are different

Attribute ""dtype"" are different
[left]:  timedelta64[us]
[right]: timedelta64[ns]",failed
tests.integ.modin.binary.test_timedelta,test_divide_number_scalar_by_timedelta_dataframe[rdiv],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ dividing\\ numeric\\ values\\ by\\ timedelta\\ values\\ with\\ div\\ \\(/\\),\\ mod\\ \\(%\\),\\ or\\ floordiv\\ \\(//\\)\\.'
 Input: 'Cannot divide int by TimedeltaArray'",failed
tests.integ.modin.binary.test_timedelta,test_divide_number_scalar_by_timedelta_dataframe[rfloordiv],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ dividing\\ numeric\\ values\\ by\\ timedelta\\ values\\ with\\ div\\ \\(/\\),\\ mod\\ \\(%\\),\\ or\\ floordiv\\ \\(//\\)\\.'
 Input: 'Cannot divide int by TimedeltaArray'",failed
tests.integ.modin.binary.test_timedelta,test_divide_number_scalar_by_timedelta_dataframe[rmod],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ dividing\\ numeric\\ values\\ by\\ timedelta\\ values\\ with\\ div\\ \\(/\\),\\ mod\\ \\(%\\),\\ or\\ floordiv\\ \\(//\\)\\.'
 Input: 'Cannot divide int by TimedeltaArray'",failed
tests.integ.modin.binary.test_timedelta,test_divide_number_scalar_by_timedelta_dataframe[rtruediv],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ dividing\\ numeric\\ values\\ by\\ timedelta\\ values\\ with\\ div\\ \\(/\\),\\ mod\\ \\(%\\),\\ or\\ floordiv\\ \\(//\\)\\.'
 Input: 'Cannot divide int by TimedeltaArray'",failed
tests.integ.modin.binary.test_timedelta,test_divide_timdelta_by_zero_integer,Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_timedelta,test_divide_timedelta_by_zero_timedelta,Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_timedelta,test_eq_non_null,"AssertionError: DataFrame.iloc[:, 1] (column name=""1"") are different

DataFrame.iloc[:, 1] (column name=""1"") values are different (50.0 %)
[index]: [0, 1]
[left]:  [False, False]
[right]: [None, False]",failed
tests.integ.modin.binary.test_timedelta,test_floordiv_timedelta_by_zero_integer,Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_timedelta,test_floordiv_timedelta_by_zero_timedelta,Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_timedelta,test_invalid_ops_between_timedelta_dataframe_and_string_scalar[__and__-Boolean],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_timedelta,test_invalid_ops_between_timedelta_dataframe_and_string_scalar[__or__-Boolean],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_timedelta,test_invalid_ops_between_timedelta_dataframe_and_string_scalar[__rand__-Boolean],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_timedelta,test_invalid_ops_between_timedelta_dataframe_and_string_scalar[__ror__-Boolean],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_timedelta,test_invalid_ops_between_timedelta_dataframe_and_string_scalar[pow-Numeric],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_timedelta,test_invalid_ops_between_timedelta_dataframe_and_string_scalar[rpow-Numeric],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.binary.test_timedelta,test_mod_timedelta_by_zero_timedelta,"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0]
[left]:  [1]
[right]: [-9223372036854775808]",failed
tests.integ.modin.binary.test_timedelta,test_neq_non_null,"AssertionError: DataFrame.iloc[:, 1] (column name=""1"") are different

DataFrame.iloc[:, 1] (column name=""1"") values are different (50.0 %)
[index]: [0, 1]
[left]:  [True, True]
[right]: [None, True]",failed
tests.integ.modin.binary.test_timedelta,test_numeric_dataframe_and_timedelta_list_like[eq],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_dataframe_and_timedelta_list_like[mul],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_dataframe_and_timedelta_list_like[ne],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_dataframe_and_timedelta_list_like[rdiv],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_dataframe_and_timedelta_list_like[rfloordiv],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_dataframe_and_timedelta_list_like[rmod],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_dataframe_and_timedelta_list_like[rmul],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_dataframe_and_timedelta_list_like[rtruediv],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_dataframe_with_timedelta_list_like[eq],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_dataframe_with_timedelta_list_like[mul],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_dataframe_with_timedelta_list_like[ne],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_dataframe_with_timedelta_list_like[rdiv],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_dataframe_with_timedelta_list_like[rfloordiv],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_dataframe_with_timedelta_list_like[rmod],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_dataframe_with_timedelta_list_like[rmul],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_dataframe_with_timedelta_list_like[rtruediv],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_series_and_timedelta_list_like[eq],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_series_and_timedelta_list_like[mul],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_series_and_timedelta_list_like[ne],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_series_and_timedelta_list_like[rdiv],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_series_and_timedelta_list_like[rfloordiv],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_series_and_timedelta_list_like[rmod],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_series_and_timedelta_list_like[rmul],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_numeric_series_and_timedelta_list_like[rtruediv],TypeError: Cannot do operation with improper dtypes,failed
tests.integ.modin.binary.test_timedelta,test_pow_timedelta_numeric[pow],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ binary\\ operation\\ pow\\ between\\ timedelta\\ and\\ a\\ non\\-timedelta\\ type'
 Input: 'cannot perform __pow__ with this index type: TimedeltaArray'",failed
tests.integ.modin.binary.test_timedelta,test_pow_timedelta_numeric[rpow],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ binary\\ operation\\ pow\\ between\\ timedelta\\ and\\ a\\ non\\-timedelta\\ type'
 Input: 'cannot perform __rpow__ with this index type: TimedeltaArray'",failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive0-add],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive0-div],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive0-eq],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive0-ne],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive0-sub],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive0-truediv],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive1-add],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive1-div],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive1-eq],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive1-ne],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive1-sub],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive1-truediv],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive2-add],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive2-div],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive2-eq],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive2-ne],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive2-sub],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive2-truediv],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive3-add],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive3-div],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive3-eq],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive3-ne],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive3-sub],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive3-truediv],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive4-add],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive4-div],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive4-eq],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive4-ne],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive4-sub],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive4-truediv],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive5-add],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive5-div],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive5-eq],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive5-ne],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive5-sub],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive5-truediv],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive6-add],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive6-div],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive6-eq],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive6-ne],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive6-sub],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive6-truediv],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive7-add],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive7-div],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive7-eq],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive7-ne],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive7-sub],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive7-truediv],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive8-add],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive8-div],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive8-eq],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive8-ne],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive8-sub],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_string_series_with_timedelta_scalar[timedelta_scalar_positive8-truediv],[XPASS(strict)] SNOW-1646604,failed
tests.integ.modin.binary.test_timedelta,test_subtract_two_timestamps_timezones_disallowed[rsub-pandas_lhs1-pandas_rhs1],"AssertionError: Regex pattern did not match.
 Regex: 'Cannot\\ subtract\\ tz\\-naive\\ and\\ tz\\-aware\\ datetime\\-like\\ objects\\.'
 Input: 'Cannot subtract tz-naive and tz-aware datetime-like objects'",failed
tests.integ.modin.binary.test_timedelta,test_subtract_two_timestamps_timezones_disallowed[sub-pandas_lhs0-pandas_rhs0],"AssertionError: Regex pattern did not match.
 Regex: 'Cannot\\ subtract\\ tz\\-naive\\ and\\ tz\\-aware\\ datetime\\-like\\ objects\\.'
 Input: 'Cannot subtract tz-naive and tz-aware datetime-like objects'",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_addition_and_subtraction_with_numeric[1-add],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ addition\\ or\\ subtraction\\ between\\ timedelta\\ values\\ and\\ numeric\\ values\\.'
 Input: 'Addition/subtraction of integers and integer-arrays with TimedeltaArray is no longer supported.  Instead of adding/subtracting `n`, use `n * obj.freq`'",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_addition_and_subtraction_with_numeric[1-radd],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ addition\\ or\\ subtraction\\ between\\ timedelta\\ values\\ and\\ numeric\\ values\\.'
 Input: 'Addition/subtraction of integers and integer-arrays with TimedeltaArray is no longer supported.  Instead of adding/subtracting `n`, use `n * obj.freq`'",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_addition_and_subtraction_with_numeric[1-rsub],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ addition\\ or\\ subtraction\\ between\\ timedelta\\ values\\ and\\ numeric\\ values\\.'
 Input: 'Addition/subtraction of integers and integer-arrays with TimedeltaArray is no longer supported.  Instead of adding/subtracting `n`, use `n * obj.freq`'",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_addition_and_subtraction_with_numeric[1-sub],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ addition\\ or\\ subtraction\\ between\\ timedelta\\ values\\ and\\ numeric\\ values\\.'
 Input: 'Addition/subtraction of integers and integer-arrays with TimedeltaArray is no longer supported.  Instead of adding/subtracting `n`, use `n * obj.freq`'",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_addition_and_subtraction_with_numeric[1.5-add],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ addition\\ or\\ subtraction\\ between\\ timedelta\\ values\\ and\\ numeric\\ values\\.'
 Input: ""unsupported operand type(s) for +: 'TimedeltaArray' and 'float'""",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_addition_and_subtraction_with_numeric[1.5-radd],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ addition\\ or\\ subtraction\\ between\\ timedelta\\ values\\ and\\ numeric\\ values\\.'
 Input: ""unsupported operand type(s) for +: 'float' and 'TimedeltaArray'""",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_addition_and_subtraction_with_numeric[1.5-rsub],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ addition\\ or\\ subtraction\\ between\\ timedelta\\ values\\ and\\ numeric\\ values\\.'
 Input: ""unsupported operand type(s) for +: 'TimedeltaArray' and 'float'""",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_addition_and_subtraction_with_numeric[1.5-sub],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ addition\\ or\\ subtraction\\ between\\ timedelta\\ values\\ and\\ numeric\\ values\\.'
 Input: ""unsupported operand type(s) for -: 'TimedeltaArray' and 'float'""",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_dataframe_bitwise_operation_with_timedelta_scalar[__and__-&],"AssertionError: Regex pattern did not match.
 Regex: 'unsupported\\ operand\\ type\\ for\\ \\&:\\ Timedelta'
 Input: ""unsupported operand type(s) for &: 'TimedeltaArray' and 'Timedelta'""",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_dataframe_bitwise_operation_with_timedelta_scalar[__or__-|],"AssertionError: Regex pattern did not match.
 Regex: 'unsupported\\ operand\\ type\\ for\\ \\|:\\ Timedelta'
 Input: ""unsupported operand type(s) for |: 'TimedeltaArray' and 'Timedelta'""",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_dataframe_bitwise_operation_with_timedelta_scalar[__rand__-&],"AssertionError: Regex pattern did not match.
 Regex: 'unsupported\\ operand\\ type\\ for\\ \\&:\\ Timedelta'
 Input: ""unsupported operand type(s) for &: 'Timedelta' and 'TimedeltaArray'""",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_dataframe_bitwise_operation_with_timedelta_scalar[__ror__-|],"AssertionError: Regex pattern did not match.
 Regex: 'unsupported\\ operand\\ type\\ for\\ \\|:\\ Timedelta'
 Input: ""unsupported operand type(s) for |: 'Timedelta' and 'TimedeltaArray'""",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_dataframe_exponentiation_with_timedelta_scalar[pow],"AssertionError: Regex pattern did not match.
 Regex: 'unsupported\\ operand\\ type\\ for\\ \\*\\*:\\ Timedelta'
 Input: 'cannot perform __pow__ with this index type: TimedeltaArray'",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_dataframe_exponentiation_with_timedelta_scalar[rpow],"AssertionError: Regex pattern did not match.
 Regex: 'unsupported\\ operand\\ type\\ for\\ \\*\\*:\\ Timedelta'
 Input: 'cannot perform __rpow__ with this index type: TimedeltaArray'",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_dataframe_plus_timestamp_series[add],numpy.core._exceptions._UFuncBinaryResolutionError: ufunc 'add' cannot use operands with types dtype('float64') and dtype('<M8[ns]'),failed
tests.integ.modin.binary.test_timedelta,test_timedelta_dataframe_plus_timestamp_series[radd],numpy.core._exceptions._UFuncBinaryResolutionError: ufunc 'add' cannot use operands with types dtype('<M8[ns]') and dtype('float64'),failed
tests.integ.modin.binary.test_timedelta,test_timedelta_divide_number_dataframe_by_timedelta_scalar[div],AssertionError: exception type <class 'numpy.core._exceptions._UFuncBinaryResolutionError'> does not match with expected type <class 'TypeError'>,failed
tests.integ.modin.binary.test_timedelta,test_timedelta_divide_number_dataframe_by_timedelta_scalar[floordiv],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ dividing\\ numeric\\ values\\ by\\ timedelta\\ values\\ with\\ div\\ \\(/\\),\\ mod\\ \\(%\\),\\ or\\ floordiv\\ \\(//\\)\\.'
 Input: 'Invalid dtype int64 for __floordiv__'",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_divide_number_dataframe_by_timedelta_scalar[mod],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ dividing\\ numeric\\ values\\ by\\ timedelta\\ values\\ with\\ div\\ \\(/\\),\\ mod\\ \\(%\\),\\ or\\ floordiv\\ \\(//\\)\\.'
 Input: 'Invalid dtype int64 for __floordiv__'",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_divide_number_dataframe_by_timedelta_scalar[truediv],AssertionError: exception type <class 'numpy.core._exceptions._UFuncBinaryResolutionError'> does not match with expected type <class 'TypeError'>,failed
tests.integ.modin.binary.test_timedelta,test_timedelta_less_than_or_greater_than_numeric[ge],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ binary\\ operation\\ ge\\ between\\ timedelta\\ and\\ a\\ non\\-timedelta\\ type'
 Input: 'Invalid comparison between dtype=timedelta64[ns] and int'",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_less_than_or_greater_than_numeric[gt],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ binary\\ operation\\ gt\\ between\\ timedelta\\ and\\ a\\ non\\-timedelta\\ type'
 Input: 'Invalid comparison between dtype=timedelta64[ns] and int'",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_less_than_or_greater_than_numeric[le],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ binary\\ operation\\ le\\ between\\ timedelta\\ and\\ a\\ non\\-timedelta\\ type'
 Input: 'Invalid comparison between dtype=timedelta64[ns] and int'",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_less_than_or_greater_than_numeric[lt],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark\\ pandas\\ does\\ not\\ support\\ binary\\ operation\\ lt\\ between\\ timedelta\\ and\\ a\\ non\\-timedelta\\ type'
 Input: 'Invalid comparison between dtype=timedelta64[ns] and int'",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_mod_with_negative_timedelta[-3-2-1--1],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0]
[left]:  [1]
[right]: [-1]",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_mod_with_negative_timedelta[3--2--1-1],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0]
[left]:  [-1]
[right]: [1]",failed
tests.integ.modin.binary.test_timedelta,test_timedelta_timedelta_null_arithmetic_invalid_in_pandas[div],TypeError: unsupported operand type(s) for /: 'numpy.ndarray' and 'NaTType',failed
tests.integ.modin.binary.test_timedelta,test_timedelta_timedelta_null_arithmetic_invalid_in_pandas[floordiv],TypeError: unsupported operand type(s) for //: 'numpy.ndarray' and 'NaTType',failed
tests.integ.modin.binary.test_timedelta,test_timedelta_timedelta_null_arithmetic_invalid_in_pandas[mod],TypeError: unsupported operand type(s) for //: 'numpy.ndarray' and 'NaTType',failed
tests.integ.modin.binary.test_timedelta,test_timedelta_timedelta_null_arithmetic_invalid_in_pandas[rdiv],TypeError: Cannot divide NaTType by TimedeltaArray,failed
tests.integ.modin.binary.test_timedelta,test_timedelta_timedelta_null_arithmetic_invalid_in_pandas[rfloordiv],TypeError: Cannot divide NaTType by TimedeltaArray,failed
tests.integ.modin.binary.test_timedelta,test_timedelta_timedelta_null_arithmetic_invalid_in_pandas[rmod],TypeError: Cannot divide NaTType by TimedeltaArray,failed
tests.integ.modin.binary.test_timedelta,test_timestamp_dataframe_minus_timedelta_series,numpy.core._exceptions._UFuncBinaryResolutionError: ufunc 'add' cannot use operands with types dtype('<m8[ns]') and dtype('float64'),failed
tests.integ.modin.binary.test_timedelta,test_timestamp_dataframe_minus_timestamp_series,TypeError: cannot subtract DatetimeArray from ndarray,failed
tests.integ.modin.binary.test_timedelta,test_timestamp_dataframe_plus_timedelta_series[add],numpy.core._exceptions._UFuncBinaryResolutionError: ufunc 'add' cannot use operands with types dtype('float64') and dtype('<m8[ns]'),failed
tests.integ.modin.binary.test_timedelta,test_timestamp_dataframe_plus_timedelta_series[radd],numpy.core._exceptions._UFuncBinaryResolutionError: ufunc 'add' cannot use operands with types dtype('<m8[ns]') and dtype('float64'),failed
tests.integ.modin.binary.test_timedelta,test_timestamp_series_minus_timestamp_dataframe,numpy.core._exceptions._UFuncBinaryResolutionError: ufunc 'subtract' cannot use operands with types dtype('<M8[ns]') and dtype('float64'),failed
tests.integ.modin.binary.test_timedelta,test_valid_arithmetic_between_possibly_negative_timedeltas[timedelta_scalar3-rfloordiv],reason: precision difference in snowflake,xfailed
tests.integ.modin.binary.test_timedelta,test_valid_arithmetic_between_possibly_negative_timedeltas[timedelta_scalar4-rfloordiv],reason: precision difference in snowflake,xfailed
tests.integ.modin.binary.test_timedelta,test_valid_arithmetic_between_possibly_negative_timedeltas[timedelta_scalar5-rfloordiv],reason: precision difference in snowflake,xfailed
tests.integ.modin.binary.test_timedelta,test_valid_arithmetic_between_possibly_negative_timedeltas[timedelta_scalar6-rfloordiv],reason: precision difference in snowflake,xfailed
tests.integ.modin.binary.test_timedelta,test_valid_arithmetic_between_possibly_negative_timedeltas[timedelta_scalar7-rfloordiv],reason: precision difference in snowflake,xfailed
tests.integ.modin.crosstab.test_crosstab,test_aggfuncs_that_may_produce_nan[skew-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_aggfuncs_that_may_produce_nan[skew-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_aggfuncs_that_may_produce_nan[std0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_aggfuncs_that_may_produce_nan[std0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_aggfuncs_that_may_produce_nan[std1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_aggfuncs_that_may_produce_nan[std1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_aggfuncs_that_may_produce_nan[var0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_aggfuncs_that_may_produce_nan[var0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_aggfuncs_that_may_produce_nan[var1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_aggfuncs_that_may_produce_nan[var1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_basic_crosstab_with_df_and_series_objs_pandas_errors_columns[False],AssertionError: arrays and names must have the same length,failed
tests.integ.modin.crosstab.test_crosstab,test_basic_crosstab_with_df_and_series_objs_pandas_errors_columns[True],AssertionError: arrays and names must have the same length,failed
tests.integ.modin.crosstab.test_crosstab,test_basic_crosstab_with_df_and_series_objs_pandas_errors_index[False],AssertionError: arrays and names must have the same length,failed
tests.integ.modin.crosstab.test_crosstab,test_basic_crosstab_with_df_and_series_objs_pandas_errors_index[True],AssertionError: arrays and names must have the same length,failed
tests.integ.modin.crosstab.test_crosstab,test_basic_crosstab_with_numpy_arrays[False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_basic_crosstab_with_numpy_arrays[True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_basic_crosstab_with_series_objs_no_overlap_error[False],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.crosstab.test_crosstab,test_basic_crosstab_with_series_objs_no_overlap_error[True],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.crosstab.test_crosstab,test_basic_crosstab_with_series_objs_some_overlap[False],ValueError: All arrays must be of the same length,failed
tests.integ.modin.crosstab.test_crosstab,test_basic_crosstab_with_series_objs_some_overlap[True],ValueError: All arrays must be of the same length,failed
tests.integ.modin.crosstab.test_crosstab,test_basic_crosstab_with_series_objs_some_overlap_error[False],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.crosstab.test_crosstab,test_basic_crosstab_with_series_objs_some_overlap_error[True],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.crosstab.test_crosstab,test_margins[False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins[True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[amax-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[amax-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[amin-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[amin-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[count-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[count-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[max0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[max0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[max1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[max1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[mean0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[mean0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[mean1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[mean1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[median0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[median0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[median1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[median1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[min0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[min0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[min1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[min1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[sum0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[sum0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[sum1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[sum1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[sum2-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_margins_and_values[sum2-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize[0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize[0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize[1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize[1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize[True-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize[True-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize[all-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize[all-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize[columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize[columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize[index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize[index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_margins[0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_margins[0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_margins[1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_margins[1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_margins[True-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_margins[True-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_margins[all-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_margins[all-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_margins[columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_margins[columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_margins[index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_margins[index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amax-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amax-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amax-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amax-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amax-True-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amax-True-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amax-all-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amax-all-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amax-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amax-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amax-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amax-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amin-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amin-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amin-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amin-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amin-True-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amin-True-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amin-all-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amin-all-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amin-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amin-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amin-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[amin-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[count-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[count-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[count-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[count-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[count-True-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[count-True-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[count-all-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[count-all-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[count-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[count-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[count-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[count-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max0-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max0-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max0-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max0-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max0-True-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max0-True-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max0-all-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max0-all-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max0-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max0-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max0-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max0-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max1-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max1-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max1-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max1-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max1-True-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max1-True-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max1-all-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max1-all-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max1-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max1-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max1-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[max1-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean0-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean0-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean0-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean0-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean0-True-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean0-True-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean0-all-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean0-all-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean0-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean0-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean0-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean0-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean1-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean1-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean1-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean1-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean1-True-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean1-True-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean1-all-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean1-all-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean1-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean1-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean1-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[mean1-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median0-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median0-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median0-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median0-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median0-True-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median0-True-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median0-all-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median0-all-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median0-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median0-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median0-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median0-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median1-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median1-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median1-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median1-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median1-True-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median1-True-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median1-all-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median1-all-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median1-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median1-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median1-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[median1-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min0-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min0-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min0-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min0-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min0-True-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min0-True-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min0-all-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min0-all-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min0-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min0-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min0-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min0-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min1-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min1-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min1-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min1-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min1-True-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min1-True-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min1-all-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min1-all-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min1-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min1-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min1-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[min1-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum0-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum0-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum0-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum0-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum0-True-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum0-True-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum0-all-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum0-all-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum0-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum0-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum0-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum0-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum1-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum1-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum1-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum1-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum1-True-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum1-True-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum1-all-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum1-all-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum1-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum1-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum1-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum1-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum2-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum2-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum2-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum2-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum2-True-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum2-True-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum2-all-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum2-all-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum2-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum2-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum2-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_and_values[sum2-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[amax-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[amax-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[amax-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[amax-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[amax-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[amax-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[amax-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[amax-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[amin-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[amin-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[amin-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[amin-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[amin-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[amin-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[amin-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[amin-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[count-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[count-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[count-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[count-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[count-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[count-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[count-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[count-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[max0-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[max0-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[max0-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[max0-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[max0-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[max0-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[max0-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[max0-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[max1-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[max1-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[max1-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[max1-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[max1-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[max1-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[max1-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[max1-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[mean0-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[mean0-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[mean0-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[mean0-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[mean0-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[mean0-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[mean0-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[mean0-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[mean1-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[mean1-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[mean1-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[mean1-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[mean1-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[mean1-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[mean1-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[mean1-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[median0-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[median0-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[median0-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[median0-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[median0-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[median0-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[median0-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[median0-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[median1-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[median1-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[median1-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[median1-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[median1-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[median1-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[median1-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[median1-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[min0-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[min0-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[min0-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[min0-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[min0-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[min0-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[min0-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[min0-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[min1-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[min1-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[min1-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[min1-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[min1-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[min1-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[min1-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[min1-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum0-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum0-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum0-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum0-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum0-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum0-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum0-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum0-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum1-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum1-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum1-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum1-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum1-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum1-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum1-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum1-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum2-0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum2-0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum2-1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum2-1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum2-columns-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum2-columns-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum2-index-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_normalize_margins_and_values[sum2-index-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[amax-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[amax-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[amin-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[amin-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[count-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[count-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[max0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[max0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[max1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[max1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[mean0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[mean0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[mean1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[mean1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[median0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[median0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[median1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[median1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[min0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[min0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[min1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[min1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[sum0-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[sum0-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[sum1-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[sum1-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[sum2-False],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values[sum2-True],AttributeError: can't set attribute,failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[amax-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[amax-True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[amin-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[amin-True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[count-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[count-True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[max0-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[max0-True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[max1-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[max1-True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[mean0-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[mean0-True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[mean1-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[mean1-True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[median0-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[median0-True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[median1-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[median1-True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[min0-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[min0-True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[min1-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[min1-True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[sum0-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[sum0-True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[sum1-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[sum1-True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[sum2-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like[sum2-True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['row_0']
[right]: ['species']",failed
tests.integ.modin.crosstab.test_crosstab,test_values_series_like_unsupported_aggfunc,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.crosstab.test_crosstab,test_values_unsupported_aggfunc,AttributeError: can't set attribute,failed
tests.integ.modin.extensions.test_dataframe_extensions,test_dataframe_extension_access_existing_methods,AttributeError: DataFrame object has no attribute self_accessor,failed
tests.integ.modin.extensions.test_dataframe_extensions,test_dataframe_extension_non_method,AttributeError: 'DataFrame' object has no attribute 'four',failed
tests.integ.modin.extensions.test_dataframe_extensions,test_dataframe_extension_override_method,"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().",failed
tests.integ.modin.extensions.test_dataframe_extensions,test_dataframe_extension_simple_method,AttributeError: DataFrame object has no attribute new_method,failed
tests.integ.modin.extensions.test_series_extensions,test_series_extension_access_existing_methods,AttributeError: Series object has no attribute self_accessor,failed
tests.integ.modin.extensions.test_series_extensions,test_series_extension_non_method,AttributeError: 'Series' object has no attribute 'four',failed
tests.integ.modin.extensions.test_series_extensions,test_series_extension_override_method,"assert 6 == 100
 +  where 6 = <bound method Series.sum of 0    1\n1    2\n2    3\ndtype: int64>()
 +    where <bound method Series.sum of 0    1\n1    2\n2    3\ndtype: int64> = 0    1\n1    2\n2    3\ndtype: int64.sum",failed
tests.integ.modin.extensions.test_series_extensions,test_series_extension_simple_method,AttributeError: Series object has no attribute new_method,failed
tests.integ.modin.frame.test_aggregate,test_agg_axis_1_missing_label,KeyError: 'Column(s) [2] do not exist',failed
tests.integ.modin.frame.test_aggregate,test_agg_axis_1_simple[size],AssertionError: Got type: <class 'int'>,failed
tests.integ.modin.frame.test_aggregate,test_agg_basic[<lambda>-11],TypeError: NamedAgg.__new__() missing 1 required positional argument: 'aggfunc',failed
tests.integ.modin.frame.test_aggregate,test_agg_basic[<lambda>-21],TypeError: NamedAgg.__new__() missing 1 required positional argument: 'aggfunc',failed
tests.integ.modin.frame.test_aggregate,test_agg_min_count_negative[5.0],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_aggregate,test_agg_min_count_negative[5.3],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_aggregate,test_agg_min_count_negative[TEST],TypeError: '>' not supported between instances of 'str' and 'int',failed
tests.integ.modin.frame.test_aggregate,test_agg_numeric_only_negative[count],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_aggregate,test_agg_numeric_only_negative[max],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_aggregate,test_agg_numeric_only_negative[mean],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_aggregate,test_agg_numeric_only_negative[median],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_aggregate,test_agg_numeric_only_negative[min],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_aggregate,test_agg_numeric_only_negative[std],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_aggregate,test_agg_numeric_only_negative[sum],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_aggregate,test_agg_numeric_only_negative[var],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_aggregate,test_agg_produces_timedelta_and_non_timedelta_type,[XPASS(strict)] requires transposing a one-row frame with integer and timedelta.,failed
tests.integ.modin.frame.test_aggregate,test_agg_quantile_kwargs[q2-None],"[XPASS(strict)] SNOW-1062878: agg(""quantile"") with list-like q fails",failed
tests.integ.modin.frame.test_aggregate,test_agg_quantile_kwargs[q2-linear],"[XPASS(strict)] SNOW-1062878: agg(""quantile"") with list-like q fails",failed
tests.integ.modin.frame.test_aggregate,test_agg_quantile_kwargs[q2-nearest],"[XPASS(strict)] SNOW-1062878: agg(""quantile"") with list-like q fails",failed
tests.integ.modin.frame.test_aggregate,test_agg_requires_concat_with_timedelta[<lambda>0],"[XPASS(strict)] requires concat(), which we cannot do with Timedelta.",failed
tests.integ.modin.frame.test_aggregate,test_agg_requires_concat_with_timedelta[<lambda>1],"[XPASS(strict)] requires concat(), which we cannot do with Timedelta.",failed
tests.integ.modin.frame.test_aggregate,test_agg_requires_concat_with_timedelta[<lambda>2],TypeError: NamedAgg.__new__() missing 1 required positional argument: 'aggfunc',failed
tests.integ.modin.frame.test_aggregate,test_agg_requires_concat_with_timedelta[<lambda>3],"[XPASS(strict)] requires concat(), which we cannot do with Timedelta.",failed
tests.integ.modin.frame.test_aggregate,test_agg_requires_concat_with_timedelta[<lambda>4],"[XPASS(strict)] requires concat(), which we cannot do with Timedelta.",failed
tests.integ.modin.frame.test_aggregate,test_agg_requires_concat_with_timedelta[<lambda>5],TypeError: NamedAgg.__new__() missing 1 required positional argument: 'aggfunc',failed
tests.integ.modin.frame.test_aggregate,test_agg_requires_concat_with_timedelta[<lambda>6],"[XPASS(strict)] requires concat(), which we cannot do with Timedelta.",failed
tests.integ.modin.frame.test_aggregate,test_agg_with_all_missing[<lambda>-2],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.frame.test_aggregate,test_agg_with_all_missing_pandas_bug_58810,IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_aggregate,test_agg_with_multiindex_negative[<lambda>0],[XPASS(strict)] SNOW-1010307: MultiIndex aggregation on axis=1 not supported,failed
tests.integ.modin.frame.test_aggregate,test_agg_with_multiindex_negative[<lambda>1],[XPASS(strict)] SNOW-1010307: MultiIndex aggregation on axis=1 not supported,failed
tests.integ.modin.frame.test_aggregate,test_agg_with_multiindex_negative[<lambda>2],[XPASS(strict)] SNOW-1010307: MultiIndex aggregation on axis=1 not supported,failed
tests.integ.modin.frame.test_aggregate,test_agg_with_no_column_raises[pandas_df0],"AssertionError: Regex pattern did not match.
 Regex: 'No column to aggregate on'
 Input: 'No objects to concatenate'",failed
tests.integ.modin.frame.test_aggregate,test_agg_with_no_column_raises[pandas_df1],"AssertionError: Regex pattern did not match.
 Regex: 'No column to aggregate on'
 Input: 'No objects to concatenate'",failed
tests.integ.modin.frame.test_aggregate,test_agg_with_single_col[<lambda>-False0],AssertionError: Got type: <class 'int'>,failed
tests.integ.modin.frame.test_aggregate,test_agg_with_variant,TypeError: '<' not supported between instances of 'NoneType' and 'NoneType',failed
tests.integ.modin.frame.test_aggregate,test_aggregate_unsupported_aggregation_SNOW_1526422[dict],Failed: DID NOT RAISE <class 'AttributeError'>,failed
tests.integ.modin.frame.test_aggregate,test_aggregate_unsupported_aggregation_SNOW_1526422[list_with_user_defined_function_and_string],Failed: DID NOT RAISE <class 'AttributeError'>,failed
tests.integ.modin.frame.test_aggregate,test_aggregate_unsupported_aggregation_SNOW_1526422[named_agg0],TypeError: NamedAgg.__new__() missing 1 required positional argument: 'aggfunc',failed
tests.integ.modin.frame.test_aggregate,test_aggregate_unsupported_aggregation_SNOW_1526422[named_agg1],TypeError: NamedAgg.__new__() missing 1 required positional argument: 'aggfunc',failed
tests.integ.modin.frame.test_aggregate,test_aggregate_unsupported_aggregation_SNOW_1526422[named_agg2],TypeError: NamedAgg.__new__() missing 1 required positional argument: 'aggfunc',failed
tests.integ.modin.frame.test_aggregate,test_aggregate_unsupported_aggregation_SNOW_1526422[set_with_user_defined_function_and_string],Failed: DID NOT RAISE <class 'AttributeError'>,failed
tests.integ.modin.frame.test_aggregate,test_aggregate_unsupported_aggregation_SNOW_1526422[tuple_with_builtins_and_native_pandas_function],ValueError: cannot combine transform and aggregation operations,failed
tests.integ.modin.frame.test_aggregate,test_aggregate_unsupported_aggregation_SNOW_1526422[tuple_with_user_defined_function_and_string],Failed: DID NOT RAISE <class 'AttributeError'>,failed
tests.integ.modin.frame.test_aggregate,test_aggregate_unsupported_aggregation_SNOW_1526422[user_defined_function],Failed: DID NOT RAISE <class 'AttributeError'>,failed
tests.integ.modin.frame.test_aggregate,test_axis_1,[XPASS(strict)] SNOW-1653126,failed
tests.integ.modin.frame.test_aggregate,test_corr_negative[<lambda>],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_aggregate,test_corr_negative[kendall],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_aggregate,test_corr_negative[spearman],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_aggregate,test_ddof_fallback_negative[std],Failed: DID NOT RAISE <class 'AttributeError'>,failed
tests.integ.modin.frame.test_aggregate,test_ddof_fallback_negative[var],Failed: DID NOT RAISE <class 'AttributeError'>,failed
tests.integ.modin.frame.test_aggregate,test_multiple_agg_on_dup_and_single_agg_on_non_dup_columns,"ValueError: Data must be 1-dimensional, got ndarray of shape (3, 2) instead",failed
tests.integ.modin.frame.test_aggregate,test_multiple_agg_on_only_dup_columns,"ValueError: Data must be 1-dimensional, got ndarray of shape (2, 3) instead",failed
tests.integ.modin.frame.test_aggregate,test_named_agg_not_supported_axis_1,"AssertionError: One of the passed functions has an invalid type: <class 'NoneType'>: None, only callable or string is acceptable.",failed
tests.integ.modin.frame.test_aggregate,test_named_agg_passed_in_via_star_kwargs,TypeError: NamedAgg.__new__() missing 1 required positional argument: 'aggfunc',failed
tests.integ.modin.frame.test_aggregate,test_single_agg_on_dup_and_non_dup_columns[dup_first],"ValueError: Data must be 1-dimensional, got ndarray of shape (2, 2) instead",failed
tests.integ.modin.frame.test_aggregate,test_single_agg_on_dup_and_non_dup_columns[dup_last],"ValueError: Data must be 1-dimensional, got ndarray of shape (2, 2) instead",failed
tests.integ.modin.frame.test_aggregate,test_single_agg_on_dup_column,"ValueError: Data must be 1-dimensional, got ndarray of shape (1, 2) instead",failed
tests.integ.modin.frame.test_aggregate,test_string_sum_with_nulls,"TypeError: can only concatenate str (not ""int"") to str",failed
tests.integ.modin.frame.test_aggregate,test_supported_axis_0[aggregate_max],"AssertionError: Series are different

Series values are different (25.0 %)
[index]: [A, B, C, D]
[left]:  [345600000000000, 360000000000, -9223372036854775808, -9223372036854775808]
[right]: [345600000000000, 360000000000, 5, -9223372036854775808]",failed
tests.integ.modin.frame.test_aggregate,test_supported_axis_0[mean],TypeError: timedelta64[ns] is not a numeric data type,failed
tests.integ.modin.frame.test_aggregate,test_supported_axis_0[median],TypeError: timedelta64[ns] is not a numeric data type,failed
tests.integ.modin.frame.test_aggregate,test_supported_axis_0[std],TypeError: timedelta64[ns] is not a numeric data type,failed
tests.integ.modin.frame.test_aggregate,test_var_invalid,"AssertionError: Regex pattern did not match.
 Regex: 'timedelta64\\ type\\ does\\ not\\ support\\ var\\ operations'
 Input: 'timedelta64[ns] is not a numeric data type'",failed
tests.integ.modin.frame.test_align,test_align_basic_with_nulls_axis0[inner],AssertionError,failed
tests.integ.modin.frame.test_align,test_align_basic_with_nulls_axis0[left],AssertionError,failed
tests.integ.modin.frame.test_align,test_align_basic_with_nulls_axis0[outer],AssertionError,failed
tests.integ.modin.frame.test_align,test_align_basic_with_nulls_axis0[right],AssertionError,failed
tests.integ.modin.frame.test_align,test_align_frame_copy_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_align,test_align_frame_deprecated_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_align,test_align_frame_fill_value_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_align,test_align_frame_with_series_axis_negative[inner],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_align,test_align_frame_with_series_axis_negative[left],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_align,test_align_frame_with_series_axis_negative[outer],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_align,test_align_frame_with_series_axis_negative[right],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_align,test_level_negative[0-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_align,test_level_negative[0-1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_align,test_level_negative[1-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_align,test_level_negative[1-1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_align,test_level_negative[None-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_align,test_level_negative[None-1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_align,test_multiindex_negative[0],ValueError: cannot join with no overlapping index names,failed
tests.integ.modin.frame.test_align,test_multiindex_negative[1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_align,test_multiindex_negative[None],ValueError: cannot join with no overlapping index names,failed
tests.integ.modin.frame.test_all_any,test_all_float_not_implemented[False-data0-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_all_float_not_implemented[False-data0-1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_all_float_not_implemented[False-data0-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_all_float_not_implemented[False-data1-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_all_float_not_implemented[False-data1-1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_all_float_not_implemented[False-data1-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_all_float_not_implemented[True-data0-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_all_float_not_implemented[True-data0-1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_all_float_not_implemented[True-data0-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_all_float_not_implemented[True-data1-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_all_float_not_implemented[True-data1-1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_all_float_not_implemented[True-data1-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_all_str_not_implemented[data0-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_all_str_not_implemented[data0-1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_all_str_not_implemented[data0-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_any_float_not_implemented[False-data0-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_any_float_not_implemented[False-data0-1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_any_float_not_implemented[False-data0-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_any_float_not_implemented[False-data1-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_any_float_not_implemented[False-data1-1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_any_float_not_implemented[False-data1-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_any_float_not_implemented[True-data0-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_any_float_not_implemented[True-data0-1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_any_float_not_implemented[True-data0-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_any_float_not_implemented[True-data1-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_any_float_not_implemented[True-data1-1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_any_float_not_implemented[True-data1-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_any_str_not_implemented[data0-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_any_str_not_implemented[data0-1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_all_any,test_any_str_not_implemented[data0-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_apply,test_apply_axis1_with_3rd_party_libraries_and_decorator[packages0-7],"TypeError: The input of UDF ""TESTDB_SNOWPANDAS"".""PUBLIC"".SNOWPARK_TEMP_FUNCTION_YE0VMQBHOJ must be Column, column name, or a list of them",failed
tests.integ.modin.frame.test_apply,test_apply_axis1_with_dynamic_pivot_and_with_3rd_party_libraries_and_decorator[packages0-7],TODO: SNOW-1261830 need to support PandasSeriesType annotation.,xfailed
tests.integ.modin.frame.test_apply,test_apply_axis1_with_dynamic_pivot_and_with_3rd_party_libraries_and_decorator[packages1-9],TODO: SNOW-1261830 need to support PandasSeriesType annotation.,xfailed
tests.integ.modin.frame.test_apply,test_apply_axis_1_frame_with_column_of_all_nulls_snow_1233832[None],[XPASS(strict)] SNOW-1233832,failed
tests.integ.modin.frame.test_apply,test_apply_axis_1_with_if_where_duplicates_not_executed[data0-1],TypeError: test_apply_axis_1_with_if_where_duplicates_not_executed.<locals>.foo() got an unexpected keyword argument 'snowpark_pandas_partition_size',failed
tests.integ.modin.frame.test_apply,test_apply_axis_1_with_if_where_duplicates_not_executed[data0-2],TypeError: test_apply_axis_1_with_if_where_duplicates_not_executed.<locals>.foo() got an unexpected keyword argument 'snowpark_pandas_partition_size',failed
tests.integ.modin.frame.test_apply,test_apply_axis_1_with_if_where_duplicates_not_executed[data1-1],TypeError: test_apply_axis_1_with_if_where_duplicates_not_executed.<locals>.foo() got an unexpected keyword argument 'snowpark_pandas_partition_size',failed
tests.integ.modin.frame.test_apply,test_apply_axis_1_with_if_where_duplicates_not_executed[data1-2],TypeError: test_apply_axis_1_with_if_where_duplicates_not_executed.<locals>.foo() got an unexpected keyword argument 'snowpark_pandas_partition_size',failed
tests.integ.modin.frame.test_apply,test_apply_bug_1650918[data0-<lambda>],[XPASS(strict)] SNOW-1650918: Apply on dataframe data columns containing NULL fails with invalid arguments to udtf function,failed
tests.integ.modin.frame.test_apply,test_apply_bug_1650918[data1-<lambda>],[XPASS(strict)] SNOW-1650918: Apply on dataframe data columns containing NULL fails with invalid arguments to udtf function,failed
tests.integ.modin.frame.test_apply,test_apply_variant_json_null,"assert [True, True, True, False] == [False, True, True, False]
  At index 0 diff: True != False
  Full diff:
  - [False, True, True, False]
  + [True, True, True, False]",failed
tests.integ.modin.frame.test_apply,test_axis_1_apply_args_kwargs,AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_apply,test_axis_1_apply_args_kwargs_with_snowpandas_object,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_apply,test_axis_1_basic_types_with_type_hints[apply_on_frame_with_timedelta_data_columns_returns_int],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_apply,test_axis_1_basic_types_with_type_hints[return_timedelta_scalar],[XPASS(strict)] SNOW-1619940,failed
tests.integ.modin.frame.test_apply,test_axis_1_basic_types_without_type_hints[apply_on_frame_with_timedelta_data_columns_returns_int],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_apply,test_axis_1_basic_types_without_type_hints[return_timedelta_scalar],[XPASS(strict)] SNOW-1619940,failed
tests.integ.modin.frame.test_apply,test_axis_1_date_time_timestamp_type[data0-<lambda>-expected_result0],AttributeError: Can only use .dt accessor with datetimelike values,failed
tests.integ.modin.frame.test_apply,test_axis_1_date_time_timestamp_type[data1-<lambda>-expected_result1],"AssertionError: DataFrame.iloc[:, 1] (column name=""1"") are different

DataFrame.iloc[:, 1] (column name=""1"") values are different (50.0 %)
[index]: [0, 1]
[left]:  [None, 2021-01-09]
[right]: [NaT, 2021-01-09]
At positional index 0, first diff: None != NaT",failed
tests.integ.modin.frame.test_apply,test_axis_1_date_time_timestamp_type[data2-<lambda>-expected_result2],AttributeError: Can only use .dt accessor with datetimelike values,failed
tests.integ.modin.frame.test_apply,test_axis_1_date_time_timestamp_type[data3-<lambda>-expected_result3],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (100.0 %)
[index]: [0, 1]
[left]:  [01:02:03, 01:02:03.000001]
[right]: [0 days 01:02:03, 0 days 01:02:03.000001]
At positional index 0, first diff: 01:02:03 != 0 days 01:02:03",failed
tests.integ.modin.frame.test_apply,test_axis_1_date_time_timestamp_type[data4-<lambda>-expected_result4],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1]
[left]:  [UTC, UTC]
[right]: [UTC, UTC]
At positional index 0, first diff: UTC != UTC",failed
tests.integ.modin.frame.test_apply,test_axis_1_date_time_timestamp_type[data5-<lambda>-expected_result5],"AssertionError: DataFrame.iloc[:, 1] (column name=""1"") are different

DataFrame.iloc[:, 1] (column name=""1"") values are different (50.0 %)
[index]: [0, 1]
[left]:  [NaT, 2023-01-01 01:02:03+00:00]
[right]: [None, 2023-01-01 01:02:03+00:00]
At positional index 0, first diff: NaT != None",failed
tests.integ.modin.frame.test_apply,test_axis_1_multi_index_column_labels_different_levels_negative,AssertionError: exception type <class 'ValueError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_apply,test_axis_1_return_not_json_serializable_label,Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_apply,test_basic_dataframe_transform[data2-exp-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_apply,test_basic_dataframe_transform[data5-sqrt-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_apply,test_basic_dataframe_transform[data7-log-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_apply,test_basic_dataframe_transform[data9-square-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_apply,test_dataframe_transform_invalid_function_name_negative,AttributeError: 'mxyzptlk' is not a valid function for 'DataFrame' object,failed
tests.integ.modin.frame.test_apply,test_dataframe_transform_invalid_types_negative[1],"AssertionError: Regex pattern did not match.
 Regex: 'object is not callable'
 Input: ""One of the passed functions has an invalid type: <class 'int'>: 1, only callable or string is acceptable.""",failed
tests.integ.modin.frame.test_apply,test_dataframe_transform_invalid_types_negative[2.5],"AssertionError: Regex pattern did not match.
 Regex: 'object is not callable'
 Input: ""One of the passed functions has an invalid type: <class 'float'>: 2.5, only callable or string is acceptable.""",failed
tests.integ.modin.frame.test_apply,test_dataframe_transform_invalid_types_negative[True],"AssertionError: Regex pattern did not match.
 Regex: 'object is not callable'
 Input: ""One of the passed functions has an invalid type: <class 'bool'>: True, only callable or string is acceptable.""",failed
tests.integ.modin.frame.test_apply,test_frame_with_timedelta_index,[XPASS(strict)] ,failed
tests.integ.modin.frame.test_apply,test_numpy_integers_in_return_values_snow_1227264[return_value1],"[XPASS(strict)] SNOW-1229760: un-json-serializable np.int64 is nested inside the non-series return value, so we don't find the np.int64 or convert it to int",failed
tests.integ.modin.frame.test_apply,test_result_type[broadcast],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_apply,test_result_type[expand],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_apply,test_result_type[reduce],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_apply,test_snowpandas_in_apply_negative,Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_apply,test_udfs_and_udtfs_with_snowpark_object_error_msg,Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_apply,test_with_duplicates_negative,ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_apply_axis_0,test_apply_axis_0_bug_1650918[data0-<lambda>],[XPASS(strict)] SNOW-1650918: Apply on dataframe data columns containing NULL fails with invalid arguments to udtf function,failed
tests.integ.modin.frame.test_apply_axis_0,test_apply_axis_0_bug_1650918[data1-<lambda>],[XPASS(strict)] SNOW-1650918: Apply on dataframe data columns containing NULL fails with invalid arguments to udtf function,failed
tests.integ.modin.frame.test_apply_axis_0,test_apply_nested_series_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_apply_axis_0,test_axis_0_apply_args_kwargs,AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_apply_axis_0,test_axis_0_basic_types_with_type_hints[apply_on_frame_with_timedelta_data_columns_returns_int],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_apply_axis_0,test_axis_0_basic_types_with_type_hints[return_timedelta_scalar],[XPASS(strict)] SNOW-1619940,failed
tests.integ.modin.frame.test_apply_axis_0,test_axis_0_basic_types_without_type_hints[apply_on_frame_with_timedelta_data_columns_returns_int],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_apply_axis_0,test_axis_0_basic_types_without_type_hints[return_timedelta_scalar],[XPASS(strict)] SNOW-1619940,failed
tests.integ.modin.frame.test_apply_axis_0,test_axis_0_date_time_timestamp_type[data0-<lambda>-expected_result0],AttributeError: Can only use .dt accessor with datetimelike values,failed
tests.integ.modin.frame.test_apply_axis_0,test_axis_0_date_time_timestamp_type[data1-<lambda>-expected_result1],AttributeError: Can only use .dt accessor with datetimelike values,failed
tests.integ.modin.frame.test_apply_axis_0,test_axis_0_return_dataframe_not_supported,"ValueError: If using all scalar values, you must pass an index",failed
tests.integ.modin.frame.test_apply_axis_0,test_axis_1_apply_args_kwargs_with_snowpandas_object,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_apply_axis_0,test_frame_with_timedelta_index,[XPASS(strict)] ,failed
tests.integ.modin.frame.test_apply_axis_0,test_result_type[broadcast],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_apply_axis_0,test_result_type[expand],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_apply_axis_0,test_result_type[reduce],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_applymap,test_applymap_basic_with_type_hints[applymap-apply_on_frame_with_timedelta_data_columns_returns_int],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_applymap,test_applymap_basic_with_type_hints[applymap-return_timedelta_scalar],[XPASS(strict)] SNOW-1619940,failed
tests.integ.modin.frame.test_applymap,test_applymap_basic_with_type_hints[map-apply_on_frame_with_timedelta_data_columns_returns_int],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_applymap,test_applymap_basic_with_type_hints[map-return_timedelta_scalar],[XPASS(strict)] SNOW-1619940,failed
tests.integ.modin.frame.test_applymap,test_applymap_basic_without_type_hints[applymap-apply_on_frame_with_timedelta_data_columns_returns_int],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_applymap,test_applymap_basic_without_type_hints[applymap-return_timedelta_scalar],[XPASS(strict)] SNOW-1619940,failed
tests.integ.modin.frame.test_applymap,test_applymap_basic_without_type_hints[map-apply_on_frame_with_timedelta_data_columns_returns_int],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_applymap,test_applymap_basic_without_type_hints[map-return_timedelta_scalar],[XPASS(strict)] SNOW-1619940,failed
tests.integ.modin.frame.test_applymap,test_applymap_date_time_timestamp[data0-str-str-expected_result0],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (100.0 %)
[index]: [0, 1]
[left]:  [2023-01-01, None]
[right]: [2023-01-01 00:00:00, NaT]
At positional index 0, first diff: 2023-01-01 != 2023-01-01 00:00:00",failed
tests.integ.modin.frame.test_applymap,test_applymap_date_time_timestamp[data1-type-str-expected_result1],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (100.0 %)
[index]: [0, 1]
[left]:  [<class 'datetime.date'>, <class 'NoneType'>]
[right]: [<class 'pandas._libs.tslibs.timestamps.Timestamp'>, <class 'pandas._libs.tslibs.nattype.NaTType'>]
At positional index 0, first diff: <class 'datetime.date'> != <class 'pandas._libs.tslibs.timestamps.Timestamp'>",failed
tests.integ.modin.frame.test_applymap,test_applymap_date_time_timestamp[data2-str-str-expected_result2],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (100.0 %)
[index]: [0, 1]
[left]:  [01:02:03, None]
[right]: [0 days 01:02:03, NaT]
At positional index 0, first diff: 01:02:03 != 0 days 01:02:03",failed
tests.integ.modin.frame.test_applymap,test_applymap_date_time_timestamp[data3-type-str-expected_result3],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (100.0 %)
[index]: [0, 1]
[left]:  [<class 'datetime.time'>, <class 'NoneType'>]
[right]: [<class 'pandas._libs.tslibs.timedeltas.Timedelta'>, <class 'pandas._libs.tslibs.nattype.NaTType'>]
At positional index 0, first diff: <class 'datetime.time'> != <class 'pandas._libs.tslibs.timedeltas.Timedelta'>",failed
tests.integ.modin.frame.test_applymap,test_applymap_date_time_timestamp[data5-type-str-expected_result5],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (100.0 %)
[index]: [0, 1]
[left]:  [<class 'pandas._libs.tslibs.timestamps.Timestamp'>, <class 'pandas._libs.tslibs.nattype.NaTType'>]
[right]: [<class 'pandas._libs.tslibs.timestamps.Timestamp'>, <class 'pandas._libs.tslibs.nattype.NaTType'>]
At positional index 0, first diff: <class 'pandas._libs.tslibs.timestamps.Timestamp'> != <class 'pandas._libs.tslibs.timestamps.Timestamp'>",failed
tests.integ.modin.frame.test_applymap,test_applymap_date_time_timestamp[data6-str-str-expected_result6],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [2023-01-01 01:02:03+00:00, 2023-01-01 01:02:03, None]
[right]: [2023-01-01 01:02:03+00:00, 2023-01-01 01:02:03-08:00, None]
At positional index 1, first diff: 2023-01-01 01:02:03 != 2023-01-01 01:02:03-08:00",failed
tests.integ.modin.frame.test_applymap,test_applymap_date_time_timestamp[data7-type-str-expected_result7],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (100.0 %)
[index]: [0, 1]
[left]:  [<class 'pandas._libs.tslibs.timestamps.Timestamp'>, <class 'pandas._libs.tslibs.nattype.NaTType'>]
[right]: [<class 'pandas._libs.tslibs.timestamps.Timestamp'>, <class 'NoneType'>]
At positional index 0, first diff: <class 'pandas._libs.tslibs.timestamps.Timestamp'> != <class 'pandas._libs.tslibs.timestamps.Timestamp'>",failed
tests.integ.modin.frame.test_applymap,test_applymap_na_action_ignore[applymap],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_applymap,test_applymap_na_action_ignore[map],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_applymap,test_frame_with_timedelta_index,[XPASS(strict)] ,failed
tests.integ.modin.frame.test_assign,test_assign_basic_callable[add_two_cols_fn],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_assign,test_assign_basic_callable[identity_fn],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_assign,test_assign_basic_non_pandas_object[2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_assign,test_assign_basic_non_pandas_object[new_col_value1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_assign,test_assign_basic_non_pandas_object[x],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_assign,test_assign_basic_series,"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_assign,test_assign_basic_series_mismatched_index[different_index],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_assign,test_assign_basic_series_mismatched_index[reversed_index],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_assign,test_assign_basic_timedelta_series,"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_assign,test_assign_chained_callable,"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_assign,test_assign_invalid_long_column_length_negative,ValueError: Length of values (5) does not match length of index (3),failed
tests.integ.modin.frame.test_assign,test_assign_invalid_short_column_length_negative,ValueError: Length of values (2) does not match length of index (3),failed
tests.integ.modin.frame.test_assign,test_assign_self_columns,"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_assign,test_assign_short_series,"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_assign,test_assign_short_series_mismatched_index[different_index],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_assign,test_assign_short_series_mismatched_index[reversed_index],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_assign,test_overwrite_columns_via_assign,"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[boolean],TypeError: Need to pass bool-like values,failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[datetime64[ns]],TypeError: Cannot use .astype to convert from timezone-aware dtype to timezone-naive dtype. Use obj.tz_localize(None) or obj.tz_convert('UTC').tz_localize(None) instead.,failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[float160],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: 'Cannot cast DatetimeArray to dtype float16'",failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[float161],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: 'Cannot cast DatetimeArray to dtype float16'",failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[float32],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: 'Cannot cast DatetimeArray to dtype float32'",failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[float64],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: 'Cannot cast DatetimeArray to dtype float64'",failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[float],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: 'Cannot cast DatetimeArray to dtype float64'",failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[int16],"TypeError: Converting from datetime64[ns, America/Los_Angeles] to int16 is not supported. Do obj.astype('int64').astype(dtype) instead",failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[int32],"TypeError: Converting from datetime64[ns, America/Los_Angeles] to int32 is not supported. Do obj.astype('int64').astype(dtype) instead",failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[int8],"TypeError: Converting from datetime64[ns, America/Los_Angeles] to int8 is not supported. Do obj.astype('int64').astype(dtype) instead",failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[to_dtype15],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""float() argument must be a string or a real number, not 'Timestamp'""",failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[to_dtype16],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""float() argument must be a string or a real number, not 'Timestamp'""",failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[to_dtype17],"TypeError: int() argument must be a string, a bytes-like object or a real number, not 'Timestamp'",failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[to_dtype18],"TypeError: int() argument must be a string, a bytes-like object or a real number, not 'Timestamp'",failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[to_dtype19],"TypeError: int() argument must be a string, a bytes-like object or a real number, not 'Timestamp'",failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[to_dtype20],"TypeError: int() argument must be a string, a bytes-like object or a real number, not 'Timestamp'",failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[to_dtype21],"TypeError: int() argument must be a string, a bytes-like object or a real number, not 'Timestamp'",failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[to_dtype22],"TypeError: int() argument must be a string, a bytes-like object or a real number, not 'Timestamp'",failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[to_dtype23],"TypeError: int() argument must be a string, a bytes-like object or a real number, not 'Timestamp'",failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[to_dtype24],"TypeError: int() argument must be a string, a bytes-like object or a real number, not 'Timestamp'",failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[to_dtype25],AssertionError: assert string[python] == dtype('O'),failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[uint16],"TypeError: Converting from datetime64[ns, America/Los_Angeles] to uint16 is not supported. Do obj.astype('int64').astype(dtype) instead",failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[uint32],"TypeError: Converting from datetime64[ns, America/Los_Angeles] to uint32 is not supported. Do obj.astype('int64').astype(dtype) instead",failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[uint64],"TypeError: Converting from datetime64[ns, America/Los_Angeles] to uint64 is not supported. Do obj.astype('int64').astype(dtype) instead",failed
tests.integ.modin.frame.test_astype,test_astype_from_timestamp_ltz[uint8],"TypeError: Converting from datetime64[ns, America/Los_Angeles] to uint8 is not supported. Do obj.astype('int64').astype(dtype) instead",failed
tests.integ.modin.frame.test_astype,test_astype_to_timedelta_negative,"AssertionError: Regex pattern did not match.
 Regex: 'dtype\\ datetime64\\[ns\\]\\ cannot\\ be\\ converted\\ to\\ timedelta64\\[ns\\]'
 Input: 'Cannot cast DatetimeArray to dtype timedelta64[ns]'",failed
tests.integ.modin.frame.test_astype,test_input_negative,"AssertionError: Regex pattern did not match.
 Regex: 'not found in columns'
 Input: ""'Only a column name can be used for the key in a dtype mappings argument.'""",failed
tests.integ.modin.frame.test_at,test_at_multiindex_neg[key0-IndexingError],Failed: DID NOT RAISE <class 'pandas.errors.IndexingError'>,failed
tests.integ.modin.frame.test_at,test_at_multiindex_neg[key1-IndexingError],Failed: DID NOT RAISE <class 'pandas.errors.IndexingError'>,failed
tests.integ.modin.frame.test_at,test_at_multiindex_neg[key2-IndexingError],Failed: DID NOT RAISE <class 'pandas.errors.IndexingError'>,failed
tests.integ.modin.frame.test_at,test_at_multiindex_neg[key3-IndexingError],IndexError: list index out of range,failed
tests.integ.modin.frame.test_at,test_at_neg[0-IndexingError],Failed: DID NOT RAISE <class 'pandas.errors.IndexingError'>,failed
tests.integ.modin.frame.test_at,test_at_neg[a-IndexingError],"KeyError: array(['a'], dtype='<U1')",failed
tests.integ.modin.frame.test_at,test_at_neg[key1-IndexingError],Failed: DID NOT RAISE <class 'pandas.errors.IndexingError'>,failed
tests.integ.modin.frame.test_at,test_at_neg[key2-IndexingError],"TypeError: int() argument must be a string, a bytes-like object or a real number, not 'dict'",failed
tests.integ.modin.frame.test_at,test_at_neg[key4-IndexingError],Failed: DID NOT RAISE <class 'pandas.errors.IndexingError'>,failed
tests.integ.modin.frame.test_at,test_at_neg[key5-IndexingError],Failed: DID NOT RAISE <class 'pandas.errors.IndexingError'>,failed
tests.integ.modin.frame.test_at,test_at_neg[key6-IndexingError],"TypeError: int() argument must be a string, a bytes-like object or a real number, not 'dict'",failed
tests.integ.modin.frame.test_at,test_at_neg[key8-KeyError],"TypeError: int() argument must be a string, a bytes-like object or a real number, not 'dict'",failed
tests.integ.modin.frame.test_at,test_at_set_default_index_multiindex_columns_neg,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_at,test_at_set_multiindex_index_multiindex_columns_neg,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_at,test_at_set_multiindex_index_str_columns_neg,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_at,test_raise_set_cell_with_list_like_value_error,"ValueError: could not broadcast input array from shape (2,) into shape (1, 1)",failed
tests.integ.modin.frame.test_attrs,test_df_attrs_add,AttributeError: can't set attribute,failed
tests.integ.modin.frame.test_attrs,test_df_attrs_concat[0-data0-attrs_list0],AttributeError: can't set attribute,failed
tests.integ.modin.frame.test_attrs,test_df_attrs_concat[0-data1-attrs_list1],AttributeError: can't set attribute,failed
tests.integ.modin.frame.test_attrs,test_df_attrs_concat[0-data2-attrs_list2],AttributeError: can't set attribute,failed
tests.integ.modin.frame.test_attrs,test_df_attrs_concat[1-data0-attrs_list0],AttributeError: can't set attribute,failed
tests.integ.modin.frame.test_attrs,test_df_attrs_concat[1-data1-attrs_list1],AttributeError: can't set attribute,failed
tests.integ.modin.frame.test_attrs,test_df_attrs_concat[1-data2-attrs_list2],AttributeError: can't set attribute,failed
tests.integ.modin.frame.test_attrs,test_df_attrs_set_deepcopy,AttributeError: can't set attribute,failed
tests.integ.modin.frame.test_attrs,test_df_attrs_take,AttributeError: can't set attribute,failed
tests.integ.modin.frame.test_axis,test_df_set_axis_copy_false,"AssertionError: assert 'keyword is unused and is ignored.' in ''
 +  where '' = <_pytest.logging.LogCaptureFixture object at 0x342abd1e0>.text",failed
tests.integ.modin.frame.test_axis,test_df_set_axis_copy_true,"AssertionError: assert 'keyword is unused and is ignored.' in ''
 +  where '' = <_pytest.logging.LogCaptureFixture object at 0x3435c0df0>.text",failed
tests.integ.modin.frame.test_axis,test_set_axis_df_raises_type_error_diff_error_msg[native_df0-axis0-labels0-list is not a valid type for axis.],"AssertionError: Regex pattern did not match.
 Regex: 'list is not a valid type for axis.'
 Input: ""unhashable type: 'list'""",failed
tests.integ.modin.frame.test_axis,test_set_axis_df_raises_type_error_diff_error_msg[native_df1-axis1-labels1-list is not a valid type for axis.],"AssertionError: Regex pattern did not match.
 Regex: 'list is not a valid type for axis.'
 Input: ""unhashable type: 'list'""",failed
tests.integ.modin.frame.test_axis,test_set_axis_df_raises_type_error_diff_error_msg[native_df2-axis2-labels2-Index is not a valid type for axis.],"AssertionError: Regex pattern did not match.
 Regex: 'Index is not a valid type for axis.'
 Input: ""unhashable type: 'Index'""",failed
tests.integ.modin.frame.test_axis,test_set_axis_df_raises_type_error_diff_error_msg[native_df3-axis3-labels3-DataFrame is not a valid type for axis.],"AssertionError: Regex pattern did not match.
 Regex: 'DataFrame is not a valid type for axis.'
 Input: ""unhashable type: 'DataFrame'""",failed
tests.integ.modin.frame.test_axis,test_set_axis_df_raises_type_error_diff_error_msg[native_df4-axis4-labels4-Series is not a valid type for axis.],"AssertionError: Regex pattern did not match.
 Regex: 'Series is not a valid type for axis.'
 Input: ""unhashable type: 'Series'""",failed
tests.integ.modin.frame.test_axis,test_set_axis_df_raises_type_error_diff_error_msg[native_df5-axis5-labels5-MultiIndex is not a valid type for axis.],"AssertionError: Regex pattern did not match.
 Regex: 'MultiIndex is not a valid type for axis.'
 Input: ""unhashable type: 'MultiIndex'""",failed
tests.integ.modin.frame.test_axis,test_set_axis_df_raises_type_error_diff_error_msg[native_df6-axis6-labels6-MultiIndex is not a valid type for axis.],"AssertionError: Regex pattern did not match.
 Regex: 'MultiIndex is not a valid type for axis.'
 Input: ""unhashable type: 'MultiIndex'""",failed
tests.integ.modin.frame.test_axis,test_set_axis_df_raises_type_error_diff_error_msg[native_df7-index-None-None is not a valid value for the parameter 'labels'.],"AssertionError: Regex pattern did not match.
 Regex: ""None is not a valid value for the parameter 'labels'.""
 Input: 'Index(...) must be called with a collection of some kind, None was passed'",failed
tests.integ.modin.frame.test_axis,test_set_axis_df_raises_type_error_diff_error_msg[native_df8-columns-None-None is not a valid value for the parameter 'labels'.],"AssertionError: Regex pattern did not match.
 Regex: ""None is not a valid value for the parameter 'labels'.""
 Input: 'Index(...) must be called with a collection of some kind, None was passed'",failed
tests.integ.modin.frame.test_axis,test_set_columns_index_name[ c o l ],"AssertionError: Index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [' c o l ']",failed
tests.integ.modin.frame.test_axis,"test_set_columns_index_name[""COL""]","AssertionError: Index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['""COL""']",failed
tests.integ.modin.frame.test_axis,"test_set_columns_index_name[""c""""ol]","AssertionError: Index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['""c""""ol']",failed
tests.integ.modin.frame.test_axis,"test_set_columns_index_name[""col""]","AssertionError: Index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['""col""']",failed
tests.integ.modin.frame.test_axis,"test_set_columns_index_name[""col]","AssertionError: Index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['""col']",failed
tests.integ.modin.frame.test_axis,test_set_columns_index_name['co''l],"AssertionError: Index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [''co''l']",failed
tests.integ.modin.frame.test_axis,test_set_columns_index_name['col],"AssertionError: Index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [''col']",failed
tests.integ.modin.frame.test_axis,test_set_columns_index_name[5.0],"AssertionError: Index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [5.0]",failed
tests.integ.modin.frame.test_axis,test_set_columns_index_name[5],"AssertionError: Index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [5]",failed
tests.integ.modin.frame.test_axis,test_set_columns_index_name[COL],"AssertionError: Index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['COL']",failed
tests.integ.modin.frame.test_axis,test_set_columns_index_name[\u0e1b\u0e47\u0e19\u0e21\u0e19\u0e38],"AssertionError: Index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['ป็นมนุ']",failed
tests.integ.modin.frame.test_axis,test_set_columns_index_name[\u30c1\u30ea\u30cc\u30eb],"AssertionError: Index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['チリヌル']",failed
tests.integ.modin.frame.test_axis,test_set_columns_index_name[\u718a\u732b],"AssertionError: Index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['熊猫']",failed
tests.integ.modin.frame.test_axis,test_set_columns_index_name[\xff\xfes\x00n\x00o\x00w\x00f\x00l\x00a\x00k\x00e\x00],"AssertionError: Index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [b'\xff\xfes\x00n\x00o\x00w\x00f\x00l\x00a\x00k\x00e\x00']",failed
tests.integ.modin.frame.test_axis,test_set_columns_index_name[index_name2],"AssertionError: Index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('5', 5)]",failed
tests.integ.modin.frame.test_axis,"test_set_columns_index_name[{""snow"": {""fla"": ""ke""}}]","AssertionError: Index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['{""snow"": {""fla"": ""ke""}}']",failed
tests.integ.modin.frame.test_cache_result,test_cache_result_dataframe_complex_correctness[False],"NotImplementedError: Modin supports the method DataFrame.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_cache_result,test_cache_result_dataframe_complex_correctness[True],"NotImplementedError: Modin supports the method DataFrame.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_cache_result,test_cache_result_empty_dataframe[False-col_and_index],"NotImplementedError: Modin supports the method DataFrame.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_cache_result,test_cache_result_empty_dataframe[False-no_col_no_index],"NotImplementedError: Modin supports the method DataFrame.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_cache_result,test_cache_result_empty_dataframe[False-only_col],"NotImplementedError: Modin supports the method DataFrame.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_cache_result,test_cache_result_empty_dataframe[False-only_index],"NotImplementedError: Modin supports the method DataFrame.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_cache_result,test_cache_result_empty_dataframe[True-col_and_index],"NotImplementedError: Modin supports the method DataFrame.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_cache_result,test_cache_result_empty_dataframe[True-no_col_no_index],"NotImplementedError: Modin supports the method DataFrame.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_cache_result,test_cache_result_empty_dataframe[True-only_col],"NotImplementedError: Modin supports the method DataFrame.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_cache_result,test_cache_result_empty_dataframe[True-only_index],"NotImplementedError: Modin supports the method DataFrame.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_cache_result,test_cache_result_post_apply[False],"NotImplementedError: Modin supports the method DataFrame.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_cache_result,test_cache_result_post_apply[True],"NotImplementedError: Modin supports the method DataFrame.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_cache_result,test_cache_result_post_applymap[False],"NotImplementedError: Modin supports the method DataFrame.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_cache_result,test_cache_result_post_applymap[True],"NotImplementedError: Modin supports the method DataFrame.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_cache_result,test_cache_result_post_pivot[False],"NotImplementedError: Modin supports the method DataFrame.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_cache_result,test_cache_result_post_pivot[True],"NotImplementedError: Modin supports the method DataFrame.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_cache_result,test_cache_result_simple[False],"NotImplementedError: Modin supports the method DataFrame.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_cache_result,test_cache_result_simple[True],"NotImplementedError: Modin supports the method DataFrame.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_compare,test_align_axis[0],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_compare,test_align_axis[index],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_compare,test_different_columns,"AssertionError: Regex pattern did not match.
 Regex: 'Can only compare identically-labeled objects'
 Input: 'Can only compare identically-labeled (both index and columns) DataFrame objects'",failed
tests.integ.modin.frame.test_compare,test_different_index,"AssertionError: Regex pattern did not match.
 Regex: 'Can only compare identically-labeled objects'
 Input: 'Can only compare identically-labeled (both index and columns) DataFrame objects'",failed
tests.integ.modin.frame.test_compare,test_keep_equal,[XPASS(strict)] ,failed
tests.integ.modin.frame.test_compare,test_keep_shape,[XPASS(strict)] ,failed
tests.integ.modin.frame.test_compare,test_result_names,[XPASS(strict)] ,failed
tests.integ.modin.frame.test_create_or_replace_dynamic_table,test_create_or_replace_dynamic_table_enforce_ordering_raises,UnboundLocalError: local variable 'dynamic_table_name' referenced before assignment,failed
tests.integ.modin.frame.test_create_or_replace_view,test_create_or_replace_view_basic,"NotImplementedError: Modin supports the method DataFrame.create_or_replace_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_create_or_replace_view,test_create_or_replace_view_multiple_sessions_enforce_ordering_raises,UnboundLocalError: local variable 'view_name' referenced before assignment,failed
tests.integ.modin.frame.test_cumulative,test_dataframe_cumfunc_axis_negative[cummax],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_cumulative,test_dataframe_cumfunc_axis_negative[cummin],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_cumulative,test_dataframe_cumfunc_axis_negative[cumsum],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_describe,test_describe_duplicate_columns[None-None-7],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (11, 3)
[right]: (8, 2)",failed
tests.integ.modin.frame.test_describe,test_describe_duplicate_columns[None-float-9],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (11, 3)
[right]: (11, 2)",failed
tests.integ.modin.frame.test_describe,test_describe_duplicate_columns[None-object-7],ValueError: No objects to concatenate,failed
tests.integ.modin.frame.test_describe,test_describe_duplicate_columns[float-int-5],ValueError: No objects to concatenate,failed
tests.integ.modin.frame.test_describe,test_describe_duplicate_columns[int-float-5],ValueError: No objects to concatenate,failed
tests.integ.modin.frame.test_describe,test_describe_duplicate_columns[number-None-7],ValueError: No objects to concatenate,failed
tests.integ.modin.frame.test_describe,test_describe_duplicate_columns[object-None-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (11, 3)
[right]: (4, 1)",failed
tests.integ.modin.frame.test_describe,test_describe_duplicate_columns_mixed,"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (11, 3)
[right]: (8, 2)",failed
tests.integ.modin.frame.test_describe,test_timedelta,"[XPASS(strict)] requires concat(), which we cannot do with Timedelta.",failed
tests.integ.modin.frame.test_diff,test_col_wise_diff_all_int_df[with_len(df.columns)/2_cols_after],ValueError: periods must be an int. got <class 'float'> instead,failed
tests.integ.modin.frame.test_diff,test_col_wise_diff_all_int_df[with_len(df.columns)/2_cols_before],ValueError: periods must be an int. got <class 'float'> instead,failed
tests.integ.modin.frame.test_diff,test_df_diff_bool_df_with_missing_values[0],TypeError: unsupported operand type for -: got object,failed
tests.integ.modin.frame.test_diff,test_df_diff_bool_df_with_missing_values[1],TypeError: unsupported operand type for -: got object,failed
tests.integ.modin.frame.test_diff,test_df_diff_bools_and_ints_as_variants[0],TypeError: unsupported operand type for -: got object,failed
tests.integ.modin.frame.test_diff,test_df_diff_bools_and_ints_as_variants[1],TypeError: unsupported operand type for -: got object,failed
tests.integ.modin.frame.test_diff,test_df_diff_bools_as_variants,TypeError: unsupported operand type for -: got object,failed
tests.integ.modin.frame.test_diff,test_df_diff_bools_as_variants_and_ints[0],TypeError: unsupported operand type for -: got object,failed
tests.integ.modin.frame.test_diff,test_df_diff_bools_as_variants_and_ints[1],TypeError: unsupported operand type for -: got object,failed
tests.integ.modin.frame.test_diff,test_df_diff_custom_variant_type_negative,TypeError: unsupported operand type for -: got object,failed
tests.integ.modin.frame.test_diff,test_df_diff_mixed_variant_columns[0],TypeError: unsupported operand type for -: got object,failed
tests.integ.modin.frame.test_diff,test_df_diff_mixed_variant_columns[1],TypeError: unsupported operand type for -: got object,failed
tests.integ.modin.frame.test_diff,test_df_diff_string_type_negative,"AssertionError: Regex pattern did not match.
 Regex: ""Numeric value 'a' is not recognized""
 Input: 'unsupported operand type for -: got object'",failed
tests.integ.modin.frame.test_diff,test_row_wise_diff_all_int_df[with_len(df)/2_rows_after],ValueError: periods must be an int. got <class 'float'> instead,failed
tests.integ.modin.frame.test_diff,test_row_wise_diff_all_int_df[with_len(df)/2_rows_before],ValueError: periods must be an int. got <class 'float'> instead,failed
tests.integ.modin.frame.test_drop,test_drop_invalid_axis0_labels_errors_ignore[labels5-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 2)
[right]: (1, 2)",failed
tests.integ.modin.frame.test_drop,"test_drop_invalid_labels_axis0_negative[labels \\[4, 5, 7\\] not found in axis-labels7-None-3]","AssertionError: Regex pattern did not match.
 Regex: 'labels \\[4, 5, 7\\] not found in axis'
 Input: '""labels Index([4, 5, 7], dtype=\'int64\') not contained in axis""'",failed
tests.integ.modin.frame.test_drop,test_drop_invalid_labels_axis0_negative[labels \\[4\\] not found in axis-4-None-1],"AssertionError: Regex pattern did not match.
 Regex: 'labels \\[4\\] not found in axis'
 Input: '""labels Index([4], dtype=\'int64\') not contained in axis""'",failed
tests.integ.modin.frame.test_drop,test_drop_invalid_labels_axis0_negative[labels \\[7\\] not found in axis-labels8-None-2],"AssertionError: Regex pattern did not match.
 Regex: 'labels \\[7\\] not found in axis'
 Input: '""labels Index([1, 7], dtype=\'int64\') not contained in axis""'",failed
tests.integ.modin.frame.test_drop,test_drop_invalid_labels_axis0_negative[labels \\[None\\] not found in axis-labels0-None-1],"AssertionError: Regex pattern did not match.
 Regex: 'labels \\[None\\] not found in axis'
 Input: '""labels Index([None], dtype=\'object\') not contained in axis""'",failed
tests.integ.modin.frame.test_drop,"test_drop_invalid_labels_axis0_negative[labels \\[\\(1, 2\\)\\] not found in axis-labels6-None-1]","AssertionError: Regex pattern did not match.
 Regex: 'labels \\[\\(1, 2\\)\\] not found in axis'
 Input: '""labels Index([1, 2], dtype=\'int64\') not contained in axis""'",failed
tests.integ.modin.frame.test_drop,test_drop_invalid_labels_axis1_negative[labels \\['blue'\\] not found in axis-blue-None],"AssertionError: Regex pattern did not match.
 Regex: ""labels \\['blue'\\] not found in axis""
 Input: '""labels Index([\'blue\'], dtype=\'object\') not contained in axis""'",failed
tests.integ.modin.frame.test_drop,test_drop_invalid_labels_axis1_negative[labels \\['blue'\\] not found in axis-labels9-None],"AssertionError: Regex pattern did not match.
 Regex: ""labels \\['blue'\\] not found in axis""
 Input: '""labels Index([\'blue\', \'red\'], dtype=\'object\') not contained in axis""'",failed
tests.integ.modin.frame.test_drop,"test_drop_invalid_labels_axis1_negative[labels \\[1, 2, 3\\] not found in axis-labels8-None]","AssertionError: Regex pattern did not match.
 Regex: 'labels \\[1, 2, 3\\] not found in axis'
 Input: '""labels Index([1, 2, 3], dtype=\'int64\') not contained in axis""'",failed
tests.integ.modin.frame.test_drop,test_drop_invalid_labels_axis1_negative[labels \\[3\\] not found in axis-3-None],"AssertionError: Regex pattern did not match.
 Regex: 'labels \\[3\\] not found in axis'
 Input: '""labels Index([3], dtype=\'int64\') not contained in axis""'",failed
tests.integ.modin.frame.test_drop,"test_drop_invalid_labels_axis1_negative[labels \\[\\(1, 2\\)\\] not found in axis-labels7-None]","AssertionError: Regex pattern did not match.
 Regex: 'labels \\[\\(1, 2\\)\\] not found in axis'
 Input: '""labels Index([1, 2], dtype=\'int64\') not contained in axis""'",failed
tests.integ.modin.frame.test_drop,test_drop_level[0-a-None],"KeyError: ""labels Index(['a'], dtype='object') not contained in axis""",failed
tests.integ.modin.frame.test_drop,test_drop_level[1-a-None],"KeyError: ""labels Index(['a'], dtype='object') not contained in axis""",failed
tests.integ.modin.frame.test_drop,test_drop_preserve_index_names,"KeyError: ""labels Index(['red'], dtype='object') not contained in axis""",failed
tests.integ.modin.frame.test_drop,test_mixed_depth_drop[0-a],"KeyError: ""labels Index(['a'], dtype='object') not contained in axis""",failed
tests.integ.modin.frame.test_drop,test_mixed_depth_drop[0-labels1],"KeyError: ""labels Index(['', 'a'], dtype='object') not contained in axis""",failed
tests.integ.modin.frame.test_drop,test_mixed_depth_drop[0-labels2],"KeyError: ""labels Index(['top'], dtype='object') not contained in axis""",failed
tests.integ.modin.frame.test_drop,test_mixed_depth_drop[0-labels4],"KeyError: ""labels Index(['OD', 'top', 'wx'], dtype='object') not contained in axis""",failed
tests.integ.modin.frame.test_drop,test_mixed_depth_drop[1-a],"KeyError: ""labels Index(['a'], dtype='object') not contained in axis""",failed
tests.integ.modin.frame.test_drop,test_mixed_depth_drop[1-labels1],"KeyError: ""labels Index(['', 'a'], dtype='object') not contained in axis""",failed
tests.integ.modin.frame.test_drop,test_mixed_depth_drop[1-labels2],"KeyError: ""labels Index(['top'], dtype='object') not contained in axis""",failed
tests.integ.modin.frame.test_drop,test_mixed_depth_drop[1-labels4],"KeyError: ""labels Index(['OD', 'top', 'wx'], dtype='object') not contained in axis""",failed
tests.integ.modin.frame.test_drop_duplicates,test_drop_duplicates_with_misspelled_column_name_or_empty_subset[a],"AssertionError: Regex pattern did not match.
 Regex: 'None of .* are in the \\[columns\\]'
 Input: ""Index(['a'], dtype='object')""",failed
tests.integ.modin.frame.test_drop_duplicates,test_drop_duplicates_with_misspelled_column_name_or_empty_subset[subset1],"AssertionError: Regex pattern did not match.
 Regex: 'None of .* are in the \\[columns\\]'
 Input: ""Index(['a'], dtype='object')""",failed
tests.integ.modin.frame.test_drop_duplicates,test_drop_duplicates_with_misspelled_column_name_or_empty_subset[subset2],"AssertionError: Regex pattern did not match.
 Regex: '.* not in index'
 Input: ""Index(['a'], dtype='object')""",failed
tests.integ.modin.frame.test_drop_duplicates,test_drop_duplicates_with_misspelled_column_name_or_empty_subset[subset3],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.frame.test_dropna,test_axis_1_not_implemented,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_dropna,test_basic_arguments[SNOW-1787507_subset_scalar],"TypeError: Index(...) must be called with a collection of some kind, 'toy' was passed",failed
tests.integ.modin.frame.test_dropna,test_dropna_negative,KeyError: ['invalid'],failed
tests.integ.modin.frame.test_dtypes,test_empty[None-expected_dtype3-snowpark_dtype3-to_pandas_dtype3],AttributeError: 'DataFrame' object has no attribute 'get_snowflake_type',failed
tests.integ.modin.frame.test_dtypes,test_empty[input_dtype0-expected_dtype0-snowpark_dtype0-to_pandas_dtype0],AttributeError: 'DataFrame' object has no attribute 'get_snowflake_type',failed
tests.integ.modin.frame.test_dtypes,test_empty[input_dtype1-expected_dtype1-snowpark_dtype1-to_pandas_dtype1],AttributeError: 'DataFrame' object has no attribute 'get_snowflake_type',failed
tests.integ.modin.frame.test_dtypes,test_empty[input_dtype2-expected_dtype2-snowpark_dtype2-to_pandas_dtype2],AttributeError: 'DataFrame' object has no attribute 'get_snowflake_type',failed
tests.integ.modin.frame.test_dtypes,test_extended_float64_with_nan,AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_dtypes,test_float[dataframe_input0-input_dtype0-expected_dtype0-logical_dtype0],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    1.099609\n1    2.199219\n2    3.300781\ndtype: float16.dtype",failed
tests.integ.modin.frame.test_dtypes,test_float[dataframe_input1-input_dtype1-expected_dtype1-logical_dtype1],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    1.1\n1    2.2\n2    3.3\ndtype: float32.dtype",failed
tests.integ.modin.frame.test_dtypes,test_integer[dataframe_input0-input_dtype0-logical_dtype0],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    1\n1    2\n2    3\ndtype: int8.dtype",failed
tests.integ.modin.frame.test_dtypes,test_integer[dataframe_input1-input_dtype1-logical_dtype1],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    1\n1    2\n2    3\ndtype: int16.dtype",failed
tests.integ.modin.frame.test_dtypes,test_integer[dataframe_input2-input_dtype2-logical_dtype2],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    1\n1    2\n2    3\ndtype: int32.dtype",failed
tests.integ.modin.frame.test_dtypes,test_integer[dataframe_input4-input_dtype4-logical_dtype4],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    1024\n1    2048\n2    3072\ndtype: int16.dtype",failed
tests.integ.modin.frame.test_dtypes,test_integer[dataframe_input5-input_dtype5-logical_dtype5],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    1024\n1    2048\n2    3072\ndtype: int32.dtype",failed
tests.integ.modin.frame.test_dtypes,test_integer[dataframe_input7-input_dtype7-logical_dtype7],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    1048576\n1    2097152\n2    3145728\ndtype: int32.dtype",failed
tests.integ.modin.frame.test_dtypes,test_nullable_extension[dataframe_input0-None-snowpark_dtype0-logical_dtype0],AttributeError: 'DataFrame' object has no attribute 'get_snowflake_type',failed
tests.integ.modin.frame.test_dtypes,test_nullable_extension[dataframe_input1-Int64-snowpark_dtype1-logical_dtype1],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0       1\n1       2\n2    <NA>\ndtype: Int64.dtype",failed
tests.integ.modin.frame.test_dtypes,test_nullable_extension[dataframe_input10-Float64-snowpark_dtype10-logical_dtype10],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0     1.0\n1     2.0\n2    <NA>\ndtype: Float64.dtype",failed
tests.integ.modin.frame.test_dtypes,test_nullable_extension[dataframe_input11-Int64-snowpark_dtype11-logical_dtype11],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0       1\n1       2\n2    <NA>\n3    <NA>\n4    <NA>\ndtype: Int64.dtype",failed
tests.integ.modin.frame.test_dtypes,test_nullable_extension[dataframe_input12-Float64-snowpark_dtype12-logical_dtype12],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0     1.0\n1     2.0\n2    <NA>\n3    <NA>\n4     NaN\n5    <NA>\ndtype: Float64.dtype",failed
tests.integ.modin.frame.test_dtypes,test_nullable_extension[dataframe_input2-UInt64-snowpark_dtype2-logical_dtype2],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0       1\n1       2\n2    <NA>\ndtype: UInt64.dtype",failed
tests.integ.modin.frame.test_dtypes,test_nullable_extension[dataframe_input3-Int32-snowpark_dtype3-logical_dtype3],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0       1\n1       2\n2    <NA>\ndtype: Int32.dtype",failed
tests.integ.modin.frame.test_dtypes,test_nullable_extension[dataframe_input4-UInt32-snowpark_dtype4-logical_dtype4],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0       1\n1       2\n2    <NA>\ndtype: UInt32.dtype",failed
tests.integ.modin.frame.test_dtypes,test_nullable_extension[dataframe_input5-Int16-snowpark_dtype5-logical_dtype5],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0       1\n1       2\n2    <NA>\ndtype: Int16.dtype",failed
tests.integ.modin.frame.test_dtypes,test_nullable_extension[dataframe_input6-UInt16-snowpark_dtype6-logical_dtype6],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0       1\n1       2\n2    <NA>\ndtype: UInt16.dtype",failed
tests.integ.modin.frame.test_dtypes,test_nullable_extension[dataframe_input7-Int8-snowpark_dtype7-logical_dtype7],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0       1\n1       2\n2    <NA>\ndtype: Int8.dtype",failed
tests.integ.modin.frame.test_dtypes,test_nullable_extension[dataframe_input8-UInt8-snowpark_dtype8-logical_dtype8],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0       1\n1       2\n2    <NA>\ndtype: UInt8.dtype",failed
tests.integ.modin.frame.test_dtypes,test_nullable_extension[dataframe_input9-Float32-snowpark_dtype9-logical_dtype9],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0     1.0\n1     2.0\n2    <NA>\ndtype: Float32.dtype",failed
tests.integ.modin.frame.test_dtypes,test_object[dataframe_input0-snowpark_dtype0],AttributeError: 'DataFrame' object has no attribute 'get_snowflake_type',failed
tests.integ.modin.frame.test_dtypes,test_object[dataframe_input1-snowpark_dtype1],AttributeError: 'DataFrame' object has no attribute 'get_snowflake_type',failed
tests.integ.modin.frame.test_dtypes,test_object[dataframe_input2-snowpark_dtype2],AttributeError: 'DataFrame' object has no attribute 'get_snowflake_type',failed
tests.integ.modin.frame.test_dtypes,test_str_float_type_with_nan[input_data0-None-expected_dtype0-snowpark_dtype0-to_pandas_dtype0],AttributeError: 'DataFrame' object has no attribute 'get_snowflake_type',failed
tests.integ.modin.frame.test_dtypes,test_str_float_type_with_nan[input_data1-input_dtype1-expected_dtype1-snowpark_dtype1-to_pandas_dtype1],AttributeError: 'DataFrame' object has no attribute 'get_snowflake_type',failed
tests.integ.modin.frame.test_dtypes,test_str_float_type_with_nan[input_data2-input_dtype2-expected_dtype2-snowpark_dtype2-to_pandas_dtype2],AttributeError: 'DataFrame' object has no attribute 'get_snowflake_type',failed
tests.integ.modin.frame.test_dtypes,test_string_explicit[dataframe_input0-string-index0],"AssertionError: assert string[python] == <class 'numpy.object_'>
 +  where string[python] = 0    a\n1    b\n2    c\ndtype: string.dtype
 +  and   <class 'numpy.object_'> = np.object_",failed
tests.integ.modin.frame.test_dtypes,"test_time[dataframe_input2-datetime64[ns, America/Los_Angeles]-datetime64[ns, UTC-08:00]-datetime64[ns, UTC-08:00]]","AssertionError: assert datetime64[ns, America/Los_Angeles] == 'datetime64[ns, UTC-08:00]'
 +  where datetime64[ns, America/Los_Angeles] = 0   2017-12-15 19:02:35-08:00\n1   2017-12-15 19:02:35-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype",failed
tests.integ.modin.frame.test_dtypes,test_time[dataframe_input3-object-datetime64[ns]-datetime64[ns]],"AssertionError: assert dtype('O') == 'datetime64[ns]'
 +  where dtype('O') = 0    2017-12-16 03:02:35\n1    2017-12-16 03:02:35\n2                   None\ndtype: object.dtype",failed
tests.integ.modin.frame.test_dtypes,"test_time[dataframe_input4-object-datetime64[ns, UTC-08:00]-datetime64[ns, UTC-08:00]]","AssertionError: assert dtype('O') == 'datetime64[ns, UTC-08:00]'
 +  where dtype('O') = 0    2017-12-15 19:02:35-08:00\n1                         None\n2                          NaT\n3    2017-12-15 19:02:35-08:00\ndtype: object.dtype",failed
tests.integ.modin.frame.test_dtypes,test_unsupported_dtype_raises[input_data0-category-category],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_dtypes,test_unsupported_dtype_raises[input_data1-category-category],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_dtypes,test_unsupported_dtype_raises[input_data2-None-period\\[s\\]],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_equals,test_equals_numeric_variants[float16-float32-True],"AssertionError: assert False == True
 +  where False = <bound method DataFrame.equals of    col1\n0   1.0\n1   3.0>(   col1\n0   1.0\n1   3.0)
 +    where <bound method DataFrame.equals of    col1\n0   1.0\n1   3.0> =    col1\n0   1.0\n1   3.0.equals
 +      where    col1\n0   1.0\n1   3.0 = <class 'modin.pandas.dataframe.DataFrame'>(   col1\n0   1.0\n1   3.0)
 +        where <class 'modin.pandas.dataframe.DataFrame'> = pd.DataFrame
 +    and      col1\n0   1.0\n1   3.0 = <class 'modin.pandas.dataframe.DataFrame'>(   col1\n0   1.0\n1   3.0)
 +      where <class 'modin.pandas.dataframe.DataFrame'> = pd.DataFrame",failed
tests.integ.modin.frame.test_equals,test_equals_numeric_variants[float64-float32-True],"AssertionError: assert False == True
 +  where False = <bound method DataFrame.equals of    col1\n0   1.0\n1   3.0>(   col1\n0   1.0\n1   3.0)
 +    where <bound method DataFrame.equals of    col1\n0   1.0\n1   3.0> =    col1\n0   1.0\n1   3.0.equals
 +      where    col1\n0   1.0\n1   3.0 = <class 'modin.pandas.dataframe.DataFrame'>(   col1\n0   1.0\n1   3.0)
 +        where <class 'modin.pandas.dataframe.DataFrame'> = pd.DataFrame
 +    and      col1\n0   1.0\n1   3.0 = <class 'modin.pandas.dataframe.DataFrame'>(   col1\n0   1.0\n1   3.0)
 +      where <class 'modin.pandas.dataframe.DataFrame'> = pd.DataFrame",failed
tests.integ.modin.frame.test_equals,test_equals_numeric_variants[int32-int16-True],"AssertionError: assert False == True
 +  where False = <bound method DataFrame.equals of    col1\n0     1\n1     3>(   col1\n0     1\n1     3)
 +    where <bound method DataFrame.equals of    col1\n0     1\n1     3> =    col1\n0     1\n1     3.equals
 +      where    col1\n0     1\n1     3 = <class 'modin.pandas.dataframe.DataFrame'>(   col1\n0     1\n1     3)
 +        where <class 'modin.pandas.dataframe.DataFrame'> = pd.DataFrame
 +    and      col1\n0     1\n1     3 = <class 'modin.pandas.dataframe.DataFrame'>(   col1\n0     1\n1     3)
 +      where <class 'modin.pandas.dataframe.DataFrame'> = pd.DataFrame",failed
tests.integ.modin.frame.test_equals,test_equals_numeric_variants[int8-int16-True],"AssertionError: assert False == True
 +  where False = <bound method DataFrame.equals of    col1\n0     1\n1     3>(   col1\n0     1\n1     3)
 +    where <bound method DataFrame.equals of    col1\n0     1\n1     3> =    col1\n0     1\n1     3.equals
 +      where    col1\n0     1\n1     3 = <class 'modin.pandas.dataframe.DataFrame'>(   col1\n0     1\n1     3)
 +        where <class 'modin.pandas.dataframe.DataFrame'> = pd.DataFrame
 +    and      col1\n0     1\n1     3 = <class 'modin.pandas.dataframe.DataFrame'>(   col1\n0     1\n1     3)
 +      where <class 'modin.pandas.dataframe.DataFrame'> = pd.DataFrame",failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_default_parameters_with_no_multiindex[default_engine-CUSTOMER_KEY + 1],"AssertionError: Series are different

Attribute ""name"" are different
[left]:  None
[right]: CUSTOMER_KEY",failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_default_parameters_with_no_multiindex[default_engine-CUSTOMER_KEY + @global_int],"AssertionError: Series are different

Attribute ""name"" are different
[left]:  None
[right]: CUSTOMER_KEY",failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_default_parameters_with_no_multiindex[default_engine-CUSTOMER_KEY < @local_int],pandas.errors.UndefinedVariableError: local variable 'local_int' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_default_parameters_with_no_multiindex[default_engine-~(CUSTOMER_KEY < @global_int)],"AssertionError: Series are different

Attribute ""name"" are different
[left]:  None
[right]: CUSTOMER_KEY",failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_default_parameters_with_no_multiindex[engine_numexpr-CUSTOMER_KEY + 1],"AssertionError: Series are different

Attribute ""name"" are different
[left]:  None
[right]: CUSTOMER_KEY",failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_default_parameters_with_no_multiindex[engine_numexpr-CUSTOMER_KEY + @global_int],"AssertionError: Series are different

Attribute ""name"" are different
[left]:  None
[right]: CUSTOMER_KEY",failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_default_parameters_with_no_multiindex[engine_numexpr-CUSTOMER_KEY < @local_int],pandas.errors.UndefinedVariableError: local variable 'local_int' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_default_parameters_with_no_multiindex[engine_numexpr-~(CUSTOMER_KEY < @global_int)],"AssertionError: Series are different

Attribute ""name"" are different
[left]:  None
[right]: CUSTOMER_KEY",failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_default_parameters_with_no_multiindex[engine_python-CUSTOMER_KEY < @local_int],pandas.errors.UndefinedVariableError: local variable 'local_int' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_global_dict[default_engine],TypeError: descriptor '__eq__' requires a 'list' object but received a 'numpy.ndarray',failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_global_dict[engine_numexpr],TypeError: descriptor '__eq__' requires a 'list' object but received a 'numpy.ndarray',failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_level[default_engine-0],pandas.errors.UndefinedVariableError: local variable 'local_var' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_level[default_engine-1],pandas.errors.UndefinedVariableError: local variable 'local_var' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_level[default_engine-2],pandas.errors.UndefinedVariableError: local variable 'local_var' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_level[engine_numexpr-0],pandas.errors.UndefinedVariableError: local variable 'local_var' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_level[engine_numexpr-1],pandas.errors.UndefinedVariableError: local variable 'local_var' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_level[engine_numexpr-2],pandas.errors.UndefinedVariableError: local variable 'local_var' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_level[engine_python-0],pandas.errors.UndefinedVariableError: local variable 'local_var' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_level[engine_python-1],pandas.errors.UndefinedVariableError: local variable 'local_var' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_local_dict[default_engine],ValueError: NumExpr 2 does not support Unicode as a dtype.,failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_local_dict[engine_numexpr],ValueError: NumExpr 2 does not support Unicode as a dtype.,failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_multiindex,ValueError: unknown type object,failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_no_warning_for_default_numexpr_engine,"AssertionError: Series are different

Attribute ""name"" are different
[left]:  None
[right]: CUSTOMER_KEY",failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_pandas_supports_list_comparison[default_engine],"AssertionError: Series are different

Attribute ""name"" are different
[left]:  None
[right]: MARKET_SEGMENT",failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_pandas_supports_list_comparison[engine_numexpr],"AssertionError: Series are different

Attribute ""name"" are different
[left]:  None
[right]: MARKET_SEGMENT",failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_refer_to_named_single_level_index[index],ValueError: unknown type object,failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_refer_to_named_single_level_index[index_name],ValueError: unknown type object,failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_refer_to_unnamed_single_level_index[ilevel_0],ValueError: unknown type object,failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_refer_to_unnamed_single_level_index[index],ValueError: unknown type object,failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_resolvers[default_engine],ValueError: NumExpr 2 does not support Unicode as a dtype.,failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_resolvers[engine_numexpr],ValueError: NumExpr 2 does not support Unicode as a dtype.,failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_target,"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (7, 4)
[right]: (7, 5)",failed
tests.integ.modin.frame.test_eval_and_query.test_eval,test_warning_for_explicit_numexpr_engine,"AssertionError: Series are different

Attribute ""name"" are different
[left]:  None
[right]: CUSTOMER_KEY",failed
tests.integ.modin.frame.test_eval_and_query.test_query,test_default_parameters[default_engine-@df.isin([0])],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 4)
[right]: (7, 4)",failed
tests.integ.modin.frame.test_eval_and_query.test_query,test_default_parameters[default_engine-MARKET_SEGMENT == 'MACHINERY' or ACCOUNT_BALANCE > @local_int],pandas.errors.UndefinedVariableError: local variable 'local_int' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_query,test_default_parameters[engine_numexpr-@df.isin([0])],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 4)
[right]: (7, 4)",failed
tests.integ.modin.frame.test_eval_and_query.test_query,test_default_parameters[engine_numexpr-MARKET_SEGMENT == 'MACHINERY' or ACCOUNT_BALANCE > @local_int],pandas.errors.UndefinedVariableError: local variable 'local_int' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_query,test_default_parameters[engine_python-@df.isin([0])],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 4)
[right]: (7, 4)",failed
tests.integ.modin.frame.test_eval_and_query.test_query,test_default_parameters[engine_python-MARKET_SEGMENT == 'MACHINERY' or ACCOUNT_BALANCE > @local_int],pandas.errors.UndefinedVariableError: local variable 'local_int' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_query,test_level[default_engine-0],pandas.errors.UndefinedVariableError: local variable 'local_var' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_query,test_level[default_engine-1],pandas.errors.UndefinedVariableError: local variable 'local_var' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_query,test_level[default_engine-2],pandas.errors.UndefinedVariableError: local variable 'local_var' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_query,test_level[engine_numexpr-0],pandas.errors.UndefinedVariableError: local variable 'local_var' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_query,test_level[engine_numexpr-1],pandas.errors.UndefinedVariableError: local variable 'local_var' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_query,test_level[engine_numexpr-2],pandas.errors.UndefinedVariableError: local variable 'local_var' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_query,test_level[engine_python-0],pandas.errors.UndefinedVariableError: local variable 'local_var' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_query,test_level[engine_python-1],pandas.errors.UndefinedVariableError: local variable 'local_var' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_query,test_level[engine_python-2],pandas.errors.UndefinedVariableError: local variable 'local_var' is not defined,failed
tests.integ.modin.frame.test_eval_and_query.test_query,test_multiindex,[XPASS(strict)] No support for multiindex,failed
tests.integ.modin.frame.test_eval_and_query.test_query,test_warning_for_explicit_numexpr_engine,"assert False
 +  where False = any(<generator object test_warning_for_explicit_numexpr_engine.<locals>.<genexpr> at 0x34447c4a0>)",failed
tests.integ.modin.frame.test_fillna,test_argument_negative,"AssertionError: Regex pattern did not match.
 Regex: ""Must specify a fill 'value' or 'method'.""
 Input: 'must specify a fill method or value'",failed
tests.integ.modin.frame.test_fillna,test_df_fillna_method_with_type_coercion_casts_all_as_bool_negative,"AssertionError: DataFrame.iloc[:, 1] (column name=""D"") are different

DataFrame.iloc[:, 1] (column name=""D"") values are different (25.0 %)
[index]: [0, 1, 2, 3]
[left]:  [False, 4.0, True, <NA>]
[right]: [False, True, True, None]
At positional index 1, first diff: 4.0 != True",failed
tests.integ.modin.frame.test_fillna,test_df_fillna_method_with_type_coercion_errors_for_variant_column_negative,TODO SNOW-1489309 investigate why it starts to work now on qa,xfailed
tests.integ.modin.frame.test_fillna,test_df_fillna_timestamp_no_numeric_with_nans,"[XPASS(strict)] Pandas will replace the np.nan in a timestamp column with 0, and upcast the dtype",failed
tests.integ.modin.frame.test_fillna,test_value_scalar_diff_type,Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_filter,test_filtering_df_with_other_df_unaligned_index,pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.frame.test_filter,test_filtering_with_self_not_implemented[<lambda>0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_filter,test_filtering_with_self_not_implemented[<lambda>1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_first_last_valid_index,test_first_and_last_valid_multiindex_dataframe[index0],"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().",failed
tests.integ.modin.frame.test_first_last_valid_index,test_first_and_last_valid_multiindex_dataframe[index1],"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().",failed
tests.integ.modin.frame.test_first_last_valid_index,test_first_and_last_valid_multiindex_dataframe[index2],"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().",failed
tests.integ.modin.frame.test_first_last_valid_index,test_first_and_last_valid_multiindex_dataframe[index3],"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().",failed
tests.integ.modin.frame.test_first_last_valid_index,test_first_and_last_valid_nested_multiindex_series,"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().",failed
tests.integ.modin.frame.test_first_last_valid_index,test_first_and_last_valid_none_float64_multiindex_dataframe[data0],"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().",failed
tests.integ.modin.frame.test_first_last_valid_index,test_first_and_last_valid_none_float64_multiindex_dataframe[data1],"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().",failed
tests.integ.modin.frame.test_get_dummies,test_drop_first_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_get_dummies,test_dummy_na_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_get_dummies,test_get_dummies_pandas_after_read_snowflake,AttributeError: 'DataFrame' object has no attribute 'index_column_snowflake_quoted_identifiers',failed
tests.integ.modin.frame.test_get_dummies,test_get_dummies_pandas_negative_duplicated_columns,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_get_dummies,test_get_dummies_pandas_no_row_pos_col[A],AttributeError: 'DataFrame' object has no attribute 'row_position_snowflake_quoted_identifier',failed
tests.integ.modin.frame.test_get_dummies,test_get_dummies_pandas_no_row_pos_col[C],AttributeError: 'DataFrame' object has no attribute 'row_position_snowflake_quoted_identifier',failed
tests.integ.modin.frame.test_get_dummies,test_get_dummies_pandas_no_row_pos_col[D],AttributeError: 'DataFrame' object has no attribute 'row_position_snowflake_quoted_identifier',failed
tests.integ.modin.frame.test_get_dummies,test_get_dummies_pandas_no_row_pos_col_duplicate_values[A],AttributeError: 'DataFrame' object has no attribute 'row_position_snowflake_quoted_identifier',failed
tests.integ.modin.frame.test_get_dummies,test_get_dummies_pandas_no_row_pos_col_duplicate_values[C],AttributeError: 'DataFrame' object has no attribute 'row_position_snowflake_quoted_identifier',failed
tests.integ.modin.frame.test_get_dummies,test_valid_dtype[timedelta64[ns]],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_get_dummies,test_valid_dtype_argument_int32,"AssertionError: Attributes of DataFrame.iloc[:, 0] (column name=""A_a"") are different

Attribute ""dtype"" are different
[left]:  int32
[right]: int64",failed
tests.integ.modin.frame.test_getitem,test_df_getitem_with_boolean_list_like[key4],TypeError: unhashable type: 'Index',failed
tests.integ.modin.frame.test_getitem,test_df_getitem_with_boolean_list_like[key5],ValueError: Item wrong length 1 instead of 7.,failed
tests.integ.modin.frame.test_getitem,test_df_getitem_with_boolean_list_like[key6],ValueError: Item wrong length 8 instead of 7.,failed
tests.integ.modin.frame.test_getitem,test_df_getitem_with_boolean_list_like[key7],TypeError: unhashable type: 'Index',failed
tests.integ.modin.frame.test_getitem,test_df_getitem_with_boolean_list_like[key8],ValueError: Item wrong length 0 instead of 7.,failed
tests.integ.modin.frame.test_getitem,test_df_getitem_with_int_list_like[key1],TypeError: unhashable type: 'Index',failed
tests.integ.modin.frame.test_getitem,test_df_getitem_with_string_list_like[key1],TypeError: unhashable type: 'Index',failed
tests.integ.modin.frame.test_head_tail,test_empty_dataframe[-10],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_head_tail,test_empty_dataframe[-1],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_head_tail,test_empty_dataframe[0],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_head_tail,test_empty_dataframe[10],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_head_tail,test_empty_dataframe[1],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_head_tail,test_empty_dataframe[5],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_head_tail,test_empty_dataframe[None],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_head_tail,test_head_tail[-10],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_head_tail,test_head_tail[-1],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_head_tail,test_head_tail[0],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_head_tail,test_head_tail[10],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_head_tail,test_head_tail[1],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_head_tail,test_head_tail[5],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_head_tail,test_head_tail[None],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_iat,test_iat_neg[0-IndexingError],Failed: DID NOT RAISE <class 'pandas.errors.IndexingError'>,failed
tests.integ.modin.frame.test_iat,test_iat_neg[a-IndexingError],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iat,test_iat_neg[key1-IndexingError],Failed: DID NOT RAISE <class 'pandas.errors.IndexingError'>,failed
tests.integ.modin.frame.test_iat,test_iat_neg[key10-IndexError],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iat,test_iat_neg[key2-IndexingError],"TypeError: int() argument must be a string, a bytes-like object or a real number, not 'dict'",failed
tests.integ.modin.frame.test_iat,test_iat_neg[key4-IndexingError],Failed: DID NOT RAISE <class 'pandas.errors.IndexingError'>,failed
tests.integ.modin.frame.test_iat,test_iat_neg[key5-IndexingError],Failed: DID NOT RAISE <class 'pandas.errors.IndexingError'>,failed
tests.integ.modin.frame.test_iat,test_iat_neg[key6-IndexingError],"TypeError: int() argument must be a string, a bytes-like object or a real number, not 'dict'",failed
tests.integ.modin.frame.test_iat,test_iat_neg[key7-KeyError],Failed: DID NOT RAISE <class 'KeyError'>,failed
tests.integ.modin.frame.test_iat,test_iat_neg[key8-KeyError],"TypeError: int() argument must be a string, a bytes-like object or a real number, not 'dict'",failed
tests.integ.modin.frame.test_iat,test_iat_neg[key9-KeyError],Failed: DID NOT RAISE <class 'KeyError'>,failed
tests.integ.modin.frame.test_iat,test_raise_set_cell_with_list_like_value_error,"ValueError: could not broadcast input array from shape (2,) into shape (1, 1)",failed
tests.integ.modin.frame.test_idxmax_idxmin,test_idxmax_idxmin_crazy_column_names_axis_1[1-idxmax],[XPASS(strict)] Snowpark lit() cannot parse pd.Timestamp,failed
tests.integ.modin.frame.test_idxmax_idxmin,test_idxmax_idxmin_crazy_column_names_axis_1[1-idxmin],[XPASS(strict)] Snowpark lit() cannot parse pd.Timestamp,failed
tests.integ.modin.frame.test_idxmax_idxmin,test_idxmax_idxmin_df[False-0-idxmax-data9-index9],reason: Snowpark pandas returns a Series with None whereas pandas throws a ValueError,xfailed
tests.integ.modin.frame.test_idxmax_idxmin,test_idxmax_idxmin_df[False-0-idxmin-data9-index9],reason: Snowpark pandas returns a Series with None whereas pandas throws a ValueError,xfailed
tests.integ.modin.frame.test_idxmax_idxmin,test_idxmax_idxmin_df[True-0-idxmax-data9-index9],reason: Snowpark pandas returns a Series with None whereas pandas throws a ValueError,xfailed
tests.integ.modin.frame.test_idxmax_idxmin,test_idxmax_idxmin_df[True-0-idxmin-data9-index9],reason: Snowpark pandas returns a Series with None whereas pandas throws a ValueError,xfailed
tests.integ.modin.frame.test_idxmax_idxmin,test_idxmax_idxmin_df_numeric_only_axis_0_different_column_dtypes[False-idxmax-data1-index1],pandas throws TypeError when Snowpark pandas returns result,xfailed
tests.integ.modin.frame.test_idxmax_idxmin,test_idxmax_idxmin_df_numeric_only_axis_0_different_column_dtypes[False-idxmin-data1-index1],pandas throws TypeError when Snowpark pandas returns result,xfailed
tests.integ.modin.frame.test_idxmax_idxmin,test_idxmax_idxmin_empty_df_with_index[1-idxmax],reason: Snowpark pandas returns empty dataframe instead of ValueError,xfailed
tests.integ.modin.frame.test_idxmax_idxmin,test_idxmax_idxmin_empty_df_with_index[1-idxmin],reason: Snowpark pandas returns empty dataframe instead of ValueError,xfailed
tests.integ.modin.frame.test_idxmax_idxmin,test_idxmax_idxmin_multiindex_unsupported[0-idxmax],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_idxmax_idxmin,test_idxmax_idxmin_multiindex_unsupported[0-idxmin],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_idxmax_idxmin,test_idxmax_idxmin_multiindex_unsupported[1-idxmax],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_idxmax_idxmin,test_idxmax_idxmin_multiindex_unsupported[1-idxmin],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_idxmax_idxmin,test_idxmax_idxmin_with_timedelta[1-idxmax],[XPASS(strict)] SNOW-1653126,failed
tests.integ.modin.frame.test_idxmax_idxmin,test_idxmax_idxmin_with_timedelta[1-idxmin],[XPASS(strict)] SNOW-1653126,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_efficient_sql[<lambda>0],IndexError: list index out of range,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_efficient_sql[<lambda>1],IndexError: list index out of range,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_efficient_sql[<lambda>2],IndexError: list index out of range,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_full_set_row_from_series[None-index0],"ValueError: could not broadcast input array from shape (2,) into shape (2, 3)",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_full_set_row_from_series[None-index1],"ValueError: could not broadcast input array from shape (2,) into shape (2, 3)",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_full_set_row_from_series[None-index2],"ValueError: could not broadcast input array from shape (2,) into shape (2, 3)",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_full_set_row_from_series[columns1-index0],"ValueError: could not broadcast input array from shape (2,) into shape (2, 3)",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_full_set_row_from_series[columns1-index1],"ValueError: could not broadcast input array from shape (2,) into shape (2, 3)",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_full_set_row_from_series[columns1-index2],"ValueError: could not broadcast input array from shape (2,) into shape (2, 3)",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_col_input_snowpark_pandas_return_dataframe[Index-2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_col_input_snowpark_pandas_return_dataframe[Series-2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_col_input_snowpark_pandas_return_dataframe[emptyFloatSeries-2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_col_key_out_of_bounds[-1337-0],IndexError: index -1337 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_col_key_out_of_bounds[1337-0],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_col_key_out_of_bounds[col_key3-2],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_dataframe[key10-1-2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_dataframe[key11-1-2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_dataframe[key12-1-2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_dataframe[key17-1-0],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_dataframe[key4-1-2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_dataframe[key9-1-2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_dataframe_with_range[key0],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_dataframe_with_range[key1],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_dataframe_with_range[key2],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_dataframe_with_range[key3],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_dataframe_with_range[key4],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_dataframe_with_range[key5],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_dataframe_with_range[key6],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_dataframe_with_range[key7],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_dataframe_with_range[key8],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_dataframe_with_range[key9],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_diff2native,"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_empty,IndexError: single positional indexer is out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_invalid_slice_key_negative[col-key0],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_invalid_slice_key_negative[col-key1],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_invalid_slice_key_negative[col-key2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_invalid_slice_key_negative[row-key0],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_invalid_slice_key_negative[row-key1],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_invalid_slice_key_negative[row-key2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[col-index with name-key1],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[col-index with name-key3],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[col-index with name-key5],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[col-index-key1],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[col-index-key3],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[col-index-key5],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[col-list-key1],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[col-list-key3],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[col-list-key5],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[col-ndarray-key0],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[col-ndarray-key1],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[col-ndarray-key3],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[col-ndarray-key5],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[col-series-key1],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[col-series-key3],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[col-series-key5],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[row-index with name-key5],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[row-index-key5],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[row-list-key5],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[row-ndarray-key0],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[row-ndarray-key5],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[row-series-key0],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[row-series-key1],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[row-series-key2],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[row-series-key3],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[row-series-key4],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool[row-series-key5],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool_series_with_1k_shape[key0],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool_series_with_1k_shape[key1],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_bool_series_with_1k_shape[key2],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_int_series_with_1k_shape[key0],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_int_series_with_1k_shape[key1],IndexError: index 1367 is out of bounds for axis 0 with size 1000,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_int_series_with_1k_shape[key2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-index with name-key1],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-index with name-key2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-index with name-key3],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-index with name-key4],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-index with name-key5],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-index with name-key6],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-index-key1],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-index-key2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-index-key3],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-index-key4],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-index-key5],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-index-key6],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-list-key4],IndexError: index -19 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-list-key5],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-list-key6],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-ndarray-key0],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-ndarray-key4],IndexError: index -19 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-ndarray-key5],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-ndarray-key6],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-series-key0],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-series-key4],IndexError: index -19 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-series-key5],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[col-series-key6],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-index with name-key1],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-index with name-key2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-index with name-key3],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-index with name-key4],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-index with name-key5],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-index with name-key6],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-index-key1],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-index-key2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-index-key3],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-index-key4],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-index-key5],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-index-key6],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-list-key4],IndexError: index -19 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-list-key5],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-list-key6],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-ndarray-key0],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-ndarray-key4],IndexError: index -19 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-ndarray-key5],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-ndarray-key6],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-series-key0],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-series-key4],IndexError: index -19 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-series-key5],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_numeric[row-series-key6],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_raises_indexing_error_negative[key0-Too many indexers],Failed: DID NOT RAISE <class 'pandas.errors.IndexingError'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_raises_indexing_error_negative[key2-Too many indexers],Failed: DID NOT RAISE <class 'pandas.errors.IndexingError'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_raises_indexing_error_negative[key3-indexer may only contain one '...' entry],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_raises_not_implemented_error_negative[key0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_raises_not_implemented_error_negative[key1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_scalar[col--7],IndexError: index -7 is out of bounds for axis 0 with size 6,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_scalar[col--8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_scalar[col--9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_scalar[col-52879115],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_scalar[col-6],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_scalar[col-7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_scalar[row--8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_scalar[row--9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_scalar[row-52879115],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_scalar[row-7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_snowpark_df_input_negative[col],"ValueError: Buffer has wrong number of dimensions (expected 1, got 2)",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_snowpark_df_input_negative[row],"ValueError: Buffer has wrong number of dimensions (expected 1, got 2)",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_snowpark_empty_str_series_input_negative[col],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_key_snowpark_empty_str_series_input_negative[row],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_multiindex_key_negative,"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_native_pd_key_raises_type_error_negative[key0-<class\\ 'pandas\\.core\\.series\\.Series'>\\ is\\ not\\ supported\\ as\\ 'value'\\ argument\\.\\ Please\\ convert\\ this\\ to\\ Snowpark\\ pandas\\ objects\\ by\\ calling\\ modin\\.pandas\\.Series\\(\\)/DataFrame\\(\\)-TypeError],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_native_pd_key_raises_type_error_negative[key1-<class\\ 'pandas\\.core\\.frame\\.DataFrame'>\\ is\\ not\\ supported\\ as\\ 'value'\\ argument\\.\\ Please\\ convert\\ this\\ to\\ Snowpark\\ pandas\\ objects\\ by\\ calling\\ modin\\.pandas\\.Series\\(\\)/DataFrame\\(\\)-TypeError],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,"test_df_iloc_get_native_pd_key_raises_type_error_negative[key2-\\.iloc\\ requires\\ numeric\\ indexers,\\ got\\ \\[Ellipsis,\\ 1\\]-IndexError]","ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_categorical_negative,"AssertionError: Regex pattern did not match.
 Regex: '\\.iloc\\ requires\\ numeric\\ indexers,\\ got\\ \\[1,\\ 3,\\ 5\\]\\\nCategories\\ \\(3,\\ int64\\):\\ \\[1,\\ 3,\\ 5\\]'
 Input: 'positional indexers are out-of-bounds'",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[col--3.14],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[col-3.142857142857143],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[col-False],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[col-None],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[col-True],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[col-key12],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[col-key13],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[col-key6],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[col-key7],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[col-key8],Failed: DID NOT RAISE <class 'IndexError'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[col-key9],Failed: DID NOT RAISE <class 'IndexError'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[col-nan],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[col-string],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[col-test],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[row--3.14],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[row-3.142857142857143],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[row-False],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[row-None],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[row-True],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[row-key12],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[row-key13],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[row-key6],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[row-key7],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[row-key8],Failed: DID NOT RAISE <class 'IndexError'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[row-key9],Failed: DID NOT RAISE <class 'IndexError'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[row-nan],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[row-string],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_non_numeric_key_negative[row-test],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_range_deviating_behavior[col-range_key0],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_range_deviating_behavior[col-range_key1],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_range_deviating_behavior[col-range_key2],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_range_deviating_behavior[col-range_key3],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_range_deviating_behavior[row-range_key0],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_range_deviating_behavior[row-range_key1],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_range_deviating_behavior[row-range_key2],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_range_deviating_behavior[row-range_key3],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_row_input_snowpark_pandas_return_dataframe[Index-2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_row_input_snowpark_pandas_return_dataframe[Series-2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_row_input_snowpark_pandas_return_dataframe[emptyFloatSeries-2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--3--8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--3--9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--3-52879115],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--3-7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--6--8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--6--9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--6-52879115],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--6-7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--7--3],IndexError: index -7 is out of bounds for axis 0 with size 6,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--7--6],IndexError: index -7 is out of bounds for axis 0 with size 6,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--7--7],IndexError: index -7 is out of bounds for axis 0 with size 6,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--7--8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--7--9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--7-0],IndexError: index -7 is out of bounds for axis 0 with size 6,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--7-4],IndexError: index -7 is out of bounds for axis 0 with size 6,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--7-52879115],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--7-6],IndexError: index -7 is out of bounds for axis 0 with size 6,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--7-7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--8--3],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--8--6],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--8--7],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--8--8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--8--9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--8-0],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--8-4],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--8-52879115],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--8-6],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--8-7],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--9028751--3],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--9028751--6],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--9028751--7],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--9028751--8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--9028751--9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--9028751-0],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--9028751-4],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--9028751-52879115],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--9028751-6],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False--9028751-7],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-0--8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-0--9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-0-52879115],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-0-7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-4--8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-4--9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-4-52879115],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-4-7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-52879115--3],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-52879115--6],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-52879115--7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-52879115--8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-52879115--9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-52879115-0],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-52879115-4],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-52879115-52879115],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-52879115-6],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-52879115-7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-6--3],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-6--6],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-6--7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-6--8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-6--9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-6-0],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-6-4],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-6-52879115],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-6-6],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-6-7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-7--3],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-7--6],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-7--7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-7--8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-7--9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-7-0],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-7-4],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-7-52879115],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-7-6],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[False-7-7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--3--8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--3--9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--3-52879115],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--3-7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--6--8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--6--9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--6-52879115],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--6-7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--7--3],IndexError: index -7 is out of bounds for axis 0 with size 6,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--7--6],IndexError: index -7 is out of bounds for axis 0 with size 6,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--7--7],IndexError: index -7 is out of bounds for axis 0 with size 6,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--7--8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--7--9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--7-0],IndexError: index -7 is out of bounds for axis 0 with size 6,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--7-4],IndexError: index -7 is out of bounds for axis 0 with size 6,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--7-52879115],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--7-6],IndexError: index -7 is out of bounds for axis 0 with size 6,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--7-7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--8--3],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--8--6],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--8--7],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--8--8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--8--9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--8-0],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--8-4],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--8-52879115],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--8-6],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--8-7],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--9028751--3],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--9028751--6],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--9028751--7],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--9028751--8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--9028751--9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--9028751-0],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--9028751-4],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--9028751-52879115],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--9028751-6],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True--9028751-7],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-0--8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-0--9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-0-52879115],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-0-7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-4--8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-4--9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-4-52879115],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-4-7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-52879115--3],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-52879115--6],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-52879115--7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-52879115--8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-52879115--9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-52879115-0],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-52879115-4],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-52879115-52879115],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-52879115-6],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-52879115-7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-6--3],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-6--6],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-6--7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-6--8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-6--9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-6-0],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-6-4],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-6-52879115],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-6-6],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-6-7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-7--3],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-7--6],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-7--7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-7--8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-7--9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-7-0],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-7-4],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-7-52879115],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-7-6],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_scalar_row_and_scalar_col[True-7-7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_slice_with_non_integer_parameters_negative[col-slice_key0],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_slice_with_non_integer_parameters_negative[col-slice_key1],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_slice_with_non_integer_parameters_negative[col-slice_key2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_slice_with_non_integer_parameters_negative[row-slice_key0],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_slice_with_non_integer_parameters_negative[row-slice_key1],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_get_slice_with_non_integer_parameters_negative[row-slice_key2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_scalar_efficient_sql[<lambda>0],IndexError: list index out of range,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_scalar_efficient_sql[<lambda>1],IndexError: list index out of range,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_different_incompatible_types[5-123],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_different_incompatible_types[5-99.99],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_different_incompatible_types[5-True],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_different_incompatible_types[5-abc],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_different_incompatible_types[5-item_value4],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_different_incompatible_types[5-item_value5],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_different_incompatible_types[6-123],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_different_incompatible_types[6-99.99],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_different_incompatible_types[6-True],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_different_incompatible_types[6-abc],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_different_incompatible_types[6-item_value4],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_different_incompatible_types[6-item_value5],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_ffill_na_values_negative,"ValueError: could not broadcast input array from shape (2, 2) into shape (3, 2)",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_negative[key1-val1],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_negative[key2-val2],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_row_from_series[index1],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (50.0 %)
[index]: [0, 1]
[left]:  [1.0, nan]
[right]: [1, 1]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_snowpark_pandas_input_negative_incompatible_types[df_broadcast],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_snowpark_pandas_input_negative_incompatible_types[series],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_snowpark_pandas_input_negative_incompatible_types[series_broadcast],"ValueError: could not broadcast input array from shape (3,) into shape (3, 7)",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_duplicates_2d,"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (50.0 %)
[index]: [0, 1, 2, 3]
[left]:  [nan, nan, 3.0, 4.0]
[right]: [72, 73, 3, 4]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_empty_df[row_key0-col_key0-item0],AssertionError: cannot find the length of the indexer,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_empty_df[row_key1-col_key1-item1],AssertionError: cannot find the length of the indexer,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_empty_df[row_key2-col_key2-item2],AssertionError: cannot find the length of the indexer,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_empty_df[row_key3-col_key3-item3],AssertionError: cannot find the length of the indexer,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_empty_df[row_key4-col_key4-item4],AssertionError: cannot find the length of the indexer,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_empty_df[row_key5-col_key5-item5],AssertionError: cannot find the length of the indexer,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_empty_df[row_key6-col_key6-item6],AssertionError: cannot find the length of the indexer,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_mixed_types_fail[row_key0-col_key0-item0-expected_results0-False],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (100.0 %)
[index]: [0, 1, 2, 3]
[left]:  [nan, 2.0, 3.0, 4.0]
[right]: [True, True, True, True]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_mixed_types_fail[row_key1-col_key1-item1-None-False],"AssertionError: DataFrame.iloc[:, 1] (column name=""B"") are different

DataFrame.iloc[:, 1] (column name=""B"") values are different (25.0 %)
[index]: [0, 1, 2, 3]
[left]:  [True, <NA>, True, False]
[right]: [True, 0, True, False]
At positional index 1, first diff: <NA> != 0",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_mixed_types_fail[row_key10-col_key10-item10-expected_results10-False],"AssertionError: DataFrame.iloc[:, 1] (column name=""B"") are different

DataFrame.iloc[:, 1] (column name=""B"") values are different (50.0 %)
[index]: [0, 1, 2, 3]
[left]:  [True, <NA>, <NA>, False]
[right]: [True, True, False, False]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_mixed_types_fail[row_key2-col_key2-item2-expected_results2-False],"AssertionError: DataFrame.iloc[:, 1] (column name=""B"") are different

DataFrame.iloc[:, 1] (column name=""B"") values are different (25.0 %)
[index]: [0, 1, 2, 3]
[left]:  [True, <NA>, True, False]
[right]: [True, True, True, False]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_mixed_types_fail[row_key3-col_key3-item3-None-True],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_mixed_types_fail[row_key4-col_key4-item4-None-True],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_mixed_types_fail[row_key5-col_key5-item5-expected_results5-False],ValueError: Length of values (3) does not match length of index (4),failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_mixed_types_fail[row_key7-col_key7-item7-expected_results7-False],ValueError: Length of values (2) does not match length of index (4),failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_mixed_types_fail[row_key8-col_key8-item8-expected_results8-False],"AssertionError: DataFrame.iloc[:, 3] (column name=""D"") are different

DataFrame.iloc[:, 3] (column name=""D"") values are different (25.0 %)
[index]: [0, 1, 2, 3]
[left]:  [a, b, False, d]
[right]: [a, b, false, d]
At positional index 2, first diff: False != false",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_mixed_types_fail[row_key9-col_key9-item9-None-True],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values1-None-None-3-2-None-1-None],"AssertionError: DataFrame.iloc[:, 2] (column name=""('a', 2)"") are different

DataFrame.iloc[:, 2] (column name=""('a', 2)"") values are different (20.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [3.0, nan, 98.0, 57.0, -7.0]
[right]: [3, -999, 98, 57, -7]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values1-None-None-3-2-None-row_key1-None],"AssertionError: DataFrame.iloc[:, 2] (column name=""('a', 2)"") are different

DataFrame.iloc[:, 2] (column name=""('a', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [nan, 12.0, 98.0, nan, -7.0]
[right]: [-998, 12, 98, -999, -7]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values1-None-None-3-2-None-row_key2-row_key_index2],"AssertionError: DataFrame.iloc[:, 2] (column name=""('a', 2)"") are different

DataFrame.iloc[:, 2] (column name=""('a', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [3.0, nan, nan, 57.0, -7.0]
[right]: [3, -999, -998, 57, -7]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values1-None-None-3-2-None-row_key3-row_key_index3],"AssertionError: DataFrame.iloc[:, 2] (column name=""('a', 2)"") are different

DataFrame.iloc[:, 2] (column name=""('a', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [3.0, nan, nan, 57.0, -7.0]
[right]: [3, -998, -999, 57, -7]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values1-None-None-3-col_key1-None-1-None],ValueError: buffer source array is read-only,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values1-None-None-3-col_key1-None-row_key1-None],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [nan, 11.0, 101.0, nan, -6.0]
[right]: [-996, 11, 101, -997, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values1-None-None-3-col_key1-None-row_key2-row_key_index2],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -997, -996, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values1-None-None-3-col_key1-None-row_key3-row_key_index3],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -996, -997, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values1-None-None-3-col_key2-col_key_index2-1-None],ValueError: buffer source array is read-only,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values1-None-None-3-col_key2-col_key_index2-row_key1-None],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [nan, 11.0, 101.0, nan, -6.0]
[right]: [-998, 11, 101, -999, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values1-None-None-3-col_key2-col_key_index2-row_key2-row_key_index2],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -999, -998, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values1-None-None-3-col_key2-col_key_index2-row_key3-row_key_index3],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -998, -999, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values1-None-None-3-col_key3-col_key_index3-1-None],ValueError: buffer source array is read-only,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values1-None-None-3-col_key3-col_key_index3-row_key1-None],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [nan, 11.0, 101.0, nan, -6.0]
[right]: [-996, 11, 101, -997, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values1-None-None-3-col_key3-col_key_index3-row_key2-row_key_index2],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -997, -996, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values1-None-None-3-col_key3-col_key_index3-row_key3-row_key_index3],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -996, -997, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values2-item_index2-None-5-2-None-1-None],"AssertionError: DataFrame.iloc[:, 2] (column name=""('a', 2)"") are different

DataFrame.iloc[:, 2] (column name=""('a', 2)"") values are different (20.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [3.0, nan, 98.0, 57.0, -7.0]
[right]: [3, -999, 98, 57, -7]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values2-item_index2-None-5-2-None-row_key1-None],"AssertionError: DataFrame.iloc[:, 2] (column name=""('a', 2)"") are different

DataFrame.iloc[:, 2] (column name=""('a', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [nan, 12.0, 98.0, nan, -7.0]
[right]: [-998, 12, 98, -999, -7]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values2-item_index2-None-5-2-None-row_key2-row_key_index2],"AssertionError: DataFrame.iloc[:, 2] (column name=""('a', 2)"") are different

DataFrame.iloc[:, 2] (column name=""('a', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [3.0, nan, nan, 57.0, -7.0]
[right]: [3, -999, -998, 57, -7]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values2-item_index2-None-5-2-None-row_key3-row_key_index3],"AssertionError: DataFrame.iloc[:, 2] (column name=""('a', 2)"") are different

DataFrame.iloc[:, 2] (column name=""('a', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [3.0, nan, nan, 57.0, -7.0]
[right]: [3, -998, -999, 57, -7]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values2-item_index2-None-5-col_key1-None-1-None],ValueError: buffer source array is read-only,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values2-item_index2-None-5-col_key1-None-row_key1-None],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [nan, 11.0, 101.0, nan, -6.0]
[right]: [-996, 11, 101, -997, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values2-item_index2-None-5-col_key1-None-row_key2-row_key_index2],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -997, -996, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values2-item_index2-None-5-col_key1-None-row_key3-row_key_index3],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -996, -997, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values2-item_index2-None-5-col_key2-col_key_index2-1-None],ValueError: buffer source array is read-only,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values2-item_index2-None-5-col_key2-col_key_index2-row_key1-None],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [nan, 11.0, 101.0, nan, -6.0]
[right]: [-998, 11, 101, -999, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values2-item_index2-None-5-col_key2-col_key_index2-row_key2-row_key_index2],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -999, -998, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values2-item_index2-None-5-col_key2-col_key_index2-row_key3-row_key_index3],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -998, -999, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values2-item_index2-None-5-col_key3-col_key_index3-1-None],ValueError: buffer source array is read-only,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values2-item_index2-None-5-col_key3-col_key_index3-row_key1-None],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [nan, 11.0, 101.0, nan, -6.0]
[right]: [-996, 11, 101, -997, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values2-item_index2-None-5-col_key3-col_key_index3-row_key2-row_key_index2],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -997, -996, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values2-item_index2-None-5-col_key3-col_key_index3-row_key3-row_key_index3],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -996, -997, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values3-item_index3-item_columns3-5-2-None-1-None],"AssertionError: DataFrame.iloc[:, 2] (column name=""('a', 2)"") are different

DataFrame.iloc[:, 2] (column name=""('a', 2)"") values are different (20.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [3.0, nan, 98.0, 57.0, -7.0]
[right]: [3, -999, 98, 57, -7]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values3-item_index3-item_columns3-5-2-None-row_key1-None],"AssertionError: DataFrame.iloc[:, 2] (column name=""('a', 2)"") are different

DataFrame.iloc[:, 2] (column name=""('a', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [nan, 12.0, 98.0, nan, -7.0]
[right]: [-998, 12, 98, -999, -7]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values3-item_index3-item_columns3-5-2-None-row_key2-row_key_index2],"AssertionError: DataFrame.iloc[:, 2] (column name=""('a', 2)"") are different

DataFrame.iloc[:, 2] (column name=""('a', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [3.0, nan, nan, 57.0, -7.0]
[right]: [3, -999, -998, 57, -7]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values3-item_index3-item_columns3-5-2-None-row_key3-row_key_index3],"AssertionError: DataFrame.iloc[:, 2] (column name=""('a', 2)"") are different

DataFrame.iloc[:, 2] (column name=""('a', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [3.0, nan, nan, 57.0, -7.0]
[right]: [3, -998, -999, 57, -7]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values3-item_index3-item_columns3-5-col_key1-None-1-None],ValueError: buffer source array is read-only,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values3-item_index3-item_columns3-5-col_key1-None-row_key1-None],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [nan, 11.0, 101.0, nan, -6.0]
[right]: [-996, 11, 101, -997, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values3-item_index3-item_columns3-5-col_key1-None-row_key2-row_key_index2],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -997, -996, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values3-item_index3-item_columns3-5-col_key1-None-row_key3-row_key_index3],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -996, -997, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values3-item_index3-item_columns3-5-col_key2-col_key_index2-1-None],ValueError: buffer source array is read-only,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values3-item_index3-item_columns3-5-col_key2-col_key_index2-row_key1-None],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [nan, 11.0, 101.0, nan, -6.0]
[right]: [-998, 11, 101, -999, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values3-item_index3-item_columns3-5-col_key2-col_key_index2-row_key2-row_key_index2],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -999, -998, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values3-item_index3-item_columns3-5-col_key2-col_key_index2-row_key3-row_key_index3],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -998, -999, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values3-item_index3-item_columns3-5-col_key3-col_key_index3-1-None],ValueError: buffer source array is read-only,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values3-item_index3-item_columns3-5-col_key3-col_key_index3-row_key1-None],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [nan, 11.0, 101.0, nan, -6.0]
[right]: [-996, 11, 101, -997, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values3-item_index3-item_columns3-5-col_key3-col_key_index3-row_key2-row_key_index2],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -997, -996, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values3-item_index3-item_columns3-5-col_key3-col_key_index3-row_key3-row_key_index3],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -996, -997, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values4-None-item_columns4-3-2-None-1-None],"AssertionError: DataFrame.iloc[:, 2] (column name=""('a', 2)"") are different

DataFrame.iloc[:, 2] (column name=""('a', 2)"") values are different (20.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [3.0, nan, 98.0, 57.0, -7.0]
[right]: [3, -999, 98, 57, -7]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values4-None-item_columns4-3-2-None-row_key1-None],"AssertionError: DataFrame.iloc[:, 2] (column name=""('a', 2)"") are different

DataFrame.iloc[:, 2] (column name=""('a', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [nan, 12.0, 98.0, nan, -7.0]
[right]: [-998, 12, 98, -999, -7]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values4-None-item_columns4-3-2-None-row_key2-row_key_index2],"AssertionError: DataFrame.iloc[:, 2] (column name=""('a', 2)"") are different

DataFrame.iloc[:, 2] (column name=""('a', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [3.0, nan, nan, 57.0, -7.0]
[right]: [3, -999, -998, 57, -7]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values4-None-item_columns4-3-2-None-row_key3-row_key_index3],"AssertionError: DataFrame.iloc[:, 2] (column name=""('a', 2)"") are different

DataFrame.iloc[:, 2] (column name=""('a', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [3.0, nan, nan, 57.0, -7.0]
[right]: [3, -998, -999, 57, -7]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values4-None-item_columns4-3-col_key1-None-1-None],ValueError: buffer source array is read-only,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values4-None-item_columns4-3-col_key1-None-row_key1-None],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [nan, 11.0, 101.0, nan, -6.0]
[right]: [-996, 11, 101, -997, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values4-None-item_columns4-3-col_key1-None-row_key2-row_key_index2],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -997, -996, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values4-None-item_columns4-3-col_key1-None-row_key3-row_key_index3],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -996, -997, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values4-None-item_columns4-3-col_key2-col_key_index2-1-None],ValueError: buffer source array is read-only,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values4-None-item_columns4-3-col_key2-col_key_index2-row_key1-None],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [nan, 11.0, 101.0, nan, -6.0]
[right]: [-998, 11, 101, -999, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values4-None-item_columns4-3-col_key2-col_key_index2-row_key2-row_key_index2],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -999, -998, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values4-None-item_columns4-3-col_key2-col_key_index2-row_key3-row_key_index3],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -998, -999, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values4-None-item_columns4-3-col_key3-col_key_index3-1-None],ValueError: buffer source array is read-only,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values4-None-item_columns4-3-col_key3-col_key_index3-row_key1-None],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [nan, 11.0, 101.0, nan, -6.0]
[right]: [-996, 11, 101, -997, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values4-None-item_columns4-3-col_key3-col_key_index3-row_key2-row_key_index2],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -997, -996, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_multiindex[item_values4-None-item_columns4-3-col_key3-col_key_index3-row_key3-row_key_index3],"AssertionError: DataFrame.iloc[:, 1] (column name=""('b', 2)"") are different

DataFrame.iloc[:, 1] (column name=""('b', 2)"") values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [2.0, nan, nan, 56.0, -6.0]
[right]: [2, -996, -997, 56, -6]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_none_df[row_key0-col_key0-item0],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (100.0 %)
[index]: [0, 1]
[left]:  [11, 33]
[right]: [33, 11]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_none_df[row_key1-col_key1-item1],ValueError: Length of values (1) does not match length of index (2),failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_none_df[row_key3-col_key3-item3],"AssertionError: DataFrame.iloc[:, 1] (column name=""1"") are different

DataFrame.iloc[:, 1] (column name=""1"") values are different (50.0 %)
[index]: [0, 1]
[left]:  [<NA>, <NA>]
[right]: [None, 99]
At positional index 1, first diff: <NA> != 99",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_df_col_df_key_set_coordinates[row_pos0-df-col_pos0-df],"ValueError: Buffer has wrong number of dimensions (expected 1, got 2)",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_df_col_df_key_set_coordinates[row_pos1-df-col_pos1-df],"ValueError: Buffer has wrong number of dimensions (expected 1, got 2)",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_df_col_df_key_set_coordinates[row_pos2-df-col_pos2-df],"ValueError: Buffer has wrong number of dimensions (expected 1, got 2)",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_df_col_df_key_set_coordinates[row_pos3-df-col_pos3-tuple],"ValueError: Buffer has wrong number of dimensions (expected 1, got 2)",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_df_col_df_key_set_coordinates[row_pos4-df-col_pos4-na],"ValueError: Buffer has wrong number of dimensions (expected 1, got 2)",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_df_col_df_key_set_coordinates[row_pos5-tuple-col_pos5-df],"ValueError: Buffer has wrong number of dimensions (expected 1, got 2)",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_df_col_df_key_set_coordinates[row_pos6-na-col_pos6-df],"ValueError: Buffer has wrong number of dimensions (expected 1, got 2)",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_constant_float_keys_negative[0-na-2.5-na],AssertionError: exception type <class 'ValueError'> does not match with expected type <class 'IndexError'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_constant_float_keys_negative[0-na-nan-na],AssertionError: exception type <class 'ValueError'> does not match with expected type <class 'IndexError'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_constant_float_keys_negative[1.2-na-0-na],AssertionError: exception type <class 'ValueError'> does not match with expected type <class 'IndexError'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_constant_float_keys_negative[nan-na-2-na],AssertionError: exception type <class 'ValueError'> does not match with expected type <class 'IndexError'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_constant_float_keys_negative[row_pos10-na-col_pos10-na],AssertionError: exception type <class 'ValueError'> does not match with expected type <class 'IndexError'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_constant_float_keys_negative[row_pos11-na-col_pos11-na],AssertionError: exception type <class 'ValueError'> does not match with expected type <class 'IndexError'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_constant_float_keys_negative[row_pos12-na-col_pos12-na],AssertionError: exception type <class 'ValueError'> does not match with expected type <class 'IndexError'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_constant_float_keys_negative[row_pos4-na-col_pos4-na],AssertionError: exception type <class 'ValueError'> does not match with expected type <class 'IndexError'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_constant_float_keys_negative[row_pos5-tuple-col_pos5-na],AssertionError: exception type <class 'ValueError'> does not match with expected type <class 'IndexError'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_constant_float_keys_negative[row_pos6-series-col_pos6-na],AssertionError: exception type <class 'ValueError'> does not match with expected type <class 'IndexError'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_constant_float_keys_negative[row_pos7-na-col_pos7-na],AssertionError: exception type <class 'ValueError'> does not match with expected type <class 'IndexError'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_constant_float_keys_negative[row_pos8-na-col_pos8-tuple],AssertionError: exception type <class 'ValueError'> does not match with expected type <class 'IndexError'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_constant_float_keys_negative[row_pos9-na-col_pos9-series],AssertionError: exception type <class 'ValueError'> does not match with expected type <class 'IndexError'>,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_series_empty_keys[item0-row_key1-col_key1],"ValueError: could not broadcast input array from shape (2,) into shape (2, 0)",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_series_empty_keys[item1-row_key1-col_key1],"ValueError: could not broadcast input array from shape (2,) into shape (2, 0)",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_series_float_keys[row_pos0-col_pos0],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_series_float_keys[row_pos1-col_pos1],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_series_float_keys[row_pos2-col_pos2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_series_float_keys[row_pos3-col_pos3],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_series_float_keys[row_pos4-col_pos4],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_series_float_keys[row_pos5-col_pos5],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_series_out_of_bounds_keys[row_key0-col_key0],IndexError: index -5 is out of bounds for axis 0 with size 4,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_series_out_of_bounds_keys[row_key1-col_key1],IndexError: index 8 is out of bounds for axis 0 with size 4,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_series_out_of_bounds_keys[row_key2-col_key2],IndexError: index 6 is out of bounds for axis 0 with size 4,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_series_out_of_bounds_keys[row_key3-col_key3],IndexError: index -10 is out of bounds for axis 0 with size 4,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_series_rhs_dataframe_mismatch_pandas[row_pos0-col_pos0-snow_item0-native_item0],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (75.0 %)
[index]: [0, 1, 2, 3]
[left]:  [nan, nan, 11.0, nan]
[right]: [95, 92, 11, 98]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_series_rhs_dataframe_mismatch_pandas[row_pos2-col_pos2-snow_item2-native_item2],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (75.0 %)
[index]: [0, 1, 2, 3]
[left]:  [5.0, nan, nan, nan]
[right]: [5, 92, 95, 95]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_series_rhs_dataframe_mismatch_pandas[row_pos3-col_pos3-snow_item3-native_item3],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (75.0 %)
[index]: [0, 1, 2, 3]
[left]:  [5.0, nan, nan, nan]
[right]: [5, 95, 98, 92]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_series_rhs_dataframe_mismatch_pandas[row_pos4-col_pos4-snow_item4-native_item4],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (100.0 %)
[index]: [0, 1, 2, 3]
[left]:  [nan, nan, nan, nan]
[right]: [91, 92, 93, 93]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_series_rhs_dataframe_mismatch_pandas[row_pos5-col_pos5-snow_item5-native_item5],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (50.0 %)
[index]: [0, 1, 2, 3]
[left]:  [nan, nan, 11.0, 14.0]
[right]: [91, 92, 11, 14]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_series_rhs_dataframe_mismatch_pandas[row_pos6-col_pos6-snow_item6-native_item6],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (50.0 %)
[index]: [0, 1, 2, 3]
[left]:  [nan, 8.0, nan, 14.0]
[right]: [91, 8, 92, 14]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_series_rhs_dataframe_mismatch_pandas[row_pos7-col_pos7-snow_item7-native_item7],IndexError: index 4 is out of bounds for axis 0 with size 4,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_series_rhs_dataframe_mismatch_pandas[row_pos8-col_pos8-snow_item8-native_item8],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (75.0 %)
[index]: [0, 1, 2, 3]
[left]:  [5.0, nan, nan, nan]
[right]: [5, 8, 11, 14]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_key_series_rhs_scalar[row_pos17-col_pos17-item_value17],ValueError: setting an array element with a sequence.,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_tuple_key_list[123-row_pos0-col_pos0],"AssertionError: DataFrame.iloc[:, 2] (column name=""C"") are different

DataFrame.iloc[:, 2] (column name=""C"") values are different (25.0 %)
[index]: [0, 1, 2, 3]
[left]:  [7, 10, 123, 123]
[right]: [7, 10, 123, 16]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_tuple_key_list[123-row_pos1-col_pos1],"AssertionError: DataFrame.iloc[:, 1] (column name=""B"") are different

DataFrame.iloc[:, 1] (column name=""B"") values are different (50.0 %)
[index]: [0, 1, 2, 3]
[left]:  [6, 123, 123, 123]
[right]: [6, 123, 12, 15]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_tuple_key_list[123-row_pos2-col_pos2],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (50.0 %)
[index]: [0, 1, 2, 3]
[left]:  [5, 123, 123, 123]
[right]: [5, 123, 11, 14]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_tuple_key_list[123-row_pos3-col_pos3],"AssertionError: DataFrame.iloc[:, 1] (column name=""B"") are different

DataFrame.iloc[:, 1] (column name=""B"") values are different (50.0 %)
[index]: [0, 1, 2, 3]
[left]:  [6, 123, 123, 123]
[right]: [6, 9, 12, 123]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_tuple_key_list[123-row_pos4-col_pos4],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (50.0 %)
[index]: [0, 1, 2, 3]
[left]:  [123, 8, 123, 123]
[right]: [5, 8, 123, 14]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_tuple_key_list[123-row_pos5-col_pos5],"AssertionError: DataFrame.iloc[:, 1] (column name=""B"") are different

DataFrame.iloc[:, 1] (column name=""B"") values are different (50.0 %)
[index]: [0, 1, 2, 3]
[left]:  [123, 9, 123, 123]
[right]: [123, 9, 12, 15]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_tuple_key_list[item_values0-row_pos0-col_pos0],"AssertionError: DataFrame.iloc[:, 2] (column name=""C"") are different

DataFrame.iloc[:, 2] (column name=""C"") values are different (25.0 %)
[index]: [0, 1, 2, 3]
[left]:  [7, 10, 100, 100]
[right]: [7, 10, 100, 16]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_tuple_key_list[item_values0-row_pos1-col_pos1],"AssertionError: DataFrame.iloc[:, 1] (column name=""B"") are different

DataFrame.iloc[:, 1] (column name=""B"") values are different (50.0 %)
[index]: [0, 1, 2, 3]
[left]:  [6, 99, 99, 99]
[right]: [6, 99, 12, 15]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_tuple_key_list[item_values0-row_pos2-col_pos2],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (50.0 %)
[index]: [0, 1, 2, 3]
[left]:  [5, 101, 101, 101]
[right]: [5, 101, 11, 14]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_tuple_key_list[item_values0-row_pos3-col_pos3],"AssertionError: DataFrame.iloc[:, 1] (column name=""B"") are different

DataFrame.iloc[:, 1] (column name=""B"") values are different (50.0 %)
[index]: [0, 1, 2, 3]
[left]:  [6, 99, 99, 99]
[right]: [6, 9, 12, 99]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_tuple_key_list[item_values0-row_pos4-col_pos4],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (50.0 %)
[index]: [0, 1, 2, 3]
[left]:  [100, 8, 100, 100]
[right]: [5, 8, 100, 14]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_tuple_key_list[item_values0-row_pos5-col_pos5],"AssertionError: DataFrame.iloc[:, 1] (column name=""B"") are different

DataFrame.iloc[:, 1] (column name=""B"") values are different (50.0 %)
[index]: [0, 1, 2, 3]
[left]:  [101, 9, 101, 101]
[right]: [101, 9, 12, 15]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_tuple_key_list_different_behavior[row_pos0-col_pos0-91-native_item0],"AssertionError: DataFrame.iloc[:, 2] (column name=""C"") are different

DataFrame.iloc[:, 2] (column name=""C"") values are different (25.0 %)
[index]: [0, 1, 2, 3]
[left]:  [7, 10, 13, 91]
[right]: [7, 10, 13, 16]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_row_tuple_key_list_different_behavior[row_pos1-col_pos1-item_values1-native_item1],"AssertionError: DataFrame.iloc[:, 2] (column name=""C"") are different

DataFrame.iloc[:, 2] (column name=""C"") values are different (25.0 %)
[index]: [0, 1, 2, 3]
[left]:  [7, 10, 13, 92]
[right]: [7, 10, 13, 16]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_series_row_key_df_item_match_pandas[row_pos0-col_pos0-item_values0],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (75.0 %)
[index]: [0, 1, 2, 3]
[left]:  [5.0, nan, nan, nan]
[right]: [5, 91, 92, 93]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_series_row_key_df_item_match_pandas[row_pos1-col_pos1-item_values1],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (75.0 %)
[index]: [0, 1, 2, 3]
[left]:  [5.0, nan, nan, nan]
[right]: [5, 93, 92, 91]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_series_row_key_df_item_match_pandas[row_pos10-col_pos10-item_values10],"AssertionError: DataFrame.iloc[:, 1] (column name=""B"") are different

DataFrame.iloc[:, 1] (column name=""B"") values are different (50.0 %)
[index]: [0, 1, 2, 3]
[left]:  [6.0, nan, nan, 15.0]
[right]: [6, 91, 93, 15]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_series_row_key_df_item_match_pandas[row_pos11-col_pos11-item_values11],"AssertionError: DataFrame.iloc[:, 1] (column name=""B"") are different

DataFrame.iloc[:, 1] (column name=""B"") values are different (50.0 %)
[index]: [0, 1, 2, 3]
[left]:  [nan, 9.0, nan, 15.0]
[right]: [94, 9, 92, 15]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_series_row_key_df_item_match_pandas[row_pos12-col_pos12-item_values12],"AssertionError: DataFrame.iloc[:, 2] (column name=""C"") are different

DataFrame.iloc[:, 2] (column name=""C"") values are different (100.0 %)
[index]: [0, 1, 2, 3]
[left]:  [nan, nan, nan, nan]
[right]: [93, 91, 92, 94]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_series_row_key_df_item_match_pandas[row_pos13-col_pos13-item_values13],"AssertionError: DataFrame.iloc[:, 1] (column name=""B"") are different

DataFrame.iloc[:, 1] (column name=""B"") values are different (50.0 %)
[index]: [0, 1, 2, 3]
[left]:  [6.0, nan, nan, 15.0]
[right]: [6, 99, 101, 15]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_series_row_key_df_item_match_pandas[row_pos14-col_pos14-item_values14],"AssertionError: DataFrame.iloc[:, 1] (column name=""B"") are different

DataFrame.iloc[:, 1] (column name=""B"") values are different (50.0 %)
[index]: [0, 1, 2, 3]
[left]:  [6.0, nan, nan, 15.0]
[right]: [6, 99, 101, 15]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_series_row_key_df_item_match_pandas[row_pos15-col_pos15-item_values15],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (25.0 %)
[index]: [0, 1, 2, 3]
[left]:  [5.0, nan, 11.0, 14.0]
[right]: [5, 99, 11, 14]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_series_row_key_df_item_match_pandas[row_pos2-col_pos2-item_values2],"AssertionError: DataFrame.iloc[:, 1] (column name=""B"") are different

DataFrame.iloc[:, 1] (column name=""B"") values are different (75.0 %)
[index]: [0, 1, 2, 3]
[left]:  [nan, nan, 12.0, nan]
[right]: [95, 92, 12, 98]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_series_row_key_df_item_match_pandas[row_pos3-col_pos3-item_values3],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (50.0 %)
[index]: [0, 1, 2, 3]
[left]:  [nan, 8.0, nan, nan]
[right]: [92.0, 8.0, 98.0, nan]
At positional index 0, first diff: nan != 92.0",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_series_row_key_df_item_match_pandas[row_pos4-col_pos4-item_values4],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (75.0 %)
[index]: [0, 1, 2, 3]
[left]:  [5.0, nan, nan, nan]
[right]: [5, 91, 91, 91]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_series_row_key_df_item_match_pandas[row_pos5-col_pos5-item_values5],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (75.0 %)
[index]: [0, 1, 2, 3]
[left]:  [5.0, nan, nan, nan]
[right]: [5, 91, 92, 93]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_series_row_key_df_item_match_pandas[row_pos7-col_pos7-item_values7],"AssertionError: DataFrame.iloc[:, 1] (column name=""B"") are different

DataFrame.iloc[:, 1] (column name=""B"") values are different (75.0 %)
[index]: [0, 1, 2, 3]
[left]:  [nan, nan, nan, 15.0]
[right]: [93, 91, 92, 15]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_series_row_key_df_item_match_pandas[row_pos8-col_pos8-item_values8],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (75.0 %)
[index]: [0, 1, 2, 3]
[left]:  [5.0, nan, nan, nan]
[right]: [5, 93, 93, 93]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_series_row_key_df_item_match_pandas[row_pos9-col_pos9-item_values9],"AssertionError: DataFrame.iloc[:, 1] (column name=""B"") are different

DataFrame.iloc[:, 1] (column name=""B"") values are different (75.0 %)
[index]: [0, 1, 2, 3]
[left]:  [6.0, nan, nan, nan]
[right]: [6, 91, 92, 93]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_types_df[row_key0-col_key0-item0],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (25.0 %)
[index]: [0, 1, 2, 3]
[left]:  [nan, 2.0, 3.0, 4.0]
[right]: [99, 2, 3, 4]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_types_df[row_key1-col_key1-item1],"AssertionError: DataFrame.iloc[:, 1] (column name=""B"") are different

DataFrame.iloc[:, 1] (column name=""B"") values are different (25.0 %)
[index]: [0, 1, 2, 3]
[left]:  [True, <NA>, True, False]
[right]: [True, True, True, False]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_types_df[row_key10-col_key10-item10],"AssertionError: DataFrame.iloc[:, 1] (column name=""B"") are different

DataFrame.iloc[:, 1] (column name=""B"") values are different (50.0 %)
[index]: [0, 1, 2, 3]
[left]:  [True, <NA>, <NA>, False]
[right]: [True, True, False, False]",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_types_df[row_key2-col_key2-item2],"AssertionError: DataFrame.iloc[:, 2] (column name=""C"") are different

DataFrame.iloc[:, 2] (column name=""C"") values are different (25.0 %)
[index]: [0, 1, 2, 3]
[left]:  [1.5, 3.14159, nan, 123.45]
[right]: [1.5, 3.14159, 101.101, 123.45]
At positional index 2, first diff: nan != 101.101",failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_types_df[row_key3-col_key3-item3],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.frame.test_iloc,test_df_iloc_set_with_types_df[row_key9-col_key9-item9],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (100.0 %)
[index]: [0, 1, 2, 3]
[left]:  [nan, nan, nan, nan]
[right]: [99, 99, 99, 99]",failed
tests.integ.modin.frame.test_iloc,test_df_row_return_dataframe[key0-1-2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_row_return_dataframe[key10-1-2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_row_return_dataframe[key11-1-2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_row_return_dataframe[key12-1-2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_row_return_dataframe[key13-1-2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_row_return_dataframe[key18-1-0],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_df_row_return_dataframe[key5-1-2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.frame.test_iloc,test_raise_set_cell_with_list_like_value_error,"ValueError: could not broadcast input array from shape (2,) into shape (1, 1)",failed
tests.integ.modin.frame.test_info,test_info_SNOW_962607,"AssertionError: assert 'SnowflakeIndex' in 'RangeIndex: 3 entries, 0 to 2'",failed
tests.integ.modin.frame.test_info,test_info_counts_false,TypeError: got an unexpected keyword argument 'null_counts',failed
tests.integ.modin.frame.test_info,test_info_counts_true,"AssertionError: assert 'SnowflakeIndex' in 'RangeIndex: 3 entries, 0 to 2'",failed
tests.integ.modin.frame.test_info,test_info_verbose_false,"AssertionError: assert 'SnowflakeIndex' in 'RangeIndex: 3 entries, 0 to 2'",failed
tests.integ.modin.frame.test_info,test_info_verbose_true,"AssertionError: assert 'SnowflakeIndex' in 'RangeIndex: 3 entries, 0 to 2'",failed
tests.integ.modin.frame.test_insert,test_insert_duplicate_label,"ValueError: cannot insert col1, already exists",failed
tests.integ.modin.frame.test_insert,test_insert_empty_multiindex_frame[value0],"ValueError: Buffer dtype mismatch, expected 'Python object' but got 'long'",failed
tests.integ.modin.frame.test_insert,test_insert_empty_multiindex_frame[value1],"ValueError: Buffer dtype mismatch, expected 'Python object' but got 'long'",failed
tests.integ.modin.frame.test_insert,test_insert_empty_multiindex_frame[value2],"ValueError: Buffer dtype mismatch, expected 'Python object' but got 'long'",failed
tests.integ.modin.frame.test_insert,test_insert_index_num_levels_mismatch_negative[df_index0-value_index0],TypeError: incompatible index of inserted column with frame index,failed
tests.integ.modin.frame.test_insert,test_insert_index_num_levels_mismatch_negative[df_index1-value_index1],AssertionError: Length of new_levels (3) must be <= self.nlevels (2),failed
tests.integ.modin.frame.test_insert,test_insert_index_num_levels_mismatch_negative[df_index2-value_index2],TypeError: incompatible index of inserted column with frame index,failed
tests.integ.modin.frame.test_insert,test_insert_index_num_levels_mismatch_negative[df_index3-value_index3],AssertionError: Length of new_levels (3) must be <= self.nlevels (2),failed
tests.integ.modin.frame.test_insert,test_insert_index_num_levels_mismatch_negative[df_index4-value_index4],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_insert,test_insert_index_num_levels_mismatch_negative[df_index5-value_index5],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_insert,test_insert_index_type_mismatch[df_index0-value_index0-expected_index0],"AssertionError: DataFrame.index are different

DataFrame.index values are different (100.0 %)
[left]:  Index(['1', '2', '3'], dtype='object')
[right]: Index([1.0, 2.0, 3.0], dtype='float64')
At positional index 0, first diff: 1 != 1.0",failed
tests.integ.modin.frame.test_insert,test_insert_index_type_mismatch[df_index1-value_index1-expected_index1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.frame.test_insert,test_insert_index_type_mismatch[df_index2-value_index2-expected_index2],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.frame.test_insert,test_insert_into_empty_dataframe_index_dtype_mismatch,Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_insert,test_insert_loc_negative[1],AssertionError: Snowpark pandas Exception '<=' not supported between instances of 'int' and 'str' doesn't match pandas Exception loc must be int,failed
tests.integ.modin.frame.test_insert,test_insert_multiindex_array_like_and_scalar[value4-1],ValueError: Length of values (1) does not match length of index (4),failed
tests.integ.modin.frame.test_insert,test_insert_multiindex_column[columns4-insert_label2],ValueError: Item must have length equal to number of levels.,failed
tests.integ.modin.frame.test_insert,test_insert_multiindex_column[columns4-insert_label3],ValueError: Item must have length equal to number of levels.,failed
tests.integ.modin.frame.test_insert,test_insert_multiindex_dict_negative,"AssertionError: Regex pattern did not match.
 Regex: 'Number of index levels of inserted column are different from frame index'
 Input: 'Length of values (3) does not match length of index (4)'",failed
tests.integ.modin.frame.test_insert,test_insert_multiple_null,ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_insert,test_insert_one_to_many[native_value0],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_insert,test_insert_one_to_many[native_value1],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_insert,test_insert_one_to_many[native_value2],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_insert,test_insert_pandas_types_negative,Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.frame.test_insert,test_insert_with_unique_and_duplicate_index_values[index_values0-other_index_values0-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['INDEX']",failed
tests.integ.modin.frame.test_insert,test_insert_with_unique_and_duplicate_index_values[index_values1-other_index_values1-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['INDEX']",failed
tests.integ.modin.frame.test_insert,test_insert_with_unique_and_duplicate_index_values[index_values10-other_index_values10-True],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_insert,test_insert_with_unique_and_duplicate_index_values[index_values11-other_index_values11-True],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_insert,test_insert_with_unique_and_duplicate_index_values[index_values2-other_index_values2-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['INDEX']",failed
tests.integ.modin.frame.test_insert,test_insert_with_unique_and_duplicate_index_values[index_values3-other_index_values3-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['INDEX']",failed
tests.integ.modin.frame.test_insert,test_insert_with_unique_and_duplicate_index_values[index_values4-other_index_values4-True],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_insert,test_insert_with_unique_and_duplicate_index_values[index_values5-other_index_values5-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['INDEX']",failed
tests.integ.modin.frame.test_insert,test_insert_with_unique_and_duplicate_index_values[index_values6-other_index_values6-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['INDEX']",failed
tests.integ.modin.frame.test_insert,test_insert_with_unique_and_duplicate_index_values[index_values7-other_index_values7-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['INDEX']",failed
tests.integ.modin.frame.test_insert,test_insert_with_unique_and_duplicate_index_values[index_values8-other_index_values8-True],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_insert,test_insert_with_unique_and_duplicate_index_values[index_values9-other_index_values9-True],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_interchange_protocol,test_allow_copy_false[TestingDf.MIXED_TYPE],"assert 13905466304 != 13905466304
 +  where 13905466304 = <function TestDataFrame.test_allow_copy_false.<locals>.get_buffer_memory_pointer at 0x341f6f6d0>(<pandas.core.interchange.dataframe.PandasDataFrameXchg object at 0x33e163760>)
 +  and   13905466304 = <function TestDataFrame.test_allow_copy_false.<locals>.get_buffer_memory_pointer at 0x341f6f6d0>(<pandas.core.interchange.dataframe.PandasDataFrameXchg object at 0x33e1607c0>)",failed
tests.integ.modin.frame.test_items,test_items[dataframe3],AssertionError: Got type: <class 'pandas.core.series.Series'>,failed
tests.integ.modin.frame.test_itertuples,test_df_itertuples_nan_data_negative,Native pandas retains the np.nan value while Snowpark pandas converts it to None.,xfailed
tests.integ.modin.frame.test_itertuples,test_df_itertuples_tuple_data_negative,[XPASS(strict)] Native pandas retains the tuple value while Snowpark pandas converts it to list.,failed
tests.integ.modin.frame.test_join,test_join_different_levels_negative,"AssertionError: Regex pattern did not match.
 Regex: 'Can not merge objects with different column levels'
 Input: 'Not allowed to merge between different levels. (1 levels on the left, 2 on the right)'",failed
tests.integ.modin.frame.test_join,test_join_invalid_how_negative,"AssertionError: Regex pattern did not match.
 Regex: 'do not recognize join method full_outer_join'
 Input: ""columns overlap but no suffix specified: Index(['a'], dtype='object')""",failed
tests.integ.modin.frame.test_join,test_join_list_mixed,AttributeError: 'Series' object has no attribute 'columns',failed
tests.integ.modin.frame.test_join,test_join_suffix_on_list_negative,"AssertionError: Regex pattern did not match.
 Regex: 'Join dataframes have overlapping column labels'
 Input: ""Indexes have overlapping values: Index(['key'], dtype='object')""",failed
tests.integ.modin.frame.test_join,test_join_unnamed_series_in_list_negative,AttributeError: 'Series' object has no attribute 'columns',failed
tests.integ.modin.frame.test_join,test_join_validate[lvalues0-rvalues0-1:1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_join,test_join_validate[lvalues1-rvalues1-1:m],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_join,test_join_validate[lvalues2-rvalues2-m:1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_join,test_join_validate[lvalues3-rvalues3-m:m],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_join,test_join_validate[lvalues4-rvalues4-1:m],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_join,test_join_validate[lvalues5-rvalues5-m:m],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_join,test_join_validate[lvalues6-rvalues6-m:1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_join,test_join_validate[lvalues7-rvalues7-m:m],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_join,test_join_validate[lvalues8-rvalues8-m:m],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_join,test_join_validate_negative[lvalues0-rvalues0-1:1],pandas.errors.MergeError: Merge keys are not unique in right dataset; not a one-to-one merge,failed
tests.integ.modin.frame.test_join,test_join_validate_negative[lvalues1-rvalues1-m:1],pandas.errors.MergeError: Merge keys are not unique in right dataset; not a many-to-one merge,failed
tests.integ.modin.frame.test_join,test_join_validate_negative[lvalues2-rvalues2-1:1],pandas.errors.MergeError: Merge keys are not unique in left dataset; not a one-to-one merge,failed
tests.integ.modin.frame.test_join,test_join_validate_negative[lvalues3-rvalues3-1:m],pandas.errors.MergeError: Merge keys are not unique in left dataset; not a one-to-many merge,failed
tests.integ.modin.frame.test_join,test_join_validate_negative[lvalues4-rvalues4-1:1],pandas.errors.MergeError: Merge keys are not unique in either left or right dataset; not a one-to-one merge,failed
tests.integ.modin.frame.test_join,test_join_validate_negative[lvalues5-rvalues5-1:m],pandas.errors.MergeError: Merge keys are not unique in left dataset; not a one-to-many merge,failed
tests.integ.modin.frame.test_join,test_join_validate_negative[lvalues6-rvalues6-m:1],pandas.errors.MergeError: Merge keys are not unique in right dataset; not a many-to-one merge,failed
tests.integ.modin.frame.test_loc,test_df_loc_full_set_row_from_series_pandas_errors_default_columns[index0-expected_result0],"ValueError: could not broadcast input array from shape (2,) into shape (2, 3)",failed
tests.integ.modin.frame.test_loc,test_df_loc_full_set_row_from_series_pandas_errors_default_columns[index1-expected_result1],"ValueError: could not broadcast input array from shape (2,) into shape (2, 3)",failed
tests.integ.modin.frame.test_loc,test_df_loc_full_set_row_from_series_pandas_errors_string_columns[series_index0],"ValueError: could not broadcast input array from shape (2,) into shape (2, 3)",failed
tests.integ.modin.frame.test_loc,test_df_loc_full_set_row_from_series_pandas_errors_string_columns[series_index1],"ValueError: could not broadcast input array from shape (2,) into shape (2, 3)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_col_len_mismatch_boolean_indexer[key1],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_col_snowpark_pandas_input[series[bool]_col],"AssertionError: DataFrame.columns are different

DataFrame.columns values are different (20.0 %)
[left]:  Index(['A', 'B', 'C', 'F', 'A'], dtype='object')
[right]: Index(['A', 'B', 'C', 'E', 'A'], dtype='object')
At positional index 3, first diff: F != E",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_col_time_df[key0],"TypeError: Cannot interpret 'datetime64[ns, UTC]' as a data type",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_col_time_df[key1],"TypeError: Cannot interpret 'datetime64[ns, UTC]' as a data type",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_bool[array-key5],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_bool[index-key5],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_bool[list-key5],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_bool[series-key4],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_bool_series_with_1k_shape[key0],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_bool_series_with_1k_shape[key1],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_bool_series_with_mismatch_index_len[False-key0],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_bool_series_with_mismatch_index_len[False-key1],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_bool_series_with_mismatch_index_len[True-key0],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_bool_series_with_mismatch_index_len[True-key1],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_bool_series_with_unaligned_and_duplicate_indices,"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 2)
[right]: (9, 2)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_non_boolean_series_with_1k_shape[key1],"KeyError: array([-1176,  -349,  1170,  -167,  -476,  -793,  1270,   -55, -1449,
       -1047,  -752,  -123,  -294, -1171,  1435, -1095,  -202, -1058,
        -398,  -166, -1212,  1493,  -183,  1181,  -241,  1261,  -304,
        -429, -1177,  -725,  -828,  -703, -1130, -1063,  -656,  1422,
        1325, -1341,  1246,  -516,  -254, -1253,  -451,  -603,  -496,
        1416,  -861, -1149, -1004,  1264])",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_non_boolean_series_with_1k_shape[key2],"KeyError: array([ 1182, -1358,  -761,  -934,  -441,  -828, -1193,  1009,   -85,
       -1386,  -212, -1356,  1000,  -595,  1439,  -672,  -391,  1374,
        -331,  -340,   -55,  -269,  -304,  -736, -1102,  -963,  -641,
          -2,  -853, -1015,  1492,  -956,  1497,  1119,  1332,  -242,
       -1248, -1252,  -211,  1252, -1414,  1422,  -951,  -903,  -115,
         -52,  1004, -1460, -1221,  -444, -1055, -1088,  -801,  -627,
       -1052,  1376,  -496,  1305, -1094, -1001,  -885,  -109,  -303,
        -154, -1000,  1026,  -278, -1015, -1452,  -442, -1176,  1497,
       -1498,  1126,  -782,  -911,  -849,  -593,  1368,  -799, -1195,
       -1496, -1152,   -59,  -545,  1082, -1349, -1389,   -73, -1021,
        -442,  -391,  -462, -1327,  1304,  1215, -1286, -1063,  1124,
        -222,  -177,  -182, -1167,  1433, -1294,  -675,  -774,  -865,
        -623,  1329,  1097,   -63,  -893,  1160,  1342,  -474, -1154,
       -1387, -1138,  -463,  -757, -1209,  1087,  -684,  -225,  -439,
        -272,  -800,  -596,  -879,  1034,  -724,  -501, -1477,  -868,
       -1331,  1433,  1436,  -717, -1269,  -256,  -533,  -478, -1278,
        -810,  1314, -1494,  1383,  1067, -1325, -1484, -1376, -1046,
        1165,  -735,  1289,  -202,  1416,  -780,  -230,  -794,  -652,
        1257, -1084,  1156,  1162,  1177,  1075,  1281,  1390,  -374,
        -714,   -90,  -169,   -18,  -377,  1055,  -589,  -738,  -307,
        1254,  -508, -1194,  -952,  1353,  -970,   -91,  -949, -1130,
        -156,  1272,  -180, -1228,  1249,  1165, -1238,  -352,  -520,
        -281, -1072, -1431, -1221,  -168,  1173, -1465,  1416, -1227,
        -850,  1375, -1394,  1021,  -655,   -17,  1496,  1299, -1276,
         -93,  1414, -1429,  1425, -1135,   -97, -1119,  -587,  -229,
       -1332,  -323,  -165,  -154, -1246,   -54, -1143,  1336, -1328,
       -1040,  -704,  1389,  1090,   -42,  -392,  -670,  -703,  -937,
       -1205,  -275, -1046,  -939,  -898,  -337, -1017,  -362,  1431,
        -419, -1041,  1190,  -496,  1491,  -458, -1264,  -725, -1467,
       -1426,  -105,  -172, -1015, -1120,  1429,  -753,  -360,  -390,
        -148,   -65,  1480,  -252,  -379,  1347,  1231,  -128,  1176,
        1009,  -925, -1490,  1327, -1369, -1097, -1025, -1116, -1429,
        -303,  -246,  -717,  -536, -1118,  -131, -1117, -1111, -1452,
        -763,  -594, -1065, -1007,  -607,  1340,  1076,  -170,  -202,
        -669,  1491,  1046,  -655, -1137,  1395,  -870, -1183,  1368,
        -233,  -656,  1047,   -42,  -127, -1075,  -277, -1337, -1151,
        1112,  -695,  -912,  -718, -1099, -1368,  -401, -1161,  -868,
        -524,  -542,  -810,  -121,  1485,  -341, -1369, -1121,  -219,
        -436,  -990,  -643,   -21,  -969, -1226,    -2,   -41, -1465,
        1373,  1408,  1437, -1358,  -178,   -38,  1022,  -665,  1152,
        -330, -1267, -1220, -1183, -1000,  -210,  -649,  -334, -1056,
        -601,  -971,  -256, -1064,  -896, -1164,  -501,    -7,  -605,
        -971,  1153, -1401,  -880,  1173,  -279,  -131,  1165,  -502,
        -383,  1014,  -279,  -990,  -111,  1349,  -440,  -217, -1034,
        1146,  -335,  1235,  -666, -1172,  -469, -1005,  -156,  1449,
        -701,  1279,  1264,  -706,  -143, -1356,  1483,  1262, -1064,
        -452,  -431,  -221,   -64, -1131,  -107,  -514,  -552,  -573,
       -1039,  -542,  -851, -1078,  1164,  -165,  -580, -1021,  1464,
        1307,  -881,  -631,  -109,  1056, -1017, -1086, -1364, -1132,
        -721,  1311, -1238,  1189,  -669,  -194,  -828,  -619, -1412,
        -374,  -131, -1049,    -7,  -253,  -117,  -455,  1053, -1363,
       -1168,   -61, -1214,  1092,  1385,  -999, -1073,  -165, -1357,
        -186,  -999,   -61,  -507,  -999,  -126,  -478,  1066,  -490,
        1477,  -794,  1173,  -825,   -99,  -116, -1161, -1291, -1483,
        -194, -1154,  1149,  1393,   -26, -1239,   -51,  1234, -1113,
        -149,  -718,  -330, -1228,  1162, -1058,  -709,  -599,  -212,
       -1195,  -857,  1315,  1227,  -341, -1334,  -946,  1220,  1114,
        1235, -1346,  1137,  -376,  -501,  1117, -1144, -1473, -1403,
        -925,  1322,  -289,  -508, -1486,   -75,  -793,  -363,  -284,
        -208, -1402, -1270,    -1,  -356,  -993,  1006,  -276,  -280,
        -351,  1495,  -896,  -686,  1277, -1460, -1472,  1418, -1258,
        -936, -1075, -1130,  -559,  1236,  -847,  -114,  -204,  -632,
        -252,   -82, -1254,  -504, -1250,  -956, -1051,  -827,  1165,
       -1163, -1463,  -929, -1283, -1217, -1041,  1160,  1357,  1436,
        -541,  -780,  -321,  -327, -1167, -1385,    -2, -1085,  -271,
        1141, -1394, -1116, -1466,  -938,  -739,  -127,  -772,  -691,
        -760,  1367,  1447,  -781,  -639,  -273,  -961,  1370,  -745,
        1282,  -114,  -790,  1169, -1152, -1328,  1377,  1018,  -673,
       -1264, -1273, -1160,  1349,  -444,  -678,  1480, -1283,  -299,
        -777, -1242,    -1,  -647,  -680,  -811,  -492,  -526,  1108,
        -165, -1078, -1334,  -601,  -979,  -435,    -3, -1091, -1243,
        -481, -1059,  -243,  -760,  -872, -1049, -1096,  -842,  -474,
        -620, -1408,  1096,  1209,  -433,   -95,  -865,  -627, -1129,
       -1492,  -497,  -806,  -598,  1148, -1338,  -285,  1447, -1008,
        -887,  1451,  -399,   -85,  -978, -1331,  1013,  -308,  -217,
       -1402,  1096,  -804,  -786,  1490,  -419, -1216,  1443, -1330,
        1132,  -140,  1498,  1406,  -717, -1463,  -436,  -331,  -744,
        -222,  -598,  -778,  -375,  -464,  -975,  -632,  -816,  -937,
        -210, -1164, -1416, -1211,  1344,  1152,  1454,  -899,  1220,
        -571, -1392,  1465,   -75,  -133,  -298,  -266, -1072,  -630,
        -316,  1123, -1124,  -714, -1105,  -422,  1406,  -442,  1327,
        -373,  -918, -1135, -1101,  1370,  1025, -1043,  1075,  -305,
        -192,  -543,  1226,  1229, -1346, -1437,  -500, -1117,  -611,
        -871,  -894, -1331,  1042, -1133, -1484,  -787, -1469,  1100,
        -835,  -476,   -77,  -920,  -378,  1124,  -684,  -479,  -577,
        -992,  -985,  -554, -1402, -1158,  -832,  1430,  -544,  1333,
       -1038, -1139, -1021, -1325, -1358,  -320, -1056,  -556,  -280,
        -742,  -502,  -188,  -332,  1189,  -321,   -52,  -502,  -402,
        -338, -1350,    -4, -1437,  1389,  1398,  -652,  1087,  -859,
        -949, -1457,  1108, -1452,  1216, -1124,  -181,  -649,  -384,
         -68, -1413,  -524,  1484,  1148, -1216,  1404,  1402,  1207,
        -690,  -486,  -267,  -950,  1058, -1235, -1265,   -36,  -716,
       -1138,  -381, -1036,  -488,  1078,  1274,  -564,  -108, -1055,
          -9, -1353, -1216,  -676,  -482,  1193,  1240,  1104, -1343,
        1258,  -683,  -491,  1390,   -93,  -532,  -113,  -480,   -43,
        1476, -1162,  -583, -1061,  -393,  -773,  -693,  -312, -1246,
        -756,  -398,  -644, -1372,   -98,  -918,  -298, -1281,  -744,
       -1041])",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--1-1-10],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 7)
[right]: (6, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--1-1-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--1-1-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 7)
[right]: (4, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--1-1-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 7)
[right]: (6, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--1-4-10],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 7)
[right]: (3, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--1-4-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--1-4-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 7)
[right]: (3, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--2--1-10],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 7)
[right]: (4, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--2--1-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 7)
[right]: (3, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--2--1-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 7)
[right]: (4, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--2-1-10],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 7)
[right]: (3, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--2-1-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--2-1-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (2, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--2-1-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 7)
[right]: (3, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--2-4-10],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (2, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--2-4-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--2-4-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (2, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--9--1-10],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--9--1-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--9--1-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--9--1-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--9-1-10],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--9-1-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--9-1-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--9-1-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--9-4-10],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--9-4-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False--9-4-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False-1-1--1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (2, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False-1-1-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False-1-1-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (2, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False-1-4--1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 7)
[right]: (5, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False-1-4-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 7)
[right]: (4, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False-1-4-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False-1-4-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 7)
[right]: (5, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False-2-1--1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False-2-1-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False-2-1-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False-2-4--1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 7)
[right]: (3, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False-2-4-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (2, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False-2-4-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False-2-4-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 7)
[right]: (3, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False-9-1--1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False-9-1-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False-9-1-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False-9-10-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False-9-4--1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False-9-4-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False-9-4-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[False-9-4-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--1--1--1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (0, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--1--1-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (0, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--1-1--1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 7)
[right]: (2, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--1-1-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--1-1-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 7)
[right]: (2, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--1-4--1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (6, 7)
[right]: (5, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--1-4-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 7)
[right]: (4, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--1-4-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--1-4-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (6, 7)
[right]: (5, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--2--1--1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (0, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--2--1-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (0, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--2--1-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (0, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--2-1--1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--2-1-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--2-1-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--2-4--1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 7)
[right]: (3, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--2-4-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 7)
[right]: (2, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--2-4-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--2-4-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 7)
[right]: (3, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--9--1--1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (0, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--9--1-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (0, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--9--1-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (0, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--9--1-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (0, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True--9-1-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (0, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True-1-1-10],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (7, 7)
[right]: (6, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True-1-1-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True-1-1-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 7)
[right]: (4, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True-1-1-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (7, 7)
[right]: (6, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True-1-4-10],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 7)
[right]: (3, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True-1-4-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True-1-4-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 7)
[right]: (3, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True-2-1-10],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 7)
[right]: (3, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True-2-1-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 7)
[right]: (2, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True-2-1-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 7)
[right]: (3, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True-2-4-10],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 7)
[right]: (2, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True-2-4-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True-2-4-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 7)
[right]: (2, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True-9-10-10],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (0, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True-9-10-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (0, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True-9-10-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (0, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True-9-10-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (0, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice[True-9-4-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (0, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_negative[key0-ValueError-slice step cannot be zero],"AssertionError: Regex pattern did not match.
 Regex: 'slice step cannot be zero'
 Input: 'Step must not be zero'",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_negative[key1-TypeError-slice step must be integer],"AssertionError: Regex pattern did not match.
 Regex: 'slice step must be integer'
 Input: ""Wrong type <class 'float'> for value 1.1""",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-1-1-1],KeyError: 2,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-1-1-4],KeyError: 2,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-1-1-6],KeyError: 2,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-1-1-None],KeyError: 2,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-1-4-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-1-4-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 7)
[right]: (3, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-1-6-1],KeyError: 7,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-1-6-4],KeyError: 7,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-1-6-6],KeyError: 7,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-1-6-None],KeyError: 7,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-2-1-1],KeyError: 3,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-2-1-4],KeyError: 3,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-2-1-6],KeyError: 3,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-2-1-None],KeyError: 3,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-2-4-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (0, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-2-4-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-2-4-6],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (0, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-2-4-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 7)
[right]: (2, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-2-6-1],KeyError: 8,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-2-6-4],KeyError: 8,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-2-6-6],KeyError: 8,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-2-6-None],KeyError: 8,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-9-1-1],KeyError: 10,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-9-1-4],KeyError: 10,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-9-1-6],KeyError: 10,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-9-1-None],KeyError: 10,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-9-4-1],KeyError: 13,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-9-4-4],KeyError: 13,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-9-4-6],KeyError: 13,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-9-4-None],KeyError: 13,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-9-6-1],KeyError: 15,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-9-6-4],KeyError: 15,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-9-6-6],KeyError: 15,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[-9-6-None],KeyError: 15,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[1-1-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[1-1-6],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 7)
[right]: (2, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[1-1-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (4, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[1-4-1],KeyError: 3,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[1-4-4],KeyError: 3,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[1-4-6],KeyError: 3,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[1-4-None],KeyError: 3,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[1-6-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 7)
[right]: (0, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[1-6-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 7)
[right]: (0, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[1-6-6],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[1-6-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (6, 7)
[right]: (3, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[2-1-1],KeyError: -1,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[2-1-4],KeyError: -1,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[2-1-6],KeyError: -1,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[2-1-None],KeyError: -1,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[2-4-1],KeyError: 2,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[2-4-4],KeyError: 2,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[2-4-6],KeyError: 2,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[2-4-None],KeyError: 2,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[2-6-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (0, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[2-6-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 7)
[right]: (0, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[2-6-6],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 7)
[right]: (1, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[2-6-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 7)
[right]: (2, 7)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[9-1-1],KeyError: -8,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[9-1-4],KeyError: -8,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[9-1-6],KeyError: -8,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[9-1-None],KeyError: -8,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[9-4-1],KeyError: -5,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[9-4-4],KeyError: -5,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[9-4-6],KeyError: -5,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[9-4-None],KeyError: -5,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[9-6-1],KeyError: -3,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[9-6-4],KeyError: -3,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[9-6-6],KeyError: -3,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_key_slice_with_unordered_index[9-6-None],KeyError: -3,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_negative_row_diff2native[key0-TypeError-Passing a set as an indexer is not supported. Use a list instead.],"AssertionError: Regex pattern did not match.
 Regex: 'Passing a set as an indexer is not supported. Use a list instead.'
 Input: ""'set' type is unordered""",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_negative_row_diff2native[key1-TypeError-Passing a dict as an indexer is not supported. Use a list instead.],Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_negative_row_diff2native[key2-TypeError-Please convert this to Snowpark pandas objects by calling modin],"KeyError: array([2, 4], dtype=object)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_negative_row_diff2native[key3-TypeError-Please convert this to Snowpark pandas objects by calling modin],Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_negative_snowpark_pandas_input[dataframe],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--1-1-1],KeyError: 2,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--1-1-4],KeyError: 2,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--1-1-6],KeyError: 2,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--1-1-None],KeyError: 2,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--1-4-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 8)
[right]: (1, 8)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--1-4-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 8)
[right]: (1, 8)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--1-6-1],KeyError: 7,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--1-6-4],KeyError: 7,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--1-6-6],KeyError: 7,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--1-6-None],KeyError: 7,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--2-1-1],KeyError: 3,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--2-1-4],KeyError: 3,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--2-1-6],KeyError: 3,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--2-1-None],KeyError: 3,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--2-4-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 8)
[right]: (0, 8)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--2-4-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 8)
[right]: (1, 8)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--2-4-6],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 8)
[right]: (0, 8)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--2-4-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 8)
[right]: (1, 8)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--2-6-1],KeyError: 8,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--2-6-4],KeyError: 8,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--2-6-6],KeyError: 8,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--2-6-None],KeyError: 8,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--9-1-1],KeyError: 10,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--9-1-4],KeyError: 10,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--9-1-6],KeyError: 10,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--9-1-None],KeyError: 10,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--9-4-1],KeyError: 13,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--9-4-4],KeyError: 13,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--9-4-6],KeyError: 13,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--9-4-None],KeyError: 13,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--9-6-1],KeyError: 15,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--9-6-4],KeyError: 15,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--9-6-6],KeyError: 15,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[first--9-6-None],KeyError: 15,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--1-1-1],KeyError: 2,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--1-1-4],KeyError: 2,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--1-1-6],KeyError: 2,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--1-1-None],KeyError: 2,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--1-4-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 8)
[right]: (3, 8)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--1-4-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 8)
[right]: (1, 8)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--1-4-6],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 8)
[right]: (2, 8)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--1-4-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 8)
[right]: (4, 8)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--1-6-1],KeyError: 7,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--1-6-4],KeyError: 7,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--1-6-6],KeyError: 7,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--1-6-None],KeyError: 7,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--2-1-1],KeyError: 3,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--2-1-4],KeyError: 3,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--2-1-6],KeyError: 3,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--2-1-None],KeyError: 3,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--2-4-1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (1, 8)
[right]: (2, 8)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--2-4-4],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 8)
[right]: (1, 8)",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--2-6-1],KeyError: 8,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--2-6-4],KeyError: 8,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--2-6-6],KeyError: 8,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--2-6-None],KeyError: 8,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--9-1-1],KeyError: 10,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--9-1-4],KeyError: 10,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--9-1-6],KeyError: 10,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--9-1-None],KeyError: 10,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--9-4-1],KeyError: 13,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--9-4-4],KeyError: 13,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--9-4-6],KeyError: 13,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--9-4-None],KeyError: 13,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--9-6-1],KeyError: 15,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--9-6-4],KeyError: 15,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--9-6-6],KeyError: 15,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_reversed_key_slice_with_unordered_nullable_index[last--9-6-None],KeyError: 15,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_with_non_monotonic_index_get_key_slice[key0-expected_index0],"KeyError: ""Cannot get left slice bound for non-unique label: 'b'""",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_with_non_monotonic_index_get_key_slice[key1-expected_index1],KeyError: 'a',failed
tests.integ.modin.frame.test_loc,test_df_loc_get_with_non_monotonic_index_get_key_slice[key2-expected_index2],KeyError: 'f',failed
tests.integ.modin.frame.test_loc,test_df_loc_get_with_non_monotonic_index_get_key_slice[key3-expected_index3],"KeyError: ""Cannot get left slice bound for non-unique label: 'd'""",failed
tests.integ.modin.frame.test_loc,test_df_loc_get_with_timedelta[key2-1-1],ValueError: Could not convert object to NumPy timedelta,failed
tests.integ.modin.frame.test_loc,test_df_loc_get_with_timedelta_and_none_key,SNOW-1653219 None key does not work with timedelta index,xfailed
tests.integ.modin.frame.test_loc,test_df_loc_get_with_timedelta_behavior_difference[key0-expected_result0],KeyError: Timedelta('4 days 23:59:59.999999999'),failed
tests.integ.modin.frame.test_loc,test_df_loc_get_with_timedelta_behavior_difference[key1-expected_result1],KeyError: Timedelta('4 days 23:59:59.999999999'),failed
tests.integ.modin.frame.test_loc,test_df_loc_get_with_timedelta_behavior_difference[key2-expected_result2],KeyError: Timedelta('2 days 23:59:59.999999999'),failed
tests.integ.modin.frame.test_loc,test_df_loc_get_with_timedelta_behavior_difference[key3-expected_result3],KeyError: Timedelta('2 days 02:00:00'),failed
tests.integ.modin.frame.test_loc,test_df_loc_self_df_set_aligned_row_key[df2],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_2d_array_with_ffill_na_values_negative,"ValueError: could not broadcast input array from shape (2, 4) into shape (4, 4)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_boolean_row_indexer[item1-X-row_key0],IndexError: index 2 is out of bounds for axis 0 with size 2,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_boolean_row_indexer[item1-col_key2-row_key0],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_boolean_row_indexer[item1-col_key4-row_key0],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_boolean_row_indexer[item1-col_key5-row_key0],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_duplicate_index[duplicate-self_index_val1-index0-x-item0],ValueError: Length of values (2) does not match length of index (4),failed
tests.integ.modin.frame.test_loc,test_df_loc_set_duplicate_index[duplicate-self_index_val1-index1-y-item1],ValueError: Length of values (2) does not match length of index (4),failed
tests.integ.modin.frame.test_loc,test_df_loc_set_duplicate_index[duplicate-self_index_val1-index2-x-item2],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_duplicate_index[duplicate-self_index_val1-index3-y-item3],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_duplicate_index[duplicate-self_index_val1-index4-columns4-item4],ValueError: Length of values (2) does not match length of index (4),failed
tests.integ.modin.frame.test_loc,test_df_loc_set_duplicate_index[duplicate-self_index_val1-index5-columns5-item5],ValueError: Length of values (2) does not match length of index (4),failed
tests.integ.modin.frame.test_loc,test_df_loc_set_duplicate_index_negative[index0-columns0-item0],ValueError: Length of values (2) does not match length of index (4),failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[array-row_key0-col_key10],"KeyError: array(['E', 1, 'X', 2], dtype=object)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[array-row_key0-col_key6],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 8)
[right]: (3, 4)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[array-row_key0-col_key8],"AssertionError: DataFrame.iloc[:, 0] (column name=""D"") are different

DataFrame.iloc[:, 0] (column name=""D"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [nan, 4.0, nan]
[right]: [1.0, 4.0, 7.0]
At positional index 0, first diff: nan != 1.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[array-row_key0-col_key9],"KeyError: array(['1', '2'], dtype='<U21')",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[array-row_key1-col_key10],"KeyError: array(['E', 1, 'X', 2], dtype=object)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[array-row_key1-col_key1],"AssertionError: DataFrame.iloc[:, 3] (column name=""A"") are different

DataFrame.iloc[:, 3] (column name=""A"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [1, 4, 7]
[right]: [nan, 7.0, 4.0]",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[array-row_key1-col_key2],"AssertionError: DataFrame.iloc[:, 4] (column name=""Y"") are different

DataFrame.iloc[:, 4] (column name=""Y"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [1, 4, 7]
[right]: [nan, nan, nan]",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[array-row_key1-col_key6],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 8)
[right]: (3, 4)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[array-row_key1-col_key8],"AssertionError: DataFrame.iloc[:, 0] (column name=""D"") are different

DataFrame.iloc[:, 0] (column name=""D"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [1.0, 4.0, 7.0]
At positional index 0, first diff: nan != 1.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[array-row_key1-col_key9],"KeyError: array(['1', '2'], dtype='<U21')",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[index-row_key0-col_key10],"KeyError: array(['E', 1, 'X', 2], dtype=object)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[index-row_key0-col_key6],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 8)
[right]: (3, 4)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[index-row_key0-col_key8],"AssertionError: DataFrame.iloc[:, 0] (column name=""D"") are different

DataFrame.iloc[:, 0] (column name=""D"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [nan, 4.0, nan]
[right]: [1.0, 4.0, 7.0]
At positional index 0, first diff: nan != 1.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[index-row_key0-col_key9],"KeyError: array(['1', '2'], dtype='<U21')",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[index-row_key1-col_key10],"KeyError: array(['E', 1, 'X', 2], dtype=object)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[index-row_key1-col_key1],"AssertionError: DataFrame.iloc[:, 3] (column name=""A"") are different

DataFrame.iloc[:, 3] (column name=""A"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [1, 4, 7]
[right]: [nan, 7.0, 4.0]",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[index-row_key1-col_key2],"AssertionError: DataFrame.iloc[:, 4] (column name=""Y"") are different

DataFrame.iloc[:, 4] (column name=""Y"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [1, 4, 7]
[right]: [nan, nan, nan]",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[index-row_key1-col_key6],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 8)
[right]: (3, 4)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[index-row_key1-col_key8],"AssertionError: DataFrame.iloc[:, 0] (column name=""D"") are different

DataFrame.iloc[:, 0] (column name=""D"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [1.0, 4.0, 7.0]
At positional index 0, first diff: nan != 1.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[index-row_key1-col_key9],"KeyError: array(['1', '2'], dtype='<U21')",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[list-row_key0-col_key10],"KeyError: array(['E', 1, 'X', 2], dtype=object)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[list-row_key0-col_key6],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 8)
[right]: (3, 4)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[list-row_key0-col_key8],"AssertionError: DataFrame.iloc[:, 0] (column name=""D"") are different

DataFrame.iloc[:, 0] (column name=""D"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [nan, 4.0, nan]
[right]: [1.0, 4.0, 7.0]
At positional index 0, first diff: nan != 1.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[list-row_key0-col_key9],"KeyError: array(['1', '2'], dtype='<U21')",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[list-row_key1-col_key10],"KeyError: array(['E', 1, 'X', 2], dtype=object)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[list-row_key1-col_key1],"AssertionError: DataFrame.iloc[:, 3] (column name=""A"") are different

DataFrame.iloc[:, 3] (column name=""A"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [1, 4, 7]
[right]: [nan, 7.0, 4.0]",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[list-row_key1-col_key2],"AssertionError: DataFrame.iloc[:, 4] (column name=""Y"") are different

DataFrame.iloc[:, 4] (column name=""Y"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [1, 4, 7]
[right]: [nan, nan, nan]",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[list-row_key1-col_key6],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 8)
[right]: (3, 4)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[list-row_key1-col_key8],"AssertionError: DataFrame.iloc[:, 0] (column name=""D"") are different

DataFrame.iloc[:, 0] (column name=""D"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [1.0, 4.0, 7.0]
At positional index 0, first diff: nan != 1.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[list-row_key1-col_key9],"KeyError: array(['1', '2'], dtype='<U21')",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[series-row_key0-col_key10],"KeyError: array(['E', 1, 'X', 2], dtype=object)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[series-row_key0-col_key6],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 8)
[right]: (3, 4)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[series-row_key0-col_key8],"AssertionError: DataFrame.iloc[:, 0] (column name=""D"") are different

DataFrame.iloc[:, 0] (column name=""D"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [nan, 4.0, nan]
[right]: [1.0, 4.0, 7.0]
At positional index 0, first diff: nan != 1.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[series-row_key0-col_key9],"KeyError: array(['1', '2'], dtype='<U21')",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[series-row_key1-col_key10],"KeyError: array(['E', 1, 'X', 2], dtype=object)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[series-row_key1-col_key1],"AssertionError: DataFrame.iloc[:, 3] (column name=""A"") are different

DataFrame.iloc[:, 3] (column name=""A"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [1, 4, 7]
[right]: [nan, 7.0, 4.0]",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[series-row_key1-col_key2],"AssertionError: DataFrame.iloc[:, 4] (column name=""Y"") are different

DataFrame.iloc[:, 4] (column name=""Y"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [1, 4, 7]
[right]: [nan, nan, nan]",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[series-row_key1-col_key6],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 8)
[right]: (3, 4)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[series-row_key1-col_key8],"AssertionError: DataFrame.iloc[:, 0] (column name=""D"") are different

DataFrame.iloc[:, 0] (column name=""D"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [1.0, 4.0, 7.0]
At positional index 0, first diff: nan != 1.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type[series-row_key1-col_key9],"KeyError: array(['1', '2'], dtype='<U21')",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type_with_duplicate_columns[array-col_key10],AssertionError: exception type <class 'IndexError'> does not match with expected type <class 'ValueError'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type_with_duplicate_columns[array-col_key1],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [1, 4, 7]
[right]: [nan, 7.0, 4.0]",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type_with_duplicate_columns[array-col_key6],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type_with_duplicate_columns[array-col_key8],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [nan, 7.0, 4.0]
[right]: [1.0, 4.0, 7.0]
At positional index 0, first diff: nan != 1.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type_with_duplicate_columns[index-col_key10],AssertionError: exception type <class 'IndexError'> does not match with expected type <class 'ValueError'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type_with_duplicate_columns[index-col_key1],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [1, 4, 7]
[right]: [nan, 7.0, 4.0]",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type_with_duplicate_columns[index-col_key6],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type_with_duplicate_columns[index-col_key8],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [nan, 7.0, 4.0]
[right]: [1.0, 4.0, 7.0]
At positional index 0, first diff: nan != 1.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type_with_duplicate_columns[list-col_key10],AssertionError: exception type <class 'IndexError'> does not match with expected type <class 'ValueError'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type_with_duplicate_columns[list-col_key1],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [1, 4, 7]
[right]: [nan, 7.0, 4.0]",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type_with_duplicate_columns[list-col_key6],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type_with_duplicate_columns[list-col_key8],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [nan, 7.0, 4.0]
[right]: [1.0, 4.0, 7.0]
At positional index 0, first diff: nan != 1.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type_with_duplicate_columns[series-col_key10],AssertionError: exception type <class 'IndexError'> does not match with expected type <class 'ValueError'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type_with_duplicate_columns[series-col_key1],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [1, 4, 7]
[right]: [nan, 7.0, 4.0]",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type_with_duplicate_columns[series-col_key6],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_col_key_type_with_duplicate_columns[series-col_key8],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [nan, 7.0, 4.0]
[right]: [1.0, 4.0, 7.0]
At positional index 0, first diff: nan != 1.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_key_with_duplicate_rows[array-item1],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_key_with_duplicate_rows[index-item1],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_key_with_duplicate_rows[list-item1],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_general_key_with_duplicate_rows[series-item1],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_item_2d_array_col_length_no_match,"AssertionError: Regex pattern did not match.
 Regex: 'shape mismatch: the number of columns 3 from the item does not match with the number of columns 4 to set'
 Input: 'could not broadcast input array from shape (3, 3) into shape (2, 4)'",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_item_2d_array_row_length_no_match,"ValueError: could not broadcast input array from shape (3, 4) into shape (2, 4)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_item_2d_array_scalar_row_loc_negative,Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_item_df_single_value[A-val_columns0-val_index0],ValueError: Length of values (1) does not match length of index (4),failed
tests.integ.modin.frame.test_loc,test_df_loc_set_item_df_single_value[A-val_columns0-val_index1],ValueError: Length of values (1) does not match length of index (4),failed
tests.integ.modin.frame.test_loc,test_df_loc_set_item_df_single_value[A-val_columns1-val_index0],ValueError: Length of values (1) does not match length of index (4),failed
tests.integ.modin.frame.test_loc,test_df_loc_set_item_df_single_value[A-val_columns1-val_index1],ValueError: Length of values (1) does not match length of index (4),failed
tests.integ.modin.frame.test_loc,test_df_loc_set_item_df_single_value[key0-val_columns0-val_index0],ValueError: Length of values (1) does not match length of index (4),failed
tests.integ.modin.frame.test_loc,test_df_loc_set_item_df_single_value[key0-val_columns0-val_index1],ValueError: Length of values (1) does not match length of index (4),failed
tests.integ.modin.frame.test_loc,test_df_loc_set_item_df_single_value[key0-val_columns1-val_index0],ValueError: Length of values (1) does not match length of index (4),failed
tests.integ.modin.frame.test_loc,test_df_loc_set_item_df_single_value[key0-val_columns1-val_index1],ValueError: Length of values (1) does not match length of index (4),failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False--1-4-10],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False--1-4-None],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False--2--1-1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False--2-1-4],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False--2-None-1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False--9-None-10],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False--9-None-1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False--9-None-4],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False--9-None-None],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False-1-1--1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False-1-1-None],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False-2-10-4],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False-2-4-1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False-2-None-4],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False-9-10--1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False-9-10-1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False-9-10-None],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False-9-None--1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False-9-None-1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False-9-None-4],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False-9-None-None],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False-None-1-1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[False-None-4-4],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--1--1--1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--1--1-None],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--2--1--1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--2--1-1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--2--1-None],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--2-10-4],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--2-4-4],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--2-None-4],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--9--1--1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--9--1-1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--9--1-4],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--9--1-None],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--9-1--1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--9-1-1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--9-1-4],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--9-1-None],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--9-10--1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--9-10-1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--9-10-4],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--9-10-None],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--9-4--1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--9-4-1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--9-4-4],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--9-4-None],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--9-None--1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--9-None-1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--9-None-4],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True--9-None-None],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-2--1-1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-2-1-1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-2-None-1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-9--1-10],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-9--1-1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-9--1-4],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-9--1-None],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-9-1-10],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-9-1-1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-9-1-4],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-9-1-None],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-9-10-10],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-9-10-1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-9-10-4],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-9-10-None],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-9-4-10],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-9-4-1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-9-4-4],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-9-4-None],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-9-None-10],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-9-None-1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-9-None-4],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-9-None-None],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-None-1-1],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_key_slice[True-None-4-4],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_list_like_row_key[array-row_key0],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [nan, 4.0, 50.0]
[right]: [nan, 4.0, 40.0]
At positional index 2, first diff: 50.0 != 40.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_list_like_row_key[array-row_key2],IndexError: index 3 is out of bounds for axis 0 with size 3,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_list_like_row_key[array-row_key3],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_list_like_row_key[array-row_key4],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [nan, 80.0, 50.0]
[right]: [nan, 70.0, 40.0]
At positional index 1, first diff: 80.0 != 70.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_list_like_row_key[array-row_key6],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [nan, 80.0, 50.0]
[right]: [nan, 70.0, 40.0]
At positional index 1, first diff: 80.0 != 70.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_list_like_row_key[index-row_key0],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [nan, 4.0, 50.0]
[right]: [nan, 4.0, 40.0]
At positional index 2, first diff: 50.0 != 40.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_list_like_row_key[index-row_key2],IndexError: index 3 is out of bounds for axis 0 with size 3,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_list_like_row_key[index-row_key3],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_list_like_row_key[index-row_key4],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [nan, 80.0, 50.0]
[right]: [nan, 70.0, 40.0]
At positional index 1, first diff: 80.0 != 70.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_list_like_row_key[index-row_key6],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [nan, 80.0, 50.0]
[right]: [nan, 70.0, 40.0]
At positional index 1, first diff: 80.0 != 70.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_list_like_row_key[list-row_key0],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [nan, 4.0, 50.0]
[right]: [nan, 4.0, 40.0]
At positional index 2, first diff: 50.0 != 40.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_list_like_row_key[list-row_key1],"KeyError: ""None of [[False, False, False]] are in the [Index([0, 1, 2], dtype='int64')]""",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_list_like_row_key[list-row_key2],ValueError: Item wrong length 6 instead of 3!,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_list_like_row_key[list-row_key3],ValueError: Item wrong length 2 instead of 3!,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_list_like_row_key[list-row_key4],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [nan, 80.0, 50.0]
[right]: [nan, 70.0, 40.0]
At positional index 1, first diff: 80.0 != 70.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_list_like_row_key[list-row_key5],"KeyError: ""None of [[]] are in the [Index([0, 1, 2], dtype='int64')]""",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_list_like_row_key[list-row_key6],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [nan, 80.0, 50.0]
[right]: [nan, 70.0, 40.0]
At positional index 1, first diff: 80.0 != 70.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_none,"KeyError: array([None], dtype=object)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_number_of_cols_mismatch_negative,Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_row_col_with_non_matching_scalar_key[native_df0--2-B-20],KeyError: array([-2]),failed
tests.integ.modin.frame.test_loc,test_df_loc_set_row_col_with_non_matching_scalar_key[native_df0-5-A-0],KeyError: array([5]),failed
tests.integ.modin.frame.test_loc,test_df_loc_set_row_col_with_non_matching_scalar_key[native_df0-A-C-7],"KeyError: array(['A'], dtype='<U1')",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_row_col_with_non_matching_scalar_key[native_df0-X-D-7],"KeyError: array(['X'], dtype='<U1')",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_indexer_2d_array_negative,Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index0-a-col_key4-95],"KeyError: array(['T'], dtype=object)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index0-a-col_key5-95],SNOW-1057861: Investigate locset behavior with missing index value,xfailed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index0-c-T-97],"KeyError: array(['T'], dtype='<U1')",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index0-d-col_key3-96],"KeyError: array(['V', 'T'], dtype=object)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index0-u-col_key12-90],SNOW-1321196: pandas 2.2.1 migration test failure,xfailed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index0-u-col_key18-item_values18],SNOW-1321196: pandas 2.2.1 migration test failure,xfailed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index0-v-col_key13-95],SNOW-1321196: pandas 2.2.1 migration test failure,xfailed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index0-w-col_key11-91],SNOW-1321196: pandas 2.2.1 migration test failure,xfailed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index0-x-D-94],"KeyError: array(['x'], dtype='<U1')",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index0-y-col_key16-item_values16],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (20.0 %)
[index]: [a, b, c, d, y]
[left]:  [5, 8, 11, 14, 0]
[right]: [5.0, 8.0, 11.0, 14.0, nan]",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index0-y-col_key17-item_values17],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (20.0 %)
[index]: [a, b, c, d, y]
[left]:  [5, 8, 11, 14, 0]
[right]: [5.0, 8.0, 11.0, 14.0, nan]",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index0-y-col_key9-93],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (20.0 %)
[index]: [a, b, c, d, y]
[left]:  [5, 8, 11, 14, 0]
[right]: [5.0, 8.0, 11.0, 14.0, nan]",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index0-z-T-92],"KeyError: array(['z'], dtype='<U1')",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index1-a-col_key4-95],"KeyError: array(['T'], dtype=object)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index1-a-col_key5-95],SNOW-1057861: Investigate locset behavior with missing index value,xfailed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index1-b-col_key6-98],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index1-c-T-97],"KeyError: array(['T'], dtype='<U1')",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index1-d-col_key3-96],"KeyError: array(['V', 'T'], dtype=object)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index1-u-col_key12-90],SNOW-1321196: pandas 2.2.1 migration test failure,xfailed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index1-u-col_key18-item_values18],SNOW-1321196: pandas 2.2.1 migration test failure,xfailed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index1-v-col_key13-95],SNOW-1321196: pandas 2.2.1 migration test failure,xfailed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index1-w-col_key11-91],SNOW-1321196: pandas 2.2.1 migration test failure,xfailed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index1-x-D-94],"KeyError: array(['x'], dtype='<U1')",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index1-x-None-94],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index1-y-col_key16-item_values16],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index1-y-col_key17-item_values17],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index1-y-col_key9-93],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement[data_index1-z-T-92],"KeyError: array(['z'], dtype='<U1')",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement_deviates_from_native_pandas[data_index0-a-col_key0-95],"KeyError: array(['T', 'T'], dtype=object)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement_deviates_from_native_pandas[data_index0-u-col_key2-90],"KeyError: array(['T'], dtype=object)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement_deviates_from_native_pandas[data_index0-u-col_key4-item_values4],"KeyError: array(['X', 'T'], dtype=object)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement_deviates_from_native_pandas[data_index0-v-col_key3-95],"KeyError: array(['T', 'T'], dtype=object)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement_deviates_from_native_pandas[data_index0-w-col_key1-91],"KeyError: array(['V', 'T'], dtype=object)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement_deviates_from_native_pandas[data_index1-a-col_key0-95],"KeyError: array(['T', 'T'], dtype=object)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement_deviates_from_native_pandas[data_index1-u-col_key2-90],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement_deviates_from_native_pandas[data_index1-u-col_key4-item_values4],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement_deviates_from_native_pandas[data_index1-v-col_key3-95],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_row_key_enlargement_deviates_from_native_pandas[data_index1-w-col_key1-91],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_with_item_negative[None-item_value0-True-True],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_with_item_negative[a-item_value1-True-True],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_scalar_with_item_negative[a-item_value3-True-True],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_series_and_list_like_row_key_negative[array],KeyError: array([3]),failed
tests.integ.modin.frame.test_loc,test_df_loc_set_series_and_list_like_row_key_negative[index],"KeyError: Index([3], dtype='int64')",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_series_and_list_like_row_key_negative[list],KeyError: array([3]),failed
tests.integ.modin.frame.test_loc,test_df_loc_set_series_and_list_like_row_key_negative[series],KeyError: array([3]),failed
tests.integ.modin.frame.test_loc,test_df_loc_set_series_row_key[row_key0],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [nan, 4.0, 50.0]
[right]: [nan, 4.0, 40.0]
At positional index 2, first diff: 50.0 != 40.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_series_row_key[row_key2],IndexError: index 3 is out of bounds for axis 0 with size 3,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_series_row_key[row_key3],ValueError: Incompatible indexer with DataFrame,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_series_row_key[row_key4],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [nan, 80.0, 50.0]
[right]: [nan, 70.0, 40.0]
At positional index 1, first diff: 80.0 != 70.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_series_row_key[row_key6],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [nan, 80.0, 50.0]
[right]: [nan, 70.0, 40.0]
At positional index 1, first diff: 80.0 != 70.0",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_series_value[0-True-key1],"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (50.0 %)
[index]: [0, 1]
[left]:  [1, 4]
[right]: [9, 4]",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_series_value[None-False-key0],"ValueError: could not broadcast input array from shape (2,) into shape (2, 3)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_series_value[None-False-key1],"ValueError: could not broadcast input array from shape (2,) into shape (2, 3)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_series_value[None-True-key0],"ValueError: could not broadcast input array from shape (2,) into shape (2, 3)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_series_value[None-True-key1],"ValueError: could not broadcast input array from shape (2,) into shape (2, 3)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_series_value_slice_key[0-key0],ValueError: buffer source array is read-only,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_series_value_slice_key[None-key0],ValueError: buffer source array is read-only,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_series_value_slice_key[None-key1],"ValueError: could not broadcast input array from shape (2,) into shape (2, 3)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[array-<lambda>-item2-A],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[array-<lambda>-item2-None],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[array-<lambda>-item2-X],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[array-<lambda>-item2-col_key2],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[array-<lambda>-item2-col_key3],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[array-<lambda>-item2-col_key4],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[index-<lambda>-item2-A],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[index-<lambda>-item2-None],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[index-<lambda>-item2-X],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[index-<lambda>-item2-col_key2],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[index-<lambda>-item2-col_key3],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[index-<lambda>-item2-col_key4],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[list-<lambda>-item2-A],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[list-<lambda>-item2-None],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[list-<lambda>-item2-X],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[list-<lambda>-item2-col_key2],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[list-<lambda>-item2-col_key3],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[list-<lambda>-item2-col_key4],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[tuple-<lambda>-item2-A],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[tuple-<lambda>-item2-None],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[tuple-<lambda>-item2-X],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[tuple-<lambda>-item2-col_key2],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[tuple-<lambda>-item2-col_key3],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_column_wise_list_like_item[tuple-<lambda>-item2-col_key4],"ValueError: could not broadcast input array from shape (4,) into shape (2, 1)",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_empty_key_and_empty_item_negative[item0-key1],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_empty_key_and_empty_item_negative[item0-key2],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_empty_key_and_empty_item_negative[item0-key3],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_empty_key_and_empty_item_negative[item1-key1],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_empty_key_and_empty_item_negative[item1-key2],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_empty_key_and_empty_item_negative[item1-key3],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_empty_key_and_empty_item_negative[item2-key1],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_empty_key_and_empty_item_negative[item2-key2],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_empty_key_and_empty_item_negative[item2-key3],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_empty_key_and_empty_item_negative[item3-key1],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_empty_key_and_empty_item_negative[item3-key2],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_empty_key_and_empty_item_negative[item3-key3],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_empty_key_and_list_like_item[key0],"KeyError: ""None of [[]] are in the [Index([0, 1, 2], dtype='int64')]""",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_multi_index_not_implemented,KeyError: array([1]),failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_non_matching_1d_scalar_key[None-index3-columns3--2-20],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_non_matching_1d_scalar_key[None-index3-columns3-5-0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_non_matching_1d_scalar_key[data0-None-columns0-A-7],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_non_matching_1d_scalar_key[data1-None-columns1-A-7],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[array-<lambda>-item0-col_key2],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[array-<lambda>-item0-col_key3],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[array-<lambda>-item0-col_key4],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[array-<lambda>-item0-col_key5],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[array-<lambda>-item1-col_key1],"AssertionError: Regex pattern did not match.
 Regex: 'Must have equal len keys and value when setting with an iterable'
 Input: 'could not broadcast input array from shape (2,) into shape (2, 3)'",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[array-<lambda>-item1-col_key2],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[array-<lambda>-item1-col_key3],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[array-<lambda>-item1-col_key4],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[array-<lambda>-item2-col_key0],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[array-<lambda>-item2-col_key1],"AssertionError: Regex pattern did not match.
 Regex: 'Must have equal len keys and value when setting with an iterable'
 Input: 'could not broadcast input array from shape (4,) into shape (2, 3)'",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[array-<lambda>-item2-col_key5],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[index-<lambda>-item0-col_key2],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[index-<lambda>-item0-col_key3],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[index-<lambda>-item0-col_key4],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[index-<lambda>-item0-col_key5],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[index-<lambda>-item1-col_key1],"AssertionError: Regex pattern did not match.
 Regex: 'Must have equal len keys and value when setting with an iterable'
 Input: 'could not broadcast input array from shape (2,) into shape (2, 3)'",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[index-<lambda>-item1-col_key2],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[index-<lambda>-item1-col_key3],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[index-<lambda>-item1-col_key4],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[index-<lambda>-item2-col_key0],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[index-<lambda>-item2-col_key1],"AssertionError: Regex pattern did not match.
 Regex: 'Must have equal len keys and value when setting with an iterable'
 Input: 'could not broadcast input array from shape (4,) into shape (2, 3)'",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[index-<lambda>-item2-col_key5],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[list-<lambda>-item0-col_key2],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[list-<lambda>-item0-col_key3],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[list-<lambda>-item0-col_key4],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[list-<lambda>-item0-col_key5],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[list-<lambda>-item1-col_key1],"AssertionError: Regex pattern did not match.
 Regex: 'Must have equal len keys and value when setting with an iterable'
 Input: 'could not broadcast input array from shape (2,) into shape (2, 3)'",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[list-<lambda>-item1-col_key2],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[list-<lambda>-item1-col_key3],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[list-<lambda>-item1-col_key4],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[list-<lambda>-item2-col_key0],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[list-<lambda>-item2-col_key1],"AssertionError: Regex pattern did not match.
 Regex: 'Must have equal len keys and value when setting with an iterable'
 Input: 'could not broadcast input array from shape (4,) into shape (2, 3)'",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[list-<lambda>-item2-col_key5],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[tuple-<lambda>-item0-col_key2],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[tuple-<lambda>-item0-col_key3],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[tuple-<lambda>-item0-col_key4],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[tuple-<lambda>-item0-col_key5],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[tuple-<lambda>-item1-col_key1],"AssertionError: Regex pattern did not match.
 Regex: 'Must have equal len keys and value when setting with an iterable'
 Input: 'could not broadcast input array from shape (2,) into shape (2, 3)'",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[tuple-<lambda>-item1-col_key2],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[tuple-<lambda>-item1-col_key3],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[tuple-<lambda>-item1-col_key4],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[tuple-<lambda>-item2-col_key0],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[tuple-<lambda>-item2-col_key1],"AssertionError: Regex pattern did not match.
 Regex: 'Must have equal len keys and value when setting with an iterable'
 Input: 'could not broadcast input array from shape (4,) into shape (2, 3)'",failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_row_wise_list_like_item[tuple-<lambda>-item2-col_key5],ValueError: Must have equal len keys and value when setting with an iterable,failed
tests.integ.modin.frame.test_loc,test_df_loc_set_with_scalar_item[col_key4],SNOW-1321196: pandas 2.2.1 migration,xfailed
tests.integ.modin.frame.test_loc,test_df_partial_string_indexing[<lambda>0],AssertionError,failed
tests.integ.modin.frame.test_loc,test_df_setitem_boolean_key[index1-False],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (5, 3)",failed
tests.integ.modin.frame.test_loc,test_df_setitem_boolean_key[index2-0],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (5, 3)",failed
tests.integ.modin.frame.test_loc,test_df_setitem_boolean_key[index3-0],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_setitem_boolean_key[index3-False],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_setitem_boolean_key[index4-True],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (5, 3)",failed
tests.integ.modin.frame.test_loc,test_df_setitem_boolean_key[index5-1],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_setitem_boolean_key[index5-True],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_loc,test_df_setitem_boolean_key[index6-False],"AssertionError: DataFrame.iloc[:, 0] (column name=""a"") are different

DataFrame.iloc[:, 0] (column name=""a"") values are different (33.33333 %)
[index]: [2, x, False]
[left]:  [0, 1, 0]
[right]: [0, 1, 99]",failed
tests.integ.modin.frame.test_loc,test_df_setitem_boolean_key[index6-True],"AssertionError: DataFrame.iloc[:, 0] (column name=""a"") are different

DataFrame.iloc[:, 0] (column name=""a"") values are different (66.66667 %)
[index]: [2, x, True]
[left]:  [99, 1, 0]
[right]: [0, 1, 99]",failed
tests.integ.modin.frame.test_loc,test_empty_df_loc_set_scalar,ValueError: cannot set a frame with no defined columns,failed
tests.integ.modin.frame.test_loc,test_empty_df_loc_set_series_and_list[native_item0],"AssertionError: DataFrame.index are different

DataFrame.index values are different (100.0 %)
[left]:  RangeIndex(start=0, stop=3, step=1)
[right]: Index([None, None, None], dtype='object')
At positional index 0, first diff: 0 != None",failed
tests.integ.modin.frame.test_loc,test_empty_df_loc_set_series_and_list[native_item1],"AssertionError: DataFrame.index are different

DataFrame.index values are different (100.0 %)
[left]:  RangeIndex(start=0, stop=3, step=1)
[right]: Index([None, None, None], dtype='object')
At positional index 0, first diff: 0 != None",failed
tests.integ.modin.frame.test_loc,test_empty_df_loc_set_series_and_list[native_item3],"AssertionError: DataFrame.index are different

DataFrame.index values are different (100.0 %)
[left]:  RangeIndex(start=0, stop=3, step=1)
[right]: Index(['a', 'b', 'c'], dtype='object')
At positional index 0, first diff: 0 != a",failed
tests.integ.modin.frame.test_loc,test_empty_df_loc_set_series_and_list[native_item5],"AssertionError: DataFrame.index are different

DataFrame.index values are different (100.0 %)
[left]:  RangeIndex(start=0, stop=4, step=1)
[right]: Index(['a', None, None, 'd'], dtype='object')
At positional index 0, first diff: 0 != a",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_boolean_series_col_key,KeyError: False,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_boolean_series_row_key,KeyError: False,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_col_key[fizz1-None],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_col_key[key4-None],"AssertionError: DataFrame.columns are different

DataFrame.columns classes are different
[left]:  Index(['buzz1'], dtype='object', name='buzz')
[right]: MultiIndex([('fizz1', 'buzz1')],
           names=['fizz', 'buzz'])",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_col_key[key5-None],KeyError: 'fizz2',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_col_key[key7-None],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_col_key[key8-None],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_col_key[key9-None],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_row_key[key10-AssertionError],"assert False
 +  where False = fizz           fizz1 fizz2\nbuzz           buzz1 buzz2\nmark i mark v     12     2\n       mark vi     0     4.empty",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_row_key[key4-None],"AssertionError: DataFrame.index are different

DataFrame.index levels are different
[left]:  1, Index(['mark v', 'mark vi'], dtype='object')
[right]: 2, MultiIndex([('mark i',  'mark v'),
            ('mark i', 'mark vi')],
           )",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_row_key[key5-None],"KeyError: ['viper', 'mark i', 'viper']",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_row_key[key6-KeyError],KeyError: 'invalid',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_row_key[key7-None],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_row_key[key8-None],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_row_key[key9-None],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_row_key[mark ii-KeyError],KeyError: 'mark ii',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col1-mark i],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col1-row10],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col1-row11],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col1-row12],AssertionError: Got type: <class 'numpy.int64'>,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col1-row13],AssertionError: Got type: <class 'numpy.int64'>,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col1-row14],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col1-row1],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col1-row2],AssertionError: Got type: <class 'numpy.int64'>,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col1-row3],"AssertionError: DataFrame.index are different

DataFrame.index levels are different
[left]:  1, Index(['mark v', 'mark vi'], dtype='object')
[right]: 2, MultiIndex([('mark i',  'mark v'),
            ('mark i', 'mark vi')],
           )",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col1-row4],"KeyError: ['viper', 'mark i', 'viper']",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col1-row5],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col1-row6],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col1-row7],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col1-row8],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col1-row9],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col10-mark i],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col10-row10],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col10-row11],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col10-row12],AssertionError: Got type: <class 'numpy.int64'>,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col10-row13],AssertionError: Got type: <class 'numpy.int64'>,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col10-row14],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col10-row1],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col10-row2],AssertionError: Got type: <class 'numpy.int64'>,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col10-row3],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col10-row4],"KeyError: ['viper', 'mark i', 'viper']",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col10-row5],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col10-row6],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col10-row7],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col10-row8],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col10-row9],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col11-mark i],"AssertionError: DataFrame.index are different

DataFrame.index levels are different
[left]:  2, MultiIndex([('mark i',  'mark v'),
            ('mark i', 'mark vi')],
           )
[right]: 1, Index(['mark v', 'mark vi'], dtype='object')",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col11-row12],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col11-row13],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col11-row1],"AssertionError: DataFrame.index are different

DataFrame.index levels are different
[left]:  2, MultiIndex([('mark i',  'mark v'),
            ('mark i', 'mark vi')],
           )
[right]: 1, Index(['mark v', 'mark vi'], dtype='object')",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col11-row4],"KeyError: ['viper', 'mark i', 'viper']",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col11-row5],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col11-row6],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col11-row7],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col11-row8],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col11-row9],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 2)
[right]: (6, 2)",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col12-mark i],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col12-row10],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col12-row11],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col12-row12],AssertionError: Got type: <class 'numpy.int64'>,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col12-row13],AssertionError: Got type: <class 'numpy.int64'>,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col12-row14],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col12-row1],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col12-row2],AssertionError: Got type: <class 'numpy.int64'>,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col12-row3],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col12-row4],"KeyError: ['viper', 'mark i', 'viper']",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col12-row5],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col12-row6],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col12-row7],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col12-row8],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col12-row9],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col13-mark i],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col13-row10],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col13-row11],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col13-row12],AssertionError: Got type: <class 'numpy.int64'>,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col13-row13],AssertionError: Got type: <class 'numpy.int64'>,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col13-row14],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col13-row1],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col13-row2],AssertionError: Got type: <class 'numpy.int64'>,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col13-row3],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col13-row4],"KeyError: ['viper', 'mark i', 'viper']",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col13-row5],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col13-row6],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col13-row7],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col13-row8],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col13-row9],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col2-mark i],"AssertionError: Series.index are different

Series.index levels are different
[left]:  2, MultiIndex([('mark i',  'mark v'),
            ('mark i', 'mark vi')],
           )
[right]: 1, Index(['mark v', 'mark vi'], dtype='object')",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col2-row12],AssertionError: Got type: <class 'numpy.int64'>,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col2-row13],AssertionError: Got type: <class 'numpy.int64'>,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col2-row1],"AssertionError: Series.index are different

Series.index levels are different
[left]:  2, MultiIndex([('mark i',  'mark v'),
            ('mark i', 'mark vi')],
           )
[right]: 1, Index(['mark v', 'mark vi'], dtype='object')",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col2-row4],"KeyError: ['viper', 'mark i', 'viper']",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col2-row5],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col2-row6],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col2-row7],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col2-row8],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col2-row9],"AssertionError: Series are different

Series length are different
[left]:  0, MultiIndex([], )
[right]: 6, MultiIndex([(    'mark i',   'mark v'),
            (    'mark i',  'mark vi'),
            ('sidewinder',   'mark i'),
            ('sidewinder',  'mark ii'),
            (     'viper',  'mark ii'),
            (     'viper', 'mark iii')],
           )",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col3-mark i],"AssertionError: DataFrame.columns are different

DataFrame.columns classes are different
[left]:  Index(['buzz1'], dtype='object', name='buzz')
[right]: MultiIndex([('fizz1', 'buzz1')],
           names=['fizz', 'buzz'])",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col3-row12],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col3-row13],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col3-row14],"AssertionError: DataFrame.columns are different

DataFrame.columns classes are different
[left]:  Index(['buzz1'], dtype='object', name='buzz')
[right]: MultiIndex([('fizz1', 'buzz1')],
           names=['fizz', 'buzz'])",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col3-row1],"AssertionError: DataFrame.columns are different

DataFrame.columns classes are different
[left]:  Index(['buzz1'], dtype='object', name='buzz')
[right]: MultiIndex([('fizz1', 'buzz1')],
           names=['fizz', 'buzz'])",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col3-row3],"AssertionError: DataFrame.index are different

DataFrame.index levels are different
[left]:  1, Index(['mark v', 'mark vi'], dtype='object')
[right]: 2, MultiIndex([('mark i',  'mark v'),
            ('mark i', 'mark vi')],
           )",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col3-row4],"KeyError: ['viper', 'mark i', 'viper']",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col3-row5],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col3-row6],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col3-row7],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col3-row8],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col3-row9],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 1)
[right]: (6, 1)",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col4-mark i],KeyError: 'fizz2',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col4-row10],KeyError: 'fizz2',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col4-row11],KeyError: 'fizz2',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col4-row12],KeyError: 'fizz2',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col4-row13],KeyError: 'fizz2',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col4-row14],KeyError: 'fizz2',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col4-row1],KeyError: 'fizz2',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col4-row2],KeyError: 'fizz2',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col4-row3],KeyError: 'fizz2',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col4-row4],"KeyError: ['viper', 'mark i', 'viper']",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col4-row5],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col4-row6],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col4-row7],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col4-row8],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col4-row9],KeyError: 'fizz2',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col5-mark i],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col5-row10],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col5-row11],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col5-row12],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col5-row13],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col5-row14],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col5-row1],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col5-row2],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col5-row3],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col5-row4],"KeyError: ['viper', 'mark i', 'viper']",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col5-row5],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col5-row6],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col5-row7],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col5-row8],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col5-row9],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col6-mark i],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col6-row10],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col6-row11],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col6-row12],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col6-row13],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col6-row14],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col6-row1],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col6-row2],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col6-row3],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col6-row4],"KeyError: ['viper', 'mark i', 'viper']",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col6-row5],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col6-row6],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col6-row7],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col6-row8],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col6-row9],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col7-mark i],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col7-row10],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col7-row11],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col7-row12],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col7-row13],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col7-row14],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col7-row1],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col7-row2],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col7-row3],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col7-row4],"KeyError: ['viper', 'mark i', 'viper']",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col7-row5],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col7-row6],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col7-row7],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col7-row8],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col7-row9],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col8-mark i],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col8-row10],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col8-row11],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col8-row12],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col8-row13],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col8-row14],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col8-row1],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col8-row2],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col8-row3],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col8-row4],"KeyError: ['viper', 'mark i', 'viper']",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col8-row5],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col8-row6],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col8-row7],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col8-row8],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col8-row9],KeyError: 'buzz1',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col9-mark i],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 0)
[right]: (2, 2)",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col9-row10],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 0)
[right]: (2, 2)",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col9-row11],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (6, 0)
[right]: (6, 2)",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col9-row12],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col9-row13],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col9-row14],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (6, 0)
[right]: (6, 2)",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col9-row1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 0)
[right]: (2, 2)",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col9-row2],"AssertionError: Series are different

Series length are different
[left]:  0, MultiIndex([], names=['fizz', 'buzz'])
[right]: 2, MultiIndex([('fizz1', 'buzz1'),
            ('fizz2', 'buzz2')],
           names=['fizz', 'buzz'])",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col9-row3],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 0)
[right]: (2, 2)",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col9-row4],"KeyError: ['viper', 'mark i', 'viper']",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col9-row5],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col9-row6],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col9-row7],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col9-row8],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[col9-row9],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 0)
[right]: (6, 2)",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[fizz1-mark i],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[fizz1-row10],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[fizz1-row11],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[fizz1-row12],AssertionError: Got type: <class 'numpy.int64'>,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[fizz1-row13],AssertionError: Got type: <class 'numpy.int64'>,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[fizz1-row14],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[fizz1-row1],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[fizz1-row2],AssertionError: Got type: <class 'numpy.int64'>,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[fizz1-row3],AssertionError,failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[fizz1-row4],"KeyError: ['viper', 'mark i', 'viper']",failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[fizz1-row5],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[fizz1-row6],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[fizz1-row7],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[fizz1-row8],KeyError: 'mark vi',failed
tests.integ.modin.frame.test_loc,test_mi_df_loc_get_non_boolean_list_tuple_key[fizz1-row9],AssertionError,failed
tests.integ.modin.frame.test_loc,test_raise_set_cell_with_list_like_value_error,"ValueError: could not broadcast input array from shape (2,) into shape (1, 1)",failed
tests.integ.modin.frame.test_loc,test_series_loc_set_with_empty_key_and_scalar_item[key0],"KeyError: ""None of [[]] are in the [Index([0, 1, 2], dtype='int64')]""",failed
tests.integ.modin.frame.test_loc,test_series_loc_set_with_empty_key_and_scalar_item[key1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_loc,test_series_loc_set_with_empty_key_and_scalar_item[key2],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_loc,test_series_loc_set_with_empty_key_and_scalar_item[key3],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_mask,test_dataframe_mask_cond_is_none_negative,AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'ValueError'>,failed
tests.integ.modin.frame.test_mask,test_dataframe_mask_cond_non_boolean_negative_test,TypeError: bad operand type for unary ~: 'str',failed
tests.integ.modin.frame.test_mask,test_dataframe_mask_not_implemented,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_mask,test_dataframe_mask_with_dataframe_cond_single_index_different_names_2,"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['B']",failed
tests.integ.modin.frame.test_mask,test_dataframe_mask_with_duplicated_columns_negative[None-others_column_names1-Multiple columns are mapped to each label in ['C'] in DataFrame other],AssertionError: exception type <class 'pandas.errors.InvalidIndexError'> does not match with expected type <class 'ValueError'>,failed
tests.integ.modin.frame.test_mask,test_dataframe_mask_with_duplicated_columns_negative[cond_column_names0-None-Multiple columns are mapped to each label in ['A'] in DataFrame condition],"AssertionError: Regex pattern did not match.
 Regex: ""Multiple\\ columns\\ are\\ mapped\\ to\\ each\\ label\\ in\\ \\['A'\\]\\ in\\ DataFrame\\ condition""
 Input: 'cannot reindex on an axis with duplicate labels'",failed
tests.integ.modin.frame.test_mask,test_dataframe_mask_with_duplicated_columns_negative[cond_column_names2-others_column_names2-Multiple columns are mapped to each label in ['C'] in DataFrame condition],"AssertionError: Regex pattern did not match.
 Regex: ""Multiple\\ columns\\ are\\ mapped\\ to\\ each\\ label\\ in\\ \\['C'\\]\\ in\\ DataFrame\\ condition""
 Input: 'cannot reindex on an axis with duplicate labels'",failed
tests.integ.modin.frame.test_mask,test_dataframe_mask_with_duplicated_index_aligned[10-cond_frame0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_mask,test_dataframe_mask_with_duplicated_index_aligned[10-cond_frame1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_mask,test_dataframe_mask_with_duplicated_index_aligned[other1-cond_frame0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_mask,test_dataframe_mask_with_duplicated_index_aligned[other1-cond_frame1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_mask,test_dataframe_mask_with_duplicated_index_aligned[other2-cond_frame0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_mask,test_dataframe_mask_with_duplicated_index_aligned[other2-cond_frame1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_mask,test_dataframe_mask_with_duplicated_index_unaligned,pandas.errors.InvalidIndexError,failed
tests.integ.modin.frame.test_mask,test_mask_series_other_axis_not_specified,"AssertionError: Regex pattern did not match.
 Regex: 'df.mask requires an axis parameter \\(0 or 1\\) when given a Series'
 Input: 'Must specify axis=0 or 1'",failed
tests.integ.modin.frame.test_melt,test_melt_general_path[data0],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_general_path[data10],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_general_path[data11],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_general_path[data12],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_general_path[data13],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_general_path[data14],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_general_path[data15],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_general_path[data16],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_general_path[data17],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_general_path[data18],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_general_path[data19],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_general_path[data1],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_general_path[data2],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_general_path[data3],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_general_path[data4],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_general_path[data5],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_general_path[data6],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_general_path[data7],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_general_path[data8],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_general_path[data9],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_simple_path[data0],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_simple_path[data10],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_simple_path[data11],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_simple_path[data12],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_simple_path[data13],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_simple_path[data14],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_simple_path[data15],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_simple_path[data16],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_simple_path[data17],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_simple_path[data18],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_simple_path[data19],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_simple_path[data1],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_simple_path[data2],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_simple_path[data3],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_simple_path[data4],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_simple_path[data5],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_simple_path[data6],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_simple_path[data7],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_simple_path[data8],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_melt_simple_path[data9],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.frame.test_melt,test_multi_column_melt,ValueError: value_vars must be a list of tuples when columns are a MultiIndex,failed
tests.integ.modin.frame.test_memory_usage,test_memory_usage,assert 8 == 0,failed
tests.integ.modin.frame.test_merge,test_join_type_mismatch[index20-index11],"AssertionError: DataFrame.index are different

DataFrame.index values are different (66.66667 %)
[left]:  Index([1.5, 8.0, 7.0], dtype='float64')
[right]: Index([1.5, 7.0, 8.0], dtype='float64')
At positional index 1, first diff: 8.0 != 7.0",failed
tests.integ.modin.frame.test_merge,test_join_type_mismatch[index20-index12],pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects,failed
tests.integ.modin.frame.test_merge,test_join_type_mismatch[index21-index10],"AssertionError: DataFrame.index are different

DataFrame.index values are different (100.0 %)
[left]:  Index([3.0, 4.0, 1.5], dtype='float64')
[right]: Index([1.5, 3.0, 4.0], dtype='float64')
At positional index 0, first diff: 3.0 != 1.5",failed
tests.integ.modin.frame.test_merge,test_join_type_mismatch[index21-index11],"AssertionError: DataFrame.index are different

DataFrame.index values are different (66.66667 %)
[left]:  Index([1.5, 8.0, 3.0], dtype='float64')
[right]: Index([1.5, 3.0, 8.0], dtype='float64')
At positional index 1, first diff: 8.0 != 3.0",failed
tests.integ.modin.frame.test_merge,test_join_type_mismatch[index21-index12],pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects,failed
tests.integ.modin.frame.test_merge,test_join_type_mismatch[index22-index10],pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects,failed
tests.integ.modin.frame.test_merge,test_join_type_mismatch[index22-index11],pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects,failed
tests.integ.modin.frame.test_merge,test_join_type_mismatch[index22-index12],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 2)
[right]: (4, 2)",failed
tests.integ.modin.frame.test_merge,test_join_type_mismatch_diff_with_native_pandas[index10-index20-expected_res0],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 2)
[right]: (3, 2)",failed
tests.integ.modin.frame.test_merge,test_join_type_mismatch_diff_with_native_pandas[index11-index21-expected_res1],"AssertionError: DataFrame.index are different

Attribute ""inferred_type"" are different
[left]:  mixed
[right]: string",failed
tests.integ.modin.frame.test_merge,test_join_type_mismatch_negative[index10-index20],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_merge,test_join_type_mismatch_negative[index11-index21],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_merge,test_join_type_mismatch_negative[index12-index22],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_merge,test_merge_different_index_names,KeyError: 'd',failed
tests.integ.modin.frame.test_merge,test_merge_empty_with_non_empty[inner-False-kwargs2],KeyError: 'i',failed
tests.integ.modin.frame.test_merge,test_merge_empty_with_non_empty[inner-False-kwargs3],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_empty_with_non_empty[inner-True-kwargs2],KeyError: 'i',failed
tests.integ.modin.frame.test_merge,test_merge_empty_with_non_empty[inner-True-kwargs3],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_empty_with_non_empty[left-False-kwargs2],KeyError: 'i',failed
tests.integ.modin.frame.test_merge,test_merge_empty_with_non_empty[left-False-kwargs3],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_empty_with_non_empty[left-True-kwargs2],KeyError: 'i',failed
tests.integ.modin.frame.test_merge,test_merge_empty_with_non_empty[left-True-kwargs3],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_empty_with_non_empty[outer-False-kwargs2],KeyError: 'i',failed
tests.integ.modin.frame.test_merge,test_merge_empty_with_non_empty[outer-False-kwargs3],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_empty_with_non_empty[outer-True-kwargs2],KeyError: 'i',failed
tests.integ.modin.frame.test_merge,test_merge_empty_with_non_empty[outer-True-kwargs3],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_empty_with_non_empty[right-False-kwargs2],KeyError: 'i',failed
tests.integ.modin.frame.test_merge,test_merge_empty_with_non_empty[right-False-kwargs3],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_empty_with_non_empty[right-True-kwargs2],KeyError: 'i',failed
tests.integ.modin.frame.test_merge,test_merge_empty_with_non_empty[right-True-kwargs3],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_invalid_how_negative,UnboundLocalError: local variable 'lidx' referenced before assignment,failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_index_multi_to_single[inner-False],ValueError: cannot join with no overlapping index names,failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_index_multi_to_single[inner-True],ValueError: cannot join with no overlapping index names,failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_index_multi_to_single[left-False],ValueError: cannot join with no overlapping index names,failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_index_multi_to_single[left-True],ValueError: cannot join with no overlapping index names,failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_index_multi_to_single[outer-False],"NotImplementedError: Can only union MultiIndex with MultiIndex or Index of tuples, try mi.to_flat_index().union(other) instead.",failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_index_multi_to_single[outer-True],"NotImplementedError: Can only union MultiIndex with MultiIndex or Index of tuples, try mi.to_flat_index().union(other) instead.",failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_index_multi_to_single[right-False],ValueError: cannot join with no overlapping index names,failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_index_multi_to_single[right-True],ValueError: cannot join with no overlapping index names,failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_index_no_common_names_negative,Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_index_none_as_common_label_negative,Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_index_single_to_multi[inner-True],ValueError: cannot join with no overlapping index names,failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_index_single_to_multi[left-False],ValueError: cannot join with no overlapping index names,failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_index_single_to_multi[left-True],ValueError: cannot join with no overlapping index names,failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_index_single_to_multi[outer-False],"AssertionError: assert FrozenList([None]) == ['right_i', 'left_i']
  At index 0 diff: None != 'right_i'
  Right contains one more item: 'left_i'
  Full diff:
  - ['right_i', 'left_i']
  + FrozenList([None])",failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_index_single_to_multi[outer-True],"AssertionError: assert FrozenList([None]) == ['right_i', 'left_i']
  At index 0 diff: None != 'right_i'
  Right contains one more item: 'left_i'
  Full diff:
  - ['right_i', 'left_i']
  + FrozenList([None])",failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_index_single_to_multi[right-False],ValueError: cannot join with no overlapping index names,failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_index_single_to_multi[right-True],ValueError: cannot join with no overlapping index names,failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[inner-False-A],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[inner-False-B],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[inner-False-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[inner-True-A],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[inner-True-B],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[inner-True-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[left-False-A],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[left-False-B],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[left-False-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[left-True-A],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[left-True-B],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[left-True-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[outer-False-A],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[outer-False-B],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[outer-False-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[outer-True-A],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[outer-True-B],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[outer-True-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[right-False-A],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[right-False-B],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[right-False-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[right-True-A],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[right-True-B],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_index_right_on[right-True-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[inner-False-A],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[inner-False-B],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[inner-False-left_i],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[inner-True-A],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[inner-True-B],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[inner-True-left_i],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[left-False-A],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[left-False-B],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[left-False-left_i],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[left-True-A],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[left-True-B],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[left-True-left_i],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[outer-False-A],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[outer-False-B],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[outer-False-left_i],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[outer-True-A],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[outer-True-B],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[outer-True-left_i],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[right-False-A],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[right-False-B],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[right-False-left_i],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[right-True-A],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[right-True-B],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_index[right-True-left_i],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[inner-False-B-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[inner-False-left_i-A],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[inner-False-left_i-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[inner-False-left_on9-right_on9],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[inner-True-B-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[inner-True-left_i-A],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[inner-True-left_i-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[inner-True-left_on9-right_on9],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[left-False-B-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[left-False-left_i-A],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[left-False-left_i-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[left-False-left_on9-right_on9],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[left-True-B-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[left-True-left_i-A],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[left-True-left_i-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[left-True-left_on9-right_on9],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[outer-False-B-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[outer-False-left_i-A],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[outer-False-left_i-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[outer-False-left_on9-right_on9],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[outer-True-B-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[outer-True-left_i-A],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[outer-True-left_i-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[outer-True-left_on9-right_on9],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[right-False-B-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[right-False-left_i-A],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[right-False-left_i-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[right-False-left_on9-right_on9],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[right-True-B-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[right-True-left_i-A],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[right-True-left_i-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_left_on_right_on[right-True-left_on9-right_on9],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_mis_specified_negative[None-None-None-True-right_index12],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_merge,test_merge_mis_specified_negative[None-None-None-left_index11-True],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_merge,test_merge_non_empty_with_empty[inner-False-kwargs2],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_non_empty_with_empty[inner-False-kwargs3],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_non_empty_with_empty[inner-True-kwargs2],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_non_empty_with_empty[inner-True-kwargs3],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_non_empty_with_empty[left-False-kwargs2],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_non_empty_with_empty[left-False-kwargs3],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_non_empty_with_empty[left-True-kwargs2],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_non_empty_with_empty[left-True-kwargs3],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_non_empty_with_empty[outer-False-kwargs2],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_non_empty_with_empty[outer-False-kwargs3],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_non_empty_with_empty[outer-True-kwargs2],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_non_empty_with_empty[outer-True-kwargs3],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_non_empty_with_empty[right-False-kwargs2],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_non_empty_with_empty[right-False-kwargs3],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_non_empty_with_empty[right-True-kwargs2],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_non_empty_with_empty[right-True-kwargs3],KeyError: 'None of [None] are in the columns',failed
tests.integ.modin.frame.test_merge,test_merge_on_array_like_keys_length_mismatch_negative[left_on0],"AssertionError: Regex pattern did not match.
 Regex: 'array-like join key must be of same length as dataframe'
 Input: 'The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()'",failed
tests.integ.modin.frame.test_merge,test_merge_on_array_like_keys_length_mismatch_negative[left_on1],"AssertionError: Regex pattern did not match.
 Regex: 'array-like join key must be of same length as dataframe'
 Input: 'The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()'",failed
tests.integ.modin.frame.test_merge,test_merge_on_index_columns[inner-False-left_i],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_on_index_columns[inner-False-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_on_index_columns[inner-True-left_i],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_on_index_columns[inner-True-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_on_index_columns[left-False-left_i],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_on_index_columns[left-False-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_on_index_columns[left-True-left_i],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_on_index_columns[left-True-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_on_index_columns[outer-False-left_i],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_on_index_columns[outer-False-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_on_index_columns[outer-True-left_i],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_on_index_columns[outer-True-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_on_index_columns[right-False-left_i],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_on_index_columns[right-False-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_on_index_columns[right-True-left_i],KeyError: 'left_i',failed
tests.integ.modin.frame.test_merge,test_merge_on_index_columns[right-True-right_i],KeyError: 'right_i',failed
tests.integ.modin.frame.test_merge,test_merge_on_index_multiindex_common_labels[outer-False],"AssertionError: MultiIndex level [0] are different

MultiIndex level [0] values are different (60.0 %)
[left]:  Index([0, 1, 3, 2, 4, 8, 4, 2, 9, 1], dtype='int64')
[right]: Index([0, 1, 1, 2, 2, 3, 4, 4, 8, 9], dtype='int64')
At positional index 2, first diff: 3 != 1",failed
tests.integ.modin.frame.test_merge,test_merge_on_index_multiindex_common_labels_with_none[inner-False],pandas bug: https://github.com/pandas-dev/pandas/issues/58721,xfailed
tests.integ.modin.frame.test_merge,test_merge_on_index_multiindex_common_labels_with_none[inner-True],pandas bug: https://github.com/pandas-dev/pandas/issues/58721,xfailed
tests.integ.modin.frame.test_merge,test_merge_on_index_multiindex_common_labels_with_none[left-False],pandas bug: https://github.com/pandas-dev/pandas/issues/58721,xfailed
tests.integ.modin.frame.test_merge,test_merge_on_index_multiindex_common_labels_with_none[left-True],pandas bug: https://github.com/pandas-dev/pandas/issues/58721,xfailed
tests.integ.modin.frame.test_merge,test_merge_on_index_multiindex_common_labels_with_none[outer-False],pandas bug: https://github.com/pandas-dev/pandas/issues/58721,xfailed
tests.integ.modin.frame.test_merge,test_merge_on_index_multiindex_common_labels_with_none[outer-True],pandas bug: https://github.com/pandas-dev/pandas/issues/58721,xfailed
tests.integ.modin.frame.test_merge,test_merge_on_index_multiindex_common_labels_with_none[right-False],pandas bug: https://github.com/pandas-dev/pandas/issues/58721,xfailed
tests.integ.modin.frame.test_merge,test_merge_on_index_multiindex_common_labels_with_none[right-True],pandas bug: https://github.com/pandas-dev/pandas/issues/58721,xfailed
tests.integ.modin.frame.test_merge,test_merge_on_index_multiindex_equal_labels[inner-False],pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects,failed
tests.integ.modin.frame.test_merge,test_merge_on_index_multiindex_equal_labels[inner-True],pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects,failed
tests.integ.modin.frame.test_merge,test_merge_on_index_multiindex_equal_labels[outer-False],pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects,failed
tests.integ.modin.frame.test_merge,test_merge_on_index_multiindex_equal_labels[outer-True],pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects,failed
tests.integ.modin.frame.test_merge,test_merge_on_index_single_index[outer-False],"AssertionError: DataFrame.index are different

DataFrame.index values are different (28.57143 %)
[left]:  Index([0, 1, 3, 2, 4, 8, 9], dtype='int64')
[right]: Index([0, 1, 2, 3, 4, 8, 9], dtype='int64')
At positional index 2, first diff: 3 != 2",failed
tests.integ.modin.frame.test_merge,test_merge_timedelta_how[kwargs3],"AssertionError: Regex pattern did not match.
 Regex: ""You are trying to merge on LongType and TimedeltaType columns for key 'c'. If you wish to proceed you should use pd.concat""
 Input: ""You are trying to merge on int64 and timedelta64[ns] columns for key 'c'. If you wish to proceed you should use pd.concat""",failed
tests.integ.modin.frame.test_merge,test_merge_validate[lvalues0-rvalues0-1:1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_merge,test_merge_validate[lvalues1-rvalues1-1:m],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_merge,test_merge_validate[lvalues2-rvalues2-m:1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_merge,test_merge_validate[lvalues3-rvalues3-m:m],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_merge,test_merge_validate[lvalues4-rvalues4-1:m],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_merge,test_merge_validate[lvalues5-rvalues5-m:m],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_merge,test_merge_validate[lvalues6-rvalues6-m:1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_merge,test_merge_validate[lvalues7-rvalues7-m:m],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_merge,test_merge_validate[lvalues8-rvalues8-m:m],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_merge,test_merge_validate_negative[lvalues0-rvalues0-1:1],pandas.errors.MergeError: Merge keys are not unique in right dataset; not a one-to-one merge,failed
tests.integ.modin.frame.test_merge,test_merge_validate_negative[lvalues1-rvalues1-m:1],pandas.errors.MergeError: Merge keys are not unique in right dataset; not a many-to-one merge,failed
tests.integ.modin.frame.test_merge,test_merge_validate_negative[lvalues2-rvalues2-1:1],pandas.errors.MergeError: Merge keys are not unique in left dataset; not a one-to-one merge,failed
tests.integ.modin.frame.test_merge,test_merge_validate_negative[lvalues3-rvalues3-1:m],pandas.errors.MergeError: Merge keys are not unique in left dataset; not a one-to-many merge,failed
tests.integ.modin.frame.test_merge,test_merge_validate_negative[lvalues4-rvalues4-1:1],pandas.errors.MergeError: Merge keys are not unique in either left or right dataset; not a one-to-one merge,failed
tests.integ.modin.frame.test_merge,test_merge_validate_negative[lvalues5-rvalues5-1:m],pandas.errors.MergeError: Merge keys are not unique in left dataset; not a one-to-many merge,failed
tests.integ.modin.frame.test_merge,test_merge_validate_negative[lvalues6-rvalues6-m:1],pandas.errors.MergeError: Merge keys are not unique in right dataset; not a many-to-one merge,failed
tests.integ.modin.frame.test_merge,test_merge_with_indicator[inner],"AssertionError: Categorical Expected type <class 'pandas.core.arrays.categorical.Categorical'>, found <class 'numpy.ndarray'> instead",failed
tests.integ.modin.frame.test_merge,test_merge_with_indicator[left],"AssertionError: Categorical Expected type <class 'pandas.core.arrays.categorical.Categorical'>, found <class 'numpy.ndarray'> instead",failed
tests.integ.modin.frame.test_merge,test_merge_with_indicator[outer],"AssertionError: Categorical Expected type <class 'pandas.core.arrays.categorical.Categorical'>, found <class 'numpy.ndarray'> instead",failed
tests.integ.modin.frame.test_merge,test_merge_with_indicator[right],"AssertionError: Categorical Expected type <class 'pandas.core.arrays.categorical.Categorical'>, found <class 'numpy.ndarray'> instead",failed
tests.integ.modin.frame.test_merge,test_merge_with_indicator_cross_join,"AssertionError: Categorical Expected type <class 'pandas.core.arrays.categorical.Categorical'>, found <class 'numpy.ndarray'> instead",failed
tests.integ.modin.frame.test_merge,test_merge_with_indicator_explicit_name,"AssertionError: Categorical Expected type <class 'pandas.core.arrays.categorical.Categorical'>, found <class 'numpy.ndarray'> instead",failed
tests.integ.modin.frame.test_nlargest_nsmallest,test_nlargest_nsmallest_all_keep_not_implemented[nlargest],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_nlargest_nsmallest,test_nlargest_nsmallest_all_keep_not_implemented[nsmallest],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_nlargest_nsmallest,test_nlargest_nsmallest_duplicate_labels[nlargest],AttributeError: 'DataFrame' object has no attribute 'dtype'. Did you mean: 'dtypes'?,failed
tests.integ.modin.frame.test_nlargest_nsmallest,test_nlargest_nsmallest_duplicate_labels[nsmallest],AttributeError: 'DataFrame' object has no attribute 'dtype'. Did you mean: 'dtypes'?,failed
tests.integ.modin.frame.test_nlargest_nsmallest,test_nlargest_nsmallest_invalid_label[nlargest-None],AssertionError: exception type <class 'AttributeError'> does not match with expected type <class 'KeyError'>,failed
tests.integ.modin.frame.test_nlargest_nsmallest,test_nlargest_nsmallest_invalid_label[nsmallest-None],AssertionError: exception type <class 'AttributeError'> does not match with expected type <class 'KeyError'>,failed
tests.integ.modin.frame.test_nlargest_nsmallest,test_nlargest_nsmallest_non_numeric_types[nlargest-data0],"TypeError: Column 'A' has dtype object, cannot use method 'nlargest' with this dtype",failed
tests.integ.modin.frame.test_nlargest_nsmallest,test_nlargest_nsmallest_non_numeric_types[nlargest-data1],TypeError: '<' not supported between instances of 'str' and 'float',failed
tests.integ.modin.frame.test_nlargest_nsmallest,test_nlargest_nsmallest_non_numeric_types[nsmallest-data0],"TypeError: Column 'A' has dtype object, cannot use method 'nsmallest' with this dtype",failed
tests.integ.modin.frame.test_nlargest_nsmallest,test_nlargest_nsmallest_non_numeric_types[nsmallest-data1],TypeError: '<' not supported between instances of 'str' and 'int',failed
tests.integ.modin.frame.test_nunique,test_dataframe_unique_axis1_not_implemented[False],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_nunique,test_dataframe_unique_axis1_not_implemented[True],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_nunique,test_dataframe_unique_dropna_negative,Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[None--1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[None-0],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[None-1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[None-2],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[_NoDefault.no_default--1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[_NoDefault.no_default-0],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[_NoDefault.no_default-1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[_NoDefault.no_default-2],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[backfill--1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[backfill-0],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[backfill-1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[backfill-2],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[bfill--1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[bfill-0],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[bfill-1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[bfill-2],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[ffill--1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[ffill-0],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[ffill-1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[ffill-2],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[pad--1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[pad-0],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[pad-1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_0_with_timedelta[pad-2],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_and_non_timedelta_column_invalid[data0],"AssertionError: Regex pattern did not match.
 Regex: 'pct_change\\(axis=1\\)\\ is\\ invalid\\ when\\ one\\ column\\ is\\ Timedelta\\ another\\ column\\ is\\ not\\.'
 Input: 'unsupported operand type for /: got timedelta64[ns]'",failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_and_non_timedelta_column_invalid[data1],"AssertionError: Regex pattern did not match.
 Regex: 'pct_change\\(axis=1\\)\\ is\\ invalid\\ when\\ one\\ column\\ is\\ Timedelta\\ another\\ column\\ is\\ not\\.'
 Input: 'unsupported operand type for /: got timedelta64[ns]'",failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[None--1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[None-0],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[None-1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[None-2],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[_NoDefault.no_default--1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[_NoDefault.no_default-0],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[_NoDefault.no_default-1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[_NoDefault.no_default-2],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[backfill--1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[backfill-0],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[backfill-1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[backfill-2],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[bfill--1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[bfill-0],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[bfill-1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[bfill-2],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[ffill--1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[ffill-0],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[ffill-1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[ffill-2],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[pad--1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[pad-0],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[pad-1],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_axis_1_with_timedelta_columns[pad-2],TypeError: unsupported operand type for /: got timedelta64[ns],failed
tests.integ.modin.frame.test_pct_change,test_pct_change_bad_dtypes[data0],"AssertionError: Regex pattern did not match.
 Regex: 'cannot perform pct_change on non-numeric column with dtype'
 Input: 'unsupported operand type for /: got object'",failed
tests.integ.modin.frame.test_pct_change,test_pct_change_bad_dtypes[data1],"AssertionError: Regex pattern did not match.
 Regex: 'cannot perform pct_change on non-numeric column with dtype'
 Input: 'unsupported operand type for /: got object'",failed
tests.integ.modin.frame.test_pct_change,test_pct_change_bad_periods,ValueError: periods must be an int. got <class 'str'> instead,failed
tests.integ.modin.frame.test_pct_change,test_pct_change_simple[columns-_NoDefault.no_default--1-nonulls],"Failed: DID NOT WARN. No warnings of type (<class 'FutureWarning'>,) were emitted.
The list of emitted warnings is: [].",failed
tests.integ.modin.frame.test_pct_change,test_pct_change_simple[columns-_NoDefault.no_default-0-nonulls],"Failed: DID NOT WARN. No warnings of type (<class 'FutureWarning'>,) were emitted.
The list of emitted warnings is: [].",failed
tests.integ.modin.frame.test_pct_change,test_pct_change_simple[columns-_NoDefault.no_default-1-nonulls],"Failed: DID NOT WARN. No warnings of type (<class 'FutureWarning'>,) were emitted.
The list of emitted warnings is: [].",failed
tests.integ.modin.frame.test_pct_change,test_pct_change_simple[columns-_NoDefault.no_default-2-nonulls],"Failed: DID NOT WARN. No warnings of type (<class 'FutureWarning'>,) were emitted.
The list of emitted warnings is: [].",failed
tests.integ.modin.frame.test_pct_change,test_pct_change_simple[rows-_NoDefault.no_default--1-nonulls],"Failed: DID NOT WARN. No warnings of type (<class 'FutureWarning'>,) were emitted.
The list of emitted warnings is: [].",failed
tests.integ.modin.frame.test_pct_change,test_pct_change_simple[rows-_NoDefault.no_default-0-nonulls],"Failed: DID NOT WARN. No warnings of type (<class 'FutureWarning'>,) were emitted.
The list of emitted warnings is: [].",failed
tests.integ.modin.frame.test_pct_change,test_pct_change_simple[rows-_NoDefault.no_default-1-nonulls],"Failed: DID NOT WARN. No warnings of type (<class 'FutureWarning'>,) were emitted.
The list of emitted warnings is: [].",failed
tests.integ.modin.frame.test_pct_change,test_pct_change_simple[rows-_NoDefault.no_default-2-nonulls],"Failed: DID NOT WARN. No warnings of type (<class 'FutureWarning'>,) were emitted.
The list of emitted warnings is: [].",failed
tests.integ.modin.frame.test_pct_change,test_pct_change_unsupported_args[params0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_quantile,test_quantile_datetime_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_quantile,test_quantile_unsupported_args_negative[table-higher-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_quantile,test_quantile_unsupported_args_negative[table-higher-1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_quantile,test_quantile_unsupported_args_negative[table-lower-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_quantile,test_quantile_unsupported_args_negative[table-lower-1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_quantile,test_quantile_unsupported_args_negative[table-midpoint-0],"ValueError: Invalid interpolation: midpoint. Interpolation must be in {'higher', 'lower', 'nearest'}",failed
tests.integ.modin.frame.test_quantile,test_quantile_unsupported_args_negative[table-midpoint-1],"ValueError: Invalid interpolation: midpoint. Interpolation must be in {'higher', 'lower', 'nearest'}",failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[bottom-False-average],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[bottom-False-dense],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[bottom-False-first],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[bottom-False-max],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[bottom-False-min],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[bottom-True-average],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[bottom-True-dense],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[bottom-True-first],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[bottom-True-max],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[bottom-True-min],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[keep-False-average],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[keep-False-dense],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[keep-False-first],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[keep-False-max],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[keep-False-min],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[keep-True-average],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[keep-True-dense],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[keep-True-first],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[keep-True-max],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[keep-True-min],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[top-False-average],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[top-False-dense],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[top-False-first],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[top-False-max],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[top-False-min],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[top-True-average],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[top-True-dense],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[top-True-first],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[top-True-max],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rank,test_rank_unsupported_args_negative[top-True-min],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_reindex,test_reindex_index_duplicate_values[new_index0],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_reindex,test_reindex_index_duplicate_values[new_index1],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_reindex,test_reindex_index_duplicate_values[new_index2],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_reindex,test_reindex_index_duplicate_values[new_index3],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_pandas_negative[1-backfill],ValueError: limit argument for 'backfill' method only well-defined if index and target are monotonic,failed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_pandas_negative[1-bfill],ValueError: limit argument for 'backfill' method only well-defined if index and target are monotonic,failed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_pandas_negative[1-ffill],ValueError: limit argument for 'pad' method only well-defined if index and target are monotonic,failed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_pandas_negative[1-pad],ValueError: limit argument for 'pad' method only well-defined if index and target are monotonic,failed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_pandas_negative[100-backfill],ValueError: limit argument for 'backfill' method only well-defined if index and target are monotonic,failed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_pandas_negative[100-bfill],ValueError: limit argument for 'backfill' method only well-defined if index and target are monotonic,failed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_pandas_negative[100-ffill],ValueError: limit argument for 'pad' method only well-defined if index and target are monotonic,failed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_pandas_negative[100-pad],ValueError: limit argument for 'pad' method only well-defined if index and target are monotonic,failed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_pandas_negative[2-backfill],ValueError: limit argument for 'backfill' method only well-defined if index and target are monotonic,failed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_pandas_negative[2-bfill],ValueError: limit argument for 'backfill' method only well-defined if index and target are monotonic,failed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_pandas_negative[2-ffill],ValueError: limit argument for 'pad' method only well-defined if index and target are monotonic,failed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_pandas_negative[2-pad],ValueError: limit argument for 'pad' method only well-defined if index and target are monotonic,failed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[backfill-100],Cannot qualify window in fillna.,xfailed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[backfill-1],Cannot qualify window in fillna.,xfailed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[backfill-2],Cannot qualify window in fillna.,xfailed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[bfill-100],Cannot qualify window in fillna.,xfailed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[bfill-1],Cannot qualify window in fillna.,xfailed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[bfill-2],Cannot qualify window in fillna.,xfailed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[ffill-100],Cannot qualify window in fillna.,xfailed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[ffill-1],Cannot qualify window in fillna.,xfailed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[ffill-2],Cannot qualify window in fillna.,xfailed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[pad-100],Cannot qualify window in fillna.,xfailed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[pad-1],Cannot qualify window in fillna.,xfailed
tests.integ.modin.frame.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[pad-2],Cannot qualify window in fillna.,xfailed
tests.integ.modin.frame.test_reindex,test_reindex_index_non_overlapping_different_types_index_negative,Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_reindex,test_reindex_multiindex_negative[0],"ValueError: Buffer dtype mismatch, expected 'Python object' but got 'long'",failed
tests.integ.modin.frame.test_reindex,test_reindex_multiindex_negative[1],"ValueError: Buffer dtype mismatch, expected 'Python object' but got 'long'",failed
tests.integ.modin.frame.test_reindex,test_reindex_timedelta_axis_0_negative,[XPASS(strict)] ,failed
tests.integ.modin.frame.test_reindex,test_reindex_timedelta_axis_1_negative,[XPASS(strict)] ,failed
tests.integ.modin.frame.test_rename,test_rename,"AssertionError: Index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['name']",failed
tests.integ.modin.frame.test_rename,test_rename_axis_style_not_implemented,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rename,test_rename_copy_warning,"AssertionError: assert 'The argument `copy` of `dataframe.rename` has been ignored by Snowpark pandas API' in ''
 +  where '' = <_pytest.logging.LogCaptureFixture object at 0x344ce21a0>.text",failed
tests.integ.modin.frame.test_rename,test_rename_mapper_multi,TypeError: 'list' object is not callable,failed
tests.integ.modin.frame.test_rename,test_rename_mi[DataFrame],TypeError: 'list' object is not callable,failed
tests.integ.modin.frame.test_rename,test_rename_multiindex_not_implemented,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rename,test_rename_positional_named,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_rename,test_rename_str_upper_not_implemented,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_replace,test_replace_frame_with_timedelta_index_or_column_negative[pandas_df0],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_replace,test_replace_frame_with_timedelta_index_or_column_negative[pandas_df1],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_replace,test_replace_integer_value_with_timedelta_negative[to_replace_dict_with_datetime_timedelta],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_replace,test_replace_integer_value_with_timedelta_negative[to_replace_dict_with_numpy_timedelta],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_replace,test_replace_integer_value_with_timedelta_negative[to_replace_dict_with_pandas_timedelta],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_replace,test_replace_integer_value_with_timedelta_negative[value_timedelta_list],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_replace,test_replace_integer_value_with_timedelta_negative[value_timedelta_scalar],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_replace,test_replace_limit_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_replace,test_replace_method_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_replace,test_replace_no_value_negative,Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.frame.test_repr,test_repr_and_repr_html_issue_same_query[native_df0-1],"assert 0 == 2
 +  where 0 = len([])
 +    where [] = <tests.integ.modin.frame.test_repr.ReprQueryListener object at 0x345652b90>.queries",failed
tests.integ.modin.frame.test_repr,test_repr_and_repr_html_issue_same_query[native_df1-1],"assert 0 == 2
 +  where 0 = len([])
 +    where [] = <tests.integ.modin.frame.test_repr.ReprQueryListener object at 0x343d42b90>.queries",failed
tests.integ.modin.frame.test_repr,test_repr_and_repr_html_issue_same_query[native_df2-4],"assert 0 == 2
 +  where 0 = len([])
 +    where [] = <tests.integ.modin.frame.test_repr.ReprQueryListener object at 0x3445df190>.queries",failed
tests.integ.modin.frame.test_repr,test_repr_and_repr_html_issue_same_query[native_df3-1],"assert 0 == 2
 +  where 0 = len([])
 +    where [] = <tests.integ.modin.frame.test_repr.ReprQueryListener object at 0x3448090f0>.queries",failed
tests.integ.modin.frame.test_repr,test_repr_and_repr_html_issue_same_query[native_df4-4],"assert 0 == 2
 +  where 0 = len([])
 +    where [] = <tests.integ.modin.frame.test_repr.ReprQueryListener object at 0x3445f5cf0>.queries",failed
tests.integ.modin.frame.test_repr,test_repr_and_repr_html_issue_same_query[native_df5-1],"assert 0 == 2
 +  where 0 = len([])
 +    where [] = <tests.integ.modin.frame.test_repr.ReprQueryListener object at 0x3445f63e0>.queries",failed
tests.integ.modin.frame.test_repr,test_repr_and_repr_html_issue_same_query[native_df6-1],"assert 0 == 2
 +  where 0 = len([])
 +    where [] = <tests.integ.modin.frame.test_repr.ReprQueryListener object at 0x3445f4df0>.queries",failed
tests.integ.modin.frame.test_repr,test_repr_and_repr_html_issue_same_query[native_df7-4],"assert 0 == 2
 +  where 0 = len([])
 +    where [] = <tests.integ.modin.frame.test_repr.ReprQueryListener object at 0x344e761a0>.queries",failed
tests.integ.modin.frame.test_repr,test_repr_html[native_df2-4],"AssertionError: assert '<div>\n<styl...s</p>\n</div>' == '<div>\n<styl...s</p>\n</div>'
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {...
  
  ...Full output truncated (114 lines hidden), use '-vv' to show",failed
tests.integ.modin.frame.test_repr,test_repr_html[native_df4-4],"AssertionError: assert '<div>\n<styl...s</p>\n</div>' == '<div>\n<styl...s</p>\n</div>'
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {...
  
  ...Full output truncated (78 lines hidden), use '-vv' to show",failed
tests.integ.modin.frame.test_repr,test_repr_html[native_df7-4],"AssertionError: assert '<div>\n<styl...s</p>\n</div>' == '<div>\n<styl...s</p>\n</div>'
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {...
  
  ...Full output truncated (1026 lines hidden), use '-vv' to show",failed
tests.integ.modin.frame.test_reset_index,test_reset_index_allow_duplicates,"ValueError: cannot insert level_0, already exists",failed
tests.integ.modin.frame.test_reset_index,test_reset_index_col_fill_none[names0-expected_names0],"AssertionError: MultiIndex level [1] are different

MultiIndex level [1] values are different (25.0 %)
[left]:  Index(['b', 'b', 'max', 'type'], dtype='object', name='cl2')
[right]: Index(['a', 'b', 'max', 'type'], dtype='object', name='cl2')
At positional index 0, first diff: b != a",failed
tests.integ.modin.frame.test_reset_index,"test_reset_index_invalid_level_raises[level2-names2-2--ValueError-Constructed Label has 4 levels, which is larger than target level 3-False]","AssertionError: Regex pattern did not match.
 Regex: 'Constructed Label has 4 levels, which is larger than target level 3'
 Input: 'Item must have length equal to number of levels.'",failed
tests.integ.modin.frame.test_reset_index,"test_reset_index_invalid_level_raises[level3-names3-0--ValueError-Constructed Label has 4 levels, which is larger than target level 3-False]","AssertionError: Regex pattern did not match.
 Regex: 'Constructed Label has 4 levels, which is larger than target level 3'
 Input: 'Item must have length equal to number of levels.'",failed
tests.integ.modin.frame.test_reset_index,test_reset_index_level_duplicates,"AssertionError: assert None == 'b'
 +  where None = RangeIndex(start=0, stop=2, step=1).name
 +    where RangeIndex(start=0, stop=2, step=1) =      a    c    d\n0  aaa  one  one\n1  bbb  two  two.index",failed
tests.integ.modin.frame.test_round,test_df_round_invalid_in_sf_negative[invalid_value0-Invalid argument types for function--1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_round,test_df_round_invalid_in_sf_negative[invalid_value0-Invalid argument types for function--2],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_round,test_df_round_invalid_in_sf_negative[invalid_value0-Invalid argument types for function-0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_round,test_df_round_invalid_in_sf_negative[invalid_value0-Invalid argument types for function-1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_round,test_df_round_invalid_in_sf_negative[invalid_value0-Invalid argument types for function-2],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_round,test_df_round_invalid_in_sf_negative[invalid_value1-Invalid argument types for function--1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_round,test_df_round_invalid_in_sf_negative[invalid_value1-Invalid argument types for function--2],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_round,test_df_round_invalid_in_sf_negative[invalid_value1-Invalid argument types for function-0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_round,test_df_round_invalid_in_sf_negative[invalid_value1-Invalid argument types for function-1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_round,test_df_round_invalid_in_sf_negative[invalid_value1-Invalid argument types for function-2],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_round,test_df_round_invalid_in_sf_negative[invalid_value2-is not recognized--1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_round,test_df_round_invalid_in_sf_negative[invalid_value2-is not recognized--2],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_round,test_df_round_invalid_in_sf_negative[invalid_value2-is not recognized-0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_round,test_df_round_invalid_in_sf_negative[invalid_value2-is not recognized-1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_round,test_df_round_invalid_in_sf_negative[invalid_value2-is not recognized-2],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_round,test_df_round_invalid_in_sf_negative[invalid_value3- Numeric value 'bad_str' is not recognized--1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_round,test_df_round_invalid_in_sf_negative[invalid_value3- Numeric value 'bad_str' is not recognized--2],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_round,test_df_round_invalid_in_sf_negative[invalid_value3- Numeric value 'bad_str' is not recognized-0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_round,test_df_round_invalid_in_sf_negative[invalid_value3- Numeric value 'bad_str' is not recognized-1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_round,test_df_round_invalid_in_sf_negative[invalid_value3- Numeric value 'bad_str' is not recognized-2],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_round,test_df_round_neg_even_half[0],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (100.0 %)
[index]: [0]
[left]:  [-2.0]
[right]: [-3.0]
At positional index 0, first diff: -2.0 != -3.0",failed
tests.integ.modin.frame.test_round,test_df_round_pos_even_half[0],"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (100.0 %)
[index]: [0]
[left]:  [2.0]
[right]: [3.0]
At positional index 0, first diff: 2.0 != 3.0",failed
tests.integ.modin.frame.test_round,test_df_round_unsupported_series_decimals,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_round,test_round_timedelta_negative[-1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_round,test_round_timedelta_negative[-2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_round,test_round_timedelta_negative[0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_round,test_round_timedelta_negative[1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_round,test_round_timedelta_negative[2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_select_dtypes,test_select_dtypes_basic[include5-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 4)",failed
tests.integ.modin.frame.test_select_dtypes,test_select_dtypes_basic[number-int],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 2)",failed
tests.integ.modin.frame.test_select_dtypes,test_select_dtypes_duplicate_col_names[float-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 0)
[right]: (3, 1)",failed
tests.integ.modin.frame.test_select_dtypes,test_select_dtypes_duplicate_col_names[include0-exclude0],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 0)
[right]: (3, 1)",failed
tests.integ.modin.frame.test_select_dtypes,test_select_dtypes_duplicate_col_names[include2-O],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 0)
[right]: (3, 2)",failed
tests.integ.modin.frame.test_select_dtypes,test_select_dtypes_duplicate_col_names[include4-number],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 3)
[right]: (3, 1)",failed
tests.integ.modin.frame.test_select_dtypes,test_select_dtypes_duplicate_col_names[include5-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 0)
[right]: (3, 1)",failed
tests.integ.modin.frame.test_select_dtypes,test_select_dtypes_duplicate_col_names[number-None],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 0)
[right]: (3, 2)",failed
tests.integ.modin.frame.test_select_dtypes,test_select_dtypes_duplicate_col_names[number-int],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 0)
[right]: (3, 1)",failed
tests.integ.modin.frame.test_select_dtypes,test_select_dtypes_duplicate_col_names[object-exclude10],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 3)
[right]: (3, 1)",failed
tests.integ.modin.frame.test_select_dtypes,test_select_dtypes_duplicate_col_names[object-exclude3],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 3)
[right]: (3, 1)",failed
tests.integ.modin.frame.test_select_dtypes,test_select_dtypes_sized_int_negative[int32-snow_result0],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 1)
[right]: (4, 0)",failed
tests.integ.modin.frame.test_select_dtypes,test_select_dtypes_sized_int_negative[int64-snow_result1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 4)",failed
tests.integ.modin.frame.test_set_index,test_set_index_different_index_length,"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_dup_column_name,"AssertionError: Regex pattern did not match.
 Regex: ""The column label 'A' is not unique""
 Input: 'Index data must be 1-dimensional'",failed
tests.integ.modin.frame.test_set_index,test_set_index_duplicate_label_in_dataframe_negative[False],"AssertionError: Regex pattern did not match.
 Regex: ""The column label 'a' is not unique""
 Input: 'Index data must be 1-dimensional'",failed
tests.integ.modin.frame.test_set_index,test_set_index_duplicate_label_in_dataframe_negative[True],"AssertionError: Regex pattern did not match.
 Regex: ""The column label 'a' is not unique""
 Input: 'Index data must be 1-dimensional'",failed
tests.integ.modin.frame.test_set_index,test_set_index_names[frame_of_ints],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_names[frame_of_ints_and_timedelta],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[False-False-frame_of_ints-<lambda>],"KeyError: ""None of ['a'] are in the columns""",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[False-False-frame_of_ints-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[False-False-frame_of_ints-Series],"KeyError: ""None of ['a'] are in the columns""",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[False-False-frame_of_ints-array],"KeyError: ""None of ['a'] are in the columns""",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[False-False-frame_of_ints-list],"KeyError: ""None of ['a'] are in the columns""",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[False-False-frame_of_ints_and_timedelta-<lambda>],"KeyError: ""None of ['a'] are in the columns""",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[False-False-frame_of_ints_and_timedelta-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[False-False-frame_of_ints_and_timedelta-Series],"KeyError: ""None of ['a'] are in the columns""",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[False-False-frame_of_ints_and_timedelta-array],"KeyError: ""None of ['a'] are in the columns""",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[False-False-frame_of_ints_and_timedelta-list],"KeyError: ""None of ['a'] are in the columns""",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[False-True-frame_of_ints-<lambda>],"KeyError: ""None of ['a'] are in the columns""",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[False-True-frame_of_ints-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[False-True-frame_of_ints-Series],"KeyError: ""None of ['a'] are in the columns""",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[False-True-frame_of_ints-array],"KeyError: ""None of ['a'] are in the columns""",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[False-True-frame_of_ints-list],"KeyError: ""None of ['a'] are in the columns""",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[False-True-frame_of_ints_and_timedelta-<lambda>],"KeyError: ""None of ['a'] are in the columns""",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[False-True-frame_of_ints_and_timedelta-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[False-True-frame_of_ints_and_timedelta-Series],"KeyError: ""None of ['a'] are in the columns""",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[False-True-frame_of_ints_and_timedelta-array],"KeyError: ""None of ['a'] are in the columns""",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[False-True-frame_of_ints_and_timedelta-list],"KeyError: ""None of ['a'] are in the columns""",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[True-False-frame_of_ints-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[True-False-frame_of_ints_and_timedelta-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[True-True-frame_of_ints-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays[True-True-frame_of_ints_and_timedelta-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays_duplicate[False-False-frame_of_ints-Index-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays_duplicate[False-False-frame_of_ints_and_timedelta-Index-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays_duplicate[False-True-frame_of_ints-Index-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays_duplicate[False-True-frame_of_ints_and_timedelta-Index-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays_duplicate[True-False-frame_of_ints-Index-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays_duplicate[True-False-frame_of_ints_and_timedelta-Index-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays_duplicate[True-True-frame_of_ints-Index-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_arrays_duplicate[True-True-frame_of_ints_and_timedelta-Index-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_single_array[False-False-frame_of_ints-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_single_array[False-False-frame_of_ints_and_timedelta-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_single_array[False-True-frame_of_ints-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_single_array[False-True-frame_of_ints_and_timedelta-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_single_array[True-False-frame_of_ints-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_single_array[True-False-frame_of_ints_and_timedelta-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_single_array[True-True-frame_of_ints-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_pass_single_array[True-True-frame_of_ints_and_timedelta-Index],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.index.Index'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_raise_keys_negative[True-False-frame_of_ints-keys1],"AssertionError: Snowpark pandas Exception 'X' doesn't match pandas Exception ""None of ['X'] are in the columns""",failed
tests.integ.modin.frame.test_set_index,test_set_index_raise_keys_negative[True-False-frame_of_ints_and_timedelta-keys1],"AssertionError: Snowpark pandas Exception 'X' doesn't match pandas Exception ""None of ['X'] are in the columns""",failed
tests.integ.modin.frame.test_set_index,test_set_index_raise_keys_negative[True-True-frame_of_ints-keys1],"AssertionError: Snowpark pandas Exception 'X' doesn't match pandas Exception ""None of ['X'] are in the columns""",failed
tests.integ.modin.frame.test_set_index,test_set_index_raise_keys_negative[True-True-frame_of_ints_and_timedelta-keys1],"AssertionError: Snowpark pandas Exception 'X' doesn't match pandas Exception ""None of ['X'] are in the columns""",failed
tests.integ.modin.frame.test_set_index,test_set_index_timedelta_index[frame_of_ints],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.timedelta_index.TimedeltaIndex'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_timedelta_index[frame_of_ints_and_timedelta],"TypeError: The parameter ""keys"" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. Received column of type <class 'snowflake.snowpark.modin.plugin.extensions.timedelta_index.TimedeltaIndex'>",failed
tests.integ.modin.frame.test_set_index,test_set_index_with_index_series_name[sample0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['num']",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_2D_key_series_value[array],"AssertionError: Regex pattern did not match.
 Regex: 'setitem with a 2D key does not support Series values.'
 Input: 'Must specify axis=0 or 1'",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_2D_key_series_value[dataframe],"AssertionError: Regex pattern did not match.
 Regex: 'setitem with a 2D key does not support Series values.'
 Input: 'Must specify axis=0 or 1'",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_2d_array[native_list-indexer3],TypeError: unhashable type: 'Series',failed
tests.integ.modin.frame.test_setitem,test_df_setitem_2d_array[native_list-indexer4],TypeError: unhashable type: 'Series',failed
tests.integ.modin.frame.test_setitem,test_df_setitem_2d_array[numpy_array-indexer3],TypeError: unhashable type: 'Series',failed
tests.integ.modin.frame.test_setitem,test_df_setitem_2d_array[numpy_array-indexer4],TypeError: unhashable type: 'Series',failed
tests.integ.modin.frame.test_setitem,test_df_setitem_2d_array_col_length_no_match,"AssertionError: Regex pattern did not match.
 Regex: 'shape mismatch: the number of columns 3 from the item does not match with the number of columns 4 to set'
 Input: 'could not broadcast input array from shape (4, 3) into shape (4, 4)'",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_2d_array_row_length_no_match,"ValueError: could not broadcast input array from shape (5, 4) into shape (4, 4)",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_2d_array_timedelta_negative,[XPASS(strict)] SNOW-1738952,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_2d_array_with_ffill_na_values_negative,"ValueError: could not broadcast input array from shape (2, 4) into shape (4, 4)",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_2d_bool_key_1d_array_value,ValueError: other must be the same shape as self when an ndarray,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_2d_bool_key_short_array_value,ValueError: other must be the same shape as self when an ndarray,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_2d_bool_key_with_callable_value,"AssertionError: DataFrame.iloc[:, 0] (column name=""0"") are different

DataFrame.iloc[:, 0] (column name=""0"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [1, 256, 7]
[right]: [1, 16, 7]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_2d_int_array_key_should_error,"ValueError: Boolean array expected for the condition, not int64",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_array_value[array_key-key_has_less_cols],ValueError: Array must be same shape as DataFrame,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_array_value[array_key-key_has_less_rows],ValueError: Array must be same shape as DataFrame,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_array_value[array_key-key_has_more_cols],ValueError: Array must be same shape as DataFrame,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_array_value[array_key-key_has_more_rows],ValueError: Array must be same shape as DataFrame,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_array_value[df_key-key_has_less_cols],"AssertionError: DataFrame.iloc[:, 2] (column name=""c"") are different

DataFrame.iloc[:, 2] (column name=""c"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [-7, -8, -8]
[right]: [7, 8, 8]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_array_value[df_key-key_has_less_rows],"AssertionError: DataFrame.iloc[:, 0] (column name=""a"") are different

DataFrame.iloc[:, 0] (column name=""a"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [1, -2, -3]
[right]: [1, -2, 3]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_df_value_matched_labels[array_key-key_has_less_cols],ValueError: Array must be same shape as DataFrame,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_df_value_matched_labels[array_key-key_has_less_rows],ValueError: Array must be same shape as DataFrame,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_df_value_matched_labels[array_key-key_has_more_cols],ValueError: Array must be same shape as DataFrame,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_df_value_matched_labels[array_key-key_has_more_rows],ValueError: Array must be same shape as DataFrame,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_df_value_matched_labels[df_key-key_has_less_cols],"AssertionError: DataFrame.iloc[:, 2] (column name=""c"") are different

DataFrame.iloc[:, 2] (column name=""c"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [-7, -8, -8]
[right]: [7, 8, 8]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_df_value_matched_labels[df_key-key_has_less_rows],"AssertionError: DataFrame.iloc[:, 0] (column name=""a"") are different

DataFrame.iloc[:, 0] (column name=""a"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [1, -2, -3]
[right]: [1, -2, 3]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_df_value_mismatched_column_labels[array_key-key_has_less_cols],ValueError: Array must be same shape as DataFrame,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_df_value_mismatched_column_labels[array_key-key_has_less_rows],ValueError: Array must be same shape as DataFrame,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_df_value_mismatched_column_labels[array_key-key_has_more_cols],ValueError: Array must be same shape as DataFrame,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_df_value_mismatched_column_labels[array_key-key_has_more_rows],ValueError: Array must be same shape as DataFrame,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_df_value_mismatched_column_labels[df_key-key_has_less_cols],"AssertionError: DataFrame.iloc[:, 2] (column name=""c"") are different

DataFrame.iloc[:, 2] (column name=""c"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [7, 8, 8]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_df_value_mismatched_column_labels[df_key-key_has_less_rows],"AssertionError: DataFrame.iloc[:, 0] (column name=""a"") are different

DataFrame.iloc[:, 0] (column name=""a"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [1.0, nan, nan]
[right]: [1.0, nan, 3.0]
At positional index 2, first diff: nan != 3.0",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_df_value_mismatched_index_labels[array_key-key_has_less_cols],ValueError: Array must be same shape as DataFrame,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_df_value_mismatched_index_labels[array_key-key_has_less_rows],ValueError: Array must be same shape as DataFrame,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_df_value_mismatched_index_labels[array_key-key_has_more_cols],ValueError: Array must be same shape as DataFrame,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_df_value_mismatched_index_labels[array_key-key_has_more_rows],ValueError: Array must be same shape as DataFrame,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_df_value_mismatched_index_labels[df_key-key_has_less_cols],"AssertionError: DataFrame.iloc[:, 2] (column name=""c"") are different

DataFrame.iloc[:, 2] (column name=""c"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [7, 8, 8]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_df_value_mismatched_index_labels[df_key-key_has_less_rows],"AssertionError: DataFrame.iloc[:, 0] (column name=""a"") are different

DataFrame.iloc[:, 0] (column name=""a"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [1.0, nan, nan]
[right]: [1.0, nan, 3.0]
At positional index 2, first diff: nan != 3.0",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_scalar_value[array_key-key_has_less_cols],ValueError: Array must be same shape as DataFrame,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_scalar_value[array_key-key_has_less_rows],ValueError: Array must be same shape as DataFrame,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_scalar_value[array_key-key_has_more_cols],ValueError: Array must be same shape as DataFrame,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_scalar_value[array_key-key_has_more_rows],ValueError: Array must be same shape as DataFrame,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_scalar_value[df_key-key_has_less_cols],"AssertionError: DataFrame.iloc[:, 2] (column name=""c"") are different

DataFrame.iloc[:, 2] (column name=""c"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [-1, -1, -1]
[right]: [7, 8, 8]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_bool_2d_key_scalar_value[df_key-key_has_less_rows],"AssertionError: DataFrame.iloc[:, 0] (column name=""a"") are different

DataFrame.iloc[:, 0] (column name=""a"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [1, -1, -1]
[right]: [1, -1, 3]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_single_value[int-A-val_columns0-val_index0],ValueError: Length of values (1) does not match length of index (4),failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_single_value[int-A-val_columns0-val_index1],ValueError: Length of values (1) does not match length of index (4),failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_single_value[int-A-val_columns1-val_index0],ValueError: Length of values (1) does not match length of index (4),failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_single_value[int-A-val_columns1-val_index1],ValueError: Length of values (1) does not match length of index (4),failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_single_value[int-key0-val_columns0-val_index0],pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_single_value[int-key0-val_columns0-val_index1],pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_single_value[int-key0-val_columns1-val_index0],pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_single_value[int-key0-val_columns1-val_index1],pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_single_value[timedelta64[ns]-A-val_columns0-val_index0],ValueError: Length of values (1) does not match length of index (4),failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_single_value[timedelta64[ns]-A-val_columns0-val_index1],ValueError: Length of values (1) does not match length of index (4),failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_single_value[timedelta64[ns]-A-val_columns1-val_index0],ValueError: Length of values (1) does not match length of index (4),failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_single_value[timedelta64[ns]-A-val_columns1-val_index1],ValueError: Length of values (1) does not match length of index (4),failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_single_value[timedelta64[ns]-key0-val_columns0-val_index0],pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_single_value[timedelta64[ns]-key0-val_columns0-val_index1],pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_single_value[timedelta64[ns]-key0-val_columns1-val_index0],pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_single_value[timedelta64[ns]-key0-val_columns1-val_index1],pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_value[int-key1],ValueError: Columns must be same length as key,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_value[int-key2],TypeError: unhashable type: 'Series',failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_value[int-key5],TypeError: unhashable type: 'Series',failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_value[int-key6],TypeError: unhashable type: 'Series',failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_value[timedelta64[ns]-key1],ValueError: Columns must be same length as key,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_value[timedelta64[ns]-key2],TypeError: unhashable type: 'Series',failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_value[timedelta64[ns]-key5],TypeError: unhashable type: 'Series',failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_value[timedelta64[ns]-key6],TypeError: unhashable type: 'Series',failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_value_dedup_columns[list-key0],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 3)
[right]: (3, 2)",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_value_dedup_columns[list-key1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 4)
[right]: (3, 3)",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_value_dedup_columns[series-key0],TypeError: unhashable type: 'Series',failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_value_dedup_columns[series-key1],TypeError: unhashable type: 'Series',failed
tests.integ.modin.frame.test_setitem,test_df_setitem_df_value_dedup_columns[series-key2],TypeError: unhashable type: 'Series',failed
tests.integ.modin.frame.test_setitem,test_df_setitem_full_columns[key0-value0],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 4)
[right]: (3, 3)",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_full_columns[key3-value3],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 4)
[right]: (3, 3)",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_lambda_dataframe[data0-2-8],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 3)
[right]: (3, 2)",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_lambda_dataframe[data1-comparison_value1-set_value1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 3)
[right]: (3, 2)",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_optimized,TypeError: unhashable type: 'Series',failed
tests.integ.modin.frame.test_setitem,test_df_setitem_replace_column_with_single_column[a-column2],"AssertionError: DataFrame.iloc[:, 0] (column name=""a"") are different

DataFrame.iloc[:, 0] (column name=""a"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [42, 42, 42]
[right]: [nan, nan, 42.0]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_replace_column_with_single_column[a-timedelta_type],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_self_df_set_aligned_row_key[native_df0],TypeError: unhashable type: 'Series',failed
tests.integ.modin.frame.test_setitem,test_df_setitem_self_df_set_aligned_row_key[native_df1],TypeError: unhashable type: 'Series',failed
tests.integ.modin.frame.test_setitem,test_df_setitem_self_df_set_aligned_row_key[native_df2],TypeError: unhashable type: 'Series',failed
tests.integ.modin.frame.test_setitem,test_df_setitem_series_list_like_key_and_range_like_item_negative[item0-key0],TypeError: unhashable type: 'Series',failed
tests.integ.modin.frame.test_setitem,test_df_setitem_series_list_like_key_and_range_like_item_negative[item0-key1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_single_column_length_mismatch[a-value0],"AssertionError: Regex pattern did not match.
 Regex: 'item to set is empty'
 Input: 'Length of values (0) does not match length of index (3)'",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_single_column_length_mismatch[a-value1],ValueError: Length of values (2) does not match length of index (3),failed
tests.integ.modin.frame.test_setitem,test_df_setitem_single_column_length_mismatch[x-value0],"AssertionError: Regex pattern did not match.
 Regex: 'item to set is empty'
 Input: 'Length of values (0) does not match length of index (3)'",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_single_column_length_mismatch[x-value1],ValueError: Length of values (2) does not match length of index (3),failed
tests.integ.modin.frame.test_setitem,test_df_setitem_single_column_length_mismatch[x-value2],ValueError: Length of values (4) does not match length of index (3),failed
tests.integ.modin.frame.test_setitem,test_df_setitem_slice_item_negative[12],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_slice_item_negative[1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_slice_item_negative[key2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_slice_item_negative[key3],TypeError: unhashable type: 'Series',failed
tests.integ.modin.frame.test_setitem,test_df_setitem_slice_key_df_value[int-key0],"AssertionError: DataFrame.iloc[:, 1] (column name=""b"") are different

DataFrame.iloc[:, 1] (column name=""b"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [nan, 5.0, 6.0]
[right]: [40, 5, 6]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_slice_key_df_value[int-key1],"AssertionError: DataFrame.iloc[:, 1] (column name=""b"") are different

DataFrame.iloc[:, 1] (column name=""b"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, 6.0]
[right]: [40, 50, 6]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_slice_key_df_value[int-key2],"AssertionError: DataFrame.iloc[:, 1] (column name=""b"") are different

DataFrame.iloc[:, 1] (column name=""b"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, 6.0]
[right]: [40, 50, 6]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_slice_key_df_value[int-key4],"AssertionError: DataFrame.iloc[:, 1] (column name=""b"") are different

DataFrame.iloc[:, 1] (column name=""b"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [40, 50, 60]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_slice_key_df_value[int-key5],"AssertionError: DataFrame.iloc[:, 1] (column name=""b"") are different

DataFrame.iloc[:, 1] (column name=""b"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [nan, 5.0, 6.0]
[right]: [40, 5, 6]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_slice_key_df_value[int-key6],"AssertionError: DataFrame.iloc[:, 1] (column name=""b"") are different

DataFrame.iloc[:, 1] (column name=""b"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [4.0, nan, nan]
[right]: [4, 50, 60]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_slice_key_df_value[int-key8],"AssertionError: DataFrame.iloc[:, 1] (column name=""b"") are different

DataFrame.iloc[:, 1] (column name=""b"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [nan, 5.0, nan]
[right]: [40, 5, 60]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_slice_key_df_value[int-key9],"AssertionError: DataFrame.iloc[:, 1] (column name=""b"") are different

DataFrame.iloc[:, 1] (column name=""b"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, 6.0]
[right]: [40, 50, 6]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_slice_key_df_value[timedelta64[ns]-key0],"AssertionError: DataFrame.iloc[:, 1] (column name=""b"") are different

DataFrame.iloc[:, 1] (column name=""b"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [-9223372036854775808, 5, 6]
[right]: [40, 5, 6]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_slice_key_df_value[timedelta64[ns]-key1],"AssertionError: DataFrame.iloc[:, 1] (column name=""b"") are different

DataFrame.iloc[:, 1] (column name=""b"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [-9223372036854775808, -9223372036854775808, 6]
[right]: [40, 50, 6]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_slice_key_df_value[timedelta64[ns]-key2],"AssertionError: DataFrame.iloc[:, 1] (column name=""b"") are different

DataFrame.iloc[:, 1] (column name=""b"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [-9223372036854775808, -9223372036854775808, 6]
[right]: [40, 50, 6]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_slice_key_df_value[timedelta64[ns]-key4],"AssertionError: DataFrame.iloc[:, 1] (column name=""b"") are different

DataFrame.iloc[:, 1] (column name=""b"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [-9223372036854775808, -9223372036854775808, -9223372036854775808]
[right]: [40, 50, 60]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_slice_key_df_value[timedelta64[ns]-key5],"AssertionError: DataFrame.iloc[:, 1] (column name=""b"") are different

DataFrame.iloc[:, 1] (column name=""b"") values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [-9223372036854775808, 5, 6]
[right]: [40, 5, 6]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_slice_key_df_value[timedelta64[ns]-key6],"AssertionError: DataFrame.iloc[:, 1] (column name=""b"") are different

DataFrame.iloc[:, 1] (column name=""b"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [4, -9223372036854775808, -9223372036854775808]
[right]: [4, 50, 60]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_slice_key_df_value[timedelta64[ns]-key8],"AssertionError: DataFrame.iloc[:, 1] (column name=""b"") are different

DataFrame.iloc[:, 1] (column name=""b"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [-9223372036854775808, 5, -9223372036854775808]
[right]: [40, 5, 60]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_slice_key_df_value[timedelta64[ns]-key9],"AssertionError: DataFrame.iloc[:, 1] (column name=""b"") are different

DataFrame.iloc[:, 1] (column name=""b"") values are different (66.66667 %)
[index]: [0, 1, 2]
[left]:  [-9223372036854775808, -9223372036854775808, 6]
[right]: [40, 50, 6]",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_value_df_mismatch_num_col_negative,"AssertionError: Regex pattern did not match.
 Regex: 'shape mismatch'
 Input: 'Length of values (1) does not match length of index (4)'",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_with_unique_and_duplicate_index_values[index_values0-other_index_values0-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['INDEX']",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_with_unique_and_duplicate_index_values[index_values1-other_index_values1-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['INDEX']",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_with_unique_and_duplicate_index_values[index_values10-other_index_values10-True],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_with_unique_and_duplicate_index_values[index_values11-other_index_values11-True],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_with_unique_and_duplicate_index_values[index_values2-other_index_values2-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['INDEX']",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_with_unique_and_duplicate_index_values[index_values3-other_index_values3-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['INDEX']",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_with_unique_and_duplicate_index_values[index_values4-other_index_values4-True],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_with_unique_and_duplicate_index_values[index_values5-other_index_values5-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['INDEX']",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_with_unique_and_duplicate_index_values[index_values6-other_index_values6-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['INDEX']",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_with_unique_and_duplicate_index_values[index_values7-other_index_values7-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['INDEX']",failed
tests.integ.modin.frame.test_setitem,test_df_setitem_with_unique_and_duplicate_index_values[index_values8-other_index_values8-True],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_setitem,test_df_setitem_with_unique_and_duplicate_index_values[index_values9-other_index_values9-True],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.frame.test_shift,test_shift_unsupported_args[params0-periods],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_shift,test_shift_unsupported_args[params1-suffix],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_size,test_dataframe_agg_size_axis_1[size],AssertionError: Got type: <class 'int'>,failed
tests.integ.modin.frame.test_skew,test_skew_unsupported[unsupported0],AssertionError,failed
tests.integ.modin.frame.test_skew,test_skew_unsupported[unsupported2],AssertionError,failed
tests.integ.modin.frame.test_sort_index,test_sort_index_dataframe_axis_1_unsupported,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_sort_index,test_sort_index_dataframe_multiindex_unsupported,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_sort_values,test_sort_values[False-ind],KeyError: 'ind',failed
tests.integ.modin.frame.test_sort_values,test_sort_values[True-ind],KeyError: 'ind',failed
tests.integ.modin.frame.test_sort_values,test_sort_values_axis_1[<lambda>0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_sort_values,test_sort_values_axis_1[<lambda>1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_sort_values,test_sort_values_axis_1[<lambda>2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_sort_values,test_sort_values_axis_1[<lambda>3],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_sort_values,test_sort_values_axis_1[<lambda>4],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_sort_values,test_sort_values_axis_1_inplace[<lambda>0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_sort_values,test_sort_values_axis_1_inplace[<lambda>1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_sort_values,test_sort_values_axis_1_inplace[<lambda>2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_sort_values,test_sort_values_axis_1_inplace[<lambda>3],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_sort_values,test_sort_values_axis_1_inplace[<lambda>4],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_sort_values,test_sort_values_duplicate_by[by1],KeyError: 'ind',failed
tests.integ.modin.frame.test_sort_values,test_sort_values_invalid_kind_negative,Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.frame.test_sort_values,test_sort_values_key[<lambda>0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_sort_values,test_sort_values_key[<lambda>1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_sort_values,test_sort_values_multiple_by[by1],KeyError: 'ind',failed
tests.integ.modin.frame.test_sort_values,test_sort_values_on_duplicate_labels_negative,Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.frame.test_squeeze,test_timedelta_1_by_n_horizontal[0],"[XPASS(strict)] Transpose produces a column with both an int value and a timedelta value, so it can't preserve the timedelta type for the timedelta row.",failed
tests.integ.modin.frame.test_squeeze,test_timedelta_1_by_n_horizontal[None],"[XPASS(strict)] Transpose produces a column with both an int value and a timedelta value, so it can't preserve the timedelta type for the timedelta row.",failed
tests.integ.modin.frame.test_squeeze,test_timedelta_1_by_n_horizontal[index],"[XPASS(strict)] Transpose produces a column with both an int value and a timedelta value, so it can't preserve the timedelta type for the timedelta row.",failed
tests.integ.modin.frame.test_stack,test_stack_level_unsupported,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_stack,test_stack_multiindex_unsupported,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_stack,test_stack_timedelta_unsupported,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_take,test_df_take[float-False],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_take,test_df_take[float-True],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_take,test_df_take[timedelta64[ns]-False],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_take,test_df_take[timedelta64[ns]-True],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.frame.test_to_dynamic_table,test_to_dynamic_table_enforce_ordering_raises[function],"NotImplementedError: Modin supports the method DataFrame.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_dynamic_table,test_to_dynamic_table_enforce_ordering_raises[method],"NotImplementedError: Modin supports the method DataFrame.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_dynamic_table,test_to_dynamic_table_index[function-False-None-expected_index_columns2],"NotImplementedError: Modin supports the method DataFrame.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_dynamic_table,test_to_dynamic_table_index[function-False-index_labels3-expected_index_columns3],"NotImplementedError: Modin supports the method DataFrame.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_dynamic_table,test_to_dynamic_table_index[function-True-None-expected_index_columns0],"NotImplementedError: Modin supports the method DataFrame.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_dynamic_table,test_to_dynamic_table_index[function-True-index_labels1-expected_index_columns1],"NotImplementedError: Modin supports the method DataFrame.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_dynamic_table,test_to_dynamic_table_index[method-False-None-expected_index_columns2],"NotImplementedError: Modin supports the method DataFrame.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_dynamic_table,test_to_dynamic_table_index[method-False-index_labels3-expected_index_columns3],"NotImplementedError: Modin supports the method DataFrame.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_dynamic_table,test_to_dynamic_table_index[method-True-None-expected_index_columns0],"NotImplementedError: Modin supports the method DataFrame.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_dynamic_table,test_to_dynamic_table_index[method-True-index_labels1-expected_index_columns1],"NotImplementedError: Modin supports the method DataFrame.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_dynamic_table,test_to_dynamic_table_multiindex[function],"NotImplementedError: Modin supports the method DataFrame.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_dynamic_table,test_to_dynamic_table_multiindex[method],"NotImplementedError: Modin supports the method DataFrame.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_dynamic_table,test_to_dynamic_table_multiple_sessions_no_enforce_ordering[function],"NotImplementedError: Modin supports the method DataFrame.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_dynamic_table,test_to_dynamic_table_multiple_sessions_no_enforce_ordering[method],"NotImplementedError: Modin supports the method DataFrame.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_dynamic_table,test_to_dynamic_table_no_enforce_ordering[function],"NotImplementedError: Modin supports the method DataFrame.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_dynamic_table,test_to_dynamic_table_no_enforce_ordering[method],"NotImplementedError: Modin supports the method DataFrame.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_iceberg,test_to_iceberg_config_required[function],"AssertionError: Regex pattern did not match.
 Regex: ""missing 1 required keyword-only argument: 'iceberg_config'""
 Input: ""missing a required argument: 'iceberg_config'""",failed
tests.integ.modin.frame.test_to_iceberg,test_to_iceberg_config_required[method],"AssertionError: Regex pattern did not match.
 Regex: ""missing 1 required keyword-only argument: 'iceberg_config'""
 Input: ""missing a required argument: 'iceberg_config'""",failed
tests.integ.modin.frame.test_to_view,test_to_view_basic[function],"NotImplementedError: Modin supports the method DataFrame.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_view,test_to_view_basic[method],"NotImplementedError: Modin supports the method DataFrame.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_view,test_to_view_index[function-False-None-expected_index_columns2],"NotImplementedError: Modin supports the method DataFrame.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_view,test_to_view_index[function-False-index_labels3-expected_index_columns3],"NotImplementedError: Modin supports the method DataFrame.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_view,test_to_view_index[function-True-None-expected_index_columns0],"NotImplementedError: Modin supports the method DataFrame.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_view,test_to_view_index[function-True-index_labels1-expected_index_columns1],"NotImplementedError: Modin supports the method DataFrame.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_view,test_to_view_index[method-False-None-expected_index_columns2],"NotImplementedError: Modin supports the method DataFrame.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_view,test_to_view_index[method-False-index_labels3-expected_index_columns3],"NotImplementedError: Modin supports the method DataFrame.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_view,test_to_view_index[method-True-None-expected_index_columns0],"NotImplementedError: Modin supports the method DataFrame.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_view,test_to_view_index[method-True-index_labels1-expected_index_columns1],"NotImplementedError: Modin supports the method DataFrame.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_view,test_to_view_multiindex[function],"NotImplementedError: Modin supports the method DataFrame.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_view,test_to_view_multiindex[method],"NotImplementedError: Modin supports the method DataFrame.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_view,test_to_view_multiindex_length_mismatch_raises[function],"NotImplementedError: Modin supports the method DataFrame.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_view,test_to_view_multiindex_length_mismatch_raises[method],"NotImplementedError: Modin supports the method DataFrame.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_view,test_to_view_multiple_sessions_enforce_ordering_raises[function],"NotImplementedError: Modin supports the method DataFrame.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_view,test_to_view_multiple_sessions_enforce_ordering_raises[method],"NotImplementedError: Modin supports the method DataFrame.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_view,test_to_view_multiple_sessions_no_enforce_ordering[function],"NotImplementedError: Modin supports the method DataFrame.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_to_view,test_to_view_multiple_sessions_no_enforce_ordering[method],"NotImplementedError: Modin supports the method DataFrame.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.frame.test_transpose,test_dataframe_transpose_args_warning_log,TypeError: transpose() takes at most 1 argument (2 given),failed
tests.integ.modin.frame.test_transpose,test_dataframe_transpose_copy_warning_log,"AssertionError: assert 'Single Warning: The argument `copy` of `transpose` has been ignored by Snowpark pandas API:\nTranspose ignore copy argument in Snowpark pandas API. was raised.' in ['After DataFrame function __init__, considered moving to backend Pandas with (transfer_cost 0 + other_execution_cost 0) , stay_cost 100, and move-stay delta -100', 'After DataFrame function __init__, considered moving to backend Python_Test with (transfer_cost 0 + other_execution_cost 0) , stay_cost 100, and move-stay delta -100', 'Chose to move to backend Pandas']",failed
tests.integ.modin.frame.test_transpose,test_dataframe_transpose_not_json_serializable_unimplemented[col_label0],[XPASS(strict)] SNOW-896985: Support non-JSON serializable types in dataframe,failed
tests.integ.modin.frame.test_transpose,test_dataframe_transpose_not_json_serializable_unimplemented[col_label1],[XPASS(strict)] SNOW-896985: Support non-JSON serializable types in dataframe,failed
tests.integ.modin.frame.test_transpose,test_dataframe_transpose_set_timedelta_index_SNOW_1652608[index0-transpose_twice],[XPASS(strict)] SNOW-886400,failed
tests.integ.modin.frame.test_transpose,test_dataframe_transpose_set_timedelta_index_SNOW_1652608[index1-transpose_twice],[XPASS(strict)] SNOW-886400,failed
tests.integ.modin.frame.test_tz_convert,test_tz_convert_negative[0-1-None-UTC-NotImplementedError],ValueError: The level 1 is not valid,failed
tests.integ.modin.frame.test_tz_convert,test_tz_convert_negative[0-None-False-UTC-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_tz_convert,test_tz_convert_negative[0-None-None-UTC+09:00-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_tz_convert,test_tz_convert_negative[1-None-None-UTC-NotImplementedError],AttributeError: 'RangeIndex' object has no attribute 'tz_convert',failed
tests.integ.modin.frame.test_tz_convert,test_tz_convert_negative[columns-None-None-UTC-NotImplementedError],AttributeError: 'RangeIndex' object has no attribute 'tz_convert',failed
tests.integ.modin.frame.test_tz_localize,test_tz_localize_negative[UTC+09:00-0-None-None-raise-raise-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_tz_localize,test_tz_localize_negative[UTC-0-1-None-raise-raise-NotImplementedError],ValueError: The level 1 is not valid,failed
tests.integ.modin.frame.test_tz_localize,test_tz_localize_negative[UTC-0-None-False-raise-raise-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_tz_localize,test_tz_localize_negative[UTC-0-None-True-NaT-raise-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_tz_localize,test_tz_localize_negative[UTC-0-None-True-ambiguous6-raise-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_tz_localize,test_tz_localize_negative[UTC-0-None-True-infer-raise-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_tz_localize,test_tz_localize_negative[UTC-0-None-True-infer-shift_forward-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_tz_localize,test_tz_localize_negative[UTC-0-None-True-raise-NaT-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_tz_localize,test_tz_localize_negative[UTC-0-None-True-raise-nonexistent10-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_tz_localize,test_tz_localize_negative[UTC-0-None-True-raise-shift_backward-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_tz_localize,test_tz_localize_negative[UTC-0-None-True-raise-shift_forward-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_tz_localize,test_tz_localize_negative[UTC-1-None-None-raise-raise-NotImplementedError],ValueError: No axis named 1 for object type Series,failed
tests.integ.modin.frame.test_tz_localize,test_tz_localize_negative[UTC-columns-None-None-raise-raise-NotImplementedError],ValueError: No axis named 1 for object type Series,failed
tests.integ.modin.frame.test_unary_op,test_df_unary_all_pos[timedelta64[ns]-abs],TypeError: timedelta64[ns] is not a numeric data type,failed
tests.integ.modin.frame.test_unary_op,test_df_unary_all_pos[timedelta64[ns]-neg],TypeError: timedelta64[ns] is not a numeric data type,failed
tests.integ.modin.frame.test_unary_op,test_df_unary_invalid_in_native_negative[data0-abs],TypeError: object is not a numeric data type,failed
tests.integ.modin.frame.test_unary_op,test_df_unary_invalid_in_native_negative[data0-neg],TypeError: object is not a numeric data type,failed
tests.integ.modin.frame.test_unary_op,test_df_unary_invalid_in_sf_negative[data0-abs],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_unary_op,test_df_unary_invalid_in_sf_negative[data0-neg],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_unary_op,test_df_unary_invalid_in_sf_negative[data1-abs],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_unary_op,test_df_unary_invalid_in_sf_negative[data1-neg],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_unary_op,test_df_unary_invalid_in_sf_negative[data2-abs],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_unary_op,test_df_unary_invalid_in_sf_negative[data2-neg],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.frame.test_unary_op,test_df_unary_np_none_bool[False-abs],TypeError: object is not a numeric data type,failed
tests.integ.modin.frame.test_unary_op,test_df_unary_np_none_bool[False-neg],TypeError: object is not a numeric data type,failed
tests.integ.modin.frame.test_unary_op,test_df_unary_np_none_bool[True-abs],TypeError: object is not a numeric data type,failed
tests.integ.modin.frame.test_unary_op,test_df_unary_np_none_bool[True-neg],TypeError: object is not a numeric data type,failed
tests.integ.modin.frame.test_unary_op,test_ser_unary_invalid_in_both_native_and_sf_negative[invalid_value0-Invalid argument types for function-abs],TypeError: object is not a numeric data type,failed
tests.integ.modin.frame.test_unary_op,test_ser_unary_invalid_in_both_native_and_sf_negative[invalid_value0-Invalid argument types for function-neg],TypeError: object is not a numeric data type,failed
tests.integ.modin.frame.test_unary_op,test_ser_unary_invalid_in_both_native_and_sf_negative[invalid_value1-Invalid argument types for function-abs],TypeError: object is not a numeric data type,failed
tests.integ.modin.frame.test_unary_op,test_ser_unary_invalid_in_both_native_and_sf_negative[invalid_value1-Invalid argument types for function-neg],TypeError: object is not a numeric data type,failed
tests.integ.modin.frame.test_unary_op,test_ser_unary_invalid_in_both_native_and_sf_negative[invalid_value2-is not recognized-abs],TypeError: object is not a numeric data type,failed
tests.integ.modin.frame.test_unary_op,test_ser_unary_invalid_in_both_native_and_sf_negative[invalid_value2-is not recognized-neg],TypeError: object is not a numeric data type,failed
tests.integ.modin.frame.test_unary_op,test_ser_unary_invalid_in_both_native_and_sf_negative[invalid_value3- Numeric value 'bad_str' is not recognized-abs],TypeError: object is not a numeric data type,failed
tests.integ.modin.frame.test_unary_op,test_ser_unary_invalid_in_both_native_and_sf_negative[invalid_value3- Numeric value 'bad_str' is not recognized-neg],TypeError: object is not a numeric data type,failed
tests.integ.modin.frame.test_unstack,test_unstack_input_no_multiindex[timedelta64[ns]-index_names0],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_unstack,test_unstack_input_no_multiindex[timedelta64[ns]-index_names1],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_unstack,test_unstack_input_no_multiindex[timedelta64[ns]-index_names2],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_unstack,test_unstack_input_no_multiindex[timedelta64[ns]-index_names3],[XPASS(strict)] ,failed
tests.integ.modin.frame.test_unstack,test_unstack_non_integer_level_notimplemented,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_unstack,test_unstack_sort_notimplemented,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_value_counts,test_non_existing_labels,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_value_counts,test_value_counts_dropna[False-test_data0],reason: SNOW-1201658,xfailed
tests.integ.modin.frame.test_where,test_dataframe_where_not_implemented,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.frame.test_where,test_dataframe_where_other_is_array,"ValueError: Data must be 1-dimensional, got ndarray of shape (2, 2) instead",failed
tests.integ.modin.frame.test_where,test_dataframe_where_other_is_array_wrong_size_negative,AssertionError: Snowpark pandas Exception Length of values (2) does not match length of index (3) doesn't match pandas Exception other must be the same shape as self when an ndarray,failed
tests.integ.modin.frame.test_where,test_dataframe_where_with_dataframe_cond_single_index_different_names_2,"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['B']",failed
tests.integ.modin.frame.test_where,test_dataframe_where_with_duplicated_columns_negative[None-others_column_names1-Multiple columns are mapped to each label in ['C'] in DataFrame other],AssertionError: exception type <class 'pandas.errors.InvalidIndexError'> does not match with expected type <class 'ValueError'>,failed
tests.integ.modin.frame.test_where,test_dataframe_where_with_duplicated_columns_negative[cond_column_names0-None-Multiple columns are mapped to each label in ['A'] in DataFrame condition],"AssertionError: Regex pattern did not match.
 Regex: ""Multiple\\ columns\\ are\\ mapped\\ to\\ each\\ label\\ in\\ \\['A'\\]\\ in\\ DataFrame\\ condition""
 Input: 'cannot reindex on an axis with duplicate labels'",failed
tests.integ.modin.frame.test_where,test_dataframe_where_with_duplicated_columns_negative[cond_column_names2-others_column_names2-Multiple columns are mapped to each label in ['C'] in DataFrame condition],"AssertionError: Regex pattern did not match.
 Regex: ""Multiple\\ columns\\ are\\ mapped\\ to\\ each\\ label\\ in\\ \\['C'\\]\\ in\\ DataFrame\\ condition""
 Input: 'cannot reindex on an axis with duplicate labels'",failed
tests.integ.modin.frame.test_where,test_dataframe_where_with_duplicated_index_aligned[10-cond_frame0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_where,test_dataframe_where_with_duplicated_index_aligned[10-cond_frame1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_where,test_dataframe_where_with_duplicated_index_aligned[other1-cond_frame0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_where,test_dataframe_where_with_duplicated_index_aligned[other1-cond_frame1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_where,test_dataframe_where_with_duplicated_index_aligned[other2-cond_frame0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_where,test_dataframe_where_with_duplicated_index_aligned[other2-cond_frame1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.frame.test_where,test_dataframe_where_with_duplicated_index_unaligned,pandas.errors.InvalidIndexError,failed
tests.integ.modin.frame.test_where,test_where_series_cond[series_longer_than_dataframe],ValueError: Array conditional must be same shape as self,failed
tests.integ.modin.frame.test_where,test_where_series_cond[series_same_length_as_dataframe],ValueError: Array conditional must be same shape as self,failed
tests.integ.modin.frame.test_where,test_where_series_cond[series_shorter_than_dataframe],ValueError: Array conditional must be same shape as self,failed
tests.integ.modin.frame.test_where,test_where_series_cond_after_join,ValueError: Array conditional must be same shape as self,failed
tests.integ.modin.frame.test_where,test_where_series_other_axis_0[matching_index-series_shorter_than_dataframe],IndexError: index 0 is out of bounds for axis 0 with size 0,failed
tests.integ.modin.frame.test_where,test_where_series_other_axis_0[unmatched_index-series_longer_than_dataframe],IndexError: index 0 is out of bounds for axis 0 with size 0,failed
tests.integ.modin.frame.test_where,test_where_series_other_axis_0[unmatched_index-series_same_length_as_dataframe],IndexError: index 0 is out of bounds for axis 0 with size 0,failed
tests.integ.modin.frame.test_where,test_where_series_other_axis_0[unmatched_index-series_shorter_than_dataframe],IndexError: index 0 is out of bounds for axis 0 with size 0,failed
tests.integ.modin.frame.test_where,test_where_series_other_axis_1[matching_index-series_longer_than_dataframe],"AssertionError: DataFrame.iloc[:, 0] (column name=""col1"") are different

DataFrame.iloc[:, 0] (column name=""col1"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [11, 11, 11]",failed
tests.integ.modin.frame.test_where,test_where_series_other_axis_1[matching_index-series_same_length_as_dataframe],"AssertionError: DataFrame.iloc[:, 0] (column name=""col1"") are different

DataFrame.iloc[:, 0] (column name=""col1"") values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [nan, nan, nan]
[right]: [11, 11, 11]",failed
tests.integ.modin.frame.test_where,test_where_series_other_axis_not_specified,"AssertionError: Regex pattern did not match.
 Regex: 'df.where requires an axis parameter \\(0 or 1\\) when given a Series'
 Input: 'Must specify axis=0 or 1'",failed
tests.integ.modin.frame.test_where,test_where_with_zero_other_SNOW_1372268,ValueError: Array conditional must be same shape as self,failed
tests.integ.modin.frame.test_where,test_where_with_zero_other_mixed_types_SNOW_1372268,ValueError: Array conditional must be same shape as self,failed
tests.integ.modin.groupby.test_all_any,test_all_any_invalid_types[data0-Boolean value 'a' is not recognized],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.groupby.test_all_any,"test_all_any_invalid_types[data1-invalid\\ type\\ \\[TO_BOOLEAN\\(""values""\\.""value""\\)\\]\\ for\\ parameter\\ 'TO_BOOLEAN']",Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.groupby.test_all_any,test_timedelta_any_with_nulls,"AssertionError: DataFrame.iloc[:, 0] (column name=""A"") are different

DataFrame.iloc[:, 0] (column name=""A"") values are different (100.0 %)
[index]: [a]
[left]:  [True]
[right]: [False]",failed
tests.integ.modin.groupby.test_groupby_apply,test_as_index_false[duplicate_df_rowwise-level_0-include_groups_False],"AssertionError: DataFrame.index are different

DataFrame.index levels are different
[left]:  1, RangeIndex(start=0, stop=8, step=1)
[right]: 3, MultiIndex([(0, 'i0', 'i0'),
            (0, 'i0', 'i0'),
            (1, 'i1', 'i3'),
            (1, 'i1', 'i2'),
            (1, 'i1', 'i4'),
            (1, 'i1', 'i3'),
            (1, 'i1', 'i2'),
            (1, 'i1', 'i4')],
           names=[None, 'level_0', 'level_1'])",failed
tests.integ.modin.groupby.test_groupby_apply,test_as_index_false[duplicate_df_rowwise-level_0-include_groups_True],"AssertionError: DataFrame.index are different

DataFrame.index levels are different
[left]:  1, RangeIndex(start=0, stop=8, step=1)
[right]: 3, MultiIndex([(0, 'i0', 'i0'),
            (0, 'i0', 'i0'),
            (1, 'i1', 'i3'),
            (1, 'i1', 'i2'),
            (1, 'i1', 'i4'),
            (1, 'i1', 'i3'),
            (1, 'i1', 'i2'),
            (1, 'i1', 'i4')],
           names=[None, 'level_0', 'level_1'])",failed
tests.integ.modin.groupby.test_groupby_apply,test_as_index_false[normalize_numeric_columns_by_sum-level_0-include_groups_False],"AssertionError: DataFrame.index are different

DataFrame.index levels are different
[left]:  1, RangeIndex(start=0, stop=4, step=1)
[right]: 3, MultiIndex([(0, 'i0', 'i0'),
            (1, 'i1', 'i3'),
            (1, 'i1', 'i2'),
            (1, 'i1', 'i4')],
           names=[None, 'level_0', 'level_1'])",failed
tests.integ.modin.groupby.test_groupby_apply,test_as_index_false[normalize_numeric_columns_by_sum-level_0-include_groups_True],"AssertionError: DataFrame.index are different

DataFrame.index levels are different
[left]:  1, RangeIndex(start=0, stop=4, step=1)
[right]: 3, MultiIndex([(0, 'i0', 'i0'),
            (1, 'i1', 'i3'),
            (1, 'i1', 'i2'),
            (1, 'i1', 'i4')],
           names=[None, 'level_0', 'level_1'])",failed
tests.integ.modin.groupby.test_groupby_apply,test_axis_one[include_groups_False],[XPASS(strict)] ,failed
tests.integ.modin.groupby.test_groupby_apply,test_axis_one[include_groups_True],[XPASS(strict)] ,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_False-sort_False-group_keys_False-non_transform_returns_dataframe],reason: SNOW-1229760,xfailed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_False-sort_False-group_keys_False-non_transform_returns_series],reason: SNOW-1229760,xfailed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_False-sort_False-group_keys_False-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_False-sort_False-group_keys_False-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_False-sort_False-group_keys_False-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_False-sort_False-group_keys_True-non_transform_returns_dataframe],reason: SNOW-1229760,xfailed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_False-sort_False-group_keys_True-non_transform_returns_series],reason: SNOW-1229760,xfailed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_False-sort_False-group_keys_True-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_False-sort_False-group_keys_True-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_False-sort_False-group_keys_True-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_False-sort_True-group_keys_False-non_transform_returns_dataframe],reason: SNOW-1229760,xfailed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_False-sort_True-group_keys_False-non_transform_returns_series],reason: SNOW-1229760,xfailed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_False-sort_True-group_keys_False-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_False-sort_True-group_keys_False-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_False-sort_True-group_keys_False-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_False-sort_True-group_keys_True-non_transform_returns_dataframe],reason: SNOW-1229760,xfailed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_False-sort_True-group_keys_True-non_transform_returns_series],reason: SNOW-1229760,xfailed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_False-sort_True-group_keys_True-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_False-sort_True-group_keys_True-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_False-sort_True-group_keys_True-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_True-sort_False-group_keys_False-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_True-sort_False-group_keys_False-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_True-sort_False-group_keys_False-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_True-sort_False-group_keys_False-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_True-sort_False-group_keys_False-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_True-sort_False-group_keys_True-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_True-sort_False-group_keys_True-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_True-sort_False-group_keys_True-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_True-sort_False-group_keys_True-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_True-sort_False-group_keys_True-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_True-sort_True-group_keys_False-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_True-sort_True-group_keys_False-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_True-sort_True-group_keys_False-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_True-sort_True-group_keys_False-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_True-sort_True-group_keys_False-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_True-sort_True-group_keys_True-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_True-sort_True-group_keys_True-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_True-sort_True-group_keys_True-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_True-sort_True-group_keys_True-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_False-dropna_True-sort_True-group_keys_True-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_False-sort_False-group_keys_False-non_transform_returns_dataframe],reason: SNOW-1229760,xfailed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_False-sort_False-group_keys_False-non_transform_returns_series],reason: SNOW-1229760,xfailed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_False-sort_False-group_keys_False-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_False-sort_False-group_keys_False-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_False-sort_False-group_keys_False-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_False-sort_False-group_keys_True-non_transform_returns_dataframe],reason: SNOW-1229760,xfailed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_False-sort_False-group_keys_True-non_transform_returns_series],reason: SNOW-1229760,xfailed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_False-sort_False-group_keys_True-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_False-sort_False-group_keys_True-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_False-sort_False-group_keys_True-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_False-sort_True-group_keys_False-non_transform_returns_dataframe],reason: SNOW-1229760,xfailed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_False-sort_True-group_keys_False-non_transform_returns_series],reason: SNOW-1229760,xfailed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_False-sort_True-group_keys_False-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_False-sort_True-group_keys_False-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_False-sort_True-group_keys_False-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_False-sort_True-group_keys_True-non_transform_returns_dataframe],reason: SNOW-1229760,xfailed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_False-sort_True-group_keys_True-non_transform_returns_series],reason: SNOW-1229760,xfailed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_False-sort_True-group_keys_True-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_False-sort_True-group_keys_True-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_False-sort_True-group_keys_True-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_True-sort_False-group_keys_False-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_True-sort_False-group_keys_False-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_True-sort_False-group_keys_False-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_True-sort_False-group_keys_False-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_True-sort_False-group_keys_False-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_True-sort_False-group_keys_True-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_True-sort_False-group_keys_True-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_True-sort_False-group_keys_True-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_True-sort_False-group_keys_True-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_True-sort_False-group_keys_True-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_True-sort_True-group_keys_False-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_True-sort_True-group_keys_False-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_True-sort_True-group_keys_False-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_True-sort_True-group_keys_False-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_True-sort_True-group_keys_False-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_True-sort_True-group_keys_True-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_True-sort_True-group_keys_True-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_True-sort_True-group_keys_True-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_True-sort_True-group_keys_True-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[by1-include_groups_True-dropna_True-sort_True-group_keys_True-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_False-sort_False-group_keys_False-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_False-sort_False-group_keys_False-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_False-sort_False-group_keys_False-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_False-sort_False-group_keys_False-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_False-sort_False-group_keys_False-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_False-sort_False-group_keys_True-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_False-sort_False-group_keys_True-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_False-sort_False-group_keys_True-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_False-sort_False-group_keys_True-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_False-sort_False-group_keys_True-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_False-sort_True-group_keys_False-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_False-sort_True-group_keys_False-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_False-sort_True-group_keys_False-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_False-sort_True-group_keys_False-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_False-sort_True-group_keys_False-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_False-sort_True-group_keys_True-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_False-sort_True-group_keys_True-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_False-sort_True-group_keys_True-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_False-sort_True-group_keys_True-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_False-sort_True-group_keys_True-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_True-sort_False-group_keys_False-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_True-sort_False-group_keys_False-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_True-sort_False-group_keys_False-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_True-sort_False-group_keys_False-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_True-sort_False-group_keys_False-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_True-sort_False-group_keys_True-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_True-sort_False-group_keys_True-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_True-sort_False-group_keys_True-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_True-sort_False-group_keys_True-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_True-sort_False-group_keys_True-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_True-sort_True-group_keys_False-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_True-sort_True-group_keys_False-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_True-sort_True-group_keys_False-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_True-sort_True-group_keys_False-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_True-sort_True-group_keys_False-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_True-sort_True-group_keys_True-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_True-sort_True-group_keys_True-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_True-sort_True-group_keys_True-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_True-sort_True-group_keys_True-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_False-dropna_True-sort_True-group_keys_True-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_False-sort_False-group_keys_False-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_False-sort_False-group_keys_False-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_False-sort_False-group_keys_False-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_False-sort_False-group_keys_False-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_False-sort_False-group_keys_False-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_False-sort_False-group_keys_True-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_False-sort_False-group_keys_True-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_False-sort_False-group_keys_True-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_False-sort_False-group_keys_True-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_False-sort_False-group_keys_True-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_False-sort_True-group_keys_False-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_False-sort_True-group_keys_False-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_False-sort_True-group_keys_False-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_False-sort_True-group_keys_False-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_False-sort_True-group_keys_False-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_False-sort_True-group_keys_True-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_False-sort_True-group_keys_True-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_False-sort_True-group_keys_True-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_False-sort_True-group_keys_True-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_False-sort_True-group_keys_True-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_True-sort_False-group_keys_False-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_True-sort_False-group_keys_False-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_True-sort_False-group_keys_False-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_True-sort_False-group_keys_False-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_True-sort_False-group_keys_False-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_True-sort_False-group_keys_True-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_True-sort_False-group_keys_True-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_True-sort_False-group_keys_True-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_True-sort_False-group_keys_True-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_True-sort_False-group_keys_True-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_True-sort_True-group_keys_False-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_True-sort_True-group_keys_False-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_True-sort_True-group_keys_False-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_True-sort_True-group_keys_False-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_True-sort_True-group_keys_False-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_True-sort_True-group_keys_True-non_transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_True-sort_True-group_keys_True-non_transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_True-sort_True-group_keys_True-return_scalar],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_True-sort_True-group_keys_True-transform_returns_dataframe],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[index-include_groups_True-dropna_True-sort_True-group_keys_True-transform_returns_series],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_False-sort_False-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_False-sort_False-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_False-sort_False-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [k0, k1, nan]
[left]:  [x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0, x
int_col    14
dtype: int64_x
int_col    14.0
dtype: float64_k1, x
int_col    17
dtype: int64_x
int_col    17.0
dtype: float64_None]
[right]: [44_14.666666666666666_k0, 14_14.0_k1, 17_17.0_None]
At positional index 0, first diff: x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0 != 44_14.666666666666666_k0",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_False-sort_False-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_False-sort_False-group_keys_False-transform_returns_series],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_False-sort_False-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_False-sort_False-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, MultiIndex([('k0',  'sum'),
            ('k0', 'mean'),
            ('k0', 'name'),
            ('k1',  'sum'),
            ('k1', 'mean'),
            ('k1', 'name'),
            ( nan,  'sum'),
            ( nan, 'mean'),
            ( nan, 'name')],
           names=['string_col_1', None])",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_False-sort_False-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [k0, k1, nan]
[left]:  [x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0, x
int_col    14
dtype: int64_x
int_col    14.0
dtype: float64_k1, x
int_col    17
dtype: int64_x
int_col    17.0
dtype: float64_None]
[right]: [44_14.666666666666666_k0, 14_14.0_k1, 17_17.0_None]
At positional index 0, first diff: x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0 != 44_14.666666666666666_k0",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_False-sort_False-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_False-sort_False-group_keys_True-transform_returns_series],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_False-sort_True-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_False-sort_True-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_False-sort_True-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [k0, k1, nan]
[left]:  [x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0, x
int_col    14
dtype: int64_x
int_col    14.0
dtype: float64_k1, x
int_col    17
dtype: int64_x
int_col    17.0
dtype: float64_None]
[right]: [44_14.666666666666666_k0, 14_14.0_k1, 17_17.0_None]
At positional index 0, first diff: x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0 != 44_14.666666666666666_k0",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_False-sort_True-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_False-sort_True-group_keys_False-transform_returns_series],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_False-sort_True-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_False-sort_True-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, MultiIndex([('k0',  'sum'),
            ('k0', 'mean'),
            ('k0', 'name'),
            ('k1',  'sum'),
            ('k1', 'mean'),
            ('k1', 'name'),
            ( nan,  'sum'),
            ( nan, 'mean'),
            ( nan, 'name')],
           names=['string_col_1', None])",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_False-sort_True-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [k0, k1, nan]
[left]:  [x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0, x
int_col    14
dtype: int64_x
int_col    14.0
dtype: float64_k1, x
int_col    17
dtype: int64_x
int_col    17.0
dtype: float64_None]
[right]: [44_14.666666666666666_k0, 14_14.0_k1, 17_17.0_None]
At positional index 0, first diff: x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0 != 44_14.666666666666666_k0",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_False-sort_True-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_False-sort_True-group_keys_True-transform_returns_series],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_True-sort_False-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_True-sort_False-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_True-sort_False-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [k0, k1]
[left]:  [x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0, x
int_col    14
dtype: int64_x
int_col    14.0
dtype: float64_k1]
[right]: [44_14.666666666666666_k0, 14_14.0_k1]
At positional index 0, first diff: x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0 != 44_14.666666666666666_k0",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_True-sort_False-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_True-sort_False-group_keys_False-transform_returns_series],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_True-sort_False-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_True-sort_False-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, MultiIndex([('k0',  'sum'),
            ('k0', 'mean'),
            ('k0', 'name'),
            ('k1',  'sum'),
            ('k1', 'mean'),
            ('k1', 'name')],
           names=['string_col_1', None])",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_True-sort_False-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [k0, k1]
[left]:  [x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0, x
int_col    14
dtype: int64_x
int_col    14.0
dtype: float64_k1]
[right]: [44_14.666666666666666_k0, 14_14.0_k1]
At positional index 0, first diff: x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0 != 44_14.666666666666666_k0",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_True-sort_False-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_True-sort_False-group_keys_True-transform_returns_series],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_True-sort_True-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_True-sort_True-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_True-sort_True-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [k0, k1]
[left]:  [x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0, x
int_col    14
dtype: int64_x
int_col    14.0
dtype: float64_k1]
[right]: [44_14.666666666666666_k0, 14_14.0_k1]
At positional index 0, first diff: x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0 != 44_14.666666666666666_k0",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_True-sort_True-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_True-sort_True-group_keys_False-transform_returns_series],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_True-sort_True-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_True-sort_True-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, MultiIndex([('k0',  'sum'),
            ('k0', 'mean'),
            ('k0', 'name'),
            ('k1',  'sum'),
            ('k1', 'mean'),
            ('k1', 'name')],
           names=['string_col_1', None])",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_True-sort_True-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [k0, k1]
[left]:  [x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0, x
int_col    14
dtype: int64_x
int_col    14.0
dtype: float64_k1]
[right]: [44_14.666666666666666_k0, 14_14.0_k1]
At positional index 0, first diff: x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0 != 44_14.666666666666666_k0",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_True-sort_True-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_False-dropna_True-sort_True-group_keys_True-transform_returns_series],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_False-sort_False-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_False-sort_False-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_False-sort_False-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [k0, k1, nan]
[left]:  [x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0, x
int_col    14
dtype: int64_x
int_col    14.0
dtype: float64_k1, x
int_col    17
dtype: int64_x
int_col    17.0
dtype: float64_None]
[right]: [44_14.666666666666666_k0, 14_14.0_k1, 17_17.0_None]
At positional index 0, first diff: x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0 != 44_14.666666666666666_k0",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_False-sort_False-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_False-sort_False-group_keys_False-transform_returns_series],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_False-sort_False-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_False-sort_False-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, MultiIndex([('k0',  'sum'),
            ('k0', 'mean'),
            ('k0', 'name'),
            ('k1',  'sum'),
            ('k1', 'mean'),
            ('k1', 'name'),
            ( nan,  'sum'),
            ( nan, 'mean'),
            ( nan, 'name')],
           names=['string_col_1', None])",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_False-sort_False-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [k0, k1, nan]
[left]:  [x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0, x
int_col    14
dtype: int64_x
int_col    14.0
dtype: float64_k1, x
int_col    17
dtype: int64_x
int_col    17.0
dtype: float64_None]
[right]: [44_14.666666666666666_k0, 14_14.0_k1, 17_17.0_None]
At positional index 0, first diff: x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0 != 44_14.666666666666666_k0",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_False-sort_False-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_False-sort_False-group_keys_True-transform_returns_series],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_False-sort_True-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_False-sort_True-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_False-sort_True-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [k0, k1, nan]
[left]:  [x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0, x
int_col    14
dtype: int64_x
int_col    14.0
dtype: float64_k1, x
int_col    17
dtype: int64_x
int_col    17.0
dtype: float64_None]
[right]: [44_14.666666666666666_k0, 14_14.0_k1, 17_17.0_None]
At positional index 0, first diff: x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0 != 44_14.666666666666666_k0",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_False-sort_True-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_False-sort_True-group_keys_False-transform_returns_series],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_False-sort_True-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_False-sort_True-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, MultiIndex([('k0',  'sum'),
            ('k0', 'mean'),
            ('k0', 'name'),
            ('k1',  'sum'),
            ('k1', 'mean'),
            ('k1', 'name'),
            ( nan,  'sum'),
            ( nan, 'mean'),
            ( nan, 'name')],
           names=['string_col_1', None])",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_False-sort_True-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [k0, k1, nan]
[left]:  [x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0, x
int_col    14
dtype: int64_x
int_col    14.0
dtype: float64_k1, x
int_col    17
dtype: int64_x
int_col    17.0
dtype: float64_None]
[right]: [44_14.666666666666666_k0, 14_14.0_k1, 17_17.0_None]
At positional index 0, first diff: x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0 != 44_14.666666666666666_k0",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_False-sort_True-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_False-sort_True-group_keys_True-transform_returns_series],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_True-sort_False-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_True-sort_False-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_True-sort_False-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [k0, k1]
[left]:  [x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0, x
int_col    14
dtype: int64_x
int_col    14.0
dtype: float64_k1]
[right]: [44_14.666666666666666_k0, 14_14.0_k1]
At positional index 0, first diff: x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0 != 44_14.666666666666666_k0",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_True-sort_False-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_True-sort_False-group_keys_False-transform_returns_series],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_True-sort_False-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_True-sort_False-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, MultiIndex([('k0',  'sum'),
            ('k0', 'mean'),
            ('k0', 'name'),
            ('k1',  'sum'),
            ('k1', 'mean'),
            ('k1', 'name')],
           names=['string_col_1', None])",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_True-sort_False-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [k0, k1]
[left]:  [x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0, x
int_col    14
dtype: int64_x
int_col    14.0
dtype: float64_k1]
[right]: [44_14.666666666666666_k0, 14_14.0_k1]
At positional index 0, first diff: x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0 != 44_14.666666666666666_k0",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_True-sort_False-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_True-sort_False-group_keys_True-transform_returns_series],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_True-sort_True-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_True-sort_True-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_True-sort_True-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [k0, k1]
[left]:  [x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0, x
int_col    14
dtype: int64_x
int_col    14.0
dtype: float64_k1]
[right]: [44_14.666666666666666_k0, 14_14.0_k1]
At positional index 0, first diff: x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0 != 44_14.666666666666666_k0",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_True-sort_True-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_True-sort_True-group_keys_False-transform_returns_series],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_True-sort_True-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_True-sort_True-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, MultiIndex([('k0',  'sum'),
            ('k0', 'mean'),
            ('k0', 'name'),
            ('k1',  'sum'),
            ('k1', 'mean'),
            ('k1', 'name')],
           names=['string_col_1', None])",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_True-sort_True-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [k0, k1]
[left]:  [x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0, x
int_col    14
dtype: int64_x
int_col    14.0
dtype: float64_k1]
[right]: [44_14.666666666666666_k0, 14_14.0_k1]
At positional index 0, first diff: x
int_col    44
dtype: int64_x
int_col    14.666667
dtype: float64_k0 != 44_14.666666666666666_k0",failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_True-sort_True-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_dataframe_groupby_getitem[string_col_1-include_groups_True-dropna_True-sort_True-group_keys_True-transform_returns_series],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_False-duplicate_df_rowwise-as_index_False-by_index-include_groups_False],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_False-duplicate_df_rowwise-as_index_False-by_index-include_groups_True],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_False-duplicate_df_rowwise-as_index_False-by_string_col_1-include_groups_False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_False-duplicate_df_rowwise-as_index_False-by_string_col_1-include_groups_True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_False-duplicate_df_rowwise-as_index_True-by_index-include_groups_False],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_False-duplicate_df_rowwise-as_index_True-by_index-include_groups_True],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_False-duplicate_df_rowwise-as_index_True-by_string_col_1-include_groups_False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_False-duplicate_df_rowwise-as_index_True-by_string_col_1-include_groups_True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_False-transform_that_changes_columns-as_index_False-by_index-include_groups_False],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_False-transform_that_changes_columns-as_index_False-by_index-include_groups_True],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_False-transform_that_changes_columns-as_index_False-by_string_col_1-include_groups_False],"AssertionError: DataFrame.index are different

DataFrame.index values are different (50.0 %)
[left]:  Index(['i0', 'i1', 'i1', 'i2'], dtype='object')
[right]: Index(['i0', 'i1', 'i2', 'i1'], dtype='object', name='index')
At positional index 2, first diff: i1 != i2",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_False-transform_that_changes_columns-as_index_False-by_string_col_1-include_groups_True],"AssertionError: DataFrame.index are different

DataFrame.index values are different (50.0 %)
[left]:  Index(['i0', 'i1', 'i1', 'i2'], dtype='object')
[right]: Index(['i0', 'i1', 'i2', 'i1'], dtype='object', name='index')
At positional index 2, first diff: i1 != i2",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_False-transform_that_changes_columns-as_index_True-by_index-include_groups_False],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_False-transform_that_changes_columns-as_index_True-by_index-include_groups_True],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_False-transform_that_changes_columns-as_index_True-by_string_col_1-include_groups_False],"AssertionError: DataFrame.index are different

DataFrame.index values are different (50.0 %)
[left]:  Index(['i0', 'i1', 'i1', 'i2'], dtype='object')
[right]: Index(['i0', 'i1', 'i2', 'i1'], dtype='object', name='index')
At positional index 2, first diff: i1 != i2",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_False-transform_that_changes_columns-as_index_True-by_string_col_1-include_groups_True],"AssertionError: DataFrame.index are different

DataFrame.index values are different (50.0 %)
[left]:  Index(['i0', 'i1', 'i1', 'i2'], dtype='object')
[right]: Index(['i0', 'i1', 'i2', 'i1'], dtype='object', name='index')
At positional index 2, first diff: i1 != i2",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_True-duplicate_df_rowwise-as_index_False-by_index-include_groups_False],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_True-duplicate_df_rowwise-as_index_False-by_index-include_groups_True],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_True-duplicate_df_rowwise-as_index_False-by_string_col_1-include_groups_False],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_True-duplicate_df_rowwise-as_index_False-by_string_col_1-include_groups_True],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_True-duplicate_df_rowwise-as_index_True-by_index-include_groups_False],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_True-duplicate_df_rowwise-as_index_True-by_index-include_groups_True],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_True-duplicate_df_rowwise-as_index_True-by_string_col_1-include_groups_False],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_True-duplicate_df_rowwise-as_index_True-by_string_col_1-include_groups_True],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_True-transform_that_changes_columns-as_index_False-by_index-include_groups_False],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_True-transform_that_changes_columns-as_index_False-by_index-include_groups_True],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_True-transform_that_changes_columns-as_index_False-by_string_col_1-include_groups_False],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_True-transform_that_changes_columns-as_index_False-by_string_col_1-include_groups_True],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_True-transform_that_changes_columns-as_index_True-by_index-include_groups_False],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_True-transform_that_changes_columns-as_index_True-by_index-include_groups_True],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_True-transform_that_changes_columns-as_index_True-by_string_col_1-include_groups_False],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_non_unique_index-group_keys_True-transform_that_changes_columns-as_index_True-by_string_col_1-include_groups_True],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_False-duplicate_df_rowwise-as_index_False-by_index-include_groups_False],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_False-duplicate_df_rowwise-as_index_False-by_index-include_groups_True],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_False-duplicate_df_rowwise-as_index_False-by_string_col_1-include_groups_False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_False-duplicate_df_rowwise-as_index_False-by_string_col_1-include_groups_True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_False-duplicate_df_rowwise-as_index_True-by_index-include_groups_False],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_False-duplicate_df_rowwise-as_index_True-by_index-include_groups_True],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_False-duplicate_df_rowwise-as_index_True-by_string_col_1-include_groups_False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_False-duplicate_df_rowwise-as_index_True-by_string_col_1-include_groups_True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_False-transform_that_changes_columns-as_index_False-by_index-include_groups_False],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_False-transform_that_changes_columns-as_index_False-by_index-include_groups_True],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_False-transform_that_changes_columns-as_index_False-by_string_col_1-include_groups_False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_False-transform_that_changes_columns-as_index_False-by_string_col_1-include_groups_True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_False-transform_that_changes_columns-as_index_True-by_index-include_groups_False],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_False-transform_that_changes_columns-as_index_True-by_index-include_groups_True],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_False-transform_that_changes_columns-as_index_True-by_string_col_1-include_groups_False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_False-transform_that_changes_columns-as_index_True-by_string_col_1-include_groups_True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_True-duplicate_df_rowwise-as_index_False-by_index-include_groups_False],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_True-duplicate_df_rowwise-as_index_False-by_index-include_groups_True],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_True-duplicate_df_rowwise-as_index_False-by_string_col_1-include_groups_False],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_True-duplicate_df_rowwise-as_index_False-by_string_col_1-include_groups_True],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_True-duplicate_df_rowwise-as_index_True-by_index-include_groups_False],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_True-duplicate_df_rowwise-as_index_True-by_index-include_groups_True],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_True-duplicate_df_rowwise-as_index_True-by_string_col_1-include_groups_False],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_True-duplicate_df_rowwise-as_index_True-by_string_col_1-include_groups_True],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_True-transform_that_changes_columns-as_index_False-by_index-include_groups_False],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_True-transform_that_changes_columns-as_index_False-by_index-include_groups_True],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_True-transform_that_changes_columns-as_index_False-by_string_col_1-include_groups_False],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_True-transform_that_changes_columns-as_index_False-by_string_col_1-include_groups_True],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_True-transform_that_changes_columns-as_index_True-by_index-include_groups_False],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_True-transform_that_changes_columns-as_index_True-by_index-include_groups_True],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_True-transform_that_changes_columns-as_index_True-by_string_col_1-include_groups_False],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_df_with_single_level_labels[with_unique_index-group_keys_True-transform_that_changes_columns-as_index_True-by_string_col_1-include_groups_True],"AssertionError: MultiIndex level [1] are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.groupby.test_groupby_apply,test_dropna[index0-False-include_groups_False],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dropna[index0-False-include_groups_True],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dropna[index0-True-include_groups_False],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dropna[index0-True-include_groups_True],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dropna[index1-False-include_groups_False],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dropna[index1-False-include_groups_True],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_dropna[index1-True-include_groups_False],"reason: We drop all the rows, apply the UDTF, and try to pivot the result, but pivoting an empty frame causes a SQL error due to SNOW-1233895",xfailed
tests.integ.modin.groupby.test_groupby_apply,test_dropna[index1-True-include_groups_True],"reason: We drop all the rows, apply the UDTF, and try to pivot the result, but pivoting an empty frame causes a SQL error due to SNOW-1233895",xfailed
tests.integ.modin.groupby.test_groupby_apply,test_duplicate_index_groupby_mismatch_with_pandas[include_groups_False],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_duplicate_index_groupby_mismatch_with_pandas[include_groups_True],KeyError: 'index',failed
tests.integ.modin.groupby.test_groupby_apply,test_group_dataframe_with_column_of_all_nulls_snow_1233832[None-include_groups_False],[XPASS(strict)] SNOW-1233832,failed
tests.integ.modin.groupby.test_groupby_apply,test_group_dataframe_with_column_of_all_nulls_snow_1233832[None-include_groups_True],[XPASS(strict)] SNOW-1233832,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_False-sort_False-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_False-sort_False-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_False-sort_False-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [a, b]
[left]:  [__reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_b]
[right]: [1_0.5_a, 2_2.0_b]
At positional index 0, first diff: __reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a != 1_0.5_a",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_False-sort_False-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_False-sort_False-group_keys_False-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_False-sort_False-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_False-sort_False-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, MultiIndex([('a',  'sum'),
            ('a', 'mean'),
            ('a', 'name'),
            ('b',  'sum'),
            ('b', 'mean'),
            ('b', 'name')],
           )",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_False-sort_False-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [a, b]
[left]:  [__reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_b]
[right]: [1_0.5_a, 2_2.0_b]
At positional index 0, first diff: __reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a != 1_0.5_a",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_False-sort_False-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_False-sort_False-group_keys_True-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_False-sort_True-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_False-sort_True-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_False-sort_True-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [a, b]
[left]:  [__reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_b]
[right]: [1_0.5_a, 2_2.0_b]
At positional index 0, first diff: __reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a != 1_0.5_a",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_False-sort_True-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_False-sort_True-group_keys_False-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_False-sort_True-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_False-sort_True-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, MultiIndex([('a',  'sum'),
            ('a', 'mean'),
            ('a', 'name'),
            ('b',  'sum'),
            ('b', 'mean'),
            ('b', 'name')],
           )",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_False-sort_True-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [a, b]
[left]:  [__reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_b]
[right]: [1_0.5_a, 2_2.0_b]
At positional index 0, first diff: __reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a != 1_0.5_a",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_False-sort_True-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_False-sort_True-group_keys_True-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_True-sort_False-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_True-sort_False-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_True-sort_False-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [a, b]
[left]:  [__reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_b]
[right]: [1_0.5_a, 2_2.0_b]
At positional index 0, first diff: __reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a != 1_0.5_a",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_True-sort_False-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_True-sort_False-group_keys_False-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_True-sort_False-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_True-sort_False-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, MultiIndex([('a',  'sum'),
            ('a', 'mean'),
            ('a', 'name'),
            ('b',  'sum'),
            ('b', 'mean'),
            ('b', 'name')],
           )",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_True-sort_False-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [a, b]
[left]:  [__reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_b]
[right]: [1_0.5_a, 2_2.0_b]
At positional index 0, first diff: __reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a != 1_0.5_a",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_True-sort_False-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_True-sort_False-group_keys_True-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_True-sort_True-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_True-sort_True-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_True-sort_True-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [a, b]
[left]:  [__reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_b]
[right]: [1_0.5_a, 2_2.0_b]
At positional index 0, first diff: __reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a != 1_0.5_a",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_True-sort_True-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_True-sort_True-group_keys_False-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_True-sort_True-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_True-sort_True-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, MultiIndex([('a',  'sum'),
            ('a', 'mean'),
            ('a', 'name'),
            ('b',  'sum'),
            ('b', 'mean'),
            ('b', 'name')],
           )",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_True-sort_True-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [a, b]
[left]:  [__reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_b]
[right]: [1_0.5_a, 2_2.0_b]
At positional index 0, first diff: __reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a != 1_0.5_a",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_True-sort_True-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_False-dropna_True-sort_True-group_keys_True-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_False-sort_False-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_False-sort_False-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_False-sort_False-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [a, b]
[left]:  [__reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_b]
[right]: [1_0.5_a, 2_2.0_b]
At positional index 0, first diff: __reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a != 1_0.5_a",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_False-sort_False-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_False-sort_False-group_keys_False-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_False-sort_False-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_False-sort_False-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, MultiIndex([('a',  'sum'),
            ('a', 'mean'),
            ('a', 'name'),
            ('b',  'sum'),
            ('b', 'mean'),
            ('b', 'name')],
           )",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_False-sort_False-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [a, b]
[left]:  [__reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_b]
[right]: [1_0.5_a, 2_2.0_b]
At positional index 0, first diff: __reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a != 1_0.5_a",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_False-sort_False-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_False-sort_False-group_keys_True-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_False-sort_True-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_False-sort_True-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_False-sort_True-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [a, b]
[left]:  [__reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_b]
[right]: [1_0.5_a, 2_2.0_b]
At positional index 0, first diff: __reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a != 1_0.5_a",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_False-sort_True-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_False-sort_True-group_keys_False-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_False-sort_True-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_False-sort_True-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, MultiIndex([('a',  'sum'),
            ('a', 'mean'),
            ('a', 'name'),
            ('b',  'sum'),
            ('b', 'mean'),
            ('b', 'name')],
           )",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_False-sort_True-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [a, b]
[left]:  [__reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_b]
[right]: [1_0.5_a, 2_2.0_b]
At positional index 0, first diff: __reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a != 1_0.5_a",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_False-sort_True-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_False-sort_True-group_keys_True-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_True-sort_False-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_True-sort_False-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_True-sort_False-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [a, b]
[left]:  [__reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_b]
[right]: [1_0.5_a, 2_2.0_b]
At positional index 0, first diff: __reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a != 1_0.5_a",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_True-sort_False-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_True-sort_False-group_keys_False-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_True-sort_False-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_True-sort_False-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, MultiIndex([('a',  'sum'),
            ('a', 'mean'),
            ('a', 'name'),
            ('b',  'sum'),
            ('b', 'mean'),
            ('b', 'name')],
           )",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_True-sort_False-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [a, b]
[left]:  [__reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_b]
[right]: [1_0.5_a, 2_2.0_b]
At positional index 0, first diff: __reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a != 1_0.5_a",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_True-sort_False-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_True-sort_False-group_keys_True-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_True-sort_True-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_True-sort_True-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_True-sort_True-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [a, b]
[left]:  [__reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_b]
[right]: [1_0.5_a, 2_2.0_b]
At positional index 0, first diff: __reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a != 1_0.5_a",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_True-sort_True-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_True-sort_True-group_keys_False-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_True-sort_True-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_True-sort_True-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 6, MultiIndex([('a',  'sum'),
            ('a', 'mean'),
            ('a', 'name'),
            ('b',  'sum'),
            ('b', 'mean'),
            ('b', 'name')],
           )",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_True-sort_True-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [a, b]
[left]:  [__reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_b]
[right]: [1_0.5_a, 2_2.0_b]
At positional index 0, first diff: __reduced__    1
dtype: int64___reduced__    0.5
dtype: float64_a != 1_0.5_a",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_True-sort_True-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_external_by[include_groups_True-dropna_True-sort_True-group_keys_True-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_False-sort_False-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_False-sort_False-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_False-sort_False-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [__reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0, __reduced__    1
dtype: int64___reduced__    1.0
dtype: float64_1, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_2]
[right]: [0_0.0_0, 1_1.0_1, 2_2.0_2]
At positional index 0, first diff: __reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0 != 0_0.0_0",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_False-sort_False-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_False-sort_False-group_keys_False-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_False-sort_False-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_False-sort_False-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, MultiIndex([(0,  'sum'),
            (0, 'mean'),
            (0, 'name'),
            (1,  'sum'),
            (1, 'mean'),
            (1, 'name'),
            (2,  'sum'),
            (2, 'mean'),
            (2, 'name')],
           )",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_False-sort_False-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [__reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0, __reduced__    1
dtype: int64___reduced__    1.0
dtype: float64_1, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_2]
[right]: [0_0.0_0, 1_1.0_1, 2_2.0_2]
At positional index 0, first diff: __reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0 != 0_0.0_0",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_False-sort_False-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_False-sort_False-group_keys_True-transform_returns_series],"AssertionError: MultiIndex level [0] are different

Attribute ""names"" are different
[left]:  ['__reduced__']
[right]: [None]",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_False-sort_True-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_False-sort_True-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_False-sort_True-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [__reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0, __reduced__    1
dtype: int64___reduced__    1.0
dtype: float64_1, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_2]
[right]: [0_0.0_0, 1_1.0_1, 2_2.0_2]
At positional index 0, first diff: __reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0 != 0_0.0_0",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_False-sort_True-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_False-sort_True-group_keys_False-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_False-sort_True-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_False-sort_True-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, MultiIndex([(0,  'sum'),
            (0, 'mean'),
            (0, 'name'),
            (1,  'sum'),
            (1, 'mean'),
            (1, 'name'),
            (2,  'sum'),
            (2, 'mean'),
            (2, 'name')],
           )",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_False-sort_True-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [__reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0, __reduced__    1
dtype: int64___reduced__    1.0
dtype: float64_1, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_2]
[right]: [0_0.0_0, 1_1.0_1, 2_2.0_2]
At positional index 0, first diff: __reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0 != 0_0.0_0",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_False-sort_True-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_False-sort_True-group_keys_True-transform_returns_series],"AssertionError: MultiIndex level [0] are different

Attribute ""names"" are different
[left]:  ['__reduced__']
[right]: [None]",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_True-sort_False-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_True-sort_False-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_True-sort_False-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [__reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0, __reduced__    1
dtype: int64___reduced__    1.0
dtype: float64_1, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_2]
[right]: [0_0.0_0, 1_1.0_1, 2_2.0_2]
At positional index 0, first diff: __reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0 != 0_0.0_0",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_True-sort_False-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_True-sort_False-group_keys_False-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_True-sort_False-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_True-sort_False-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, MultiIndex([(0,  'sum'),
            (0, 'mean'),
            (0, 'name'),
            (1,  'sum'),
            (1, 'mean'),
            (1, 'name'),
            (2,  'sum'),
            (2, 'mean'),
            (2, 'name')],
           )",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_True-sort_False-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [__reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0, __reduced__    1
dtype: int64___reduced__    1.0
dtype: float64_1, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_2]
[right]: [0_0.0_0, 1_1.0_1, 2_2.0_2]
At positional index 0, first diff: __reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0 != 0_0.0_0",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_True-sort_False-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_True-sort_False-group_keys_True-transform_returns_series],"AssertionError: MultiIndex level [0] are different

Attribute ""names"" are different
[left]:  ['__reduced__']
[right]: [None]",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_True-sort_True-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_True-sort_True-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_True-sort_True-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [__reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0, __reduced__    1
dtype: int64___reduced__    1.0
dtype: float64_1, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_2]
[right]: [0_0.0_0, 1_1.0_1, 2_2.0_2]
At positional index 0, first diff: __reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0 != 0_0.0_0",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_True-sort_True-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_True-sort_True-group_keys_False-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_True-sort_True-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_True-sort_True-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, MultiIndex([(0,  'sum'),
            (0, 'mean'),
            (0, 'name'),
            (1,  'sum'),
            (1, 'mean'),
            (1, 'name'),
            (2,  'sum'),
            (2, 'mean'),
            (2, 'name')],
           )",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_True-sort_True-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [__reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0, __reduced__    1
dtype: int64___reduced__    1.0
dtype: float64_1, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_2]
[right]: [0_0.0_0, 1_1.0_1, 2_2.0_2]
At positional index 0, first diff: __reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0 != 0_0.0_0",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_True-sort_True-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_False-dropna_True-sort_True-group_keys_True-transform_returns_series],"AssertionError: MultiIndex level [0] are different

Attribute ""names"" are different
[left]:  ['__reduced__']
[right]: [None]",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_False-sort_False-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_False-sort_False-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_False-sort_False-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [__reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0, __reduced__    1
dtype: int64___reduced__    1.0
dtype: float64_1, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_2]
[right]: [0_0.0_0, 1_1.0_1, 2_2.0_2]
At positional index 0, first diff: __reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0 != 0_0.0_0",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_False-sort_False-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_False-sort_False-group_keys_False-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_False-sort_False-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_False-sort_False-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, MultiIndex([(0,  'sum'),
            (0, 'mean'),
            (0, 'name'),
            (1,  'sum'),
            (1, 'mean'),
            (1, 'name'),
            (2,  'sum'),
            (2, 'mean'),
            (2, 'name')],
           )",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_False-sort_False-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [__reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0, __reduced__    1
dtype: int64___reduced__    1.0
dtype: float64_1, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_2]
[right]: [0_0.0_0, 1_1.0_1, 2_2.0_2]
At positional index 0, first diff: __reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0 != 0_0.0_0",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_False-sort_False-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_False-sort_False-group_keys_True-transform_returns_series],"AssertionError: MultiIndex level [0] are different

Attribute ""names"" are different
[left]:  ['__reduced__']
[right]: [None]",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_False-sort_True-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_False-sort_True-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_False-sort_True-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [__reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0, __reduced__    1
dtype: int64___reduced__    1.0
dtype: float64_1, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_2]
[right]: [0_0.0_0, 1_1.0_1, 2_2.0_2]
At positional index 0, first diff: __reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0 != 0_0.0_0",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_False-sort_True-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_False-sort_True-group_keys_False-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_False-sort_True-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_False-sort_True-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, MultiIndex([(0,  'sum'),
            (0, 'mean'),
            (0, 'name'),
            (1,  'sum'),
            (1, 'mean'),
            (1, 'name'),
            (2,  'sum'),
            (2, 'mean'),
            (2, 'name')],
           )",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_False-sort_True-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [__reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0, __reduced__    1
dtype: int64___reduced__    1.0
dtype: float64_1, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_2]
[right]: [0_0.0_0, 1_1.0_1, 2_2.0_2]
At positional index 0, first diff: __reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0 != 0_0.0_0",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_False-sort_True-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_False-sort_True-group_keys_True-transform_returns_series],"AssertionError: MultiIndex level [0] are different

Attribute ""names"" are different
[left]:  ['__reduced__']
[right]: [None]",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_True-sort_False-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_True-sort_False-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_True-sort_False-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [__reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0, __reduced__    1
dtype: int64___reduced__    1.0
dtype: float64_1, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_2]
[right]: [0_0.0_0, 1_1.0_1, 2_2.0_2]
At positional index 0, first diff: __reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0 != 0_0.0_0",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_True-sort_False-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_True-sort_False-group_keys_False-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_True-sort_False-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_True-sort_False-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, MultiIndex([(0,  'sum'),
            (0, 'mean'),
            (0, 'name'),
            (1,  'sum'),
            (1, 'mean'),
            (1, 'name'),
            (2,  'sum'),
            (2, 'mean'),
            (2, 'name')],
           )",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_True-sort_False-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [__reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0, __reduced__    1
dtype: int64___reduced__    1.0
dtype: float64_1, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_2]
[right]: [0_0.0_0, 1_1.0_1, 2_2.0_2]
At positional index 0, first diff: __reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0 != 0_0.0_0",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_True-sort_False-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_True-sort_False-group_keys_True-transform_returns_series],"AssertionError: MultiIndex level [0] are different

Attribute ""names"" are different
[left]:  ['__reduced__']
[right]: [None]",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_True-sort_True-group_keys_False-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_True-sort_True-group_keys_False-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, Index(['sum', 'mean', 'name', 'sum', 'mean', 'name', 'sum', 'mean', 'name'], dtype='object')",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_True-sort_True-group_keys_False-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [__reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0, __reduced__    1
dtype: int64___reduced__    1.0
dtype: float64_1, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_2]
[right]: [0_0.0_0, 1_1.0_1, 2_2.0_2]
At positional index 0, first diff: __reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0 != 0_0.0_0",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_True-sort_True-group_keys_False-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_True-sort_True-group_keys_False-transform_returns_series],[XPASS(strict)] SNOW-1238546,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_True-sort_True-group_keys_True-non_transform_returns_dataframe],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_True-sort_True-group_keys_True-non_transform_returns_series],"AssertionError: Series are different

Series length are different
[left]:  3, Index(['sum', 'mean', 'name'], dtype='object', name='custom_metrics')
[right]: 9, MultiIndex([(0,  'sum'),
            (0, 'mean'),
            (0, 'name'),
            (1,  'sum'),
            (1, 'mean'),
            (1, 'name'),
            (2,  'sum'),
            (2, 'mean'),
            (2, 'name')],
           )",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_True-sort_True-group_keys_True-return_scalar],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [__reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0, __reduced__    1
dtype: int64___reduced__    1.0
dtype: float64_1, __reduced__    2
dtype: int64___reduced__    2.0
dtype: float64_2]
[right]: [0_0.0_0, 1_1.0_1, 2_2.0_2]
At positional index 0, first diff: __reduced__    0
dtype: int64___reduced__    0.0
dtype: float64_0 != 0_0.0_0",failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_True-sort_True-group_keys_True-transform_returns_dataframe],TypeError: must pass an index to rename,failed
tests.integ.modin.groupby.test_groupby_apply,test_grouping_series_by_self[include_groups_True-dropna_True-sort_True-group_keys_True-transform_returns_series],"AssertionError: MultiIndex level [0] are different

Attribute ""names"" are different
[left]:  ['__reduced__']
[right]: [None]",failed
tests.integ.modin.groupby.test_groupby_apply,test_non_callable_aggregation,AttributeError: 'str' object has no attribute '__name__'. Did you mean: '__ne__'?,failed
tests.integ.modin.groupby.test_groupby_apply,test_non_series_or_dataframe_return_types[None-include_groups_False],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_non_series_or_dataframe_return_types[None-include_groups_True],AssertionError,failed
tests.integ.modin.groupby.test_groupby_apply,test_non_series_or_dataframe_return_types[date-include_groups_False],[XPASS(strict)] SNOW-1217565,failed
tests.integ.modin.groupby.test_groupby_apply,test_non_series_or_dataframe_return_types[date-include_groups_True],[XPASS(strict)] SNOW-1217565,failed
tests.integ.modin.groupby.test_groupby_apply,test_numpy_ints_in_result[result2-include_groups_False],"[XPASS(strict)] SNOW-1229760: np.int64 is nested inside the single value of the dataframe, so we don't find it or convert it to int.",failed
tests.integ.modin.groupby.test_groupby_apply,test_numpy_ints_in_result[result2-include_groups_True],"[XPASS(strict)] SNOW-1229760: np.int64 is nested inside the single value of the dataframe, so we don't find it or convert it to int.",failed
tests.integ.modin.groupby.test_groupby_apply,test_return_timedelta[include_groups_False],[XPASS(strict)] SNOW-1619940,failed
tests.integ.modin.groupby.test_groupby_apply,test_return_timedelta[include_groups_True],[XPASS(strict)] SNOW-1619940,failed
tests.integ.modin.groupby.test_groupby_apply,test_returning_series_with_conflicting_indexes[include_groups_False],[XPASS(strict)] Snowpark pandas return a DataFrame but native pandas returns a Series. This should be very rare in practice.,failed
tests.integ.modin.groupby.test_groupby_apply,test_returning_series_with_conflicting_indexes[include_groups_True],[XPASS(strict)] Snowpark pandas return a DataFrame but native pandas returns a Series. This should be very rare in practice.,failed
tests.integ.modin.groupby.test_groupby_apply,test_returning_series_with_different_names[include_groups_False],"[XPASS(strict)] Snowpark pandas uses name returned from first group, while pandas returns None. This should be very rare in practice",failed
tests.integ.modin.groupby.test_groupby_apply,test_returning_series_with_different_names[include_groups_True],"[XPASS(strict)] Snowpark pandas uses name returned from first group, while pandas returns None. This should be very rare in practice",failed
tests.integ.modin.groupby.test_groupby_apply,test_scalar_then_dataframe,[XPASS(strict)] Results in mismatch between udtf schema and the actual result. This should be rare in practice.,failed
tests.integ.modin.groupby.test_groupby_apply,test_scalar_then_series,pandas gives AttributeError: 'int' object has no attribute 'index'. See SNOW-1236959,xfailed
tests.integ.modin.groupby.test_groupby_apply,test_scalar_then_series_then_dataframe,pandas gives AttributeError: 'int' object has no attribute 'index'. See SNOW-1236959,xfailed
tests.integ.modin.groupby.test_groupby_apply,test_series_then_dataframe,[XPASS(strict)] Results in mismatch between udtf schema and the actual result. This should be rare in practice.,failed
tests.integ.modin.groupby.test_groupby_apply,test_timedelta_input[timedelta_column-include_groups_False],[XPASS(strict)] ,failed
tests.integ.modin.groupby.test_groupby_apply,test_timedelta_input[timedelta_column-include_groups_True],[XPASS(strict)] ,failed
tests.integ.modin.groupby.test_groupby_apply,test_timedelta_input[timedelta_index-include_groups_False],[XPASS(strict)] ,failed
tests.integ.modin.groupby.test_groupby_apply,test_timedelta_input[timedelta_index-include_groups_True],[XPASS(strict)] ,failed
tests.integ.modin.groupby.test_groupby_basic_agg,test_engine_kwargs_warning,"AssertionError: assert 'The argument `engine` of `groupby_max` has been ignored by Snowpark pandas API' in ''
 +  where '' = <_pytest.logging.LogCaptureFixture object at 0x3422b1ba0>.text",failed
tests.integ.modin.groupby.test_groupby_basic_agg,test_groupby_agg_first_and_last[first-False],"AssertionError: DataFrame.iloc[:, 1] (column name=""('float_col', 'first')"") are different

DataFrame.iloc[:, 1] (column name=""('float_col', 'first')"") values are different (50.0 %)
[index]: [A, B]
[left]:  [2.0, 3.0]
[right]: [nan, 3.0]
At positional index 0, first diff: 2.0 != nan",failed
tests.integ.modin.groupby.test_groupby_basic_agg,test_groupby_agg_first_and_last[last-False],"AssertionError: DataFrame.iloc[:, 1] (column name=""('float_col', 'last')"") are different

DataFrame.iloc[:, 1] (column name=""('float_col', 'last')"") values are different (50.0 %)
[index]: [A, B]
[left]:  [4.0, 3.0]
[right]: [4.0, nan]
At positional index 1, first diff: 3.0 != nan",failed
tests.integ.modin.groupby.test_groupby_basic_agg,test_groupby_agg_on_groupby_columns_named_agg[False-False-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (6, 4)
[right]: (6, 6)",failed
tests.integ.modin.groupby.test_groupby_basic_agg,test_groupby_agg_on_groupby_columns_named_agg[True-False-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (6, 4)
[right]: (6, 6)",failed
tests.integ.modin.groupby.test_groupby_basic_agg,test_groupby_dropna_multi_index[False-group_index1-expected_index_dropna_false1],"AssertionError: DataFrame.index are different

Attribute ""inferred_type"" are different
[left]:  mixed
[right]: string",failed
tests.integ.modin.groupby.test_groupby_basic_agg,test_groupby_dropna_multi_index[False-group_index2-expected_index_dropna_false2],"AssertionError: DataFrame.index are different

Attribute ""inferred_type"" are different
[left]:  mixed
[right]: string",failed
tests.integ.modin.groupby.test_groupby_basic_agg,test_groupby_dropna_multi_index[False-group_index3-expected_index_dropna_false3],"AssertionError: DataFrame.index are different

Attribute ""inferred_type"" are different
[left]:  mixed
[right]: string",failed
tests.integ.modin.groupby.test_groupby_basic_agg,test_groupby_dropna_multi_index[False-group_index4-expected_index_dropna_false4],"AssertionError: MultiIndex level [0] are different

Attribute ""dtype"" are different
[left]:  float64
[right]: object",failed
tests.integ.modin.groupby.test_groupby_basic_agg,test_groupby_with_observed_warns,"AssertionError: assert 'CategoricalDType is not yet supported with Snowpark pandas API, the observed parameter is ignored.' in ''
 +  where '' = <_pytest.logging.LogCaptureFixture object at 0x342266b00>.text",failed
tests.integ.modin.groupby.test_groupby_basic_agg,test_single_group_row_groupby_with_variant[<lambda>0-by_col_data1-expected_groupby_col1],TypeError: unhashable type: 'list',failed
tests.integ.modin.groupby.test_groupby_basic_agg,test_single_group_row_groupby_with_variant[<lambda>1-by_col_data1-expected_groupby_col1],TypeError: unhashable type: 'list',failed
tests.integ.modin.groupby.test_groupby_basic_agg,test_single_group_row_groupby_with_variant[<lambda>2-by_col_data1-expected_groupby_col1],TypeError: unhashable type: 'list',failed
tests.integ.modin.groupby.test_groupby_basic_agg,test_single_group_row_groupby_with_variant[<lambda>3-by_col_data1-expected_groupby_col1],TypeError: unhashable type: 'list',failed
tests.integ.modin.groupby.test_groupby_basic_agg,test_single_group_row_groupby_with_variant[<lambda>4-by_col_data1-expected_groupby_col1],TypeError: unhashable type: 'list',failed
tests.integ.modin.groupby.test_groupby_basic_agg,test_single_group_row_groupby_with_variant[<lambda>5-by_col_data1-expected_groupby_col1],TypeError: unhashable type: 'list',failed
tests.integ.modin.groupby.test_groupby_basic_agg,test_single_group_row_groupby_with_variant[<lambda>6-by_col_data1-expected_groupby_col1],TypeError: unhashable type: 'list',failed
tests.integ.modin.groupby.test_groupby_basic_agg,test_single_group_row_groupby_with_variant[<lambda>7-by_col_data1-expected_groupby_col1],TypeError: unhashable type: 'list',failed
tests.integ.modin.groupby.test_groupby_basic_agg,test_string_sum_with_all_nulls_in_group_produces_empty_string,"AssertionError: DataFrame.iloc[:, 0] (column name=""string_col"") are different

DataFrame.iloc[:, 0] (column name=""string_col"") values are different (50.0 %)
[index]: [0, 1]
[left]:  [0, a]
[right]: [, a]
At positional index 0, first diff: 0 !=",failed
tests.integ.modin.groupby.test_groupby_bfill_ffill,test_groupby_bfill_ffill_multiindex_negative[by_list0-bfill],AssertionError: Snowpark pandas Exception 'I' doesn't match pandas Exception 'A',failed
tests.integ.modin.groupby.test_groupby_bfill_ffill,test_groupby_bfill_ffill_multiindex_negative[by_list0-ffill],AssertionError: Snowpark pandas Exception 'I' doesn't match pandas Exception 'A',failed
tests.integ.modin.groupby.test_groupby_bfill_ffill,test_groupby_bfill_ffill_unsupported_grouping_negative[bfill],KeyError: 'I',failed
tests.integ.modin.groupby.test_groupby_bfill_ffill,test_groupby_bfill_ffill_unsupported_grouping_negative[ffill],KeyError: 'I',failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumcount_negative[LEXLUTHOR-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumcount_negative[LEXLUTHOR-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumcount_negative[None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumlative_non_numeric[cummax-1],"NotImplementedError: function is not implemented for this dtype: [how->cummax,dtype->object]",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumlative_non_numeric[cummin-1],"NotImplementedError: function is not implemented for this dtype: [how->cummin,dtype->object]",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumlative_non_numeric[cumsum-0],"NotImplementedError: function is not implemented for this dtype: [how->cumsum,dtype->object]",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-False-False-cummax-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-False-False-cummax-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-False-False-cummax-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-False-False-cummin-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-False-False-cummin-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-False-False-cummin-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-False-True-cummax-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-False-True-cummax-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-False-True-cummax-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-False-True-cummin-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-False-True-cummin-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-False-True-cummin-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-True-False-cummax-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-True-False-cummax-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-True-False-cummax-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-True-False-cummin-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-True-False-cummin-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-True-False-cummin-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-True-True-cummax-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-True-True-cummax-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-True-True-cummax-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-True-True-cummin-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-True-True-cummin-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-False-True-True-cummin-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-False-False-cummax-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-False-False-cummax-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-False-False-cummax-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-False-False-cummin-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-False-False-cummin-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-False-False-cummin-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-False-True-cummax-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-False-True-cummax-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-False-True-cummax-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-False-True-cummin-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-False-True-cummin-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-False-True-cummin-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-True-False-cummax-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-True-False-cummax-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-True-False-cummax-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-True-False-cummin-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-True-False-cummin-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-True-False-cummin-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-True-True-cummax-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-True-True-cummax-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-True-True-cummax-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-True-True-cummin-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-True-True-cummin-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[False-True-True-True-cummin-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-False-False-cummax-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-False-False-cummax-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-False-False-cummax-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-False-False-cummin-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-False-False-cummin-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-False-False-cummin-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-False-True-cummax-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-False-True-cummax-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-False-True-cummax-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-False-True-cummin-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-False-True-cummin-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-False-True-cummin-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-True-False-cummax-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-True-False-cummax-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-True-False-cummax-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-True-False-cummin-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-True-False-cummin-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-True-False-cummin-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-True-True-cummax-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-True-True-cummax-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-True-True-cummax-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-True-True-cummin-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-True-True-cummin-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-False-True-True-cummin-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-False-False-cummax-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-False-False-cummax-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-False-False-cummax-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-False-False-cummin-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-False-False-cummin-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-False-False-cummin-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-False-True-cummax-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-False-True-cummax-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-False-True-cummax-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-False-True-cummin-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-False-True-cummin-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-False-True-cummin-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-True-False-cummax-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-True-False-cummax-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-True-False-cummax-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-True-False-cummin-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-True-False-cummin-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-True-False-cummin-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-True-True-cummax-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-True-True-cummax-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-True-True-cummax-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-True-True-cummin-DARKSEID],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-True-True-cummin-LEXLUTHOR],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_groupby_dataframe_cumulative,test_groupby_cumulative[True-True-True-True-cummin-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 5)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-False-average-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-False-average-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-False-average-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-False-dense-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-False-dense-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-False-dense-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-False-first-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-False-first-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-False-first-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-False-max-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-False-max-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-False-max-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-False-min-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-False-min-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-False-min-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-True-average-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-True-average-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-True-average-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-True-dense-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-True-dense-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-True-dense-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-True-first-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-True-first-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-True-first-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-True-max-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-True-max-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-True-max-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-True-min-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-True-min-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-bottom-True-min-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-False-average-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-False-average-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-False-average-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-False-dense-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-False-dense-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-False-dense-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-False-first-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-False-first-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-False-first-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-False-max-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-False-max-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-False-max-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-False-min-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-False-min-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-False-min-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-True-average-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-True-average-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-True-average-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-True-dense-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-True-dense-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-True-dense-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-True-first-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-True-first-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-True-first-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-True-max-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-True-max-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-True-max-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-True-min-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-True-min-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-keep-True-min-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-False-average-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-False-average-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-False-average-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-False-dense-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-False-dense-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-False-dense-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-False-first-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-False-first-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-False-first-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-False-max-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-False-max-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-False-max-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-False-min-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-False-min-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-False-min-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-True-average-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-True-average-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-True-average-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-True-dense-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-True-dense-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-True-dense-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-True-first-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-True-first-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-True-first-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-True-max-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-True-max-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-True-max-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-True-min-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-True-min-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[False-top-True-min-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-False-average-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-False-average-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-False-average-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-False-dense-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-False-dense-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-False-dense-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-False-first-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-False-first-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-False-first-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-False-max-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-False-max-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-False-max-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-False-min-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-False-min-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-False-min-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-True-average-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-True-average-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-True-average-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-True-dense-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-True-dense-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-True-dense-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-True-first-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-True-first-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-True-first-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-True-max-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-True-max-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-True-max-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-True-min-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-True-min-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-bottom-True-min-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-False-average-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-False-average-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-False-average-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-False-dense-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-False-dense-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-False-dense-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-False-first-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-False-first-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-False-first-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-False-max-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-False-max-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-False-max-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-False-min-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-False-min-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-False-min-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-True-average-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-True-average-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-True-average-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-True-dense-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-True-dense-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-True-dense-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-True-first-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-True-first-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-True-first-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-True-max-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-True-max-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-True-max-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-True-min-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-True-min-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-keep-True-min-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-False-average-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-False-average-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-False-average-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-False-dense-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-False-dense-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-False-dense-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-False-first-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-False-first-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-False-first-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-False-max-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-False-max-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-False-max-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-False-min-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-False-min-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-False-min-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-True-average-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-True-average-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-True-average-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-True-dense-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-True-dense-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-True-dense-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-True-first-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-True-first-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-True-first-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-True-max-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-True-max-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-True-max-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-True-min-None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-True-min-group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_dataframe_rank,test_groupby_rank_negative[True-top-True-min-group-0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_agg_unsupported_function_SNOW_1305464[dict],Failed: DID NOT RAISE <class 'AttributeError'>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_agg_unsupported_function_SNOW_1305464[list_with_user_defined_function_and_string],Failed: DID NOT RAISE <class 'AttributeError'>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_agg_unsupported_function_SNOW_1305464[named_agg],Failed: DID NOT RAISE <class 'AttributeError'>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_agg_unsupported_function_SNOW_1305464[numpy_aggregation_function],Failed: DID NOT RAISE <class 'AttributeError'>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_agg_unsupported_function_SNOW_1305464[set_with_user_defined_function_and_string],Failed: DID NOT RAISE <class 'AttributeError'>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_agg_unsupported_function_SNOW_1305464[tuple_with_builtins_and_native_pandas_function],Failed: DID NOT RAISE <class 'AttributeError'>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_agg_unsupported_function_SNOW_1305464[tuple_with_user_defined_function_and_string],Failed: DID NOT RAISE <class 'AttributeError'>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_agg_unsupported_function_SNOW_1305464[user_defined_function],Failed: DID NOT RAISE <class 'AttributeError'>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_axis_1[group_name1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_axis_1[x],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_axis_1_mi[group_name1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_axis_1_mi[x],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_level_mapper[mapper0-0],KeyError: 'foo',failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_level_mapper[mapper1-1],KeyError: 'one',failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_ngroups_axis_1,RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_ngroups_axis_1_mi,RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_series_with_numpy_array[by_list0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_series_with_numpy_array[by_list1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_with_callable_and_array[<lambda>],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_with_callable_and_array[by1],KeyError: <function <lambda> at 0x3283ca0e0>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_with_callable_and_array[by2],KeyError: <function <lambda> at 0x3283ca170>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_with_external_series,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_groupby_with_numpy_array,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_non_callable_func,TypeError: 'int' object is not callable,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_std_var_ddof_unsupported[by1-<lambda>-std],Failed: DID NOT RAISE <class 'AttributeError'>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_std_var_ddof_unsupported[by1-<lambda>-var],Failed: DID NOT RAISE <class 'AttributeError'>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_std_var_ddof_unsupported[col1-<lambda>-std],Failed: DID NOT RAISE <class 'AttributeError'>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_std_var_ddof_unsupported[col1-<lambda>-var],Failed: DID NOT RAISE <class 'AttributeError'>,failed
tests.integ.modin.groupby.test_groupby_default2pandas,test_timeseries_groupby_with_callable,Failed: DID NOT RAISE <class 'AttributeError'>,failed
tests.integ.modin.groupby.test_groupby_fillna,test_groupby_fillna_downcast_not_supported_negative,TypeError: {'A': 'str'},failed
tests.integ.modin.groupby.test_groupby_fillna,test_groupby_fillna_multiindex_ffill_bfill_negative[by_list0-1-method_or_value0],AssertionError: Snowpark pandas Exception 'I' doesn't match pandas Exception 'A',failed
tests.integ.modin.groupby.test_groupby_fillna,test_groupby_fillna_multiindex_ffill_bfill_negative[by_list0-1-method_or_value1],AssertionError: Snowpark pandas Exception 'I' doesn't match pandas Exception 'A',failed
tests.integ.modin.groupby.test_groupby_fillna,test_groupby_fillna_multiindex_ffill_bfill_negative[by_list0-1-method_or_value2],AssertionError: Snowpark pandas Exception 'I' doesn't match pandas Exception 'A',failed
tests.integ.modin.groupby.test_groupby_fillna,test_groupby_fillna_multiindex_ffill_bfill_negative[by_list0-None-method_or_value0],AssertionError: Snowpark pandas Exception 'I' doesn't match pandas Exception 'A',failed
tests.integ.modin.groupby.test_groupby_fillna,test_groupby_fillna_multiindex_ffill_bfill_negative[by_list0-None-method_or_value1],AssertionError: Snowpark pandas Exception 'I' doesn't match pandas Exception 'A',failed
tests.integ.modin.groupby.test_groupby_fillna,test_groupby_fillna_multiindex_ffill_bfill_negative[by_list0-None-method_or_value2],AssertionError: Snowpark pandas Exception 'I' doesn't match pandas Exception 'A',failed
tests.integ.modin.groupby.test_groupby_fillna,test_groupby_fillna_other_not_supported_negative,KeyError: 'I',failed
tests.integ.modin.groupby.test_groupby_fillna,test_groupby_fillna_value_not_type_compatible_negative,Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_error_checking,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-False-False-by10],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-False-False-by9],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-False-False-col10_mixed_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-False-False-col1_grp],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-False-False-col2_int64],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-False-False-col3_int_identical],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-False-False-col4_int32],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-False-False-col6_mixed],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-False-False-col7_bool],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-False-False-col8_bool_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-False-False-col9_int_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-False-True-by10],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-False-True-by9],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-False-True-col10_mixed_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-False-True-col1_grp],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-False-True-col2_int64],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-False-True-col3_int_identical],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-False-True-col4_int32],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-False-True-col6_mixed],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-False-True-col7_bool],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-False-True-col8_bool_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-False-True-col9_int_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-True-False-by10],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-True-False-by9],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-True-False-col10_mixed_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-True-False-col1_grp],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-True-False-col2_int64],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-True-False-col3_int_identical],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-True-False-col4_int32],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-True-False-col6_mixed],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-True-False-col7_bool],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-True-False-col8_bool_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-True-False-col9_int_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-True-True-by10],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-True-True-by9],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-True-True-col10_mixed_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-True-True-col1_grp],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-True-True-col2_int64],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-True-True-col3_int_identical],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-True-True-col4_int32],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-True-True-col6_mixed],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-True-True-col7_bool],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-True-True-col8_bool_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[first-True-True-col9_int_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-False-False-by10],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-False-False-by9],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-False-False-col10_mixed_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-False-False-col1_grp],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-False-False-col2_int64],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-False-False-col3_int_identical],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-False-False-col4_int32],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-False-False-col6_mixed],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-False-False-col7_bool],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-False-False-col8_bool_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-False-False-col9_int_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-False-True-by10],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-False-True-by9],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-False-True-col10_mixed_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-False-True-col1_grp],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-False-True-col2_int64],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-False-True-col3_int_identical],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-False-True-col4_int32],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-False-True-col6_mixed],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-False-True-col7_bool],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-False-True-col8_bool_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-False-True-col9_int_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-True-False-by10],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-True-False-by9],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-True-False-col10_mixed_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-True-False-col1_grp],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-True-False-col2_int64],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-True-False-col3_int_identical],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-True-False-col4_int32],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-True-False-col6_mixed],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-True-False-col7_bool],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-True-False-col8_bool_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-True-False-col9_int_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-True-True-by10],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-True-True-by9],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-True-True-col10_mixed_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-True-True-col1_grp],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-True-True-col2_int64],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-True-True-col3_int_identical],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-True-True-col4_int32],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-True-True-col6_mixed],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-True-True-col7_bool],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-True-True-col8_bool_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_first_last,test_groupby_first_last[last-True-True-col9_int_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_get_group,test_groupby_get_group[col10_mixed_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_get_group,test_groupby_get_group[col1_grp],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_get_group,test_groupby_get_group[col2_int64],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_get_group,test_groupby_get_group[col3_int_identical],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_get_group,test_groupby_get_group[col4_int32],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_get_group,test_groupby_get_group[col6_mixed],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_get_group,test_groupby_get_group[col7_bool],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_get_group,test_groupby_get_group[col8_bool_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_get_group,test_groupby_get_group[col9_int_missing],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_get_group,test_groupby_get_group_with_list,ValueError: must supply a tuple to get_group with multiple grouping keys,failed
tests.integ.modin.groupby.test_groupby_getitem,test_groupby_getitem[col5_int16-False-by1],"assert False
 +  where False = isinstance(<modin.pandas.groupby.DataFrameGroupBy object at 0x34713dc00>, ModinSerGroupBy)",failed
tests.integ.modin.groupby.test_groupby_getitem,test_groupby_getitem[col5_int16-False-by2],"assert False
 +  where False = isinstance(<modin.pandas.groupby.DataFrameGroupBy object at 0x347edf3d0>, ModinSerGroupBy)",failed
tests.integ.modin.groupby.test_groupby_getitem,test_groupby_getitem[col5_int16-False-col1_grp],"assert False
 +  where False = isinstance(<modin.pandas.groupby.DataFrameGroupBy object at 0x346fb08b0>, ModinSerGroupBy)",failed
tests.integ.modin.groupby.test_groupby_head_tail,test_df_groupby_head_tail_non_integer_n_negative[2.5-head],Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.groupby.test_groupby_head_tail,test_df_groupby_head_tail_non_integer_n_negative[2.5-tail],Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.groupby.test_groupby_head_tail,test_df_groupby_head_tail_non_integer_n_negative[3-head],"AssertionError: Regex pattern did not match.
 Regex: 'n must be an integer value.'
 Input: ""'>=' not supported between instances of 'str' and 'int'""",failed
tests.integ.modin.groupby.test_groupby_head_tail,test_df_groupby_head_tail_non_integer_n_negative[3-tail],"AssertionError: Regex pattern did not match.
 Regex: 'n must be an integer value.'
 Input: ""bad operand type for unary -: 'str'""",failed
tests.integ.modin.groupby.test_groupby_idxmax_idxmin,test_df_groupby_idxmax_idxmin_on_axis_1_negative[idxmax],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_idxmax_idxmin,test_df_groupby_idxmax_idxmin_on_axis_1_negative[idxmin],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_idxmax_idxmin,test_df_groupby_idxmax_idxmin_on_groupby_axis_1_unimplemented[idxmax],AttributeError: 'int' object has no attribute 'startswith',failed
tests.integ.modin.groupby.test_groupby_idxmax_idxmin,test_df_groupby_idxmax_idxmin_on_groupby_axis_1_unimplemented[idxmin],AttributeError: 'int' object has no attribute 'startswith',failed
tests.integ.modin.groupby.test_groupby_idxmax_idxmin,test_df_groupby_idxmax_idxmin_with_multiindex_df[False-0-idxmax],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_idxmax_idxmin,test_df_groupby_idxmax_idxmin_with_multiindex_df[False-0-idxmin],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_idxmax_idxmin,test_df_groupby_idxmax_idxmin_with_multiindex_df[False-1-idxmax],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_idxmax_idxmin,test_df_groupby_idxmax_idxmin_with_multiindex_df[False-1-idxmin],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_idxmax_idxmin,test_df_groupby_idxmax_idxmin_with_multiindex_df[True-0-idxmax],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_idxmax_idxmin,test_df_groupby_idxmax_idxmin_with_multiindex_df[True-0-idxmin],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_idxmax_idxmin,test_df_groupby_idxmax_idxmin_with_multiindex_df[True-1-idxmax],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_idxmax_idxmin,test_df_groupby_idxmax_idxmin_with_multiindex_df[True-1-idxmin],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_named_agg,test_invalid_func_with_named_agg_errors,AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'ValueError'>,failed
tests.integ.modin.groupby.test_groupby_named_agg,test_named_agg_output_column_order_with_dup_columns,AttributeError: 'DataFrame' object has no attribute 'name',failed
tests.integ.modin.groupby.test_groupby_named_agg,test_named_groupby_agg_with_incorrect_func[False-False],"AssertionError: Got Snowpark pandas Exception type <class 'pandas.errors.SpecificationError'>, but pandas Exception type <class 'KeyError'> was expected.
 Snowpark pandas exception: <ExceptionInfo SpecificationError('nested renamer is not supported') tblen=5>
pandas exception: <ExceptionInfo KeyError(""Column(s) ['b'] do not exist"") tblen=8>",failed
tests.integ.modin.groupby.test_groupby_named_agg,test_named_groupby_agg_with_incorrect_func[False-True],"AssertionError: Got Snowpark pandas Exception type <class 'pandas.errors.SpecificationError'>, but pandas Exception type <class 'KeyError'> was expected.
 Snowpark pandas exception: <ExceptionInfo SpecificationError('nested renamer is not supported') tblen=5>
pandas exception: <ExceptionInfo KeyError(""Column(s) ['b'] do not exist"") tblen=8>",failed
tests.integ.modin.groupby.test_groupby_named_agg,test_named_groupby_agg_with_incorrect_func[True-False],"AssertionError: Got Snowpark pandas Exception type <class 'pandas.errors.SpecificationError'>, but pandas Exception type <class 'KeyError'> was expected.
 Snowpark pandas exception: <ExceptionInfo SpecificationError('nested renamer is not supported') tblen=5>
pandas exception: <ExceptionInfo KeyError(""Column(s) ['b'] do not exist"") tblen=8>",failed
tests.integ.modin.groupby.test_groupby_named_agg,test_named_groupby_agg_with_incorrect_func[True-True],"AssertionError: Got Snowpark pandas Exception type <class 'pandas.errors.SpecificationError'>, but pandas Exception type <class 'KeyError'> was expected.
 Snowpark pandas exception: <ExceptionInfo SpecificationError('nested renamer is not supported') tblen=5>
pandas exception: <ExceptionInfo KeyError(""Column(s) ['b'] do not exist"") tblen=8>",failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_dict_like_input_invalid_column_raises,AssertionError: exception type <class 'pandas.errors.SpecificationError'> does not match with expected type <class 'KeyError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_dict_like_input_nested_renamer_raises,"AssertionError: Regex pattern did not match.
 Regex: 'Value for func argument with nested dict format is not allowed.'
 Input: 'nested renamer is not supported'",failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_min_count[max-3.0],TypeError: 'float' object cannot be interpreted as an integer,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_min_count[max-5.8],TypeError: 'float' object cannot be interpreted as an integer,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_min_count[max-TEST],TypeError: 'str' object cannot be interpreted as an integer,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_min_count[min-3.0],TypeError: 'float' object cannot be interpreted as an integer,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_min_count[min-5.8],TypeError: 'float' object cannot be interpreted as an integer,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_min_count[min-TEST],TypeError: 'str' object cannot be interpreted as an integer,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_min_count[sum-3.0],TypeError: 'float' object cannot be interpreted as an integer,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_min_count[sum-5.8],TypeError: 'float' object cannot be interpreted as an integer,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_min_count[sum-TEST],TypeError: 'str' object cannot be interpreted as an integer,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_numeric_only[5-max],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_numeric_only[5-mean],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_numeric_only[5-median],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_numeric_only[5-min],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_numeric_only[5-std],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_numeric_only[5-sum],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_numeric_only[5-var],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_numeric_only[TEST-max],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_numeric_only[TEST-mean],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_numeric_only[TEST-median],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_numeric_only[TEST-min],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_numeric_only[TEST-std],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_numeric_only[TEST-sum],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_agg_invalid_numeric_only[TEST-var],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_as_index_false_axis_1_raises,Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_min_max_invalid_non_numeric_column[data0-Object-<lambda>-max],"TypeError: agg function failed [how->max,dtype->object]",failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_min_max_invalid_non_numeric_column[data0-Object-<lambda>-min],"TypeError: agg function failed [how->min,dtype->object]",failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_min_max_invalid_non_numeric_column[data1-Array-<lambda>-max],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_min_max_invalid_non_numeric_column[data1-Array-<lambda>-min],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_multiindex_invalid_level[10],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_multiindex_invalid_level[level1],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_multiindex_invalid_level[level2],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_multiindex_invalid_level[level3],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_multiindex_invalid_level[level],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_multiindex_invalid_level_name_list[level0],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_multiindex_invalid_level_name_list[level1],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_named_agg_like_input_invalid_column_raises,AssertionError: exception type <class 'pandas.errors.SpecificationError'> does not match with expected type <class 'KeyError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data0-Timestamp-<lambda>-mean],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data0-Timestamp-<lambda>-median],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data0-Timestamp-<lambda>-stddev],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data0-Timestamp-<lambda>-stddev_pop],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data0-Timestamp-<lambda>-sum],TypeError: datetime64 type does not support sum operations,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data0-Timestamp-<lambda>-var_pop],TypeError: datetime64 type does not support var operations,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data0-Timestamp-<lambda>-variance],TypeError: datetime64 type does not support var operations,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data1-Array-<lambda>-mean],"TypeError: agg function failed [how->mean,dtype->object]",failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data1-Array-<lambda>-median],"TypeError: agg function failed [how->median,dtype->object]",failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data1-Array-<lambda>-stddev],ValueError: setting an array element with a sequence.,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data1-Array-<lambda>-stddev_pop],ValueError: setting an array element with a sequence.,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data1-Array-<lambda>-sum],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data1-Array-<lambda>-var_pop],"TypeError: agg function failed [how->var,dtype->object]",failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data1-Array-<lambda>-variance],"TypeError: agg function failed [how->var,dtype->object]",failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data2-Object-<lambda>-mean],"TypeError: agg function failed [how->mean,dtype->object]",failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data2-Object-<lambda>-median],"TypeError: agg function failed [how->median,dtype->object]",failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data2-Object-<lambda>-stddev],"TypeError: float() argument must be a string or a real number, not 'dict'",failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data2-Object-<lambda>-stddev_pop],"TypeError: float() argument must be a string or a real number, not 'dict'",failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data2-Object-<lambda>-sum],TypeError: unsupported operand type(s) for +: 'dict' and 'dict',failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data2-Object-<lambda>-var_pop],"TypeError: agg function failed [how->var,dtype->object]",failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data2-Object-<lambda>-variance],"TypeError: agg function failed [how->var,dtype->object]",failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data3-Variant-<lambda>-mean],"TypeError: agg function failed [how->mean,dtype->object]",failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data3-Variant-<lambda>-median],"TypeError: agg function failed [how->median,dtype->object]",failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data3-Variant-<lambda>-stddev],ValueError: could not convert string to float: 'A',failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data3-Variant-<lambda>-stddev_pop],ValueError: could not convert string to float: 'A',failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data3-Variant-<lambda>-sum],TypeError: unsupported operand type(s) for +: 'int' and 'str',failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data3-Variant-<lambda>-var_pop],"TypeError: agg function failed [how->var,dtype->object]",failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_numeric_only_func_invalid_non_numeric_column[data3-Variant-<lambda>-variance],"TypeError: agg function failed [how->var,dtype->object]",failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_series_numeric_only_true,"AssertionError: Regex pattern did not match.
 Regex: 'SeriesGroupBy does not implement numeric_only'
 Input: ""'grp_col'""",failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_shift_freq_negative[D-LEXLUTHOR-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_shift_non_integer_period_negative[mxyzptlk],"TypeError: Periods must be integer, but mxyzptlk is <class 'str'>.",failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_shift_unsupported_args_negative[params0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_shift_unsupported_args_negative[params1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_shift_with_by_and_level_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_shift_with_by_index_negative[by0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_shift_with_external_by_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_shift_with_fill_multiindex_negative[4242-by0--1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_shift_with_fill_multiindex_negative[4242-by0--2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_shift_with_fill_multiindex_negative[4242-by0--3],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_shift_with_fill_multiindex_negative[4242-by0-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_shift_with_fill_multiindex_negative[4242-by0-1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_shift_with_fill_multiindex_negative[4242-by0-2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_shift_with_fill_multiindex_negative[4242-by0-3],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_singleindex_invalid_level[level0],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_singleindex_invalid_level[level1],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_singleindex_invalid_level[level2],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_singleindex_invalid_level_name[level0],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_singleindex_invalid_level_name[level1],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_groupby_singleindex_invalid_level_name[level2],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_invalid_by[None],"AssertionError: Got Snowpark pandas Exception type <class 'KeyError'>, but pandas Exception type <class 'TypeError'> was expected.
 Snowpark pandas exception: <ExceptionInfo KeyError('None') tblen=15>
pandas exception: <ExceptionInfo TypeError(""You have to supply one of 'by' and 'level'"") tblen=3>",failed
tests.integ.modin.groupby.test_groupby_negative,test_invalid_by[invalid_by0],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_invalid_by[invalid_by2],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.groupby.test_groupby_negative,test_invalid_by[invalid_by5],"AssertionError: Snowpark pandas Exception ""('col2', 'col3')"" doesn't match pandas Exception ('col2', 'col3')",failed
tests.integ.modin.groupby.test_groupby_negative,test_invalid_none_label,"AssertionError: Got Snowpark pandas Exception type <class 'KeyError'>, but pandas Exception type <class 'TypeError'> was expected.
 Snowpark pandas exception: <ExceptionInfo KeyError('col1') tblen=5>
pandas exception: <ExceptionInfo TypeError(""'NoneType' object is not callable"") tblen=10>",failed
tests.integ.modin.groupby.test_groupby_negative,test_pandas_series_by,KeyError: 0,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_all_nan_series[len],RecursionError: maximum recursion depth exceeded in comparison,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_all_nan_series[ngroups],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df[len-A],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df[len-by1],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df[ngroups-A],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df[ngroups-by1],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_0_rows[len-A],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_0_rows[len-by1],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_0_rows[ngroups-A],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_0_rows[ngroups-by1],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_multiindex[len-0],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_multiindex[len-B],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_multiindex[len-level2],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_multiindex[len-level3],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_multiindex[len-level4],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_multiindex[len-level5],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_multiindex[len-level6],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_multiindex[ngroups-0],RecursionError: maximum recursion depth exceeded in comparison,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_multiindex[ngroups-B],RecursionError: maximum recursion depth exceeded in comparison,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_multiindex[ngroups-level2],RecursionError: maximum recursion depth exceeded in comparison,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_multiindex[ngroups-level3],RecursionError: maximum recursion depth exceeded in comparison,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_multiindex[ngroups-level4],RecursionError: maximum recursion depth exceeded in comparison,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_multiindex[ngroups-level5],RecursionError: maximum recursion depth exceeded in comparison,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_multiindex[ngroups-level6],RecursionError: maximum recursion depth exceeded in comparison,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_nan[len-by1],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_nan[len-by2],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_nan[len-c1],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_nan[ngroups-by1],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_nan[ngroups-by2],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_df_with_nan[ngroups-c1],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_series_with_multiindex[len-a],RecursionError: maximum recursion depth exceeded in comparison,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_series_with_multiindex[len-b],RecursionError: maximum recursion depth exceeded in comparison,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_series_with_multiindex[len-by2],RecursionError: maximum recursion depth exceeded in comparison,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_series_with_multiindex[ngroups-a],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_series_with_multiindex[ngroups-b],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_series_with_multiindex[ngroups-by2],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_series_with_nan[len],RecursionError: maximum recursion depth exceeded in comparison,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_series_with_nan[ngroups],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_series_with_single_level_index[len],RecursionError: maximum recursion depth exceeded in comparison,failed
tests.integ.modin.groupby.test_groupby_ngroups___len__,test_series_with_single_level_index[ngroups],RecursionError: maximum recursion depth exceeded while calling a Python object,failed
tests.integ.modin.groupby.test_groupby_nunique,test_groupby_nunique[False-df1-id],"AssertionError: DataFrame.iloc[:, 1] (column name=""value2"") are different

DataFrame.iloc[:, 1] (column name=""value2"") values are different (33.33333 %)
[index]: [egg, ham, spam]
[left]:  [2, 1, 2]
[right]: [2, 2, 2]",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-None-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-None-by1-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-None-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [3, 5], 1: [1, 2], 2: [0, 4]}
Expected dict: {2: [0, 4], 1: [1, 2], 0: [3, 5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-None-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: array([3, 5]), 1: array([1, 2]), 2: array([0, 4])}
Expected dict: {2: array([0, 4]), 1: array([1, 2]), 0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-None-0-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-None-0-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: array([5]), 3.1: array([0]), 4.0: array([4]), 8.0: array([1]), 10.0: array([3]), 12.0: array([2])}
Expected dict: {3.1: array([0]), 8.0: array([1]), 12.0: array([2]), 10.0: array([3]), 4.0: array([4]), 1.1: array([5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-None-col3-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-None-col3-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: array([5]), 3.1: array([0]), 4.0: array([4]), 8.0: array([1]), 10.0: array([3]), 12.0: array([2])}
Expected dict: {3.1: array([0]), 8.0: array([1]), 12.0: array([2]), 10.0: array([3]), 4.0: array([4]), 1.1: array([5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-by3-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [10.0, 1.1], 1: [8.0, 12.0], 2: [3.1, 4.0]}
Expected dict: {2: [3.1, 4.0], 1: [8.0, 12.0], 0: [10.0, 1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: array([3, 5]), 1: array([1, 2]), 2: array([0, 4])}
Expected dict: {2: array([0, 4]), 1: array([1, 2]), 0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-col3-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: array([5]), 3.1: array([0]), 4.0: array([4]), 8.0: array([1]), 10.0: array([3]), 12.0: array([2])}
Expected dict: {3.1: array([0]), 8.0: array([1]), 12.0: array([2]), 10.0: array([3]), 4.0: array([4]), 1.1: array([5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols10-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [(1.1, 6)], 3.1: [(3.1, 17)], 4.0: [(4.0, 5)], 8.0: [(8.0, 3)], 10.0: [(10.0, 15)], 12.0: [(12.0, 16)]}
Expected dict: {3.1: [(3.1, 17)], 8.0: [(8.0, 3)], 12.0: [(12.0, 16)], 10.0: [(10.0, 15)], 4.0: [(4.0, 5)], 1.1: [(1.1, 6)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols10-col3-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: array([5]), 3.1: array([0]), 4.0: array([4]), 8.0: array([1]), 10.0: array([3]), 12.0: array([2])}
Expected dict: {3.1: array([0]), 8.0: array([1]), 12.0: array([2]), 10.0: array([3]), 4.0: array([4]), 1.1: array([5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols4-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [(10.0, 15), (1.1, 6)], 1: [(8.0, 3), (12.0, 16)], 2: [(3.1, 17), (4.0, 5)]}
Expected dict: {2: [(3.1, 17), (4.0, 5)], 1: [(8.0, 3), (12.0, 16)], 0: [(10.0, 15), (1.1, 6)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols4-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: array([3, 5]), 1: array([1, 2]), 2: array([0, 4])}
Expected dict: {2: array([0, 4]), 1: array([1, 2]), 0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols5-by5-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-by1-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key nan.
Actual dict: {0.0: array([3, 5]), 1.0: array([1, 2]), nan: array([0, 4])}
Expected dict: {nan: array([0, 4]), 1.0: array([1, 2]), 0.0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-0-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key nan.
Actual dict: {0.0: array([3, 5]), 1.0: array([1, 2]), nan: array([0, 4])}
Expected dict: {nan: array([0, 4]), 1.0: array([1, 2]), 0.0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key nan.
Actual dict: {0.0: array([3, 5]), 1.0: array([1, 2]), nan: array([0, 4])}
Expected dict: {nan: array([0, 4]), 1.0: array([1, 2]), 0.0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-None-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [0], 1: [1], 2: [2], 3: [3], 4: [4], 5: [5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-None-by1-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-None-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [3, 5], 1: [1, 2], 2: [0, 4]}
Expected dict: {2: [0, 4], 1: [1, 2], 0: [3, 5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-None-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-None-0-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-None-col3-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-None-col3-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-by3-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [10.0, 1.1], 1: [8.0, 12.0], 2: [3.1, 4.0]}
Expected dict: {2: [3.1, 4.0], 1: [8.0, 12.0], 0: [10.0, 1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols10-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [(1.1, 6)], 3.1: [(3.1, 17)], 4.0: [(4.0, 5)], 8.0: [(8.0, 3)], 10.0: [(10.0, 15)], 12.0: [(12.0, 16)]}
Expected dict: {3.1: [(3.1, 17)], 8.0: [(8.0, 3)], 12.0: [(12.0, 16)], 10.0: [(10.0, 15)], 4.0: [(4.0, 5)], 1.1: [(1.1, 6)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols10-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols4-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [(10.0, 15), (1.1, 6)], 1: [(8.0, 3), (12.0, 16)], 2: [(3.1, 17), (4.0, 5)]}
Expected dict: {2: [(3.1, 17), (4.0, 5)], 1: [(8.0, 3), (12.0, 16)], 0: [(10.0, 15), (1.1, 6)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols4-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols5-by5-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [0], 1: [1], 2: [2], 3: [3], 4: [4], 5: [5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-by1-None-groups],"AssertionError: Actual and expected dicts have different lengths 5 and 3 respectively.
Actual dict: {(nan, 4.0): [0, 4], (0.0, 5.0): [5], (0.0, 7.0): [3], (1.0, 5.0): [1], (1.0, nan): [2]}
Expected dict: {(1.0, 5.0): [1], (0.0, 7.0): [3], (0.0, 5.0): [5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key 1.0.
Actual dict: {0.0: [3, 5], 1.0: [1, 2]}
Expected dict: {1.0: [1, 2], 0.0: [3, 5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-0-groups],"AssertionError: Actual dict has the wrong key at position 1. Actual key 4.0 is not equal to expected key 8.0.
Actual dict: {3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-groups],"AssertionError: Actual dict has the wrong key at position 1. Actual key 4.0 is not equal to expected key 8.0.
Actual dict: {3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-groups],"AssertionError: Actual and expected dicts have different lengths 5 and 3 respectively.
Actual dict: {(nan, 4.0): [3.1, 4.0], (0.0, 5.0): [nan], (0.0, 7.0): [10.0], (1.0, 5.0): [8.0], (1.0, nan): [12.0]}
Expected dict: {(1.0, 5.0): [8.0], (0.0, 7.0): [10.0], (0.0, 5.0): [nan]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key 1.0.
Actual dict: {0.0: [10.0, nan], 1.0: [8.0, 12.0]}
Expected dict: {1.0: [8.0, 12.0], 0.0: [10.0, nan]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 1. Actual key 4.0 is not equal to expected key 8.0.
Actual dict: {3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 1. Actual key 4.0 is not equal to expected key 8.0.
Actual dict: {3.1: [(3.1, 17.0)], 4.0: [(4.0, nan)], 8.0: [(8.0, 3.0)], 10.0: [(10.0, 15.0)], 12.0: [(12.0, 16.0)]}
Expected dict: {3.1: [(3.1, 17.0)], 8.0: [(8.0, 3.0)], 12.0: [(12.0, 16.0)], 10.0: [(10.0, 15.0)], 4.0: [(4.0, nan)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key 1.0.
Actual dict: {0.0: [(10.0, 15.0), (nan, nan)], 1.0: [(8.0, 3.0), (12.0, 16.0)]}
Expected dict: {1.0: [(8.0, 3.0), (12.0, 16.0)], 0.0: [(10.0, 15.0), (nan, nan)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-groups],"AssertionError: Actual and expected dicts have different lengths 5 and 3 respectively.
Actual dict: {(nan, 4.0): [(3.1, 17.0), (4.0, nan)], (0.0, 5.0): [(nan, nan)], (0.0, 7.0): [(10.0, 15.0)], (1.0, 5.0): [(8.0, 3.0)], (1.0, nan): [(12.0, 16.0)]}
Expected dict: {(1.0, 5.0): [(8.0, 3.0)], (0.0, 7.0): [(10.0, 15.0)], (0.0, 5.0): [(nan, nan)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-None-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-None-by1-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-None-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [3, 5], 1: [1, 2], 2: [0, 4]}
Expected dict: {2: [0, 4], 1: [1, 2], 0: [3, 5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-None-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: array([3, 5]), 1: array([1, 2]), 2: array([0, 4])}
Expected dict: {2: array([0, 4]), 1: array([1, 2]), 0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-None-0-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-None-0-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: array([5]), 3.1: array([0]), 4.0: array([4]), 8.0: array([1]), 10.0: array([3]), 12.0: array([2])}
Expected dict: {3.1: array([0]), 8.0: array([1]), 12.0: array([2]), 10.0: array([3]), 4.0: array([4]), 1.1: array([5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-None-col3-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-None-col3-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: array([5]), 3.1: array([0]), 4.0: array([4]), 8.0: array([1]), 10.0: array([3]), 12.0: array([2])}
Expected dict: {3.1: array([0]), 8.0: array([1]), 12.0: array([2]), 10.0: array([3]), 4.0: array([4]), 1.1: array([5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-by3-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [10.0, 1.1], 1: [8.0, 12.0], 2: [3.1, 4.0]}
Expected dict: {2: [3.1, 4.0], 1: [8.0, 12.0], 0: [10.0, 1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: array([3, 5]), 1: array([1, 2]), 2: array([0, 4])}
Expected dict: {2: array([0, 4]), 1: array([1, 2]), 0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-col3-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: array([5]), 3.1: array([0]), 4.0: array([4]), 8.0: array([1]), 10.0: array([3]), 12.0: array([2])}
Expected dict: {3.1: array([0]), 8.0: array([1]), 12.0: array([2]), 10.0: array([3]), 4.0: array([4]), 1.1: array([5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols10-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [(1.1, 6)], 3.1: [(3.1, 17)], 4.0: [(4.0, 5)], 8.0: [(8.0, 3)], 10.0: [(10.0, 15)], 12.0: [(12.0, 16)]}
Expected dict: {3.1: [(3.1, 17)], 8.0: [(8.0, 3)], 12.0: [(12.0, 16)], 10.0: [(10.0, 15)], 4.0: [(4.0, 5)], 1.1: [(1.1, 6)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols10-col3-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: array([5]), 3.1: array([0]), 4.0: array([4]), 8.0: array([1]), 10.0: array([3]), 12.0: array([2])}
Expected dict: {3.1: array([0]), 8.0: array([1]), 12.0: array([2]), 10.0: array([3]), 4.0: array([4]), 1.1: array([5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols4-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [(10.0, 15), (1.1, 6)], 1: [(8.0, 3), (12.0, 16)], 2: [(3.1, 17), (4.0, 5)]}
Expected dict: {2: [(3.1, 17), (4.0, 5)], 1: [(8.0, 3), (12.0, 16)], 0: [(10.0, 15), (1.1, 6)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols4-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: array([3, 5]), 1: array([1, 2]), 2: array([0, 4])}
Expected dict: {2: array([0, 4]), 1: array([1, 2]), 0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols5-by5-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-by1-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key nan.
Actual dict: {0.0: array([3, 5]), 1.0: array([1, 2]), nan: array([0, 4])}
Expected dict: {nan: array([0, 4]), 1.0: array([1, 2]), 0.0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-0-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key nan.
Actual dict: {0.0: array([3, 5]), 1.0: array([1, 2]), nan: array([0, 4])}
Expected dict: {nan: array([0, 4]), 1.0: array([1, 2]), 0.0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key nan.
Actual dict: {0.0: array([3, 5]), 1.0: array([1, 2]), nan: array([0, 4])}
Expected dict: {nan: array([0, 4]), 1.0: array([1, 2]), 0.0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-None-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [0], 1: [1], 2: [2], 3: [3], 4: [4], 5: [5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-None-by1-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-None-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [3, 5], 1: [1, 2], 2: [0, 4]}
Expected dict: {2: [0, 4], 1: [1, 2], 0: [3, 5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-None-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-None-0-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-None-col3-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-None-col3-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-by3-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [10.0, 1.1], 1: [8.0, 12.0], 2: [3.1, 4.0]}
Expected dict: {2: [3.1, 4.0], 1: [8.0, 12.0], 0: [10.0, 1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols10-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [(1.1, 6)], 3.1: [(3.1, 17)], 4.0: [(4.0, 5)], 8.0: [(8.0, 3)], 10.0: [(10.0, 15)], 12.0: [(12.0, 16)]}
Expected dict: {3.1: [(3.1, 17)], 8.0: [(8.0, 3)], 12.0: [(12.0, 16)], 10.0: [(10.0, 15)], 4.0: [(4.0, 5)], 1.1: [(1.1, 6)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols10-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols4-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [(10.0, 15), (1.1, 6)], 1: [(8.0, 3), (12.0, 16)], 2: [(3.1, 17), (4.0, 5)]}
Expected dict: {2: [(3.1, 17), (4.0, 5)], 1: [(8.0, 3), (12.0, 16)], 0: [(10.0, 15), (1.1, 6)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols4-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols5-by5-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [0], 1: [1], 2: [2], 3: [3], 4: [4], 5: [5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-by1-None-groups],"AssertionError: Actual and expected dicts have different lengths 5 and 3 respectively.
Actual dict: {(nan, 4.0): [0, 4], (0.0, 5.0): [5], (0.0, 7.0): [3], (1.0, 5.0): [1], (1.0, nan): [2]}
Expected dict: {(1.0, 5.0): [1], (0.0, 7.0): [3], (0.0, 5.0): [5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key 1.0.
Actual dict: {0.0: [3, 5], 1.0: [1, 2]}
Expected dict: {1.0: [1, 2], 0.0: [3, 5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-0-groups],"AssertionError: Actual dict has the wrong key at position 1. Actual key 4.0 is not equal to expected key 8.0.
Actual dict: {3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-groups],"AssertionError: Actual dict has the wrong key at position 1. Actual key 4.0 is not equal to expected key 8.0.
Actual dict: {3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-groups],"AssertionError: Actual and expected dicts have different lengths 5 and 3 respectively.
Actual dict: {(nan, 4.0): [3.1, 4.0], (0.0, 5.0): [nan], (0.0, 7.0): [10.0], (1.0, 5.0): [8.0], (1.0, nan): [12.0]}
Expected dict: {(1.0, 5.0): [8.0], (0.0, 7.0): [10.0], (0.0, 5.0): [nan]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key 1.0.
Actual dict: {0.0: [10.0, nan], 1.0: [8.0, 12.0]}
Expected dict: {1.0: [8.0, 12.0], 0.0: [10.0, nan]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 1. Actual key 4.0 is not equal to expected key 8.0.
Actual dict: {3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 1. Actual key 4.0 is not equal to expected key 8.0.
Actual dict: {3.1: [(3.1, 17.0)], 4.0: [(4.0, nan)], 8.0: [(8.0, 3.0)], 10.0: [(10.0, 15.0)], 12.0: [(12.0, 16.0)]}
Expected dict: {3.1: [(3.1, 17.0)], 8.0: [(8.0, 3.0)], 12.0: [(12.0, 16.0)], 10.0: [(10.0, 15.0)], 4.0: [(4.0, nan)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key 1.0.
Actual dict: {0.0: [(10.0, 15.0), (nan, nan)], 1.0: [(8.0, 3.0), (12.0, 16.0)]}
Expected dict: {1.0: [(8.0, 3.0), (12.0, 16.0)], 0.0: [(10.0, 15.0), (nan, nan)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-groups],"AssertionError: Actual and expected dicts have different lengths 5 and 3 respectively.
Actual dict: {(nan, 4.0): [(3.1, 17.0), (4.0, nan)], (0.0, 5.0): [(nan, nan)], (0.0, 7.0): [(10.0, 15.0)], (1.0, 5.0): [(8.0, 3.0)], (1.0, nan): [(12.0, 16.0)]}
Expected dict: {(1.0, 5.0): [(8.0, 3.0)], (0.0, 7.0): [(10.0, 15.0)], (0.0, 5.0): [(nan, nan)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-None-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-None-by1-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-None-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [3, 5], 1: [1, 2], 2: [0, 4]}
Expected dict: {2: [0, 4], 1: [1, 2], 0: [3, 5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-None-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: array([3, 5]), 1: array([1, 2]), 2: array([0, 4])}
Expected dict: {2: array([0, 4]), 1: array([1, 2]), 0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-None-0-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-None-0-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: array([5]), 3.1: array([0]), 4.0: array([4]), 8.0: array([1]), 10.0: array([3]), 12.0: array([2])}
Expected dict: {3.1: array([0]), 8.0: array([1]), 12.0: array([2]), 10.0: array([3]), 4.0: array([4]), 1.1: array([5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-None-col3-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-None-col3-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: array([5]), 3.1: array([0]), 4.0: array([4]), 8.0: array([1]), 10.0: array([3]), 12.0: array([2])}
Expected dict: {3.1: array([0]), 8.0: array([1]), 12.0: array([2]), 10.0: array([3]), 4.0: array([4]), 1.1: array([5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-by3-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [10.0, 1.1], 1: [8.0, 12.0], 2: [3.1, 4.0]}
Expected dict: {2: [3.1, 4.0], 1: [8.0, 12.0], 0: [10.0, 1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: array([3, 5]), 1: array([1, 2]), 2: array([0, 4])}
Expected dict: {2: array([0, 4]), 1: array([1, 2]), 0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-col3-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: array([5]), 3.1: array([0]), 4.0: array([4]), 8.0: array([1]), 10.0: array([3]), 12.0: array([2])}
Expected dict: {3.1: array([0]), 8.0: array([1]), 12.0: array([2]), 10.0: array([3]), 4.0: array([4]), 1.1: array([5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols10-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [(1.1, 6)], 3.1: [(3.1, 17)], 4.0: [(4.0, 5)], 8.0: [(8.0, 3)], 10.0: [(10.0, 15)], 12.0: [(12.0, 16)]}
Expected dict: {3.1: [(3.1, 17)], 8.0: [(8.0, 3)], 12.0: [(12.0, 16)], 10.0: [(10.0, 15)], 4.0: [(4.0, 5)], 1.1: [(1.1, 6)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols10-col3-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: array([5]), 3.1: array([0]), 4.0: array([4]), 8.0: array([1]), 10.0: array([3]), 12.0: array([2])}
Expected dict: {3.1: array([0]), 8.0: array([1]), 12.0: array([2]), 10.0: array([3]), 4.0: array([4]), 1.1: array([5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols4-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [(10.0, 15), (1.1, 6)], 1: [(8.0, 3), (12.0, 16)], 2: [(3.1, 17), (4.0, 5)]}
Expected dict: {2: [(3.1, 17), (4.0, 5)], 1: [(8.0, 3), (12.0, 16)], 0: [(10.0, 15), (1.1, 6)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols4-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: array([3, 5]), 1: array([1, 2]), 2: array([0, 4])}
Expected dict: {2: array([0, 4]), 1: array([1, 2]), 0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols5-by5-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-by1-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key nan.
Actual dict: {0.0: array([3, 5]), 1.0: array([1, 2]), nan: array([0, 4])}
Expected dict: {nan: array([0, 4]), 1.0: array([1, 2]), 0.0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-0-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key nan.
Actual dict: {0.0: array([3, 5]), 1.0: array([1, 2]), nan: array([0, 4])}
Expected dict: {nan: array([0, 4]), 1.0: array([1, 2]), 0.0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key nan.
Actual dict: {0.0: array([3, 5]), 1.0: array([1, 2]), nan: array([0, 4])}
Expected dict: {nan: array([0, 4]), 1.0: array([1, 2]), 0.0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-None-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [0], 1: [1], 2: [2], 3: [3], 4: [4], 5: [5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-None-by1-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-None-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [3, 5], 1: [1, 2], 2: [0, 4]}
Expected dict: {2: [0, 4], 1: [1, 2], 0: [3, 5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-None-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-None-0-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-None-col3-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-None-col3-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-by3-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [10.0, 1.1], 1: [8.0, 12.0], 2: [3.1, 4.0]}
Expected dict: {2: [3.1, 4.0], 1: [8.0, 12.0], 0: [10.0, 1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols10-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [(1.1, 6)], 3.1: [(3.1, 17)], 4.0: [(4.0, 5)], 8.0: [(8.0, 3)], 10.0: [(10.0, 15)], 12.0: [(12.0, 16)]}
Expected dict: {3.1: [(3.1, 17)], 8.0: [(8.0, 3)], 12.0: [(12.0, 16)], 10.0: [(10.0, 15)], 4.0: [(4.0, 5)], 1.1: [(1.1, 6)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols10-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols4-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [(10.0, 15), (1.1, 6)], 1: [(8.0, 3), (12.0, 16)], 2: [(3.1, 17), (4.0, 5)]}
Expected dict: {2: [(3.1, 17), (4.0, 5)], 1: [(8.0, 3), (12.0, 16)], 0: [(10.0, 15), (1.1, 6)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols4-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols5-by5-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [0], 1: [1], 2: [2], 3: [3], 4: [4], 5: [5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-by1-None-groups],"AssertionError: Actual and expected dicts have different lengths 5 and 3 respectively.
Actual dict: {(nan, 4.0): [0, 4], (0.0, 5.0): [5], (0.0, 7.0): [3], (1.0, 5.0): [1], (1.0, nan): [2]}
Expected dict: {(1.0, 5.0): [1], (0.0, 7.0): [3], (0.0, 5.0): [5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key 1.0.
Actual dict: {0.0: [3, 5], 1.0: [1, 2]}
Expected dict: {1.0: [1, 2], 0.0: [3, 5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-0-groups],"AssertionError: Actual dict has the wrong key at position 1. Actual key 4.0 is not equal to expected key 8.0.
Actual dict: {3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-groups],"AssertionError: Actual dict has the wrong key at position 1. Actual key 4.0 is not equal to expected key 8.0.
Actual dict: {3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-groups],"AssertionError: Actual and expected dicts have different lengths 5 and 3 respectively.
Actual dict: {(nan, 4.0): [3.1, 4.0], (0.0, 5.0): [nan], (0.0, 7.0): [10.0], (1.0, 5.0): [8.0], (1.0, nan): [12.0]}
Expected dict: {(1.0, 5.0): [8.0], (0.0, 7.0): [10.0], (0.0, 5.0): [nan]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key 1.0.
Actual dict: {0.0: [10.0, nan], 1.0: [8.0, 12.0]}
Expected dict: {1.0: [8.0, 12.0], 0.0: [10.0, nan]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 1. Actual key 4.0 is not equal to expected key 8.0.
Actual dict: {3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 1. Actual key 4.0 is not equal to expected key 8.0.
Actual dict: {3.1: [(3.1, 17.0)], 4.0: [(4.0, nan)], 8.0: [(8.0, 3.0)], 10.0: [(10.0, 15.0)], 12.0: [(12.0, 16.0)]}
Expected dict: {3.1: [(3.1, 17.0)], 8.0: [(8.0, 3.0)], 12.0: [(12.0, 16.0)], 10.0: [(10.0, 15.0)], 4.0: [(4.0, nan)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key 1.0.
Actual dict: {0.0: [(10.0, 15.0), (nan, nan)], 1.0: [(8.0, 3.0), (12.0, 16.0)]}
Expected dict: {1.0: [(8.0, 3.0), (12.0, 16.0)], 0.0: [(10.0, 15.0), (nan, nan)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-groups],"AssertionError: Actual and expected dicts have different lengths 5 and 3 respectively.
Actual dict: {(nan, 4.0): [(3.1, 17.0), (4.0, nan)], (0.0, 5.0): [(nan, nan)], (0.0, 7.0): [(10.0, 15.0)], (1.0, 5.0): [(8.0, 3.0)], (1.0, nan): [(12.0, 16.0)]}
Expected dict: {(1.0, 5.0): [(8.0, 3.0)], (0.0, 7.0): [(10.0, 15.0)], (0.0, 5.0): [(nan, nan)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-None-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-None-by1-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-None-by1-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-None-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [3, 5], 1: [1, 2], 2: [0, 4]}
Expected dict: {2: [0, 4], 1: [1, 2], 0: [3, 5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-None-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: array([3, 5]), 1: array([1, 2]), 2: array([0, 4])}
Expected dict: {2: array([0, 4]), 1: array([1, 2]), 0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-None-0-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-None-0-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: array([5]), 3.1: array([0]), 4.0: array([4]), 8.0: array([1]), 10.0: array([3]), 12.0: array([2])}
Expected dict: {3.1: array([0]), 8.0: array([1]), 12.0: array([2]), 10.0: array([3]), 4.0: array([4]), 1.1: array([5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-None-col3-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-None-col3-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: array([5]), 3.1: array([0]), 4.0: array([4]), 8.0: array([1]), 10.0: array([3]), 12.0: array([2])}
Expected dict: {3.1: array([0]), 8.0: array([1]), 12.0: array([2]), 10.0: array([3]), 4.0: array([4]), 1.1: array([5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-by3-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-by3-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [10.0, 1.1], 1: [8.0, 12.0], 2: [3.1, 4.0]}
Expected dict: {2: [3.1, 4.0], 1: [8.0, 12.0], 0: [10.0, 1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: array([3, 5]), 1: array([1, 2]), 2: array([0, 4])}
Expected dict: {2: array([0, 4]), 1: array([1, 2]), 0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-col3-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: array([5]), 3.1: array([0]), 4.0: array([4]), 8.0: array([1]), 10.0: array([3]), 12.0: array([2])}
Expected dict: {3.1: array([0]), 8.0: array([1]), 12.0: array([2]), 10.0: array([3]), 4.0: array([4]), 1.1: array([5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols10-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [(1.1, 6)], 3.1: [(3.1, 17)], 4.0: [(4.0, 5)], 8.0: [(8.0, 3)], 10.0: [(10.0, 15)], 12.0: [(12.0, 16)]}
Expected dict: {3.1: [(3.1, 17)], 8.0: [(8.0, 3)], 12.0: [(12.0, 16)], 10.0: [(10.0, 15)], 4.0: [(4.0, 5)], 1.1: [(1.1, 6)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols10-col3-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: array([5]), 3.1: array([0]), 4.0: array([4]), 8.0: array([1]), 10.0: array([3]), 12.0: array([2])}
Expected dict: {3.1: array([0]), 8.0: array([1]), 12.0: array([2]), 10.0: array([3]), 4.0: array([4]), 1.1: array([5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols4-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [(10.0, 15), (1.1, 6)], 1: [(8.0, 3), (12.0, 16)], 2: [(3.1, 17), (4.0, 5)]}
Expected dict: {2: [(3.1, 17), (4.0, 5)], 1: [(8.0, 3), (12.0, 16)], 0: [(10.0, 15), (1.1, 6)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols4-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: array([3, 5]), 1: array([1, 2]), 2: array([0, 4])}
Expected dict: {2: array([0, 4]), 1: array([1, 2]), 0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols5-by5-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols5-by5-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-by1-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-by1-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key nan.
Actual dict: {0.0: array([3, 5]), 1.0: array([1, 2]), nan: array([0, 4])}
Expected dict: {nan: array([0, 4]), 1.0: array([1, 2]), 0.0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-0-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key nan.
Actual dict: {0.0: array([3, 5]), 1.0: array([1, 2]), nan: array([0, 4])}
Expected dict: {nan: array([0, 4]), 1.0: array([1, 2]), 0.0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-indices],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key nan.
Actual dict: {0.0: array([3, 5]), 1.0: array([1, 2]), nan: array([0, 4])}
Expected dict: {nan: array([0, 4]), 1.0: array([1, 2]), 0.0: array([3, 5])}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-None-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [0], 1: [1], 2: [2], 3: [3], 4: [4], 5: [5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-None-by1-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-None-by1-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-None-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [3, 5], 1: [1, 2], 2: [0, 4]}
Expected dict: {2: [0, 4], 1: [1, 2], 0: [3, 5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-None-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-None-0-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-None-col3-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-None-col3-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-by3-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-by3-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [10.0, 1.1], 1: [8.0, 12.0], 2: [3.1, 4.0]}
Expected dict: {2: [3.1, 4.0], 1: [8.0, 12.0], 0: [10.0, 1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [1.1], 3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0], 1.1: [1.1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols10-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 1.1 is not equal to expected key 3.1.
Actual dict: {1.1: [(1.1, 6)], 3.1: [(3.1, 17)], 4.0: [(4.0, 5)], 8.0: [(8.0, 3)], 10.0: [(10.0, 15)], 12.0: [(12.0, 16)]}
Expected dict: {3.1: [(3.1, 17)], 8.0: [(8.0, 3)], 12.0: [(12.0, 16)], 10.0: [(10.0, 15)], 4.0: [(4.0, 5)], 1.1: [(1.1, 6)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols10-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols4-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0 is not equal to expected key 2.
Actual dict: {0: [(10.0, 15), (1.1, 6)], 1: [(8.0, 3), (12.0, 16)], 2: [(3.1, 17), (4.0, 5)]}
Expected dict: {2: [(3.1, 17), (4.0, 5)], 1: [(8.0, 3), (12.0, 16)], 0: [(10.0, 15), (1.1, 6)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols4-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols5-by5-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols5-by5-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [0], 1: [1], 2: [2], 3: [3], 4: [4], 5: [5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-by1-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-by1-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key 1.0.
Actual dict: {0.0: [3, 5], 1.0: [1, 2]}
Expected dict: {1.0: [1, 2], 0.0: [3, 5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-0-groups],"AssertionError: Actual dict has the wrong key at position 1. Actual key 4.0 is not equal to expected key 8.0.
Actual dict: {3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-groups],"AssertionError: Actual dict has the wrong key at position 1. Actual key 4.0 is not equal to expected key 8.0.
Actual dict: {3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key 1.0.
Actual dict: {0.0: [10.0, nan], 1.0: [8.0, 12.0]}
Expected dict: {1.0: [8.0, 12.0], 0.0: [10.0, nan]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 1. Actual key 4.0 is not equal to expected key 8.0.
Actual dict: {3.1: [3.1], 4.0: [4.0], 8.0: [8.0], 10.0: [10.0], 12.0: [12.0]}
Expected dict: {3.1: [3.1], 8.0: [8.0], 12.0: [12.0], 10.0: [10.0], 4.0: [4.0]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-groups],"AssertionError: Actual dict has the wrong key at position 1. Actual key 4.0 is not equal to expected key 8.0.
Actual dict: {3.1: [(3.1, 17.0)], 4.0: [(4.0, nan)], 8.0: [(8.0, 3.0)], 10.0: [(10.0, 15.0)], 12.0: [(12.0, 16.0)]}
Expected dict: {3.1: [(3.1, 17.0)], 8.0: [(8.0, 3.0)], 12.0: [(12.0, 16.0)], 10.0: [(10.0, 15.0)], 4.0: [(4.0, nan)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-groups],"AssertionError: Actual dict has the wrong key at position 0. Actual key 0.0 is not equal to expected key 1.0.
Actual dict: {0.0: [(10.0, 15.0), (nan, nan)], 1.0: [(8.0, 3.0), (12.0, 16.0)]}
Expected dict: {1.0: [(8.0, 3.0), (12.0, 16.0)], 0.0: [(10.0, 15.0), (nan, nan)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_False-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-None-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-None-by1-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-None-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-None-col3-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-by3-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols10-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols4-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols5-by5-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-by1-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-0-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-None-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [0], 1: [1], 2: [2], 3: [3], 4: [4], 5: [5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-None-by1-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-None-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-None-col3-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-by3-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols10-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols4-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols5-by5-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [0], 1: [1], 2: [2], 3: [3], 4: [4], 5: [5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-by1-None-groups],"AssertionError: Actual and expected dicts have different lengths 5 and 3 respectively.
Actual dict: {(nan, 4.0): [0, 4], (0.0, 5.0): [5], (0.0, 7.0): [3], (1.0, 5.0): [1], (1.0, nan): [2]}
Expected dict: {(0.0, 5.0): [5], (0.0, 7.0): [3], (1.0, 5.0): [1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-groups],"AssertionError: Actual and expected dicts have different lengths 5 and 3 respectively.
Actual dict: {(nan, 4.0): [3.1, 4.0], (0.0, 5.0): [nan], (0.0, 7.0): [10.0], (1.0, 5.0): [8.0], (1.0, nan): [12.0]}
Expected dict: {(0.0, 5.0): [nan], (0.0, 7.0): [10.0], (1.0, 5.0): [8.0]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-groups],"AssertionError: Actual and expected dicts have different lengths 5 and 3 respectively.
Actual dict: {(nan, 4.0): [(3.1, 17.0), (4.0, nan)], (0.0, 5.0): [(nan, nan)], (0.0, 7.0): [(10.0, 15.0)], (1.0, 5.0): [(8.0, 3.0)], (1.0, nan): [(12.0, 16.0)]}
Expected dict: {(0.0, 5.0): [(nan, nan)], (0.0, 7.0): [(10.0, 15.0)], (1.0, 5.0): [(8.0, 3.0)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-None-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-None-by1-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-None-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-None-col3-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-by3-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols10-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols4-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols5-by5-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-by1-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-0-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-None-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [0], 1: [1], 2: [2], 3: [3], 4: [4], 5: [5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-None-by1-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-None-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-None-col3-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-by3-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols10-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols4-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols5-by5-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [0], 1: [1], 2: [2], 3: [3], 4: [4], 5: [5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-by1-None-groups],"AssertionError: Actual and expected dicts have different lengths 5 and 3 respectively.
Actual dict: {(nan, 4.0): [0, 4], (0.0, 5.0): [5], (0.0, 7.0): [3], (1.0, 5.0): [1], (1.0, nan): [2]}
Expected dict: {(0.0, 5.0): [5], (0.0, 7.0): [3], (1.0, 5.0): [1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-groups],"AssertionError: Actual and expected dicts have different lengths 5 and 3 respectively.
Actual dict: {(nan, 4.0): [3.1, 4.0], (0.0, 5.0): [nan], (0.0, 7.0): [10.0], (1.0, 5.0): [8.0], (1.0, nan): [12.0]}
Expected dict: {(0.0, 5.0): [nan], (0.0, 7.0): [10.0], (1.0, 5.0): [8.0]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-groups],"AssertionError: Actual and expected dicts have different lengths 5 and 3 respectively.
Actual dict: {(nan, 4.0): [(3.1, 17.0), (4.0, nan)], (0.0, 5.0): [(nan, nan)], (0.0, 7.0): [(10.0, 15.0)], (1.0, 5.0): [(8.0, 3.0)], (1.0, nan): [(12.0, 16.0)]}
Expected dict: {(0.0, 5.0): [(nan, nan)], (0.0, 7.0): [(10.0, 15.0)], (1.0, 5.0): [(8.0, 3.0)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_False-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-None-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-None-by1-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-None-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-None-col3-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-by3-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-col3-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols10-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols4-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols5-by5-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-by1-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-0-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-None-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [0], 1: [1], 2: [2], 3: [3], 4: [4], 5: [5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-None-by1-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-None-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-None-col3-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-by3-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-col3-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols10-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols4-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols5-by5-None-groups],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [0], 1: [1], 2: [2], 3: [3], 4: [4], 5: [5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-by1-None-groups],"AssertionError: Actual and expected dicts have different lengths 5 and 3 respectively.
Actual dict: {(nan, 4.0): [0, 4], (0.0, 5.0): [5], (0.0, 7.0): [3], (1.0, 5.0): [1], (1.0, nan): [2]}
Expected dict: {(0.0, 5.0): [5], (0.0, 7.0): [3], (1.0, 5.0): [1]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-by1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-groups],"AssertionError: Actual and expected dicts have different lengths 5 and 3 respectively.
Actual dict: {(nan, 4.0): [3.1, 4.0], (0.0, 5.0): [nan], (0.0, 7.0): [10.0], (1.0, 5.0): [8.0], (1.0, nan): [12.0]}
Expected dict: {(0.0, 5.0): [nan], (0.0, 7.0): [10.0], (1.0, 5.0): [8.0]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-groups],"AssertionError: Actual and expected dicts have different lengths 5 and 3 respectively.
Actual dict: {(nan, 4.0): [(3.1, 17.0), (4.0, nan)], (0.0, 5.0): [(nan, nan)], (0.0, 7.0): [(10.0, 15.0)], (1.0, 5.0): [(8.0, 3.0)], (1.0, nan): [(12.0, 16.0)]}
Expected dict: {(0.0, 5.0): [(nan, nan)], (0.0, 7.0): [(10.0, 15.0)], (1.0, 5.0): [(8.0, 3.0)]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_False-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-None-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-None-by1-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-None-by1-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-None-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-None-col3-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-by3-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-by3-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-col3-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols10-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols4-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols5-by5-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df-index_cols5-by5-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-by1-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-by1-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-None-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-0-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-0-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-groups],ValueError: Categorical categories cannot be null,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-indices],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_False-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-None-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [0], 1: [1], 2: [2], 3: [3], 4: [4], 5: [5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-None-by1-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-None-by1-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-None-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-None-col3-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-by3-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-by3-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-col3-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols10-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {1.1: [5], 3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols4-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [3, 5], 1: [1, 2], 2: [0, 4]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols5-by5-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df-index_cols5-by5-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0: [0], 1: [1], 2: [2], 3: [3], 4: [4], 5: [5]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-by1-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-by1-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-None-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-0-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-None-col3-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-by3-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-col3-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols10-col3-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {3.1: [0], 4.0: [4], 8.0: [1], 10.0: [3], 12.0: [2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols11-None-level11-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-groups],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols12-None-level12-indices],ValueError: Cannot remove 2 levels from an index with 2 levels: at least one level must be left.,failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols4-col1-None-indices],"AssertionError: Actual type is not the same as expected type <class 'dict'>, and instead is type <class 'pandas.io.formats.printing.PrettyDict'>. Actual value is {0.0: [3, 5], 1.0: [1, 2]}",failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-groups],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices[sort_True-as_index_True-group_series_True-dropna_True-basic_snowpark_pandas_df_with_missing_values-index_cols5-by5-None-indices],KeyError: 'col1',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices_column_name_conflicts_with_index_name[groups],AttributeError: 'numpy.int64' object has no attribute 'values',failed
tests.integ.modin.groupby.test_groupby_property,test_groups_and_indices_column_name_conflicts_with_index_name[indices],AttributeError: 'numpy.int64' object has no attribute 'values',failed
tests.integ.modin.groupby.test_groupby_property,test_pandas_groupby_groups_workaround[pandas_issue_55919],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_pandas_groupby_groups_workaround[pandas_issue_56851],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_pandas_groupby_groups_workaround[pandas_issue_56966],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_property,test_pandas_groupby_indices_workaround_pandas_issue_56851,TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[max-1-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[max-1-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[max-1-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[max-1-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[max-15-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[max-15-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[max-15-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[max-15-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[max-3-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[max-3-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[max-3-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[max-3-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[max-5-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[max-5-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[max-5-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[max-5-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[mean-1-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[mean-1-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[mean-1-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[mean-1-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[mean-15-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[mean-15-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[mean-15-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[mean-15-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[mean-3-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[mean-3-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[mean-3-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[mean-3-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[mean-5-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[mean-5-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[mean-5-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[mean-5-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[median-1-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[median-1-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[median-1-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[median-1-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[median-15-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[median-15-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[median-15-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[median-15-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[median-3-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[median-3-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[median-3-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[median-3-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[median-5-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[median-5-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[median-5-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[median-5-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[min-1-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[min-1-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[min-1-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[min-1-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[min-15-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[min-15-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[min-15-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[min-15-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[min-3-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[min-3-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[min-3-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[min-3-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[min-5-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[min-5-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[min-5-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[min-5-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[sum-1-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[sum-1-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[sum-1-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[sum-1-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[sum-15-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[sum-15-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[sum-15-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[sum-15-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[sum-3-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[sum-3-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[sum-3-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[sum-3-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[sum-5-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[sum-5-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[sum-5-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a[sum-5-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[max-1-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[max-1-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[max-1-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[max-1-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[max-15-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[max-15-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[max-15-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[max-15-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[max-3-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[max-3-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[max-3-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[max-3-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[max-5-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[max-5-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[max-5-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[max-5-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[mean-1-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[mean-1-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[mean-1-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[mean-1-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[mean-15-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[mean-15-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[mean-15-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[mean-15-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[mean-3-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[mean-3-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[mean-3-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[mean-3-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[mean-5-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[mean-5-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[mean-5-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[mean-5-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[median-1-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[median-1-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[median-1-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[median-1-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[median-15-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[median-15-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[median-15-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[median-15-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[median-3-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[median-3-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[median-3-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[median-3-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[median-5-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[median-5-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[median-5-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[median-5-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[min-1-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[min-1-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[min-1-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[min-1-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[min-15-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[min-15-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[min-15-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[min-15-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[min-3-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[min-3-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[min-3-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[min-3-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[min-5-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[min-5-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[min-5-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[min-5-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[sum-1-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[sum-1-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[sum-1-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[sum-1-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[sum-15-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[sum-15-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[sum-15-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[sum-15-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[sum-3-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[sum-3-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[sum-3-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[sum-3-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[sum-5-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[sum-5-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[sum-5-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_closed_left[sum-5-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_diff_freq[D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_diff_freq[h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_diff_freq[min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_a_diff_freq[s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[max-1-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[max-1-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[max-1-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[max-1-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[max-15-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[max-15-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[max-15-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[max-15-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[max-3-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[max-3-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[max-3-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[max-3-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[max-5-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[max-5-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[max-5-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[max-5-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[mean-1-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[mean-1-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[mean-1-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[mean-1-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[mean-15-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[mean-15-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[mean-15-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[mean-15-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[mean-3-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[mean-3-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[mean-3-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[mean-3-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[mean-5-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[mean-5-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[mean-5-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[mean-5-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[median-1-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[median-1-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[median-1-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[median-1-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[median-15-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[median-15-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[median-15-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[median-15-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[median-3-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[median-3-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[median-3-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[median-3-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[median-5-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[median-5-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[median-5-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[median-5-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[min-1-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[min-1-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[min-1-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[min-1-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[min-15-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[min-15-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[min-15-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[min-15-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[min-3-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[min-3-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[min-3-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[min-3-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[min-5-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[min-5-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[min-5-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[min-5-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[sum-1-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[sum-1-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[sum-1-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[sum-1-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[sum-15-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[sum-15-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[sum-15-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[sum-15-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[sum-3-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[sum-3-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[sum-3-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[sum-3-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[sum-5-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[sum-5-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[sum-5-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_by_b[sum-5-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[max-1-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[max-1-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[max-1-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[max-1-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[max-15-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[max-15-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[max-15-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[max-15-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[max-3-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[max-3-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[max-3-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[max-3-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[max-5-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[max-5-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[max-5-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[max-5-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[mean-1-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[mean-1-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[mean-1-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[mean-1-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[mean-15-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[mean-15-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[mean-15-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[mean-15-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[mean-3-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[mean-3-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[mean-3-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[mean-3-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[mean-5-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[mean-5-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[mean-5-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[mean-5-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[median-1-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[median-1-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[median-1-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[median-1-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[median-15-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[median-15-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[median-15-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[median-15-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[median-3-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[median-3-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[median-3-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[median-3-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[median-5-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[median-5-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[median-5-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[median-5-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[min-1-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[min-1-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[min-1-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[min-1-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[min-15-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[min-15-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[min-15-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[min-15-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[min-3-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[min-3-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[min-3-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[min-3-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[min-5-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[min-5-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[min-5-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[min-5-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[sum-1-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[sum-1-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[sum-1-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[sum-1-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[sum-15-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[sum-15-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[sum-15-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[sum-15-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[sum-3-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[sum-3-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[sum-3-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[sum-3-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[sum-5-D],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[sum-5-h],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[sum-5-min],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_multiple_by_cols[sum-5-s],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_week_to_year_negative[ME],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_week_to_year_negative[W],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_groupby_resample_week_to_year_negative[YE],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_resample,test_resample_series_negative,KeyError: 'grp_col',failed
tests.integ.modin.groupby.test_groupby_series,test_groupby_series_numeric_only[False],KeyError: 'grp_col',failed
tests.integ.modin.groupby.test_groupby_series,test_groupby_series_numeric_only[None],KeyError: 'grp_col',failed
tests.integ.modin.groupby.test_groupby_series_rank,test_groupby_ser_rank_negative[None--1-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_series_rank,test_groupby_ser_rank_negative[group-0-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_size,test_error_checking,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_size,test_groupby_agg_size[len-False-by10],"TypeError: Must provide 'func' or tuples of '(column, aggfunc).",failed
tests.integ.modin.groupby.test_groupby_size,test_groupby_agg_size[len-False-by9],"TypeError: Must provide 'func' or tuples of '(column, aggfunc).",failed
tests.integ.modin.groupby.test_groupby_size,test_groupby_agg_size[len-False-col10_mixed_missing],"TypeError: Must provide 'func' or tuples of '(column, aggfunc).",failed
tests.integ.modin.groupby.test_groupby_size,test_groupby_agg_size[len-False-col1_grp],"TypeError: Must provide 'func' or tuples of '(column, aggfunc).",failed
tests.integ.modin.groupby.test_groupby_size,test_groupby_agg_size[len-False-col2_int64],"TypeError: Must provide 'func' or tuples of '(column, aggfunc).",failed
tests.integ.modin.groupby.test_groupby_size,test_groupby_agg_size[len-False-col3_int_identical],"TypeError: Must provide 'func' or tuples of '(column, aggfunc).",failed
tests.integ.modin.groupby.test_groupby_size,test_groupby_agg_size[len-False-col4_int32],"TypeError: Must provide 'func' or tuples of '(column, aggfunc).",failed
tests.integ.modin.groupby.test_groupby_size,test_groupby_agg_size[len-False-col6_mixed],"TypeError: Must provide 'func' or tuples of '(column, aggfunc).",failed
tests.integ.modin.groupby.test_groupby_size,test_groupby_agg_size[len-False-col7_bool],"TypeError: Must provide 'func' or tuples of '(column, aggfunc).",failed
tests.integ.modin.groupby.test_groupby_size,test_groupby_agg_size[len-False-col8_bool_missing],"TypeError: Must provide 'func' or tuples of '(column, aggfunc).",failed
tests.integ.modin.groupby.test_groupby_size,test_groupby_agg_size[len-False-col9_int_missing],"TypeError: Must provide 'func' or tuples of '(column, aggfunc).",failed
tests.integ.modin.groupby.test_groupby_size,test_groupby_agg_size[size-False-by10],"TypeError: Must provide 'func' or tuples of '(column, aggfunc).",failed
tests.integ.modin.groupby.test_groupby_size,test_groupby_agg_size[size-False-by9],"TypeError: Must provide 'func' or tuples of '(column, aggfunc).",failed
tests.integ.modin.groupby.test_groupby_size,test_groupby_agg_size[size-False-col10_mixed_missing],"TypeError: Must provide 'func' or tuples of '(column, aggfunc).",failed
tests.integ.modin.groupby.test_groupby_size,test_groupby_agg_size[size-False-col1_grp],"TypeError: Must provide 'func' or tuples of '(column, aggfunc).",failed
tests.integ.modin.groupby.test_groupby_size,test_groupby_agg_size[size-False-col2_int64],"TypeError: Must provide 'func' or tuples of '(column, aggfunc).",failed
tests.integ.modin.groupby.test_groupby_size,test_groupby_agg_size[size-False-col3_int_identical],"TypeError: Must provide 'func' or tuples of '(column, aggfunc).",failed
tests.integ.modin.groupby.test_groupby_size,test_groupby_agg_size[size-False-col4_int32],"TypeError: Must provide 'func' or tuples of '(column, aggfunc).",failed
tests.integ.modin.groupby.test_groupby_size,test_groupby_agg_size[size-False-col6_mixed],"TypeError: Must provide 'func' or tuples of '(column, aggfunc).",failed
tests.integ.modin.groupby.test_groupby_size,test_groupby_agg_size[size-False-col7_bool],"TypeError: Must provide 'func' or tuples of '(column, aggfunc).",failed
tests.integ.modin.groupby.test_groupby_size,test_groupby_agg_size[size-False-col8_bool_missing],"TypeError: Must provide 'func' or tuples of '(column, aggfunc).",failed
tests.integ.modin.groupby.test_groupby_size,test_groupby_agg_size[size-False-col9_int_missing],"TypeError: Must provide 'func' or tuples of '(column, aggfunc).",failed
tests.integ.modin.groupby.test_groupby_size,test_multiindex_negative,Failed: DID NOT RAISE <class 'KeyError'>,failed
tests.integ.modin.groupby.test_groupby_transform,test_groupby_transform_single_output_col,ValueError: transform must return a scalar value for each group,failed
tests.integ.modin.groupby.test_groupby_transform,test_return_timedelta,[XPASS(strict)] SNOW-1619940,failed
tests.integ.modin.groupby.test_groupby_transform,test_timedelta_input[timedelta_column],[XPASS(strict)] ,failed
tests.integ.modin.groupby.test_groupby_transform,test_timedelta_input[timedelta_index],[XPASS(strict)] ,failed
tests.integ.modin.groupby.test_groupby_unique,test_aggregating_string_column_with_nulls,[XPASS(strict)] SNOW-1859090,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-False-False-False-None-animal_index],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-False-False-False-None-level3],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-False-False-False-None-level4],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-False-False-False-animal-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-False-False-False-by1-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-False-False-False-by2-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-False-True-False-None-animal_index],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-False-True-False-None-level3],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-False-True-False-None-level4],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-False-True-False-animal-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-False-True-False-by1-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-False-True-False-by2-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-True-False-False-None-animal_index],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-True-False-False-None-level3],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-True-False-False-None-level4],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-True-False-False-animal-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-True-False-False-by1-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-True-False-False-by2-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-True-True-False-None-animal_index],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-True-True-False-None-level3],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-True-True-False-None-level4],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-True-True-False-animal-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-True-True-False-by1-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[0-True-True-False-by2-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-False-False-False-None-animal_index],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-False-False-False-None-level3],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-False-False-False-None-level4],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-False-False-False-animal-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-False-False-False-by1-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-False-False-False-by2-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-False-True-False-None-animal_index],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-False-True-False-None-level3],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-False-True-False-None-level4],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-False-True-False-animal-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-False-True-False-by1-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-False-True-False-by2-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-True-False-False-None-animal_index],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-True-False-False-None-level3],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-True-False-False-None-level4],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-True-False-False-animal-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-True-False-False-by1-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-True-False-False-by2-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-True-True-False-None-animal_index],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-True-True-False-None-level3],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-True-True-False-None-level4],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-True-True-False-animal-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-True-True-False-by1-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_all_params[index-True-True-False-by2-None],AttributeError: 'DataFrameGroupBy' object has no attribute 'unique'. Did you mean: 'nunique'?,failed
tests.integ.modin.groupby.test_groupby_unique,test_axis_1,Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.groupby.test_groupby_with_grouper,test_groupby_agg_level_resample[by1],"KeyError: TimeGrouper(level=1, freq=<90 * Seconds>, axis=0, sort=True, dropna=True, closed='left', label='left', how='mean', convention='e', origin='start_day')",failed
tests.integ.modin.groupby.test_groupby_with_grouper,test_groupby_double_resample_unsupported,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_groupby_with_grouper,test_groupby_invalid_resample,"TypeError: Only valid with DatetimeIndex, TimedeltaIndex or PeriodIndex, but got an instance of 'Index'",failed
tests.integ.modin.groupby.test_groupby_with_grouper,test_groupby_nunique_with_grouper[by2],"KeyError: Grouper(level=1, axis=0, sort=False, dropna=True)",failed
tests.integ.modin.groupby.test_grouping,test_column_select[col3-by2],ValueError: Grouper for 'col2' not 1-dimensional,failed
tests.integ.modin.groupby.test_grouping,test_column_select[cols2-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 2)
[right]: (5, 3)",failed
tests.integ.modin.groupby.test_grouping,test_column_select[cols2-by2],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 2)
[right]: (4, 3)",failed
tests.integ.modin.groupby.test_grouping,test_column_select[cols2-col1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 2)
[right]: (3, 3)",failed
tests.integ.modin.groupby.test_grouping,test_column_select[cols3-by1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 3)
[right]: (5, 4)",failed
tests.integ.modin.groupby.test_grouping,test_column_select[cols3-by2],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (4, 3)
[right]: (4, 4)",failed
tests.integ.modin.groupby.test_grouping,test_column_select[cols3-col1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 3)
[right]: (3, 4)",failed
tests.integ.modin.groupby.test_grouping,test_column_select_via_attr[by2],ValueError: Grouper for 'col2' not 1-dimensional,failed
tests.integ.modin.groupby.test_grouping,test_column_select_with_level[cols3-0],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (2, 2)
[right]: (2, 3)",failed
tests.integ.modin.groupby.test_grouping,test_column_select_with_level[cols3-level1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (6, 2)
[right]: (6, 3)",failed
tests.integ.modin.groupby.test_grouping,test_column_select_with_level[cols3-level2],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 2)
[right]: (3, 3)",failed
tests.integ.modin.groupby.test_grouping,test_getitem_single_tuple_of_columns,SNOW-1057810: Indexing groupby with unwrapped lists should fail,xfailed
tests.integ.modin.groupby.test_grouping,test_groupby_as_index_select_column_sum_empty_df,SNOW-1057819: Investigate whether groupby operations should drop df.columns.name,xfailed
tests.integ.modin.groupby.test_grouping,test_select_bad_cols_raise[C],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.groupby.test_grouping,test_select_bad_cols_raise[cols1],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.groupby.test_grouping,test_select_cols_with_axis_1_raise,Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.groupby.test_grouping,test_select_index_cols_raise,"AssertionError: Regex pattern did not match.
 Regex: ""Columns not found: 'A'""
 Input: ""'A'""",failed
tests.integ.modin.groupby.test_grouping,test_select_overlapped_by_cols_raise,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_min_max,test_groupby_min_count_string_nullable[3-max],"AssertionError: DataFrame.iloc[:, 0] (column name=""ts"") are different

DataFrame.iloc[:, 0] (column name=""ts"") values are different (50.0 %)
[index]: [1, 2]
[left]:  <StringArray>
[<NA>, 'b']
Length: 2, dtype: string
[right]: [nan, nan]
At positional index 1, first diff: b != nan",failed
tests.integ.modin.groupby.test_min_max,test_groupby_min_count_string_nullable[3-min],"AssertionError: DataFrame.iloc[:, 0] (column name=""ts"") are different

DataFrame.iloc[:, 0] (column name=""ts"") values are different (50.0 %)
[index]: [1, 2]
[left]:  <StringArray>
[<NA>, 'a']
Length: 2, dtype: string
[right]: [nan, nan]
At positional index 1, first diff: a != nan",failed
tests.integ.modin.groupby.test_min_max,test_groupby_min_count_string_nullable[50-max],"AssertionError: DataFrame.iloc[:, 0] (column name=""ts"") are different

DataFrame.iloc[:, 0] (column name=""ts"") values are different (50.0 %)
[index]: [1, 2]
[left]:  <StringArray>
[<NA>, 'b']
Length: 2, dtype: string
[right]: [nan, nan]
At positional index 1, first diff: b != nan",failed
tests.integ.modin.groupby.test_min_max,test_groupby_min_count_string_nullable[50-min],"AssertionError: DataFrame.iloc[:, 0] (column name=""ts"") are different

DataFrame.iloc[:, 0] (column name=""ts"") values are different (50.0 %)
[index]: [1, 2]
[left]:  <StringArray>
[<NA>, 'a']
Length: 2, dtype: string
[right]: [nan, nan]
At positional index 1, first diff: a != nan",failed
tests.integ.modin.groupby.test_min_max,test_min_max_with_mixed_str_numeric_type,"TypeError: agg function failed [how->max,dtype->object]",failed
tests.integ.modin.groupby.test_pct_change,test_df_groupby_pct_change_unsupported[params0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.groupby.test_pct_change,test_df_groupby_pct_change_unsupported[params2],TypeError: unsupported operand type(s) for /: 'int' and 'str',failed
tests.integ.modin.groupby.test_pct_change,test_series_groupby_pct_change_division_by_zero_negative,Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.groupby.test_pct_change,test_series_groupby_pct_change_nonnumeric_negative,TypeError: unsupported operand type for -: got object,failed
tests.integ.modin.groupby.test_quantile,test_groupby_quantile_all_na_group_masked[higher-2-3],TypeError: 'quantile' cannot be performed against 'object' dtypes!,failed
tests.integ.modin.groupby.test_quantile,test_groupby_quantile_all_na_group_masked[lower-2-2],TypeError: 'quantile' cannot be performed against 'object' dtypes!,failed
tests.integ.modin.groupby.test_quantile,test_groupby_quantile_all_na_group_masked[nearest-2-2],TypeError: 'quantile' cannot be performed against 'object' dtypes!,failed
tests.integ.modin.groupby.test_quantile,test_groupby_quantile_nonmulti_levels_order,"[XPASS(strict)] SNOW-1062878: Because list-like q would return multiple rows, calling quantile through the aggregate frontend in this manner is unsupported.",failed
tests.integ.modin.groupby.test_quantile,test_groupby_quantile_with_arraylike_q_and_int_columns[q0-groupby0-frame_size0],"[XPASS(strict)] SNOW-1062878: Because list-like q would return multiple rows, calling quantile through the aggregate frontend in this manner is unsupported.",failed
tests.integ.modin.groupby.test_quantile,test_groupby_quantile_with_arraylike_q_and_int_columns[q0-groupby0-frame_size1],"[XPASS(strict)] SNOW-1062878: Because list-like q would return multiple rows, calling quantile through the aggregate frontend in this manner is unsupported.",failed
tests.integ.modin.groupby.test_quantile,test_groupby_quantile_with_arraylike_q_and_int_columns[q0-groupby1-frame_size0],"[XPASS(strict)] SNOW-1062878: Because list-like q would return multiple rows, calling quantile through the aggregate frontend in this manner is unsupported.",failed
tests.integ.modin.groupby.test_quantile,test_groupby_quantile_with_arraylike_q_and_int_columns[q0-groupby1-frame_size1],"[XPASS(strict)] SNOW-1062878: Because list-like q would return multiple rows, calling quantile through the aggregate frontend in this manner is unsupported.",failed
tests.integ.modin.groupby.test_quantile,test_quantile[0-a_vals0-b_vals0-lower],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0-a_vals0-b_vals0-midpoint],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0-a_vals1-b_vals1-lower],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0-a_vals1-b_vals1-midpoint],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0-a_vals2-b_vals2-lower],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0-a_vals2-b_vals2-midpoint],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0-a_vals3-b_vals3-lower],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0-a_vals3-b_vals3-midpoint],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0-a_vals4-b_vals4-lower],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0-a_vals4-b_vals4-midpoint],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0-a_vals6-b_vals6-lower],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0-a_vals6-b_vals6-midpoint],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0-timedelta-lower],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0-timedelta-midpoint],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0.5-a_vals0-b_vals0-lower],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0.5-a_vals0-b_vals0-midpoint],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0.5-a_vals1-b_vals1-lower],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0.5-a_vals1-b_vals1-midpoint],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0.5-a_vals1-b_vals1-nearest],reason: Unclear numpy expectation for nearest result with equidistant data,xfailed
tests.integ.modin.groupby.test_quantile,test_quantile[0.5-a_vals2-b_vals2-lower],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0.5-a_vals2-b_vals2-midpoint],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0.5-a_vals3-b_vals3-lower],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0.5-a_vals3-b_vals3-midpoint],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0.5-a_vals4-b_vals4-lower],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0.5-a_vals4-b_vals4-midpoint],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0.5-a_vals6-b_vals6-lower],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0.5-a_vals6-b_vals6-midpoint],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0.5-timedelta-lower],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[0.5-timedelta-midpoint],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[1-a_vals0-b_vals0-lower],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[1-a_vals0-b_vals0-midpoint],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[1-a_vals1-b_vals1-lower],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[1-a_vals1-b_vals1-midpoint],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[1-a_vals2-b_vals2-lower],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[1-a_vals2-b_vals2-midpoint],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[1-a_vals3-b_vals3-lower],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[1-a_vals3-b_vals3-midpoint],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[1-a_vals4-b_vals4-lower],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[1-a_vals4-b_vals4-midpoint],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[1-a_vals6-b_vals6-lower],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[1-a_vals6-b_vals6-midpoint],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[1-timedelta-lower],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile[1-timedelta-midpoint],[XPASS(strict)] Quantile with lower or midpoint interpolation not yet supported,failed
tests.integ.modin.groupby.test_quantile,test_quantile_array,"[XPASS(strict)] SNOW-1062878: Because list-like q would return multiple rows, calling quantile through the aggregate frontend in this manner is unsupported.",failed
tests.integ.modin.groupby.test_quantile,test_quantile_array_list_like_q,"[XPASS(strict)] SNOW-1062878: Because list-like q would return multiple rows, calling quantile through the aggregate frontend in this manner is unsupported.",failed
tests.integ.modin.groupby.test_quantile,test_quantile_array_multiple_levels,"[XPASS(strict)] SNOW-1062878: Because list-like q would return multiple rows, calling quantile through the aggregate frontend in this manner is unsupported.",failed
tests.integ.modin.groupby.test_quantile,test_quantile_array_no_sort,"[XPASS(strict)] SNOW-1062878: Because list-like q would return multiple rows, calling quantile through the aggregate frontend in this manner is unsupported.",failed
tests.integ.modin.groupby.test_quantile,test_quantile_out_of_bounds_q_raises,ValueError: Each 'q' must be between 0 and 1. Got '50.0' instead,failed
tests.integ.modin.groupby.test_quantile,test_quantile_raises,TypeError: 'quantile' cannot be performed against 'object' dtypes!,failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_bad_subset[subset0-KeyError],AssertionError: exception type <class 'ValueError'> does not match with expected type <class 'KeyError'>,failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-False-False-False-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  4, MultiIndex([('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            ('key 1', 'value',     nan)],
           names=['by', 'value1', 'value2'])
[right]: 6, MultiIndex([('key 1',     nan, 'value'),
            (    nan, 'value',     nan),
            (    nan,     nan,     nan),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            ('key 1', 'value',     nan)],
           names=['by', 'value1', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-False-False-False-by1-test_data1],"AssertionError: Series are different

Series length are different
[left]:  1, MultiIndex([('value', 'key 1', nan)],
           names=['value1', 'by', 'value2'])
[right]: 6, MultiIndex([(    nan, 'key 1', 'value'),
            ('value',     nan,     nan),
            (    nan,     nan,     nan),
            (    nan, 'key 1',     nan),
            (    nan, 'key 2', 'value'),
            ('value', 'key 1',     nan)],
           names=['value1', 'by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-False-False-False-by2-test_data1],"AssertionError: Series are different

Series length are different
[left]:  2, MultiIndex([('key 1', 'value', nan),
            ('key 2', 'value', nan)],
           names=['by', 'value2', 'value1'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            (    nan,     nan, 'value'),
            (    nan,     nan,     nan),
            ('key 1',     nan,     nan),
            ('key 2', 'value',     nan),
            ('key 1',     nan, 'value')],
           names=['by', 'value2', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-False-False-True-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  4, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value')],
           names=['by', 'value1', 'value2'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            (    nan, 'value',     nan),
            (    nan,     nan,     nan)],
           names=['by', 'value1', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-False-False-True-by1-test_data1],"AssertionError: Series are different

Series length are different
[left]:  1, MultiIndex([('value', 'key 1', nan)],
           names=['value1', 'by', 'value2'])
[right]: 6, MultiIndex([('value', 'key 1',     nan),
            ('value',     nan,     nan),
            (    nan, 'key 1', 'value'),
            (    nan, 'key 1',     nan),
            (    nan, 'key 2', 'value'),
            (    nan,     nan,     nan)],
           names=['value1', 'by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-False-False-True-by2-test_data1],"AssertionError: Series are different

Series length are different
[left]:  2, MultiIndex([('key 1', 'value', nan),
            ('key 2', 'value', nan)],
           names=['by', 'value2', 'value1'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2', 'value',     nan),
            (    nan,     nan, 'value'),
            (    nan,     nan,     nan)],
           names=['by', 'value2', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-False-True-False-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  4, MultiIndex([('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            ('key 1', 'value',     nan)],
           names=['by', 'value1', 'value2'])
[right]: 6, MultiIndex([('key 1',     nan, 'value'),
            (    nan, 'value',     nan),
            (    nan,     nan,     nan),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            ('key 1', 'value',     nan)],
           names=['by', 'value1', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-False-True-False-by1-test_data1],"AssertionError: Series are different

Series length are different
[left]:  1, MultiIndex([('value', 'key 1', nan)],
           names=['value1', 'by', 'value2'])
[right]: 6, MultiIndex([(    nan, 'key 1', 'value'),
            ('value',     nan,     nan),
            (    nan,     nan,     nan),
            (    nan, 'key 1',     nan),
            (    nan, 'key 2', 'value'),
            ('value', 'key 1',     nan)],
           names=['value1', 'by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-False-True-False-by2-test_data1],"AssertionError: Series are different

Series length are different
[left]:  2, MultiIndex([('key 1', 'value', nan),
            ('key 2', 'value', nan)],
           names=['by', 'value2', 'value1'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            (    nan,     nan, 'value'),
            (    nan,     nan,     nan),
            ('key 1',     nan,     nan),
            ('key 2', 'value',     nan),
            ('key 1',     nan, 'value')],
           names=['by', 'value2', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-False-True-True-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  4, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value')],
           names=['by', 'value1', 'value2'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            (    nan, 'value',     nan),
            (    nan,     nan,     nan)],
           names=['by', 'value1', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-False-True-True-by1-test_data1],"AssertionError: Series are different

Series length are different
[left]:  1, MultiIndex([('value', 'key 1', nan)],
           names=['value1', 'by', 'value2'])
[right]: 6, MultiIndex([('value', 'key 1',     nan),
            ('value',     nan,     nan),
            (    nan, 'key 1', 'value'),
            (    nan, 'key 1',     nan),
            (    nan, 'key 2', 'value'),
            (    nan,     nan,     nan)],
           names=['value1', 'by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-False-True-True-by2-test_data1],"AssertionError: Series are different

Series length are different
[left]:  2, MultiIndex([('key 1', 'value', nan),
            ('key 2', 'value', nan)],
           names=['by', 'value2', 'value1'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2', 'value',     nan),
            (    nan,     nan, 'value'),
            (    nan,     nan,     nan)],
           names=['by', 'value2', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-True-False-False-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  4, MultiIndex([('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            ('key 1', 'value',     nan)],
           names=['by', 'value1', 'value2'])
[right]: 6, MultiIndex([('key 1',     nan, 'value'),
            (    nan, 'value',     nan),
            (    nan,     nan,     nan),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            ('key 1', 'value',     nan)],
           names=['by', 'value1', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-True-False-False-by1-test_data1],"AssertionError: Series are different

Series length are different
[left]:  1, MultiIndex([('value', 'key 1', nan)],
           names=['value1', 'by', 'value2'])
[right]: 6, MultiIndex([(    nan, 'key 1', 'value'),
            ('value',     nan,     nan),
            (    nan,     nan,     nan),
            (    nan, 'key 1',     nan),
            (    nan, 'key 2', 'value'),
            ('value', 'key 1',     nan)],
           names=['value1', 'by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-True-False-False-by2-test_data1],"AssertionError: Series are different

Series length are different
[left]:  2, MultiIndex([('key 1', 'value', nan),
            ('key 2', 'value', nan)],
           names=['by', 'value2', 'value1'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            (    nan,     nan, 'value'),
            (    nan,     nan,     nan),
            ('key 1',     nan,     nan),
            ('key 2', 'value',     nan),
            ('key 1',     nan, 'value')],
           names=['by', 'value2', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-True-False-True-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  4, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value')],
           names=['by', 'value1', 'value2'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            (    nan, 'value',     nan),
            (    nan,     nan,     nan)],
           names=['by', 'value1', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-True-False-True-by1-test_data1],"AssertionError: Series are different

Series length are different
[left]:  1, MultiIndex([('value', 'key 1', nan)],
           names=['value1', 'by', 'value2'])
[right]: 6, MultiIndex([('value', 'key 1',     nan),
            ('value',     nan,     nan),
            (    nan, 'key 1', 'value'),
            (    nan, 'key 1',     nan),
            (    nan, 'key 2', 'value'),
            (    nan,     nan,     nan)],
           names=['value1', 'by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-True-False-True-by2-test_data1],"AssertionError: Series are different

Series length are different
[left]:  2, MultiIndex([('key 1', 'value', nan),
            ('key 2', 'value', nan)],
           names=['by', 'value2', 'value1'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2', 'value',     nan),
            (    nan,     nan, 'value'),
            (    nan,     nan,     nan)],
           names=['by', 'value2', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-True-True-False-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  4, MultiIndex([('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            ('key 1', 'value',     nan)],
           names=['by', 'value1', 'value2'])
[right]: 6, MultiIndex([('key 1',     nan, 'value'),
            (    nan, 'value',     nan),
            (    nan,     nan,     nan),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            ('key 1', 'value',     nan)],
           names=['by', 'value1', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-True-True-False-by1-test_data1],"AssertionError: Series are different

Series length are different
[left]:  1, MultiIndex([('value', 'key 1', nan)],
           names=['value1', 'by', 'value2'])
[right]: 6, MultiIndex([(    nan, 'key 1', 'value'),
            ('value',     nan,     nan),
            (    nan,     nan,     nan),
            (    nan, 'key 1',     nan),
            (    nan, 'key 2', 'value'),
            ('value', 'key 1',     nan)],
           names=['value1', 'by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-True-True-False-by2-test_data1],"AssertionError: Series are different

Series length are different
[left]:  2, MultiIndex([('key 1', 'value', nan),
            ('key 2', 'value', nan)],
           names=['by', 'value2', 'value1'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            (    nan,     nan, 'value'),
            (    nan,     nan,     nan),
            ('key 1',     nan,     nan),
            ('key 2', 'value',     nan),
            ('key 1',     nan, 'value')],
           names=['by', 'value2', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-True-True-True-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  4, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value')],
           names=['by', 'value1', 'value2'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            (    nan, 'value',     nan),
            (    nan,     nan,     nan)],
           names=['by', 'value1', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-True-True-True-by1-test_data1],"AssertionError: Series are different

Series length are different
[left]:  1, MultiIndex([('value', 'key 1', nan)],
           names=['value1', 'by', 'value2'])
[right]: 6, MultiIndex([('value', 'key 1',     nan),
            ('value',     nan,     nan),
            (    nan, 'key 1', 'value'),
            (    nan, 'key 1',     nan),
            (    nan, 'key 2', 'value'),
            (    nan,     nan,     nan)],
           names=['value1', 'by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-None-True-True-True-by2-test_data1],"AssertionError: Series are different

Series length are different
[left]:  2, MultiIndex([('key 1', 'value', nan),
            ('key 2', 'value', nan)],
           names=['by', 'value2', 'value1'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2', 'value',     nan),
            (    nan,     nan, 'value'),
            (    nan,     nan,     nan)],
           names=['by', 'value2', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset1-False-False-False-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  3, MultiIndex([('key 1',     nan),
            ('key 2',     nan),
            ('key 1', 'value')],
           names=['by', 'value1'])
[right]: 5, MultiIndex([('key 1',     nan),
            (    nan, 'value'),
            (    nan,     nan),
            ('key 2',     nan),
            ('key 1', 'value')],
           names=['by', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset1-False-False-False-by2-test_data1],"AssertionError: Series are different

Series length are different
[left]:  2, MultiIndex([('key 1', 'value', nan),
            ('key 2', 'value', nan)],
           names=['by', 'value2', 'value1'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            (    nan,     nan, 'value'),
            (    nan,     nan,     nan),
            ('key 1',     nan,     nan),
            ('key 2', 'value',     nan),
            ('key 1',     nan, 'value')],
           names=['by', 'value2', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset1-False-False-True-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  3, MultiIndex([('key 1', 'value'),
            ('key 1',     nan),
            ('key 2',     nan)],
           names=['by', 'value1'])
[right]: 5, MultiIndex([('key 1', 'value'),
            ('key 1',     nan),
            ('key 2',     nan),
            (    nan, 'value'),
            (    nan,     nan)],
           names=['by', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset1-False-False-True-by2-test_data1],"AssertionError: Series are different

Series length are different
[left]:  2, MultiIndex([('key 1', 'value', nan),
            ('key 2', 'value', nan)],
           names=['by', 'value2', 'value1'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2', 'value',     nan),
            (    nan,     nan, 'value'),
            (    nan,     nan,     nan)],
           names=['by', 'value2', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset1-False-True-False-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  3, MultiIndex([('key 1',     nan),
            ('key 2',     nan),
            ('key 1', 'value')],
           names=['by', 'value1'])
[right]: 5, MultiIndex([('key 1',     nan),
            (    nan, 'value'),
            (    nan,     nan),
            ('key 2',     nan),
            ('key 1', 'value')],
           names=['by', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset1-False-True-False-by2-test_data1],"AssertionError: Series are different

Series length are different
[left]:  2, MultiIndex([('key 1', 'value', nan),
            ('key 2', 'value', nan)],
           names=['by', 'value2', 'value1'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            (    nan,     nan, 'value'),
            (    nan,     nan,     nan),
            ('key 1',     nan,     nan),
            ('key 2', 'value',     nan),
            ('key 1',     nan, 'value')],
           names=['by', 'value2', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset1-False-True-True-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  3, MultiIndex([('key 1',     nan),
            ('key 1', 'value'),
            ('key 2',     nan)],
           names=['by', 'value1'])
[right]: 5, MultiIndex([('key 1',     nan),
            ('key 1', 'value'),
            ('key 2',     nan),
            (    nan, 'value'),
            (    nan,     nan)],
           names=['by', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset1-False-True-True-by2-test_data1],"AssertionError: Series are different

Series length are different
[left]:  2, MultiIndex([('key 1', 'value', nan),
            ('key 2', 'value', nan)],
           names=['by', 'value2', 'value1'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2', 'value',     nan),
            (    nan,     nan, 'value'),
            (    nan,     nan,     nan)],
           names=['by', 'value2', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset1-True-False-False-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  3, MultiIndex([('key 1',     nan),
            ('key 2',     nan),
            ('key 1', 'value')],
           names=['by', 'value1'])
[right]: 5, MultiIndex([('key 1',     nan),
            (    nan, 'value'),
            (    nan,     nan),
            ('key 2',     nan),
            ('key 1', 'value')],
           names=['by', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset1-True-False-False-by2-test_data1],"AssertionError: Series are different

Series length are different
[left]:  2, MultiIndex([('key 1', 'value', nan),
            ('key 2', 'value', nan)],
           names=['by', 'value2', 'value1'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            (    nan,     nan, 'value'),
            (    nan,     nan,     nan),
            ('key 1',     nan,     nan),
            ('key 2', 'value',     nan),
            ('key 1',     nan, 'value')],
           names=['by', 'value2', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset1-True-False-True-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  3, MultiIndex([('key 1', 'value'),
            ('key 1',     nan),
            ('key 2',     nan)],
           names=['by', 'value1'])
[right]: 5, MultiIndex([('key 1', 'value'),
            ('key 1',     nan),
            ('key 2',     nan),
            (    nan, 'value'),
            (    nan,     nan)],
           names=['by', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset1-True-False-True-by2-test_data1],"AssertionError: Series are different

Series length are different
[left]:  2, MultiIndex([('key 1', 'value', nan),
            ('key 2', 'value', nan)],
           names=['by', 'value2', 'value1'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2', 'value',     nan),
            (    nan,     nan, 'value'),
            (    nan,     nan,     nan)],
           names=['by', 'value2', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset1-True-True-False-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  3, MultiIndex([('key 2',     nan),
            ('key 1', 'value'),
            ('key 1',     nan)],
           names=['by', 'value1'])
[right]: 5, MultiIndex([(    nan, 'value'),
            (    nan,     nan),
            ('key 2',     nan),
            ('key 1', 'value'),
            ('key 1',     nan)],
           names=['by', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset1-True-True-False-by2-test_data1],"AssertionError: Series are different

Series length are different
[left]:  2, MultiIndex([('key 1', 'value', nan),
            ('key 2', 'value', nan)],
           names=['by', 'value2', 'value1'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            (    nan,     nan, 'value'),
            (    nan,     nan,     nan),
            ('key 1',     nan,     nan),
            ('key 2', 'value',     nan),
            ('key 1',     nan, 'value')],
           names=['by', 'value2', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset1-True-True-True-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  3, MultiIndex([('key 1', 'value'),
            ('key 1',     nan),
            ('key 2',     nan)],
           names=['by', 'value1'])
[right]: 5, MultiIndex([('key 1', 'value'),
            ('key 1',     nan),
            ('key 2',     nan),
            (    nan, 'value'),
            (    nan,     nan)],
           names=['by', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset1-True-True-True-by2-test_data1],"AssertionError: Series are different

Series length are different
[left]:  2, MultiIndex([('key 1', 'value', nan),
            ('key 2', 'value', nan)],
           names=['by', 'value2', 'value1'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2', 'value',     nan),
            (    nan,     nan, 'value'),
            (    nan,     nan,     nan)],
           names=['by', 'value2', 'value1'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset2-False-False-False-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  3, MultiIndex([('key 1', 'value'),
            ('key 1',     nan),
            ('key 2', 'value')],
           names=['by', 'value2'])
[right]: 4, MultiIndex([('key 1', 'value'),
            (    nan,     nan),
            ('key 1',     nan),
            ('key 2', 'value')],
           names=['by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset2-False-False-False-by1-test_data1],"AssertionError: Series are different

Series length are different
[left]:  1, MultiIndex([('value', 'key 1', nan)],
           names=['value1', 'by', 'value2'])
[right]: 6, MultiIndex([(    nan, 'key 1', 'value'),
            ('value',     nan,     nan),
            (    nan,     nan,     nan),
            (    nan, 'key 1',     nan),
            (    nan, 'key 2', 'value'),
            ('value', 'key 1',     nan)],
           names=['value1', 'by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset2-False-False-True-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  3, MultiIndex([('key 1', 'value'),
            ('key 1',     nan),
            ('key 2', 'value')],
           names=['by', 'value2'])
[right]: 4, MultiIndex([('key 1', 'value'),
            ('key 1',     nan),
            ('key 2', 'value'),
            (    nan,     nan)],
           names=['by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset2-False-False-True-by1-test_data1],"AssertionError: Series are different

Series length are different
[left]:  1, MultiIndex([('value', 'key 1', nan)],
           names=['value1', 'by', 'value2'])
[right]: 6, MultiIndex([('value', 'key 1',     nan),
            ('value',     nan,     nan),
            (    nan, 'key 1', 'value'),
            (    nan, 'key 1',     nan),
            (    nan, 'key 2', 'value'),
            (    nan,     nan,     nan)],
           names=['value1', 'by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset2-False-True-False-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  3, MultiIndex([('key 1',     nan),
            ('key 1', 'value'),
            ('key 2', 'value')],
           names=['by', 'value2'])
[right]: 4, MultiIndex([(    nan,     nan),
            ('key 1',     nan),
            ('key 1', 'value'),
            ('key 2', 'value')],
           names=['by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset2-False-True-False-by1-test_data1],"AssertionError: Series are different

Series length are different
[left]:  1, MultiIndex([('value', 'key 1', nan)],
           names=['value1', 'by', 'value2'])
[right]: 6, MultiIndex([(    nan, 'key 1', 'value'),
            ('value',     nan,     nan),
            (    nan,     nan,     nan),
            (    nan, 'key 1',     nan),
            (    nan, 'key 2', 'value'),
            ('value', 'key 1',     nan)],
           names=['value1', 'by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset2-False-True-True-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  3, MultiIndex([('key 1',     nan),
            ('key 1', 'value'),
            ('key 2', 'value')],
           names=['by', 'value2'])
[right]: 4, MultiIndex([('key 1',     nan),
            ('key 1', 'value'),
            ('key 2', 'value'),
            (    nan,     nan)],
           names=['by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset2-False-True-True-by1-test_data1],"AssertionError: Series are different

Series length are different
[left]:  1, MultiIndex([('value', 'key 1', nan)],
           names=['value1', 'by', 'value2'])
[right]: 6, MultiIndex([('value', 'key 1',     nan),
            ('value',     nan,     nan),
            (    nan, 'key 1', 'value'),
            (    nan, 'key 1',     nan),
            (    nan, 'key 2', 'value'),
            (    nan,     nan,     nan)],
           names=['value1', 'by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset2-True-False-False-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  3, MultiIndex([('key 1', 'value'),
            ('key 1',     nan),
            ('key 2', 'value')],
           names=['by', 'value2'])
[right]: 4, MultiIndex([('key 1', 'value'),
            (    nan,     nan),
            ('key 1',     nan),
            ('key 2', 'value')],
           names=['by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset2-True-False-False-by1-test_data1],"AssertionError: Series are different

Series length are different
[left]:  1, MultiIndex([('value', 'key 1', nan)],
           names=['value1', 'by', 'value2'])
[right]: 6, MultiIndex([(    nan, 'key 1', 'value'),
            ('value',     nan,     nan),
            (    nan,     nan,     nan),
            (    nan, 'key 1',     nan),
            (    nan, 'key 2', 'value'),
            ('value', 'key 1',     nan)],
           names=['value1', 'by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset2-True-False-True-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  3, MultiIndex([('key 1', 'value'),
            ('key 1',     nan),
            ('key 2', 'value')],
           names=['by', 'value2'])
[right]: 4, MultiIndex([('key 1', 'value'),
            ('key 1',     nan),
            ('key 2', 'value'),
            (    nan,     nan)],
           names=['by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset2-True-False-True-by1-test_data1],"AssertionError: Series are different

Series length are different
[left]:  1, MultiIndex([('value', 'key 1', nan)],
           names=['value1', 'by', 'value2'])
[right]: 6, MultiIndex([('value', 'key 1',     nan),
            ('value',     nan,     nan),
            (    nan, 'key 1', 'value'),
            (    nan, 'key 1',     nan),
            (    nan, 'key 2', 'value'),
            (    nan,     nan,     nan)],
           names=['value1', 'by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset2-True-True-False-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  3, MultiIndex([('key 1', 'value'),
            ('key 2', 'value'),
            ('key 1',     nan)],
           names=['by', 'value2'])
[right]: 4, MultiIndex([('key 1', 'value'),
            ('key 2', 'value'),
            (    nan,     nan),
            ('key 1',     nan)],
           names=['by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset2-True-True-False-by1-test_data1],"AssertionError: Series are different

Series length are different
[left]:  1, MultiIndex([('value', 'key 1', nan)],
           names=['value1', 'by', 'value2'])
[right]: 6, MultiIndex([(    nan, 'key 1', 'value'),
            ('value',     nan,     nan),
            (    nan,     nan,     nan),
            (    nan, 'key 1',     nan),
            (    nan, 'key 2', 'value'),
            ('value', 'key 1',     nan)],
           names=['value1', 'by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset2-True-True-True-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  3, MultiIndex([('key 1', 'value'),
            ('key 1',     nan),
            ('key 2', 'value')],
           names=['by', 'value2'])
[right]: 4, MultiIndex([('key 1', 'value'),
            ('key 1',     nan),
            ('key 2', 'value'),
            (    nan,     nan)],
           names=['by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset2-True-True-True-by1-test_data1],"AssertionError: Series are different

Series length are different
[left]:  1, MultiIndex([('value', 'key 1', nan)],
           names=['value1', 'by', 'value2'])
[right]: 6, MultiIndex([('value', 'key 1',     nan),
            ('value',     nan,     nan),
            (    nan, 'key 1', 'value'),
            (    nan, 'key 1',     nan),
            (    nan, 'key 2', 'value'),
            (    nan,     nan,     nan)],
           names=['value1', 'by', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset3-False-False-False-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  4, MultiIndex([('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            ('key 1', 'value',     nan)],
           names=['by', 'value1', 'value2'])
[right]: 6, MultiIndex([('key 1',     nan, 'value'),
            (    nan, 'value',     nan),
            (    nan,     nan,     nan),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            ('key 1', 'value',     nan)],
           names=['by', 'value1', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset3-False-False-True-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  4, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value')],
           names=['by', 'value1', 'value2'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            (    nan, 'value',     nan),
            (    nan,     nan,     nan)],
           names=['by', 'value1', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset3-False-True-False-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  4, MultiIndex([('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            ('key 1', 'value',     nan)],
           names=['by', 'value1', 'value2'])
[right]: 6, MultiIndex([('key 1',     nan, 'value'),
            (    nan, 'value',     nan),
            (    nan,     nan,     nan),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            ('key 1', 'value',     nan)],
           names=['by', 'value1', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset3-False-True-True-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  4, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value')],
           names=['by', 'value1', 'value2'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            (    nan, 'value',     nan),
            (    nan,     nan,     nan)],
           names=['by', 'value1', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset3-True-False-False-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  4, MultiIndex([('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            ('key 1', 'value',     nan)],
           names=['by', 'value1', 'value2'])
[right]: 6, MultiIndex([('key 1',     nan, 'value'),
            (    nan, 'value',     nan),
            (    nan,     nan,     nan),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            ('key 1', 'value',     nan)],
           names=['by', 'value1', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset3-True-False-True-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  4, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value')],
           names=['by', 'value1', 'value2'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            (    nan, 'value',     nan),
            (    nan,     nan,     nan)],
           names=['by', 'value1', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset3-True-True-False-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  4, MultiIndex([('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            ('key 1', 'value',     nan)],
           names=['by', 'value1', 'value2'])
[right]: 6, MultiIndex([('key 1',     nan, 'value'),
            (    nan, 'value',     nan),
            (    nan,     nan,     nan),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            ('key 1', 'value',     nan)],
           names=['by', 'value1', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_basic[False-subset3-True-True-True-by-test_data1],"AssertionError: Series are different

Series length are different
[left]:  4, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value')],
           names=['by', 'value1', 'value2'])
[right]: 6, MultiIndex([('key 1', 'value',     nan),
            ('key 1',     nan, 'value'),
            ('key 1',     nan,     nan),
            ('key 2',     nan, 'value'),
            (    nan, 'value',     nan),
            (    nan,     nan,     nan)],
           names=['by', 'value1', 'value2'])",failed
tests.integ.modin.groupby.test_value_counts,test_value_counts_bins_unimplemented,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.hybrid.test_switch_operations,test_applying_snowpark_function_to_dataframe_causes_backend_switch[func1],,xfailed
tests.integ.modin.hybrid.test_switch_operations,test_applying_snowpark_function_to_dataframe_causes_backend_switch[func2],,xfailed
tests.integ.modin.hybrid.test_switch_operations,test_applying_snowpark_function_to_dataframe_causes_backend_switch[func3],,xfailed
tests.integ.modin.hybrid.test_switch_operations,test_applying_snowpark_function_to_series_causes_backend_switch[func1],,xfailed
tests.integ.modin.hybrid.test_switch_operations,test_groupby_agg_post_op_switch[tail],"pd.DataFrame([[0, 1], [2, 3]]).groupby(0)[1].tail() fails with some indexing error.",xfailed
tests.integ.modin.hybrid.test_switch_operations,test_malformed_decorator_conditions,"AssertionError: Regex pattern did not match.
 Regex: 'Invalid condition at index 0.*when first element is callable.*second element must be string'
 Input: 'Invalid condition at index 0: when first element is callable, second element must be a string representing the reason, or a callable that returns the reason, got int. Condition: (<function test_malformed_decorator_conditions.<locals>.<lambda> at 0x3d085e5f0>, 123)'",failed
tests.integ.modin.index.test_datetime_index_methods,test_datetime_index_construction,"AssertionError: assert False
 +  where False = isinstance(DatetimeIndex(['2021-01-01', '2021-01-02', '2021-01-03'], dtype='datetime64[ns]', freq=None), <class 'snowflake.snowpark.modin.plugin.extensions.datetime_index.DatetimeIndex'>)
 +    where <class 'snowflake.snowpark.modin.plugin.extensions.datetime_index.DatetimeIndex'> = pd.DatetimeIndex",failed
tests.integ.modin.index.test_datetime_index_methods,test_datetime_index_construction_negative,AttributeError: 'NativeQueryCompiler' object has no attribute 'is_datetime64_any_dtype',failed
tests.integ.modin.index.test_datetime_index_methods,test_datetime_index_mean[True-native_index2],TODO: SNOW-1625233 Snowpark pandas to_datetime does not support timezone,xfailed
tests.integ.modin.index.test_datetime_index_methods,test_index_parent,AttributeError: 'DatetimeIndex' object has no attribute '_parent',failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_all_params,NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_copy,assert 100 == 1,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index[native_df0-native_index0],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index[native_df1-native_index1],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index[native_df10-native_index10],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index[native_df2-native_index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['mixed']
[right]: [None]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index[native_df3-native_index3],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index[native_df5-native_index5],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index[native_df6-native_index6],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index[native_df7-native_index7],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['mixed']
[right]: [None]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index[native_df8-native_index8],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index[native_df9-native_index9],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index_and_different_columns[index-native_df0-native_index0-columns0-True],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index_and_different_columns[index-native_df1-native_index1-columns1-True],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index_and_different_columns[index-native_df2-native_index2-columns2-True],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index_and_different_columns[index-native_df3-native_index3-columns3-True],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index_and_different_columns[index-native_df4-native_index4-columns4-True],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index_and_different_columns[index-native_df5-native_index5-columns5-True],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index_and_different_columns[index-native_df6-native_index6-columns6-True],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index_and_different_columns[index-native_df7-native_index7-columns7-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['empty index']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index_and_different_columns[index-native_df8-native_index8-columns8-True],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index_and_different_columns[index-native_df9-native_index9-columns9-True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['non-empty index']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index_and_different_columns[list-native_df0-native_index0-columns0-True],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index_and_different_columns[list-native_df1-native_index1-columns1-True],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index_and_different_columns[list-native_df2-native_index2-columns2-True],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index_and_different_columns[list-native_df3-native_index3-columns3-True],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index_and_different_columns[list-native_df4-native_index4-columns4-True],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index_and_different_columns[list-native_df5-native_index5-columns5-True],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index_and_different_columns[list-native_df6-native_index6-columns6-True],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index_and_different_columns[list-native_df7-native_index7-columns7-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['empty index']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index_and_different_columns[list-native_df8-native_index8-columns8-True],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_as_data_and_index_as_index_and_different_columns[list-native_df9-native_index9-columns9-True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['non-empty index']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_data_and_dtype,"AssertionError: Attributes of DataFrame.iloc[:, 0] (column name=""0"") are different

Attribute ""dtype"" are different
[left]:  int64
[right]: object",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_data_and_name_in_columns,"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 1)
[right]: (3, 2)",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_data_and_new_columns,NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_df_data_and_tuple_name_in_columns,"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 1)
[right]: (3, 2)",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_empty_df_as_data_and_index_as_index[native_df0-native_index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['empty index']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_empty_df_as_data_and_index_as_index[native_df1-native_index1],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns0-A-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns0-A-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns0-A-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns0-A-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns0-A-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns0-A-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns0-index name!-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns0-index name!-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns0-index name!-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns0-index name!-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns0-index name!-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns0-index name!-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns0-index_name3-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns0-index_name3-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns0-index_name3-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns0-index_name3-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns0-index_name3-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns0-index_name3-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns1-A-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns1-A-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns1-A-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns1-A-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns1-A-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns1-A-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns1-index name!-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns1-index name!-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns1-index name!-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns1-index name!-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns1-index name!-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns1-index name!-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns1-index_name3-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns1-index_name3-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns1-index_name3-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns1-index_name3-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns1-index_name3-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns1-index_name3-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns2-A-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns2-A-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns2-A-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns2-A-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns2-A-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns2-A-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns2-index name!-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns2-index name!-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns2-index name!-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns2-index name!-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns2-index name!-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns2-index name!-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns2-index_name3-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns2-index_name3-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns2-index_name3-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns2-index_name3-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns2-index_name3-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns2-index_name3-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns3-A-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns3-A-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns3-A-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns3-A-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns3-A-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns3-A-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns3-index name!-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns3-index name!-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns3-index name!-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns3-index name!-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns3-index name!-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns3-index name!-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns3-index_name3-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns3-index_name3-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns3-index_name3-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns3-index_name3-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns3-index_name3-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns3-index_name3-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns4-A-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns4-A-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns4-A-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns4-A-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns4-A-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns4-A-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns4-index name!-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns4-index name!-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns4-index name!-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns4-index name!-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns4-index name!-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns4-index name!-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns4-index_name3-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns4-index_name3-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns4-index_name3-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns4-index_name3-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns4-index_name3-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns4-index_name3-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns5-A-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns5-A-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns5-A-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns5-A-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns5-A-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns5-A-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns5-index name!-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns5-index name!-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns5-index name!-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns5-index name!-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns5-index name!-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns5-index name!-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns5-index_name3-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns5-index_name3-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns5-index_name3-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns5-index_name3-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns5-index_name3-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns5-index_name3-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns6-A-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns6-A-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns6-A-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns6-A-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns6-A-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns6-A-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns6-index name!-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns6-index name!-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns6-index name!-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns6-index name!-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns6-index name!-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns6-index name!-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns6-index_name3-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns6-index_name3-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns6-index_name3-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns6-index_name3-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns6-index_name3-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns6-index_name3-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns7-A-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns7-A-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns7-A-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns7-A-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns7-A-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns7-A-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['A']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns7-index name!-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns7-index name!-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns7-index name!-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns7-index name!-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns7-index name!-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns7-index name!-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns7-index_name3-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns7-index_name3-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns7-index_name3-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns7-index_name3-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns7-index_name3-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns[columns7-index_name3-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_index_and_columns_match,"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 1)
[right]: (0, 1)",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_columns[None-series-columns3],"AssertionError: assert ['A', ['B', 'C']] == ['A', ('B', 'C')]
  At index 1 diff: ['B', 'C'] != ('B', 'C')
  Full diff:
  - ['A', ('B', 'C')]
  ?       ^        -
  + ['A', ['B', 'C']]
  ?       ^         +",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_columns[column_name2-index-columns0],"AssertionError: DataFrame.columns are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('tuple', 'name')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_columns[column_name2-index-columns1],"AssertionError: DataFrame.columns are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('tuple', 'name')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_columns[column_name2-index-columns2],"AssertionError: DataFrame.columns are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('tuple', 'name')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_columns[column_name2-series-columns0],"AssertionError: DataFrame.columns are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('tuple', 'name')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_columns[column_name2-series-columns1],"AssertionError: DataFrame.columns are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('tuple', 'name')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_columns[column_name2-series-columns2],"AssertionError: DataFrame.columns are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('tuple', 'name')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_columns[column_name2-series-columns3],"AssertionError: assert ['A', ['B', 'C']] == ['A', ('B', 'C')]
  At index 1 diff: ['B', 'C'] != ('B', 'C')
  Full diff:
  - ['A', ('B', 'C')]
  ?       ^        -
  + ['A', ['B', 'C']]
  ?       ^         +",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_columns[index name!-index-columns0],"AssertionError: DataFrame.columns are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_columns[index name!-index-columns1],"AssertionError: DataFrame.columns are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_columns[index name!-index-columns2],"AssertionError: DataFrame.columns are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_columns[index name!-series-columns0],"AssertionError: DataFrame.columns are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_columns[index name!-series-columns1],"AssertionError: DataFrame.columns are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_columns[index name!-series-columns2],"AssertionError: DataFrame.columns are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_columns[index name!-series-columns3],"AssertionError: assert ['A', ['B', 'C']] == ['A', ('B', 'C')]
  At index 1 diff: ['B', 'C'] != ('B', 'C')
  Full diff:
  - ['A', ('B', 'C')]
  ?       ^        -
  + ['A', ['B', 'C']]
  ?       ^         +",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_multiindex_columns[None-index-columns0],"AssertionError: DataFrame.columns are different

DataFrame.columns classes are different
[left]:  Index([('A', 'B')], dtype='object')
[right]: MultiIndex([('A', 'B')],
           )",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_multiindex_columns[None-index-columns1],"AssertionError: DataFrame.columns are different

DataFrame.columns classes are different
[left]:  Index([('A', 'B'), ('C', 'D')], dtype='object')
[right]: MultiIndex([('A', 'B'),
            ('C', 'D')],
           )",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_multiindex_columns[None-series-columns0],"AssertionError: assert [['A', 'B']] == [('A', 'B')]
  At index 0 diff: ['A', 'B'] != ('A', 'B')
  Full diff:
  - [('A', 'B')]
  ?  ^        -
  + [['A', 'B']]
  ?  ^         +",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_multiindex_columns[None-series-columns1],"AssertionError: assert [['A', 'B'], ['C', 'D']] == [('A', 'B'), ('C', 'D')]
  At index 0 diff: ['A', 'B'] != ('A', 'B')
  Full diff:
  - [('A', 'B'), ('C', 'D')]
  ?  ^        ^  ^        -
  + [['A', 'B'], ['C', 'D']]
  ?  ^        ^  ^         +",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_multiindex_columns[column_name1-index-columns0],"AssertionError: DataFrame.columns are different

DataFrame.columns classes are different
[left]:  Index([('A', 'B')], dtype='object')
[right]: MultiIndex([('A', 'B')],
           names=['tuple', 'name'])",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_multiindex_columns[column_name1-index-columns1],"AssertionError: DataFrame.columns are different

DataFrame.columns classes are different
[left]:  Index([('A', 'B'), ('C', 'D')], dtype='object')
[right]: MultiIndex([('A', 'B'),
            ('C', 'D')],
           names=['tuple', 'name'])",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_multiindex_columns[column_name1-series-columns0],"AssertionError: assert [['A', 'B']] == [('A', 'B')]
  At index 0 diff: ['A', 'B'] != ('A', 'B')
  Full diff:
  - [('A', 'B')]
  ?  ^        -
  + [['A', 'B']]
  ?  ^         +",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_lazy_multiindex_columns[column_name1-series-columns1],"AssertionError: assert [['A', 'B'], ['C', 'D']] == [('A', 'B'), ('C', 'D')]
  At index 0 diff: ['A', 'B'] != ('A', 'B')
  Full diff:
  - [('A', 'B'), ('C', 'D')]
  ?  ^        ^  ^        -
  + [['A', 'B'], ['C', 'D']]
  ?  ^        ^  ^         +",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_mixed_series_index_list_data_negative,NotImplementedError: Index.take is not yet implemented,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_multiindex_and_columns[columns0-index_name1-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_multiindex_and_columns[columns1-index_name1-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_multiindex_and_columns[columns2-index_name1-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_multiindex_and_columns[columns3-index_name1-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_multiindex_and_columns[columns4-index_name1-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_multiindex_and_columns[columns5-index_name1-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_multiindex_and_columns[columns6-index_name1-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_multiindex_and_columns[columns7-index_name1-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('A', 'B')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_name_not_in_columns_and_index,NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_series_data_and_series_index,SNOW-1638397 DataFrame creation fails: reindex does not work with string index,xfailed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_series_index_dict_data[series-series],"AssertionError: Attributes of DataFrame.iloc[:, 2] (column name=""C"") are different

Attribute ""dtype"" are different
[left]:  float64
[right]: object",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_df_with_series_index_list_data[series-index],NotImplementedError: Index.take is not yet implemented,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_series_with_all_params,NotImplementedError: Passing non-existent columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_series_with_copy,assert 100 == 1,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_series_with_df_data_negative,"AssertionError: Regex pattern did not match.
 Regex: 'Data cannot be a DataFrame'
 Input: 'Data must be 1-dimensional, got ndarray of shape (3, 2) instead'",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_series_with_pandas_data_and_dtype,"AssertionError: Attributes of Series are different

Attribute ""dtype"" are different
[left]:  int64
[right]: object",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_series_with_series_index_dict_data[index-index],AttributeError: 'DataFrame' object has no attribute 'ensure_row_position_column',failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_series_with_series_index_list_data[index-index],AttributeError: 'DataFrame' object has no attribute 'ensure_row_position_column',failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_data[df-native_data0],"AssertionError: DataFrame.columns are different

DataFrame.columns values are different (100.0 %)
[left]:  RangeIndex(start=0, stop=1, step=1)
[right]: Index(['some name'], dtype='object')
At positional index 0, first diff: 0 != some name",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_data[df-native_data2],"AssertionError: DataFrame.columns are different

DataFrame.columns values are different (100.0 %)
[left]:  RangeIndex(start=0, stop=1, step=1)
[right]: Index(['AAAAA'], dtype='object')
At positional index 0, first diff: 0 != AAAAA",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_data[df-native_data3],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 0)
[right]: (0, 1)",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_data[series-native_data0],"AssertionError: Series are different

Attribute ""name"" are different
[left]:  None
[right]: some name",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_data[series-native_data2],"AssertionError: Series are different

Attribute ""name"" are different
[left]:  None
[right]: AAAAA",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_index_as_data_and_index[df-native_idx_data0-native_idx_index0],"AssertionError: DataFrame.columns are different

Attribute ""inferred_type"" are different
[left]:  integer
[right]: string",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_index_as_data_and_index[df-native_idx_data1-native_idx_index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_index_as_data_and_index[df-native_idx_data2-native_idx_index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_index_as_data_and_index[df-native_idx_data3-native_idx_index3],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 0)
[right]: (0, 1)",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_index_as_data_and_index[series-native_idx_data0-native_idx_index0],"AssertionError: Series are different

Attribute ""name"" are different
[left]:  None
[right]: data name",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_index_as_data_and_index[series-native_idx_data1-native_idx_index1],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_index_as_data_and_index[series-native_idx_data2-native_idx_index2],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_index_as_data_and_series_as_index[df-native_index0-native_series0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index series name']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_index_as_data_and_series_as_index[df-native_index1-native_series1],"AssertionError: DataFrame.columns are different

Attribute ""inferred_type"" are different
[left]:  integer
[right]: string",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_index_as_data_and_series_as_index[df-native_index3-native_series3],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (0, 0)
[right]: (0, 1)",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_index_as_data_and_series_as_index[series-native_index0-native_series0],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index series name']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_index_as_data_and_series_as_index[series-native_index1-native_series1],"AssertionError: Series are different

Attribute ""name"" are different
[left]:  None
[right]: AAAAA",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_index_as_data_and_series_as_index[series-native_index3-native_series3],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['empty series']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_index_as_index[df-data0-native_idx0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['some name']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_index_as_index[df-data3-native_idx3],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['empty index']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_index_as_index[series-data0-native_idx0],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['some name']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_index_as_index[series-data3-native_idx3],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['empty index']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[df-index name!-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[df-index name!-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[df-index name!-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[df-index name!-index-index3],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[df-index name!-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[df-index name!-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[df-index name!-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[df-index name!-series-index3],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[df-index_name2-index-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('tuple', 'name')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[df-index_name2-index-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('tuple', 'name')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[df-index_name2-index-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('tuple', 'name')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[df-index_name2-index-index3],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('tuple', 'name')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[df-index_name2-series-index0],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('tuple', 'name')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[df-index_name2-series-index1],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('tuple', 'name')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[df-index_name2-series-index2],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('tuple', 'name')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[df-index_name2-series-index3],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('tuple', 'name')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[series-index name!-index-index0],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[series-index name!-index-index1],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[series-index name!-index-index2],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[series-index name!-index-index3],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[series-index name!-series-index0],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[series-index name!-series-index1],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[series-index name!-series-index2],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[series-index name!-series-index3],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index name!']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[series-index_name2-index-index0],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('tuple', 'name')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[series-index_name2-index-index1],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('tuple', 'name')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[series-index_name2-index-index2],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('tuple', 'name')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[series-index_name2-index-index3],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('tuple', 'name')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[series-index_name2-series-index0],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('tuple', 'name')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[series-index_name2-series-index1],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('tuple', 'name')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[series-index_name2-series-index2],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('tuple', 'name')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_named_index[series-index_name2-series-index3],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: [('tuple', 'name')]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_series_as_data_and_index_as_index[df-native_series0-native_index0-True],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_series_as_data_and_index_as_index[df-native_series1-native_index1-True],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_series_as_data_and_index_as_index[df-native_series2-native_index2-True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  ['mixed']
[right]: [None]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_series_as_data_and_index_as_index[df-native_series3-native_index3-True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_series_as_data_and_index_as_index[df-native_series4-native_index4-True],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [20]
[right]: [None]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_series_as_data_and_index_as_index[df-native_series5-native_index5-True],NotImplementedError: Passing non-existant columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_series_as_data_and_index_as_index[df-native_series6-native_index6-True],"AssertionError: DataFrame.index are different

Attribute ""inferred_type"" are different
[left]:  integer
[right]: empty",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_series_as_data_and_index_as_index[df-native_series7-native_index7-False],"AssertionError: DataFrame.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['empty index']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_series_as_data_and_index_as_index[series-native_series0-native_index0-True],NotImplementedError: Passing non-existent columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_series_as_data_and_index_as_index[series-native_series1-native_index1-True],NotImplementedError: Passing non-existent columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_series_as_data_and_index_as_index[series-native_series2-native_index2-True],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  ['mixed']
[right]: [None]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_series_as_data_and_index_as_index[series-native_series3-native_index3-True],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_series_as_data_and_index_as_index[series-native_series4-native_index4-True],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [20]
[right]: [None]",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_series_as_data_and_index_as_index[series-native_series5-native_index5-True],NotImplementedError: Passing non-existent columns or index values to constructor not yet implemented.,failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_series_as_data_and_index_as_index[series-native_series6-native_index6-True],"AssertionError: Series.index are different

Attribute ""inferred_type"" are different
[left]:  integer
[right]: empty",failed
tests.integ.modin.index.test_df_series_creation_with_index,test_create_with_series_as_data_and_index_as_index[series-native_series7-native_index7-False],"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['empty index']",failed
tests.integ.modin.index.test_index_methods,test_create_index_from_series,AttributeError: 'Index' object has no attribute '_query_compiler',failed
tests.integ.modin.index.test_index_methods,test_df_index_equals[native_df0],AttributeError: 'RangeIndex' object has no attribute 'to_pandas',failed
tests.integ.modin.index.test_index_methods,test_df_index_equals[native_df1],AttributeError: 'RangeIndex' object has no attribute 'to_pandas',failed
tests.integ.modin.index.test_index_methods,test_df_index_equals[native_df2],AttributeError: 'Index' object has no attribute 'to_pandas',failed
tests.integ.modin.index.test_index_methods,test_df_index_equals[native_df3],AttributeError: 'RangeIndex' object has no attribute 'to_pandas',failed
tests.integ.modin.index.test_index_methods,test_df_index_equals[native_df4],AttributeError: 'DatetimeIndex' object has no attribute 'to_pandas',failed
tests.integ.modin.index.test_index_methods,test_df_index_equals[native_df5],AttributeError: 'TimedeltaIndex' object has no attribute 'to_pandas',failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df0-False-1],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df0-False-None],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df0-False-True],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df0-False-_NoDefault.no_default],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df0-False-name],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df0-True-1],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df0-True-None],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df0-True-True],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df0-True-_NoDefault.no_default],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df0-True-name],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df1-False-1],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df1-False-None],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df1-False-True],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df1-False-_NoDefault.no_default],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df1-False-name],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df1-True-1],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df1-True-None],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df1-True-True],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df1-True-_NoDefault.no_default],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df1-True-name],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df2-False-1],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df2-False-None],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df2-False-True],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df2-False-_NoDefault.no_default],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df2-False-name],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df2-True-1],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df2-True-None],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df2-True-True],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df2-True-_NoDefault.no_default],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df2-True-name],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df3-False-1],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df3-False-None],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df3-False-True],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df3-False-_NoDefault.no_default],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df3-False-name],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df3-True-1],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df3-True-None],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df3-True-True],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df3-True-_NoDefault.no_default],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df3-True-name],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df4-False-1],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df4-False-None],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df4-False-True],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df4-False-_NoDefault.no_default],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df4-False-name],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df4-True-1],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df4-True-None],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df4-True-True],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df4-True-_NoDefault.no_default],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df4-True-name],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df5-False-1],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df5-False-None],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df5-False-True],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df5-False-_NoDefault.no_default],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df5-False-name],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df5-True-1],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df5-True-None],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df5-True-True],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df5-True-_NoDefault.no_default],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_df_index_to_frame[native_df5-True-name],AssertionError: Got type: <class 'pandas.core.frame.DataFrame'>,failed
tests.integ.modin.index.test_index_methods,test_index_parent,AttributeError: 'Index' object has no attribute '_parent',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index0-True-1],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index0-True-None],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index0-True-True],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index0-True-_NoDefault.no_default],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index0-True-name],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index1-True-1],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index1-True-None],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index1-True-True],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index1-True-_NoDefault.no_default],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index1-True-name],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index10-True-1],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index10-True-None],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index10-True-True],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index10-True-_NoDefault.no_default],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index10-True-name],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index11-True-1],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index11-True-None],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index11-True-True],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index11-True-_NoDefault.no_default],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index11-True-name],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index12-True-1],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index12-True-None],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index12-True-True],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index12-True-_NoDefault.no_default],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index12-True-name],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index2-True-1],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index2-True-None],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index2-True-True],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index2-True-_NoDefault.no_default],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index2-True-name],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index3-True-1],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index3-True-None],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index3-True-True],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index3-True-_NoDefault.no_default],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index3-True-name],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index4-True-1],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index4-True-None],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index4-True-True],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index4-True-_NoDefault.no_default],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index4-True-name],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index5-True-1],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index5-True-None],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index5-True-True],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index5-True-_NoDefault.no_default],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index5-True-name],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index6-True-1],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index6-True-None],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index6-True-True],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index6-True-_NoDefault.no_default],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index6-True-name],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index7-True-1],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index7-True-None],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index7-True-True],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index7-True-_NoDefault.no_default],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index7-True-name],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index8-True-1],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index8-True-None],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index8-True-True],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index8-True-_NoDefault.no_default],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index8-True-name],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index9-True-1],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index9-True-None],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index9-True-True],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index9-True-_NoDefault.no_default],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_index_to_series[native_index9-True-name],AttributeError: 'DataFrame' object has no attribute 'data_column_pandas_labels',failed
tests.integ.modin.index.test_index_methods,test_invalid_level[name70-1-empty-DatetimeIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name70-1-empty-Index],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name70-1-empty-TimedeltaIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name70-1-not_empty-DatetimeIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name70-1-not_empty-Index],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name70-1-not_empty-TimedeltaIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name71-1.0-empty-DatetimeIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name71-1.0-empty-Index],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name71-1.0-empty-TimedeltaIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name71-1.0-not_empty-DatetimeIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name71-1.0-not_empty-Index],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name71-1.0-not_empty-TimedeltaIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name72-name-empty-DatetimeIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name72-name-empty-Index],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name72-name-empty-TimedeltaIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name72-name-not_empty-DatetimeIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name72-name-not_empty-Index],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name72-name-not_empty-TimedeltaIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name73-level73-empty-DatetimeIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name73-level73-empty-Index],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name73-level73-empty-TimedeltaIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name73-level73-not_empty-DatetimeIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name73-level73-not_empty-Index],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name73-level73-not_empty-TimedeltaIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name74-level74-empty-DatetimeIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name74-level74-empty-Index],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name74-level74-empty-TimedeltaIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name74-level74-not_empty-DatetimeIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name74-level74-not_empty-Index],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name74-level74-not_empty-TimedeltaIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name75-True-empty-DatetimeIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name75-True-empty-Index],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name75-True-empty-TimedeltaIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name75-True-not_empty-DatetimeIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name75-True-not_empty-Index],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name75-True-not_empty-TimedeltaIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name76-False-empty-DatetimeIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name76-False-empty-Index],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name76-False-empty-TimedeltaIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name76-False-not_empty-DatetimeIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name76-False-not_empty-Index],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name76-False-not_empty-TimedeltaIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name77-None-empty-DatetimeIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name77-None-empty-Index],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name77-None-empty-TimedeltaIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name77-None-not_empty-DatetimeIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name77-None-not_empty-Index],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name77-None-not_empty-TimedeltaIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name78-nan-empty-DatetimeIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name78-nan-empty-Index],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name78-nan-empty-TimedeltaIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name78-nan-not_empty-DatetimeIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name78-nan-not_empty-Index],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_invalid_level[name78-nan-not_empty-TimedeltaIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,"test_valid_level[('name',)-('name',)-empty-TimedeltaIndex]",reason: SNOW-2288735,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[0 days 00:00:00.000000001-0 days 00:00:00.000000001-empty-TimedeltaIndex],reason: SNOW-2288735,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[0-0-empty-TimedeltaIndex],reason: SNOW-2288735,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[1--1-empty-TimedeltaIndex],reason: SNOW-2288735,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[1-0-empty-TimedeltaIndex],reason: SNOW-2288735,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[1-1-empty-TimedeltaIndex],reason: SNOW-2288735,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[1-1.0-empty-TimedeltaIndex],reason: SNOW-2288735,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[1994-07-29 00:00:00-1994-07-29 00:00:00-empty-TimedeltaIndex],reason: SNOW-2288735,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[2--1-empty-TimedeltaIndex],reason: SNOW-2288735,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[2-0-empty-TimedeltaIndex],reason: SNOW-2288735,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[3.5-3.5-empty-TimedeltaIndex],reason: SNOW-2288735,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[<NA>-<NA>-empty-DatetimeIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[<NA>-<NA>-empty-Index],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[<NA>-<NA>-empty-TimedeltaIndex],reason: SNOW-2288735,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[<NA>-<NA>-not_empty-DatetimeIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[<NA>-<NA>-not_empty-Index],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[<NA>-<NA>-not_empty-TimedeltaIndex],SNOW-2288761,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[NaT-NaT-empty-DatetimeIndex],https://github.com/pandas-dev/pandas/issues/62169,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[NaT-NaT-empty-Index],https://github.com/pandas-dev/pandas/issues/62169,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[NaT-NaT-empty-TimedeltaIndex],reason: SNOW-2288735,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[NaT-NaT-not_empty-DatetimeIndex],https://github.com/pandas-dev/pandas/issues/62169,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[NaT-NaT-not_empty-Index],https://github.com/pandas-dev/pandas/issues/62169,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[NaT-NaT-not_empty-TimedeltaIndex],https://github.com/pandas-dev/pandas/issues/62169,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[None--1-empty-TimedeltaIndex],reason: SNOW-2288735,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[None-0-empty-TimedeltaIndex],reason: SNOW-2288735,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[None-None-empty-TimedeltaIndex],reason: SNOW-2288735,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[name--1-empty-TimedeltaIndex],reason: SNOW-2288735,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[name-0-empty-TimedeltaIndex],reason: SNOW-2288735,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[name-name-empty-TimedeltaIndex],reason: SNOW-2288735,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[nan-nan-empty-DatetimeIndex],https://github.com/pandas-dev/pandas/issues/62169,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[nan-nan-empty-Index],https://github.com/pandas-dev/pandas/issues/62169,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[nan-nan-empty-TimedeltaIndex],reason: SNOW-2288735,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[nan-nan-not_empty-DatetimeIndex],https://github.com/pandas-dev/pandas/issues/62169,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[nan-nan-not_empty-Index],https://github.com/pandas-dev/pandas/issues/62169,xfailed
tests.integ.modin.index.test_index_methods,test_valid_level[nan-nan-not_empty-TimedeltaIndex],https://github.com/pandas-dev/pandas/issues/62169,xfailed
tests.integ.modin.index.test_indexing,test_index_indexing_other_list_like_key[key2-index0],AssertionError,failed
tests.integ.modin.index.test_name,test_df_index_rename_copy[None],"AssertionError: assert 'score' == None
 +  where 'score' = Index(['A', 'C'], dtype='object', name='score').name
 +    where Index(['A', 'C'], dtype='object', name='score') =        0  1\nscore      \nA      1  2\nC      3  4.index
 +  and   None = Index(['A', 'C'], dtype='object').name
 +    where Index(['A', 'C'], dtype='object') =    0  1\nA  1  2\nC  3  4.index",failed
tests.integ.modin.index.test_name,test_df_index_rename_copy[grade],"AssertionError: assert 'score' == None
 +  where 'score' = Index(['A', 'C'], dtype='object', name='score').name
 +    where Index(['A', 'C'], dtype='object', name='score') =        0  1\nscore      \nA      1  2\nC      3  4.index
 +  and   None = Index(['A', 'C'], dtype='object').name
 +    where Index(['A', 'C'], dtype='object') =    0  1\nA  1  2\nC  3  4.index",failed
tests.integ.modin.index.test_name,test_df_index_rename_copy[new_name2],"AssertionError: assert 'score' == None
 +  where 'score' = Index(['A', 'C'], dtype='object', name='score').name
 +    where Index(['A', 'C'], dtype='object', name='score') =        0  1\nscore      \nA      1  2\nC      3  4.index
 +  and   None = Index(['A', 'C'], dtype='object').name
 +    where Index(['A', 'C'], dtype='object') =    0  1\nA  1  2\nC  3  4.index",failed
tests.integ.modin.index.test_name,test_df_index_rename_copy[new_name3],"AssertionError: assert 'score' == None
 +  where 'score' = Index(['A', 'C'], dtype='object', name='score').name
 +    where Index(['A', 'C'], dtype='object', name='score') =        0  1\nscore      \nA      1  2\nC      3  4.index
 +  and   None = Index(['A', 'C'], dtype='object').name
 +    where Index(['A', 'C'], dtype='object') =    0  1\nA  1  2\nC  3  4.index",failed
tests.integ.modin.index.test_name,test_df_index_set_names_copy[None],"AssertionError: assert 'score' == None
 +  where 'score' = Index(['A', 'C'], dtype='object', name='score').name
 +    where Index(['A', 'C'], dtype='object', name='score') =        0  1\nscore      \nA      1  2\nC      3  4.index
 +  and   None = Index(['A', 'C'], dtype='object').name
 +    where Index(['A', 'C'], dtype='object') =    0  1\nA  1  2\nC  3  4.index",failed
tests.integ.modin.index.test_name,test_df_index_set_names_copy[grade],"AssertionError: assert 'score' == None
 +  where 'score' = Index(['A', 'C'], dtype='object', name='score').name
 +    where Index(['A', 'C'], dtype='object', name='score') =        0  1\nscore      \nA      1  2\nC      3  4.index
 +  and   None = Index(['A', 'C'], dtype='object').name
 +    where Index(['A', 'C'], dtype='object') =    0  1\nA  1  2\nC  3  4.index",failed
tests.integ.modin.index.test_name,test_df_index_set_names_copy[new_name2],"AssertionError: assert 'score' == None
 +  where 'score' = Index(['A', 'C'], dtype='object', name='score').name
 +    where Index(['A', 'C'], dtype='object', name='score') =        0  1\nscore      \nA      1  2\nC      3  4.index
 +  and   None = Index(['A', 'C'], dtype='object').name
 +    where Index(['A', 'C'], dtype='object') =    0  1\nA  1  2\nC  3  4.index",failed
tests.integ.modin.index.test_name,test_df_index_set_names_copy[new_name3],"AssertionError: assert 'score' == None
 +  where 'score' = Index(['A', 'C'], dtype='object', name='score').name
 +    where Index(['A', 'C'], dtype='object', name='score') =        0  1\nscore      \nA      1  2\nC      3  4.index
 +  and   None = Index(['A', 'C'], dtype='object').name
 +    where Index(['A', 'C'], dtype='object') =    0  1\nA  1  2\nC  3  4.index",failed
tests.integ.modin.index.test_timedelta_index_methods,test_timedelta_index_construction,"AssertionError: assert False
 +  where False = isinstance(TimedeltaIndex(['1 days', '2 days', '3 days'], dtype='timedelta64[ns]', freq=None), <class 'snowflake.snowpark.modin.plugin.extensions.timedelta_index.TimedeltaIndex'>)
 +    where <class 'snowflake.snowpark.modin.plugin.extensions.timedelta_index.TimedeltaIndex'> = pd.TimedeltaIndex",failed
tests.integ.modin.io.test_read_csv,test_read_csv_dtype_usecols_negative,Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.io.test_read_csv,test_read_csv_engine_snowflake,"ValueError: Unknown engine: snowflake (valid options are dict_keys(['c', 'python', 'pyarrow', 'python-fwf']))",failed
tests.integ.modin.io.test_read_csv,test_read_csv_filepath_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.io.test_read_csv,test_read_csv_filepath_starting_with_stage_symbol,FileNotFoundError: [Errno 2] No such file or directory: '\\@test_read_csv_backslash_a2cc13e0-de60-4883-93e0-0443d77f3dd4',failed
tests.integ.modin.io.test_read_csv,test_read_csv_index_col_negative[index_col3-ValueError-Duplicate columns in index_col are not allowed.],"AssertionError: Regex pattern did not match.
 Regex: 'Duplicate columns in index_col are not allowed.'
 Input: 'list.remove(x): x not in list'",failed
tests.integ.modin.io.test_read_csv,test_read_csv_index_col_negative[index_col4-ValueError-Duplicate columns in index_col are not allowed.],"AssertionError: Regex pattern did not match.
 Regex: 'Duplicate columns in index_col are not allowed.'
 Input: 'list.remove(x): x not in list'",failed
tests.integ.modin.io.test_read_csv,test_read_csv_stage,FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_csv_usecols_empty_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.io.test_read_csv,test_read_csv_usecols_nonexistent_negative[rating],"AssertionError: Regex pattern did not match.
 Regex: ""'usecols' do not match columns, columns expected but not found""
 Input: ""'usecols' must either be list-like of all strings, all unicode, all integers or a callable.""",failed
tests.integ.modin.io.test_read_csv,test_read_csv_usecols_nonexistent_negative[usecols0],"AssertionError: Regex pattern did not match.
 Regex: ""'usecols' do not match columns, columns expected but not found""
 Input: ""Usecols do not match columns, columns expected but not found: ['non_existent_col']""",failed
tests.integ.modin.io.test_read_csv,test_read_csv_usecols_nonexistent_negative[usecols1],"AssertionError: Regex pattern did not match.
 Regex: ""'usecols' do not match columns, columns expected but not found""
 Input: ""Usecols do not match columns, columns expected but not found: ['rating', 'non_existent_col']""",failed
tests.integ.modin.io.test_read_csv,test_read_csv_usecols_nonexistent_negative[usecols2],"AssertionError: Regex pattern did not match.
 Regex: ""'usecols' do not match columns, columns expected but not found""
 Input: 'Usecols do not match columns, columns expected but not found: [-1]'",failed
tests.integ.modin.io.test_read_csv,test_read_csv_usecols_nonexistent_negative[usecols3],"AssertionError: Regex pattern did not match.
 Regex: ""'usecols' do not match columns, columns expected but not found""
 Input: 'Usecols do not match columns, columns expected but not found: [0, 4]'",failed
tests.integ.modin.io.test_read_csv,test_read_csv_usecols_with_names_negative,"AssertionError: Regex pattern did not match.
 Regex: ""'usecols' do not match columns, columns expected but not found""
 Input: ""Usecols do not match columns, columns expected but not found: ['id']""",failed
tests.integ.modin.io.test_read_csv,test_read_csv_with_warning_params[cache_dates-True],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_AQY0YQTZ9G/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_csv_with_warning_params[chunksize-1000],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_AQY0YQTZ9G/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_csv_with_warning_params[dtype_backend-numpy_nullable],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_AQY0YQTZ9G/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_csv_with_warning_params[engine-c],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_AQY0YQTZ9G/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_csv_with_warning_params[float_precision-high],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_AQY0YQTZ9G/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_csv_with_warning_params[infer_datetime_format-True],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_AQY0YQTZ9G/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_csv_with_warning_params[low_memory-True],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_AQY0YQTZ9G/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_csv_with_warning_params[memory_map-True],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_AQY0YQTZ9G/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_csv_with_warning_params[storage_options-arg5],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_AQY0YQTZ9G/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[comment-#],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[converters-arg18],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[date_format-%Y-%m-%d],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[date_parser-True],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[dayfirst-True],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,"test_read_staged_csv_negative[decimal-,]",FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[delim_whitespace-True],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[dialect-excel],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[doublequote-False],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[encoding_errors-replace],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[false_values-arg20],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[iterator-True],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[keep_date_col-True],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[keep_default_na-False],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[lineterminator-q],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[na_filter-False],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[nrows-100],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[on_bad_lines-skip],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[parse_dates-True],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[quoting-2],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[skipfooter-3],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[skipinitialspace-True],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,"test_read_staged_csv_negative[thousands-,]",FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[true_values-arg19],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_csv,test_read_staged_csv_negative[verbose-True],FileNotFoundError: [Errno 2] No such file or directory: '@SNOWPARK_TEMP_STAGE_6P7631VHG0/testCSV.csv',failed
tests.integ.modin.io.test_read_json,test_read_json_basic,"ValueError: If using all scalar values, you must pass an index",failed
tests.integ.modin.io.test_read_json,test_read_json_empty_file,SNOW-1336174: Remove xfail by handling empty JSON files,xfailed
tests.integ.modin.io.test_read_json,test_read_json_filepath_negative,ValueError: Expected object or value,failed
tests.integ.modin.io.test_read_json,test_read_json_malformed_file_negative,ValueError: Expected object or value,failed
tests.integ.modin.io.test_read_json,test_read_json_ndjson_different_keys[ndjsondata0],ValueError: Trailing data,failed
tests.integ.modin.io.test_read_json,test_read_json_ndjson_different_keys[ndjsondata1],ValueError: Trailing data,failed
tests.integ.modin.io.test_read_json,test_read_json_ndjson_different_keys[ndjsondata2],ValueError: Trailing data,failed
tests.integ.modin.io.test_read_json,test_read_json_single_ndjson_file,ValueError: Trailing data,failed
tests.integ.modin.io.test_read_json,test_read_json_staged_file,FileNotFoundError: File @SNOWPARK_TEMP_STAGE_4IJQGL6QAX/test_read_json.json does not exist,failed
tests.integ.modin.io.test_read_json,test_read_json_staged_folder,ValueError: Expected object or value,failed
tests.integ.modin.io.test_read_json,test_read_json_unimplemented_parameter_negative[chunksize-100],ValueError: chunksize can only be passed if lines=True,failed
tests.integ.modin.io.test_read_json,test_read_json_unimplemented_parameter_negative[convert_axes-True],FileNotFoundError: File file.json does not exist,failed
tests.integ.modin.io.test_read_json,test_read_json_unimplemented_parameter_negative[convert_dates-True],FileNotFoundError: File file.json does not exist,failed
tests.integ.modin.io.test_read_json,test_read_json_unimplemented_parameter_negative[date_unit-s],FileNotFoundError: File file.json does not exist,failed
tests.integ.modin.io.test_read_json,test_read_json_unimplemented_parameter_negative[dtype-True],FileNotFoundError: File file.json does not exist,failed
tests.integ.modin.io.test_read_json,test_read_json_unimplemented_parameter_negative[encoding_errors-ignore],FileNotFoundError: File file.json does not exist,failed
tests.integ.modin.io.test_read_json,test_read_json_unimplemented_parameter_negative[keep_default_dates-True],FileNotFoundError: File file.json does not exist,failed
tests.integ.modin.io.test_read_json,test_read_json_unimplemented_parameter_negative[lines-True],FileNotFoundError: File file.json does not exist,failed
tests.integ.modin.io.test_read_json,test_read_json_unimplemented_parameter_negative[nrows-10],ValueError: nrows can only be passed if lines=True,failed
tests.integ.modin.io.test_read_json,test_read_json_unimplemented_parameter_negative[orient-records],FileNotFoundError: File file.json does not exist,failed
tests.integ.modin.io.test_read_json,test_read_json_unimplemented_parameter_negative[precise_float-True],FileNotFoundError: File file.json does not exist,failed
tests.integ.modin.io.test_read_json,test_read_json_unimplemented_parameter_negative[typ-series],FileNotFoundError: File file.json does not exist,failed
tests.integ.modin.io.test_read_json,test_read_json_warning[engine-ujson],"ValueError: If using all scalar values, you must pass an index",failed
tests.integ.modin.io.test_read_json,test_read_json_warning[storage_options-random_option],ValueError: storage_options passed with file object or non-fsspec file path,failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[False-read_with_select_*-input_data0-decimal(3, 1)-logical_dtype0-actual_dtype0]","assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb4d-0a12-0368-000c-a90d19ae610f, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""D"" FROM (SNOWPARK_TEMP_TABLE_VFFG6UC3R7TESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[False-read_with_select_*-input_data1-decimal(38, 1)-logical_dtype1-actual_dtype1]","assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb4d-0a12-0363-000c-a90d19ae1f03, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""D"" FROM (SNOWPARK_TEMP_TABLE_6OPMMWCLSDTESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[False-read_with_select_*-input_data2-decimal(3, 0)-logical_dtype2-actual_dtype2]","assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb4e-0a12-0366-000c-a90d19ae9147, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""D"" FROM (SNOWPARK_TEMP_TABLE_07NYRL2HTITESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[False-read_with_select_*-input_data3-decimal(38, 0)-logical_dtype3-actual_dtype3]","assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb4e-0a12-03ec-000c-a90d19ae3c2b, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""D"" FROM (SNOWPARK_TEMP_TABLE_JNRF9A25YDTESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[False-read_with_select_*-input_data4-decimal(15, 0)-logical_dtype4-actual_dtype4]","assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb4e-0a12-040e-000c-a90d19ae5aa7, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""D"" FROM (SNOWPARK_TEMP_TABLE_FVPU56U0GGTESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[False-read_with_select_*-input_data5-decimal(38, 0)-logical_dtype5-actual_dtype5]","assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb4e-0a12-021b-000c-a90d19ae4edf, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""D"" FROM (SNOWPARK_TEMP_TABLE_1G2E1N2WB7TESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[False-read_with_table_name-input_data0-decimal(3, 1)-logical_dtype0-actual_dtype0]","assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb4e-0a12-0134-000c-a90d19ae8cdf, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""D"" FROM (SNOWPARK_TEMP_TABLE_U5KNNBN7BGTESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[False-read_with_table_name-input_data1-decimal(38, 1)-logical_dtype1-actual_dtype1]","assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb4f-0a11-fba4-000c-a90d19aed837, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""D"" FROM (SNOWPARK_TEMP_TABLE_FIW6RCH57UTESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[False-read_with_table_name-input_data2-decimal(3, 0)-logical_dtype2-actual_dtype2]","assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb4f-0a12-0363-000c-a90d19af40bb, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""D"" FROM (SNOWPARK_TEMP_TABLE_747T70Z0LETESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[False-read_with_table_name-input_data3-decimal(38, 0)-logical_dtype3-actual_dtype3]","assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb4f-0a12-0366-000c-a90d19af7337, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""D"" FROM (SNOWPARK_TEMP_TABLE_DFL0MOF1F7TESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[False-read_with_table_name-input_data4-decimal(15, 0)-logical_dtype4-actual_dtype4]","assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb4f-0a12-0095-000c-a90d19af26d7, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""D"" FROM (SNOWPARK_TEMP_TABLE_UNK4Y8BV2LTESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[False-read_with_table_name-input_data5-decimal(38, 0)-logical_dtype5-actual_dtype5]","assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb4f-0a12-040e-000c-a90d19aefbfb, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""D"" FROM (SNOWPARK_TEMP_TABLE_9TMQ1715O6TESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[True-read_with_select_*-input_data0-decimal(3, 1)-logical_dtype0-actual_dtype0]","assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb4b-0a12-0134-000c-a90d19ac91bb, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_7DZE76F4FSREADONLY CLONE SNOWPARK_TEMP_TABLE_C36H7YMVDGTESTTABLENAME), QueryRecord(query_id=01bfbb4b-0a12-03ec-000c-a90d19ac4b0f, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""D"" FROM SNOWPARK_TEMP_TABLE_7DZE76F4FSREADONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[True-read_with_select_*-input_data1-decimal(38, 1)-logical_dtype1-actual_dtype1]","assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb4b-0a12-0368-000c-a90d19ac5ad7, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_ZQ2A5PLXXCREADONLY CLONE SNOWPARK_TEMP_TABLE_GJO6K5DHCOTESTTABLENAME), QueryRecord(query_id=01bfbb4b-0a12-040e-000c-a90d19ac8b8b, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""D"" FROM SNOWPARK_TEMP_TABLE_ZQ2A5PLXXCREADONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[True-read_with_select_*-input_data2-decimal(3, 0)-logical_dtype2-actual_dtype2]","assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb4b-0a12-0363-000c-a90d19acd57f, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_HLPUA7FCPEREADONLY CLONE SNOWPARK_TEMP_TABLE_B5Y4I1SGSGTESTTABLENAME), QueryRecord(query_id=01bfbb4b-0a12-03e2-000c-a90d19acb8f7, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""D"" FROM SNOWPARK_TEMP_TABLE_HLPUA7FCPEREADONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[True-read_with_select_*-input_data3-decimal(38, 0)-logical_dtype3-actual_dtype3]","assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb4b-0a12-0366-000c-a90d19acc8d7, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_Y66CYTXL4SREADONLY CLONE SNOWPARK_TEMP_TABLE_MXQC57HYMFTESTTABLENAME), QueryRecord(query_id=01bfbb4c-0a12-0134-000c-a90d19ac9d7f, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""D"" FROM SNOWPARK_TEMP_TABLE_Y66CYTXL4SREADONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[True-read_with_select_*-input_data4-decimal(15, 0)-logical_dtype4-actual_dtype4]","assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb4c-0a12-03ec-000c-a90d19acf443, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_NYK1ING4CZREADONLY CLONE SNOWPARK_TEMP_TABLE_LRHM0WGI1TTESTTABLENAME), QueryRecord(query_id=01bfbb4c-0a11-fba4-000c-a90d19ace8a7, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""D"" FROM SNOWPARK_TEMP_TABLE_NYK1ING4CZREADONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[True-read_with_select_*-input_data5-decimal(38, 0)-logical_dtype5-actual_dtype5]","assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb4c-0a12-040e-000c-a90d19ad2457, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_JWLRHR5U92READONLY CLONE SNOWPARK_TEMP_TABLE_J1OU89VMN5TESTTABLENAME), QueryRecord(query_id=01bfbb4c-0a12-0368-000c-a90d19ad0a43, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""D"" FROM SNOWPARK_TEMP_TABLE_JWLRHR5U92READONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[True-read_with_table_name-input_data0-decimal(3, 1)-logical_dtype0-actual_dtype0]","assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb4c-0a12-021b-000c-a90d19ad1a73, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_6U26MEUMV4READONLY CLONE SNOWPARK_TEMP_TABLE_6ERGI263RDTESTTABLENAME), QueryRecord(query_id=01bfbb4c-0a12-0366-000c-a90d19ad667f, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""D"" FROM SNOWPARK_TEMP_TABLE_6U26MEUMV4READONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[True-read_with_table_name-input_data1-decimal(38, 1)-logical_dtype1-actual_dtype1]","assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb4c-0a12-0134-000c-a90d19ad39fb, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_I6ZVKQFXJ9READONLY CLONE SNOWPARK_TEMP_TABLE_N6D7TKPGMNTESTTABLENAME), QueryRecord(query_id=01bfbb4c-0a12-0095-000c-a90d19ad4b7f, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""D"" FROM SNOWPARK_TEMP_TABLE_I6ZVKQFXJ9READONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[True-read_with_table_name-input_data2-decimal(3, 0)-logical_dtype2-actual_dtype2]","assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb4c-0a11-fba4-000c-a90d19ad85e3, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_XKAMRRU9I8READONLY CLONE SNOWPARK_TEMP_TABLE_O9MITQLJUMTESTTABLENAME), QueryRecord(query_id=01bfbb4c-0a12-03ec-000c-a90d19ad9503, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""D"" FROM SNOWPARK_TEMP_TABLE_XKAMRRU9I8READONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[True-read_with_table_name-input_data3-decimal(38, 0)-logical_dtype3-actual_dtype3]","assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb4c-0a12-0368-000c-a90d19ada2b3, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_MNOU4JOZNRREADONLY CLONE SNOWPARK_TEMP_TABLE_IFEZSYJ7BZTESTTABLENAME), QueryRecord(query_id=01bfbb4d-0a12-021b-000c-a90d19adb733, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""D"" FROM SNOWPARK_TEMP_TABLE_MNOU4JOZNRREADONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[True-read_with_table_name-input_data4-decimal(15, 0)-logical_dtype4-actual_dtype4]","assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb4d-0a12-0366-000c-a90d19ad6fc7, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_GEZGVLIZ6YREADONLY CLONE SNOWPARK_TEMP_TABLE_DNU8Z8NEUETESTTABLENAME), QueryRecord(query_id=01bfbb4d-0a12-03e2-000c-a90d19adf2d3, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""D"" FROM SNOWPARK_TEMP_TABLE_GEZGVLIZ6YREADONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,"test_decimal[True-read_with_table_name-input_data5-decimal(38, 0)-logical_dtype5-actual_dtype5]","assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb4d-0a12-0095-000c-a90d19ade543, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_8PKVPLA1VNREADONLY CLONE SNOWPARK_TEMP_TABLE_WWOAVTL6XSTESTTABLENAME), QueryRecord(query_id=01bfbb4d-0a12-0134-000c-a90d19add943, sql_text=SELECT ""__row_position__"", ""D"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""D"" FROM SNOWPARK_TEMP_TABLE_8PKVPLA1VNREADONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_basic[False-False-read_with_select_*],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb22-0a11-fba4-000c-a90d1966389b, sql_text=SELECT ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"", ""_5"", ""_6"", ""_7"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"", ""_5"", ""_6"", ""_7"" FROM (SNOWPARK_TEMP_TABLE_OH9CICOV8P)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_basic[False-False-read_with_table_name],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb22-0a12-0095-000c-a90d1966d54b, sql_text=SELECT ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"", ""_5"", ""_6"", ""_7"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"", ""_5"", ""_6"", ""_7"" FROM (SNOWPARK_TEMP_TABLE_KAY3CLGUM4)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_basic[False-True-read_with_select_*],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb21-0a12-0363-000c-a90d196520ab, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_6PJE794KWFREADONLY CLONE SNOWPARK_TEMP_TABLE_7F192NGNUP), QueryRecord(query_id=01bfbb22-0a12-0363-000c-a90d19652ecf, sql_text=SELECT ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"", ""_5"", ""_6"", ""_7"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"", ""_5"", ""_6"", ""_7"" FROM SNOWPARK_TEMP_TABLE_6PJE794KWFREADONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_basic[False-True-read_with_table_name],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb22-0a12-021b-000c-a90d19653dfb, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_H2GNNOE720READONLY CLONE SNOWPARK_TEMP_TABLE_M1HBTGP8SO), QueryRecord(query_id=01bfbb22-0a12-0368-000c-a90d196611fb, sql_text=SELECT ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"", ""_5"", ""_6"", ""_7"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"", ""_5"", ""_6"", ""_7"" FROM SNOWPARK_TEMP_TABLE_H2GNNOE720READONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_basic[True-False-read_with_select_*],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb23-0a12-0371-000c-a90d19673bd3, sql_text=SELECT ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"", ""_5"", ""_6"", ""_7"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"", ""_5"", ""_6"", ""_7"" FROM (SNOWPARK_TEMP_TABLE_1Z2SQTLCQS)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_basic[True-False-read_with_table_name],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb23-0a12-03ec-000c-a90d19677837, sql_text=SELECT ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"", ""_5"", ""_6"", ""_7"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"", ""_5"", ""_6"", ""_7"" FROM (SNOWPARK_TEMP_TABLE_8Y22E3F578)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_basic[True-True-read_with_select_*],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb22-0a11-fba4-000c-a90d1967111f, sql_text=CREATE OR REPLACE SCOPED TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_QQ2FD4VTD2READONLY CLONE SNOWPARK_TEMP_TABLE_07JRJP04WB), QueryRecord(query_id=01bfbb22-0a12-0363-000c-a90d196741d7, sql_text=SELECT ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"", ""_5"", ""_6"", ""_7"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"", ""_5"", ""_6"", ""_7"" FROM SNOWPARK_TEMP_TABLE_QQ2FD4VTD2READONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_basic[True-True-read_with_table_name],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb22-0a12-0095-000c-a90d1966d95b, sql_text=CREATE OR REPLACE SCOPED TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_RLG308K3WUREADONLY CLONE SNOWPARK_TEMP_TABLE_RC2CMN475Y), QueryRecord(query_id=01bfbb23-0a12-0134-000c-a90d19670a07, sql_text=SELECT ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"", ""_5"", ""_6"", ""_7"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"", ""_5"", ""_6"", ""_7"" FROM SNOWPARK_TEMP_TABLE_RLG308K3WUREADONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_index_col_multiindex[False-read_with_select_*],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb35-0a12-03e2-000c-a90d198aa63f, sql_text=SELECT ""COL1"", ""COL2"", ""COL3"", ""COL4"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""COL1"", ""COL2"", ""COL3"", ""COL4"" FROM (SNOWPARK_TEMP_TABLE_HFRGPOYJ1C)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_index_col_multiindex[False-read_with_table_name],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb35-0a12-03ec-000c-a90d198b3967, sql_text=SELECT ""COL1"", ""COL2"", ""COL3"", ""COL4"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""COL1"", ""COL2"", ""COL3"", ""COL4"" FROM (SNOWPARK_TEMP_TABLE_LPU9Q2GDX2)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_index_col_multiindex[True-read_with_select_*],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb35-0a12-03e2-000c-a90d19896377, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_RYT5X4TWO9READONLY CLONE SNOWPARK_TEMP_TABLE_2AXKMF5BSW), QueryRecord(query_id=01bfbb35-0a12-021b-000c-a90d1989d7db, sql_text=SELECT ""COL1"", ""COL2"", ""COL3"", ""COL4"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""COL1"", ""COL2"", ""COL3"", ""COL4"" FROM SNOWPARK_TEMP_TABLE_RYT5X4TWO9READONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_index_col_multiindex[True-read_with_table_name],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb35-0a12-0134-000c-a90d1989ae2f, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_OBHMA6JCG2READONLY CLONE SNOWPARK_TEMP_TABLE_047NDF8V91), QueryRecord(query_id=01bfbb35-0a12-040e-000c-a90d198a673f, sql_text=SELECT ""COL1"", ""COL2"", ""COL3"", ""COL4"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""COL1"", ""COL2"", ""COL3"", ""COL4"" FROM SNOWPARK_TEMP_TABLE_OBHMA6JCG2READONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_none_nan[False-read_with_select_*],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb25-0a12-0363-000c-a90d196977df, sql_text=SELECT ""__row_position__"", ""_1"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""_1"" FROM (SNOWPARK_TEMP_TABLE_CHTRLX3HYU)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_none_nan[False-read_with_table_name],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb25-0a12-0134-000c-a90d19690d97, sql_text=SELECT ""__row_position__"", ""_1"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""_1"" FROM (SNOWPARK_TEMP_TABLE_OQB1W31TUI)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_none_nan[True-read_with_select_*],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb24-0a12-03e2-000c-a90d1968ae43, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_MEU6TE9Y7BREADONLY CLONE SNOWPARK_TEMP_TABLE_YTC4P8SUNL), QueryRecord(query_id=01bfbb25-0a11-fba4-000c-a90d196953cf, sql_text=SELECT ""__row_position__"", ""_1"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""_1"" FROM SNOWPARK_TEMP_TABLE_MEU6TE9Y7BREADONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_none_nan[True-read_with_table_name],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb25-0a12-0368-000c-a90d1968e84b, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_0SCIEJXZB2READONLY CLONE SNOWPARK_TEMP_TABLE_XC57R5T0XV), QueryRecord(query_id=01bfbb25-0a12-0095-000c-a90d1968fe67, sql_text=SELECT ""__row_position__"", ""_1"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""_1"" FROM SNOWPARK_TEMP_TABLE_0SCIEJXZB2READONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_row_access_policy_table[False-False-read_with_select_*],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb4a-0a12-0368-000c-a90d19abc29b, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""COL1"", ""S"" FROM (SNOWPARK_TEMP_TABLE_2KELJTGNK9TESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_row_access_policy_table[False-False-read_with_table_name],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb4a-0a11-fba4-000c-a90d19ab9dff, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""COL1"", ""S"" FROM (SNOWPARK_TEMP_TABLE_V9YISYOY0JTESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_row_access_policy_table[False-True-read_with_select_*],"assert 3 == 2
 +  where 3 = len([QueryRecord(query_id=01bfbb49-0a11-fba4-000c-a90d19ab09f7, sql_text=CREATE OR REPLACE TEMPORARY TABLE SNOWPARK_TEMP_TABLE_AUA834CHGN AS SELECT * FROM SNOWPARK_TEMP_TABLE_6ESVJXFF3YTESTTABLENAME), QueryRecord(query_id=01bfbb49-0a12-0134-000c-a90d19ab6207, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_4YU8ZNWRS9READONLY CLONE SNOWPARK_TEMP_TABLE_AUA834CHGN), QueryRecord(query_id=01bfbb49-0a12-0095-000c-a90d19ab5447, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""COL1"", ""S"" FROM SNOWPARK_TEMP_TABLE_4YU8ZNWRS9READONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_row_access_policy_table[False-True-read_with_table_name],"assert 3 == 2
 +  where 3 = len([QueryRecord(query_id=01bfbb4a-0a12-021b-000c-a90d19ab1ae7, sql_text=CREATE OR REPLACE TEMPORARY TABLE SNOWPARK_TEMP_TABLE_COXA6Z7LMM AS SELECT * FROM SNOWPARK_TEMP_TABLE_E7R6DUGB1QTESTTABLENAME), QueryRecord(query_id=01bfbb4a-0a12-040e-000c-a90d19ab398f, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_D4FST1R215READONLY CLONE SNOWPARK_TEMP_TABLE_COXA6Z7LMM), QueryRecord(query_id=01bfbb4a-0a12-0363-000c-a90d19ab88a7, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""COL1"", ""S"" FROM SNOWPARK_TEMP_TABLE_D4FST1R215READONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_row_access_policy_table[True-False-read_with_select_*],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb4b-0a12-0095-000c-a90d19abfd17, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""COL1"", ""S"" FROM (SNOWPARK_TEMP_TABLE_K0IXTEU5GGTESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_row_access_policy_table[True-False-read_with_table_name],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb4b-0a12-0366-000c-a90d19ac2e53, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""COL1"", ""S"" FROM (SNOWPARK_TEMP_TABLE_6E6SHKTFKVTESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_row_access_policy_table[True-True-read_with_select_*],"assert 3 == 2
 +  where 3 = len([QueryRecord(query_id=01bfbb4a-0a12-0366-000c-a90d19ac22d3, sql_text=CREATE OR REPLACE SCOPED TEMPORARY TABLE SNOWPARK_TEMP_TABLE_J3D958CYWS AS SELECT * FROM SNOWPARK_TEMP_TABLE_2FYJZ6ADCATESTTABLENAME), QueryRecord(query_id=01bfbb4a-0a12-0363-000c-a90d19ac12cb, sql_text=CREATE OR REPLACE SCOPED TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_4SYJL4EZKNREADONLY CLONE SNOWPARK_TEMP_TABLE_J3D958CYWS), QueryRecord(query_id=01bfbb4a-0a12-03e2-000c-a90d19abe677, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""COL1"", ""S"" FROM SNOWPARK_TEMP_TABLE_4SYJL4EZKNREADONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_row_access_policy_table[True-True-read_with_table_name],"assert 3 == 2
 +  where 3 = len([QueryRecord(query_id=01bfbb4a-0a11-fba4-000c-a90d19ac3193, sql_text=CREATE OR REPLACE SCOPED TEMPORARY TABLE SNOWPARK_TEMP_TABLE_TM23EJBMD5 AS SELECT * FROM SNOWPARK_TEMP_TABLE_KOIJ4CCI73TESTTABLENAME), QueryRecord(query_id=01bfbb4a-0a12-0134-000c-a90d19ac088b, sql_text=CREATE OR REPLACE SCOPED TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_VY4P8Q70WUREADONLY CLONE SNOWPARK_TEMP_TABLE_TM23EJBMD5), QueryRecord(query_id=01bfbb4b-0a12-03ec-000c-a90d19ac4173, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""COL1"", ""S"" FROM SNOWPARK_TEMP_TABLE_VY4P8Q70WUREADONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_semi_structured_types[False-False-read_with_select_*],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb23-0a12-03e2-000c-a90d1967fc43, sql_text=SELECT ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"" FROM (SNOWPARK_TEMP_TABLE_5W2IOC9NT1)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_semi_structured_types[False-False-read_with_table_name],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb24-0a12-040e-000c-a90d196880a7, sql_text=SELECT ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"" FROM (SNOWPARK_TEMP_TABLE_OXYLUX1G6O)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_semi_structured_types[False-True-read_with_select_*],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb23-0a12-0371-000c-a90d1967e0e7, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_SJ9OJ7XGWGREADONLY CLONE SNOWPARK_TEMP_TABLE_I3HK00SNX6), QueryRecord(query_id=01bfbb23-0a12-021b-000c-a90d19676fef, sql_text=SELECT ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"" FROM SNOWPARK_TEMP_TABLE_SJ9OJ7XGWGREADONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_semi_structured_types[False-True-read_with_table_name],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb23-0a12-0363-000c-a90d19680327, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_3KN36S2362READONLY CLONE SNOWPARK_TEMP_TABLE_UEO5UYK32X), QueryRecord(query_id=01bfbb23-0a12-0366-000c-a90d1967abff, sql_text=SELECT ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"" FROM SNOWPARK_TEMP_TABLE_3KN36S2362READONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_semi_structured_types[True-False-read_with_select_*],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb24-0a12-0368-000c-a90d1968e24b, sql_text=SELECT ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"" FROM (SNOWPARK_TEMP_TABLE_DVKH8Z2VEE)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_semi_structured_types[True-False-read_with_table_name],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb24-0a12-040e-000c-a90d19694053, sql_text=SELECT ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"" FROM (SNOWPARK_TEMP_TABLE_AC3H9MTK8Z)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_semi_structured_types[True-True-read_with_select_*],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb24-0a12-03ec-000c-a90d196826d3, sql_text=CREATE OR REPLACE SCOPED TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_LVALHUXXM1READONLY CLONE SNOWPARK_TEMP_TABLE_551HSDGQRQ), QueryRecord(query_id=01bfbb24-0a11-fba4-000c-a90d196895bb, sql_text=SELECT ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"" FROM SNOWPARK_TEMP_TABLE_LVALHUXXM1READONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_semi_structured_types[True-True-read_with_table_name],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb24-0a12-040e-000c-a90d1968870f, sql_text=CREATE OR REPLACE SCOPED TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_DAWKIBKUV2READONLY CLONE SNOWPARK_TEMP_TABLE_551Z3K9EBT), QueryRecord(query_id=01bfbb24-0a12-03e2-000c-a90d1968a85f, sql_text=SELECT ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""_1"", ""_2"", ""_3"", ""_4"" FROM SNOWPARK_TEMP_TABLE_DAWKIBKUV2READONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[False-False-read_with_select_*-],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb42-0a12-0366-000c-a90d19a331ff, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""COL1"", ""S"" FROM (SNOWPARK_TEMP_TABLE_WIO83C0P40TESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[False-False-read_with_select_*-temporary],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb42-0a12-03ec-000c-a90d19a30d9b, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""COL1"", ""S"" FROM (SNOWPARK_TEMP_TABLE_5HI3E794I5TESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[False-False-read_with_select_*-transient],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb43-0a12-040e-000c-a90d19a37967, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""COL1"", ""S"" FROM (SNOWPARK_TEMP_TABLE_SMPAX6ANJ3TESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[False-False-read_with_table_name-],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb44-0a12-0134-000c-a90d19a53cb7, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""COL1"", ""S"" FROM (SNOWPARK_TEMP_TABLE_VWOQ8V0YNNTESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[False-False-read_with_table_name-temporary],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb44-0a11-fba4-000c-a90d19a5f0e7, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""COL1"", ""S"" FROM (SNOWPARK_TEMP_TABLE_M3YQG7Y4M8TESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[False-False-read_with_table_name-transient],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb44-0a12-0363-000c-a90d19a5ea2f, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""COL1"", ""S"" FROM (SNOWPARK_TEMP_TABLE_4WTNGMQN7HTESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[False-True-read_with_select_*-],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb40-0a12-0366-000c-a90d199d864f, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_98F9E0XGB2READONLY CLONE SNOWPARK_TEMP_TABLE_S0JD1YOFHDTESTTABLENAME), QueryRecord(query_id=01bfbb40-0a12-03e2-000c-a90d199e20a3, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""COL1"", ""S"" FROM SNOWPARK_TEMP_TABLE_98F9E0XGB2READONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[False-True-read_with_select_*-temporary],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb40-0a12-0095-000c-a90d199e02d7, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_2A3IXTZN7GREADONLY CLONE SNOWPARK_TEMP_TABLE_A1W9YEPXOSTESTTABLENAME), QueryRecord(query_id=01bfbb40-0a11-fba4-000c-a90d199e6a0b, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""COL1"", ""S"" FROM SNOWPARK_TEMP_TABLE_2A3IXTZN7GREADONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[False-True-read_with_select_*-transient],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb40-0a12-03ec-000c-a90d199e9637, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_OLHSRFOZQ3READONLY CLONE SNOWPARK_TEMP_TABLE_XYAVAJ8SRJTESTTABLENAME), QueryRecord(query_id=01bfbb40-0a12-0368-000c-a90d199f200f, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""COL1"", ""S"" FROM SNOWPARK_TEMP_TABLE_OLHSRFOZQ3READONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[False-True-read_with_table_name-],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb41-0a12-03ec-000c-a90d199fdf07, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_WPQTCC9O5GREADONLY CLONE SNOWPARK_TEMP_TABLE_OVBT07FFT2TESTTABLENAME), QueryRecord(query_id=01bfbb41-0a12-0368-000c-a90d19a0767f, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""COL1"", ""S"" FROM SNOWPARK_TEMP_TABLE_WPQTCC9O5GREADONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[False-True-read_with_table_name-temporary],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb41-0a12-021b-000c-a90d19a04afb, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_Z76MB4PJ2WREADONLY CLONE SNOWPARK_TEMP_TABLE_DMK0UUU6WCTESTTABLENAME), QueryRecord(query_id=01bfbb41-0a12-0363-000c-a90d19a0c8d7, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""COL1"", ""S"" FROM SNOWPARK_TEMP_TABLE_Z76MB4PJ2WREADONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[False-True-read_with_table_name-transient],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb41-0a12-03e2-000c-a90d19a0ac43, sql_text=CREATE OR REPLACE TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_WEU7PEMCT3READONLY CLONE SNOWPARK_TEMP_TABLE_G3A9H8RD3RTESTTABLENAME), QueryRecord(query_id=01bfbb41-0a12-0366-000c-a90d19a15333, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""COL1"", ""S"" FROM SNOWPARK_TEMP_TABLE_WEU7PEMCT3READONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[True-False-read_with_select_*-],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb47-0a12-021b-000c-a90d19a8be2f, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""COL1"", ""S"" FROM (SNOWPARK_TEMP_TABLE_BXGA5R0POXTESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[True-False-read_with_select_*-temporary],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb47-0a12-03e2-000c-a90d19a9612f, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""COL1"", ""S"" FROM (SNOWPARK_TEMP_TABLE_C1F3TQHNT6TESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[True-False-read_with_select_*-transient],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb47-0a11-fba4-000c-a90d19a92a43, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""COL1"", ""S"" FROM (SNOWPARK_TEMP_TABLE_K7MASFKO7PTESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[True-False-read_with_table_name-],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb48-0a12-0366-000c-a90d19aa2b73, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""COL1"", ""S"" FROM (SNOWPARK_TEMP_TABLE_KRFIDUPE5HTESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[True-False-read_with_table_name-temporary],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb48-0a12-0095-000c-a90d19aa1ff7, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""COL1"", ""S"" FROM (SNOWPARK_TEMP_TABLE_G9VJMEZD3STESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[True-False-read_with_table_name-transient],"assert 1 == 0
 +  where 1 = len([QueryRecord(query_id=01bfbb49-0a12-040e-000c-a90d19aa9563, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) - 1 as ""__row_position__"", ""COL1"", ""S"" FROM (SNOWPARK_TEMP_TABLE_3LGSMP63G8TESTTABLENAME)) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[True-True-read_with_select_*-],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb45-0a12-03e2-000c-a90d19a6ea83, sql_text=CREATE OR REPLACE SCOPED TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_U4FXECTWQBREADONLY CLONE SNOWPARK_TEMP_TABLE_B4EEW9BR5RTESTTABLENAME), QueryRecord(query_id=01bfbb45-0a12-0095-000c-a90d19a6fce7, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""COL1"", ""S"" FROM SNOWPARK_TEMP_TABLE_U4FXECTWQBREADONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[True-True-read_with_select_*-temporary],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb45-0a11-fba4-000c-a90d19a74373, sql_text=CREATE OR REPLACE SCOPED TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_LOIK6D2AC8READONLY CLONE SNOWPARK_TEMP_TABLE_SFNHB7EYH3TESTTABLENAME), QueryRecord(query_id=01bfbb45-0a12-03ec-000c-a90d19a77757, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""COL1"", ""S"" FROM SNOWPARK_TEMP_TABLE_LOIK6D2AC8READONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[True-True-read_with_select_*-transient],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb45-0a12-0368-000c-a90d19a738af, sql_text=CREATE OR REPLACE SCOPED TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_I0GT56Y7AMREADONLY CLONE SNOWPARK_TEMP_TABLE_UXN4ZZKLC3TESTTABLENAME), QueryRecord(query_id=01bfbb45-0a12-021b-000c-a90d19a75a3b, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""COL1"", ""S"" FROM SNOWPARK_TEMP_TABLE_I0GT56Y7AMREADONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[True-True-read_with_table_name-],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb46-0a12-0368-000c-a90d19a7fc47, sql_text=CREATE OR REPLACE SCOPED TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_U4LRS51YI9READONLY CLONE SNOWPARK_TEMP_TABLE_FGQ2QS6O6XTESTTABLENAME), QueryRecord(query_id=01bfbb46-0a12-021b-000c-a90d19a81bdb, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""COL1"", ""S"" FROM SNOWPARK_TEMP_TABLE_U4LRS51YI9READONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[True-True-read_with_table_name-temporary],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb46-0a12-0363-000c-a90d19a86497, sql_text=CREATE OR REPLACE SCOPED TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_L5JKVYF02EREADONLY CLONE SNOWPARK_TEMP_TABLE_ZMBUTCLU7ETESTTABLENAME), QueryRecord(query_id=01bfbb46-0a12-03e2-000c-a90d19a82cbb, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""COL1"", ""S"" FROM SNOWPARK_TEMP_TABLE_L5JKVYF02EREADONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake,test_read_snowflake_with_views[True-True-read_with_table_name-transient],"assert 2 == 1
 +  where 2 = len([QueryRecord(query_id=01bfbb46-0a12-0095-000c-a90d19a83ac7, sql_text=CREATE OR REPLACE SCOPED TEMPORARY READ ONLY TABLE SNOWPARK_TEMP_TABLE_PHQRPAPXHQREADONLY CLONE SNOWPARK_TEMP_TABLE_AX3635F0BWTESTTABLENAME), QueryRecord(query_id=01bfbb46-0a12-0134-000c-a90d19a85c77, sql_text=SELECT ""__row_position__"", ""COL1"", ""S"" FROM (SELECT METADATA$ROW_POSITION as ""__row_position__"", ""COL1"", ""S"" FROM SNOWPARK_TEMP_TABLE_PHQRPAPXHQREADONLY) ORDER BY ""__row_position__"" ASC NULLS LAST)])",failed
tests.integ.modin.io.test_read_snowflake_iceberg,test_read_snowflake_iceberg[True],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_query_call,test_read_snowflake_call_sproc[True],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_query_call,test_read_snowflake_system_function[True],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_query_cte,test_read_snowflake_query_basic_cte[True],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_query_cte,test_read_snowflake_query_cte_with_cross_language_sproc[True],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_query_cte,test_read_snowflake_query_cte_with_python_anonymous_sproc[True],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_query_cte,test_read_snowflake_query_recursive_cte[True],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_query_order_by,test_inner_order_by_should_be_ignored_and_no_outer_order_by_negative[True],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_query_order_by,test_no_order_by_but_column_name_shadows[True],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_query_order_by,"test_order_by_and_column_name_shadows[True-""ORDER BY 1""]",AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_query_order_by,"test_order_by_and_column_name_shadows[True-""ORDER BY""]",AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_query_order_by,test_order_by_and_column_name_shadows[True-1],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_query_order_by,test_order_by_and_column_name_shadows[True-A],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_query_order_by,test_order_by_as_column_name_should_not_warn_negative[True],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_query_order_by,test_order_by_with_limit_and_name_shadows[True],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_query_order_by,test_order_by_with_no_limit_but_colname_shadows[True],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_query_order_by,test_order_by_with_position_key[True-1],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_query_order_by,test_order_by_with_position_key[True-28],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_query_order_by,test_order_by_with_position_key[True-2],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_query_order_by,test_read_snowflake_query_complex_query_with_join_and_order_by[True],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_query_order_by,test_select_star_with_order_by[True],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_select_query,test_read_snowflake_basic_query_with_comment_preceding_sql_inline_string[True],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_select_query,test_read_snowflake_basic_query_with_comment_preceding_sql_multiline_string[True],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_select_query,test_read_snowflake_basic_query_with_weird_formatting[True],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_select_query,test_read_snowflake_query_additional_derived_column[True],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_select_query,test_read_snowflake_query_complex_query_with_join[True],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_select_query,test_read_snowflake_query_connect_by[True],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_select_query,test_read_snowflake_query_none_nan_condition[True-False],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_read_snowflake_select_query,test_read_snowflake_query_none_nan_condition[True-True],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.io.test_to_csv,test_to_csv_dataframe_stage[kwargs0-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_13BOO5C4H6',failed
tests.integ.modin.io.test_to_csv,test_to_csv_dataframe_stage[kwargs1-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_G1P5IBM5RM',failed
tests.integ.modin.io.test_to_csv,test_to_csv_dataframe_stage[kwargs10-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_K94NSGJ48K',failed
tests.integ.modin.io.test_to_csv,test_to_csv_dataframe_stage[kwargs11-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_JHEYVVZG0C',failed
tests.integ.modin.io.test_to_csv,test_to_csv_dataframe_stage[kwargs12-True],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_630DWGCDCY',failed
tests.integ.modin.io.test_to_csv,test_to_csv_dataframe_stage[kwargs13-True],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_SW4GE2HOWS',failed
tests.integ.modin.io.test_to_csv,test_to_csv_dataframe_stage[kwargs14-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_3O3Y47UFIQ',failed
tests.integ.modin.io.test_to_csv,test_to_csv_dataframe_stage[kwargs15-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_ED8UM4GTE6',failed
tests.integ.modin.io.test_to_csv,test_to_csv_dataframe_stage[kwargs16-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_PQY8Y2OEB6',failed
tests.integ.modin.io.test_to_csv,test_to_csv_dataframe_stage[kwargs2-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_I6ANHSRYKT',failed
tests.integ.modin.io.test_to_csv,test_to_csv_dataframe_stage[kwargs3-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_WNKEDTEE2G',failed
tests.integ.modin.io.test_to_csv,test_to_csv_dataframe_stage[kwargs4-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_FM7A5HK9BU',failed
tests.integ.modin.io.test_to_csv,test_to_csv_dataframe_stage[kwargs5-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_TAGLA4189K',failed
tests.integ.modin.io.test_to_csv,test_to_csv_dataframe_stage[kwargs6-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_D05N1KHDUM',failed
tests.integ.modin.io.test_to_csv,test_to_csv_dataframe_stage[kwargs7-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_1B0UPKZBJ4',failed
tests.integ.modin.io.test_to_csv,test_to_csv_dataframe_stage[kwargs8-True],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_F3634N6O43',failed
tests.integ.modin.io.test_to_csv,test_to_csv_dataframe_stage[kwargs9-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_0TA85OT0OF',failed
tests.integ.modin.io.test_to_csv,test_to_csv_series_stage[kwargs0-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_APJ926UZ7W',failed
tests.integ.modin.io.test_to_csv,test_to_csv_series_stage[kwargs1-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_LCKSSUO1TW',failed
tests.integ.modin.io.test_to_csv,test_to_csv_series_stage[kwargs10-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_OX955WH59Q',failed
tests.integ.modin.io.test_to_csv,test_to_csv_series_stage[kwargs11-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_QK7VTMIWBE',failed
tests.integ.modin.io.test_to_csv,test_to_csv_series_stage[kwargs12-True],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_U4I2IHCTTW',failed
tests.integ.modin.io.test_to_csv,test_to_csv_series_stage[kwargs13-True],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_NUXMOOZPCP',failed
tests.integ.modin.io.test_to_csv,test_to_csv_series_stage[kwargs14-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_GYE6800Z7N',failed
tests.integ.modin.io.test_to_csv,test_to_csv_series_stage[kwargs2-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_CZZ144D8CK',failed
tests.integ.modin.io.test_to_csv,test_to_csv_series_stage[kwargs3-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_29XU0TNN3H',failed
tests.integ.modin.io.test_to_csv,test_to_csv_series_stage[kwargs5-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_J4VPJYHNMG',failed
tests.integ.modin.io.test_to_csv,test_to_csv_series_stage[kwargs6-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_FC3F1D00Q9',failed
tests.integ.modin.io.test_to_csv,test_to_csv_series_stage[kwargs7-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_XMEAQ70A55',failed
tests.integ.modin.io.test_to_csv,test_to_csv_series_stage[kwargs8-True],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_HP3TXVX62P',failed
tests.integ.modin.io.test_to_csv,test_to_csv_series_stage[kwargs9-False],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_A43F2A529V',failed
tests.integ.modin.io.test_to_csv,test_to_csv_unsupported_params_default_value[kwargs0],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_47XRGL3AOK',failed
tests.integ.modin.io.test_to_csv,test_to_csv_unsupported_params_default_value[kwargs1],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_ANSUQ9S201',failed
tests.integ.modin.io.test_to_csv,test_to_csv_unsupported_params_default_value[kwargs2],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_GTVFYY3OCH',failed
tests.integ.modin.io.test_to_csv,test_to_csv_unsupported_params_default_value[kwargs3],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_8LO758IIO7',failed
tests.integ.modin.io.test_to_csv,test_to_csv_unsupported_params_default_value[kwargs4],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_ZI3LGPNGW4',failed
tests.integ.modin.io.test_to_csv,test_to_csv_unsupported_params_default_value[kwargs5],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_VQ7IBK9NK9',failed
tests.integ.modin.io.test_to_csv,test_to_csv_unsupported_params_default_value[kwargs6],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_S3X6ZIF9LH',failed
tests.integ.modin.io.test_to_csv,test_to_csv_unsupported_params_default_value[kwargs7],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_0TWE68Z06D',failed
tests.integ.modin.io.test_to_csv,test_to_csv_unsupported_params_error[kwargs0],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_JC854II1N3',failed
tests.integ.modin.io.test_to_csv,test_to_csv_unsupported_params_error[kwargs1],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_9022ESRH0Q',failed
tests.integ.modin.io.test_to_csv,test_to_csv_unsupported_params_error[kwargs2],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_46EODZ5GRH',failed
tests.integ.modin.io.test_to_csv,test_to_csv_unsupported_params_error[kwargs3],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_ALGR8YMIRW',failed
tests.integ.modin.io.test_to_csv,test_to_csv_unsupported_params_error[kwargs4],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_CUZZDVG4VH',failed
tests.integ.modin.io.test_to_csv,test_to_csv_unsupported_params_error[kwargs5],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_L8PXY45YS2',failed
tests.integ.modin.io.test_to_csv,test_to_csv_unsupported_params_error[kwargs6],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_FMN2DE1WLD',failed
tests.integ.modin.io.test_to_csv,test_to_csv_unsupported_params_error[kwargs7],OSError: Cannot save file into a non-existent directory: '@SNOWPARK_TEMP_STAGE_KEDRTVL24R',failed
tests.integ.modin.io.test_to_dict,test_series_to_dict[index0-into2],"AssertionError: assert <class 'collections.defaultdict'> == <class 'dict'>
 +  where <class 'collections.defaultdict'> = type(defaultdict(<class 'int'>, {'a': 1.0, 'b': 2.0, 'c': nan, 'd': 4.0}))
 +  and   <class 'dict'> = type({'a': 1.0, 'b': 2.0, 'c': nan, 'd': 4.0})",failed
tests.integ.modin.io.test_to_dict,test_series_to_dict[index0-into3],"AssertionError: assert <class 'collections.defaultdict'> == <class 'dict'>
 +  where <class 'collections.defaultdict'> = type(defaultdict(<class 'list'>, {'a': 1.0, 'b': 2.0, 'c': nan, 'd': 4.0}))
 +  and   <class 'dict'> = type({'a': 1.0, 'b': 2.0, 'c': nan, 'd': 4.0})",failed
tests.integ.modin.io.test_to_dict,test_series_to_dict[index1-into2],"AssertionError: assert <class 'collections.defaultdict'> == <class 'dict'>
 +  where <class 'collections.defaultdict'> = type(defaultdict(<class 'int'>, {(1, 'row1'): 1.0, (1, 'row2'): 2.0, (2, 'row1'): nan, (2, 'row2'): 4.0}))
 +  and   <class 'dict'> = type({(1, 'row1'): 1.0, (1, 'row2'): 2.0, (2, 'row1'): nan, (2, 'row2'): 4.0})",failed
tests.integ.modin.io.test_to_dict,test_series_to_dict[index1-into3],"AssertionError: assert <class 'collections.defaultdict'> == <class 'dict'>
 +  where <class 'collections.defaultdict'> = type(defaultdict(<class 'list'>, {(1, 'row1'): 1.0, (1, 'row2'): 2.0, (2, 'row1'): nan, (2, 'row2'): 4.0}))
 +  and   <class 'dict'> = type({(1, 'row1'): 1.0, (1, 'row2'): 2.0, (2, 'row1'): nan, (2, 'row2'): 4.0})",failed
tests.integ.modin.io.test_to_pandas,test_to_pandas_with_attrs,AttributeError: can't set attribute,failed
tests.integ.modin.pivot.test_pivot_table_fill_value,test_pivot_table_single_with_dropna_type_incompatible_fill_value,Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.pivot.test_pivot_table_margins,test_pivot_table_multiple_pivot_values_null_data_with_margins[99.99-multiple_index],[XPASS(strict)] SNOW-1201908: fill_value should not affect margin,failed
tests.integ.modin.pivot.test_pivot_table_margins,test_pivot_table_multiple_pivot_values_null_data_with_margins[99.99-no_index],[XPASS(strict)] SNOW-1201908: fill_value should not affect margin,failed
tests.integ.modin.pivot.test_pivot_table_margins,test_pivot_table_multiple_pivot_values_null_data_with_margins[None-no_index],[XPASS(strict)] SNOW-1435365 - pandas computes values differently than us: https://github.com/pandas-dev/pandas/issues/58722.,failed
tests.integ.modin.pivot.test_pivot_table_margins,test_pivot_table_multiple_pivot_values_null_data_with_margins_nan_blocked[99.99-multiple_index],[XPASS(strict)] SNOW-1201908: fill_value should not affect margin,failed
tests.integ.modin.pivot.test_pivot_table_margins,test_pivot_table_multiple_pivot_values_null_data_with_margins_nan_blocked[99.99-no_index],[XPASS(strict)] SNOW-1201908: fill_value should not affect margin,failed
tests.integ.modin.pivot.test_pivot_table_margins,test_pivot_table_single_with_dropna_options[99.99-columns1-False-no_index],reason: SNOW-1435365 - pandas computes values differently than us: https://github.com/pandas-dev/pandas/issues/58722.,xfailed
tests.integ.modin.pivot.test_pivot_table_margins,test_pivot_table_single_with_dropna_options[99.99-columns1-True-no_index],reason: SNOW-1435365 - pandas computes values differently than us: https://github.com/pandas-dev/pandas/issues/58722.,xfailed
tests.integ.modin.pivot.test_pivot_table_margins,test_pivot_table_single_with_dropna_options[None-columns1-False-no_index],reason: SNOW-1435365 - pandas computes values differently than us: https://github.com/pandas-dev/pandas/issues/58722.,xfailed
tests.integ.modin.pivot.test_pivot_table_margins,test_pivot_table_single_with_dropna_options[None-columns1-True-no_index],reason: SNOW-1435365 - pandas computes values differently than us: https://github.com/pandas-dev/pandas/issues/58722.,xfailed
tests.integ.modin.pivot.test_pivot_table_margins,test_pivot_table_unsupported_dropna_with_expanded_aggregation_margins_unsupported,"AssertionError: Regex pattern did not match.
 Regex: 'Margins not supported if list of aggregation functions'
 Input: 'The name None occurs multiple times, use a level number'",failed
tests.integ.modin.pivot.test_pivot_table_multiple,test_pivot_table_no_index_column_multiple_values_multiple_aggr_func_dict[B],[XPASS(strict)] SNOW-1435365 - look into no index + aggfunc as dictionary with list.,failed
tests.integ.modin.pivot.test_pivot_table_multiple,test_pivot_table_no_index_column_multiple_values_multiple_aggr_func_dict[columns1],[XPASS(strict)] SNOW-1435365 - look into no index + aggfunc as dictionary with list.,failed
tests.integ.modin.pivot.test_pivot_table_multiple,test_pivot_table_no_values_by_default[None],[XPASS(strict)] ,failed
tests.integ.modin.pivot.test_pivot_table_multiple,test_pivot_table_no_values_by_default[values1],[XPASS(strict)] ,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_not_implemented_single_aggfunc[all-'all'],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_not_implemented_single_aggfunc[all-np.all],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_not_implemented_single_aggfunc[any-'any'],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_not_implemented_single_aggfunc[any-np.any],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_not_implemented_single_aggfunc[argmax-np.argmax],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_not_implemented_single_aggfunc[argmin-np.argmin],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_not_implemented_single_aggfunc[foo-'foo'],AttributeError: 'foo' is not a valid function for 'DataFrameGroupBy' object,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_not_implemented_single_aggfunc[idxmax-'idxmax'],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_not_implemented_single_aggfunc[idxmin-'idxmin'],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_not_implemented_single_aggfunc[kurt-'kurt'],AttributeError: 'kurt' is not a valid function for 'DataFrameGroupBy' object,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_not_implemented_single_aggfunc[len-<built-in function len>],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_not_implemented_single_aggfunc[nunique-'nunique'],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_not_implemented_single_aggfunc[prod-'prod'],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_not_implemented_single_aggfunc[sem-'sem'],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_not_implemented_single_aggfunc[size-'size'],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_pivot_table_aggfunc_not_implemented_or_supported[dict],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_pivot_table_aggfunc_not_implemented_or_supported[list_with_user_defined_function_and_string],AssertionError: Cannot concat indices that do not have the same number of levels,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_pivot_table_aggfunc_not_implemented_or_supported[set_with_user_defined_function_and_string],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_pivot_table_aggfunc_not_implemented_or_supported[tuple_with_builtins_and_native_pandas_function],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_pivot_table_aggfunc_not_implemented_or_supported[tuple_with_user_defined_function_and_string],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_pivot_table_aggfunc_not_implemented_or_supported[user_defined_function],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_pivot_table_not_implemented_or_supported,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_pivot_table_not_supported_aggfunc_with_empty_list,"AssertionError: Regex pattern did not match.
 Regex: 'Expected at least one aggregation function'
 Input: 'No objects to concatenate'",failed
tests.integ.modin.pivot.test_pivot_table_negative,test_timedelta_input_not_supported[df_data0],[XPASS(strict)] ,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_timedelta_input_not_supported[df_data1],[XPASS(strict)] ,failed
tests.integ.modin.pivot.test_pivot_table_negative,test_timedelta_input_not_supported[df_data2],[XPASS(strict)] ,failed
tests.integ.modin.pivot.test_pivot_table_single,test_pivot_empty_frame_no_values[False-True],TypeError: 'str' object is not callable,failed
tests.integ.modin.pivot.test_pivot_table_single,test_pivot_empty_frame_no_values[True-True],TypeError: 'str' object is not callable,failed
tests.integ.modin.pivot.test_pivot_table_single,test_pivot_empty_frame_snow_1013918[named_columns-True-d-columns7],TypeError: 'str' object is not callable,failed
tests.integ.modin.pivot.test_pivot_table_single,test_pivot_empty_frame_snow_1013918[named_columns-True-index11-columns11],TypeError: 'str' object is not callable,failed
tests.integ.modin.pivot.test_pivot_table_single,test_pivot_empty_frame_snow_1013918[unnamed_columns-True-d-columns7],TypeError: 'str' object is not callable,failed
tests.integ.modin.pivot.test_pivot_table_single,test_pivot_empty_frame_snow_1013918[unnamed_columns-True-index11-columns11],TypeError: 'str' object is not callable,failed
tests.integ.modin.pivot.test_pivot_table_single,test_pivot_on_inline_data_using_temp_table,KeyError: 'index_no',failed
tests.integ.modin.pivot.test_pivot_table_single,test_pivot_table_with_duplicate_values,SNOW-1201994: index contains ints coerced to string,xfailed
tests.integ.modin.resample.test_resample,test_resample_numeric_only[sum],TypeError: Resampler.sum() got multiple values for argument 'numeric_only',failed
tests.integ.modin.resample.test_resample_asfreq,test_asfreq_parameter_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_asfreq,test_asfreq_rule_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_ffill_limit_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_fillna_method_not_implemented,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_invalid_index_type_negative[index_col0],"AssertionError: Regex pattern did not match.
 Regex: ""Only valid with DatetimeIndex, but got an instance of 'MultiIndex'""
 Input: ""Only valid with DatetimeIndex, TimedeltaIndex or PeriodIndex, but got an instance of 'MultiIndex'""",failed
tests.integ.modin.resample.test_resample_negative,test_resample_invalid_index_type_negative[index_col1],ValueError: MultiIndex has no single backing array. Use 'MultiIndex.to_numpy()' to get a NumPy array of tuples.,failed
tests.integ.modin.resample.test_resample_negative,test_resample_not_yet_implemented_closed,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_not_yet_implemented_freq[MS],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_not_yet_implemented_freq[QE],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_not_yet_implemented_freq[QS],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_not_yet_implemented_freq[YS],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_sum_timedelta_with_duplicate_column_label_changes_type_to_int,[XPASS(strict)] SNOW-1704430,failed
tests.integ.modin.resample.test_resample_negative,test_resample_tz_negative,Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_unsupported_freq_negative[BME],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_unsupported_freq_negative[BMS],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_unsupported_freq_negative[BQE],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_unsupported_freq_negative[BQS],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_unsupported_freq_negative[BYE],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_unsupported_freq_negative[BYS],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_unsupported_freq_negative[B],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_unsupported_freq_negative[CBME],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_unsupported_freq_negative[CBMS],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_unsupported_freq_negative[C],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_unsupported_freq_negative[SME],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_unsupported_freq_negative[SMS],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_unsupported_freq_negative[bh],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_unsupported_freq_negative[cbh],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_unsupported_freq_negative[ms],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_resample_unsupported_freq_negative[ns],"numpy.core._exceptions._ArrayMemoryError: Unable to allocate 8.59 PiB for an array with shape (1209600000000002,) and data type int64",failed
tests.integ.modin.resample.test_resample_negative,test_series_agg_numeric_true_raises[<lambda>0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_series_agg_numeric_true_raises[<lambda>1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_negative,test_series_agg_numeric_true_raises[<lambda>2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.resample.test_resample_on,test_resample_non_datetime_on,"AssertionError: Regex pattern did not match.
 Regex: 'Only valid with DatetimeIndex or TimedeltaIndex'
 Input: ""Only valid with DatetimeIndex, TimedeltaIndex or PeriodIndex, but got an instance of 'Index'""",failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[1-D],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[1-ME],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[1-W],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[1-YE],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[1-h],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[1-min],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[1-s],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[15-D],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[15-ME],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[15-W],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[15-YE],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[15-h],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[15-min],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[15-s],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[2-D],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[2-ME],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[2-W],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[2-YE],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[2-h],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[2-min],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[2-s],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[3-D],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[3-ME],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[3-W],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[3-YE],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[3-h],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[3-min],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[3-s],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[5-D],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[5-ME],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[5-W],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[5-YE],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[5-h],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[5-min],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_df[5-s],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[1-D],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[1-ME],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[1-W],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[1-YE],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[1-h],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[1-min],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[1-s],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[15-D],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[15-ME],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[15-W],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[15-YE],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[15-h],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[15-min],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[15-s],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[2-D],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[2-ME],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[2-W],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[2-YE],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[2-h],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[2-min],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[2-s],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[3-D],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[3-ME],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[3-W],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[3-YE],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[3-h],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[3-min],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[3-s],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[5-D],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[5-ME],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[5-W],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[5-YE],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[5-h],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[5-min],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.resample.test_resample_property,test_resample_indices_series[5-s],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.series.test_add_prefix,test_series_add_prefix_time_column_df[ 0 9 0 1 2 3],"AssertionError: Series.index are different

Series.index values are different (100.0 %)
[left]:  Index([' 0 9 0 1 2 32023-01-01 00:00:00', ' 0 9 0 1 2 32023-01-02 00:00:00',
       ' 0 9 0 1 2 32023-01-03 00:00:00', ' 0 9 0 1 2 32023-01-04 00:00:00',
       ' 0 9 0 1 2 32023-01-05 00:00:00', ' 0 9 0 1 2 32023-01-06 00:00:00',
       ' 0 9 0 1 2 32023-01-07 00:00:00'],
      dtype='object')
[right]: Index([' 0 9 0 1 2 32023-01-01 00:00:00.000',
       ' 0 9 0 1 2 32023-01-02 00:00:00.000',
       ' 0 9 0 1 2 32023-01-03 00:00:00.000',
       ' 0 9 0 1 2 32023-01-04 00:00:00.000',
       ' 0 9 0 1 2 32023-01-05 00:00:00.000',
       ' 0 9 0 1 2 32023-01-06 00:00:00.000',
       ' 0 9 0 1 2 32023-01-07 00:00:00.000'],
      dtype='object')
At positional index 0, first diff:  0 9 0 1 2 32023-01-01 00:00:00 !=  0 9 0 1 2 32023-01-01 00:00:00.000",failed
tests.integ.modin.series.test_add_prefix,test_series_add_prefix_time_column_df[12345],"AssertionError: Series.index are different

Series.index values are different (100.0 %)
[left]:  Index(['123452023-01-01 00:00:00', '123452023-01-02 00:00:00',
       '123452023-01-03 00:00:00', '123452023-01-04 00:00:00',
       '123452023-01-05 00:00:00', '123452023-01-06 00:00:00',
       '123452023-01-07 00:00:00'],
      dtype='object')
[right]: Index(['123452023-01-01 00:00:00.000', '123452023-01-02 00:00:00.000',
       '123452023-01-03 00:00:00.000', '123452023-01-04 00:00:00.000',
       '123452023-01-05 00:00:00.000', '123452023-01-06 00:00:00.000',
       '123452023-01-07 00:00:00.000'],
      dtype='object')
At positional index 0, first diff: 123452023-01-01 00:00:00 != 123452023-01-01 00:00:00.000",failed
tests.integ.modin.series.test_add_prefix,test_series_add_prefix_time_column_df[None],"AssertionError: Series.index are different

Series.index values are different (100.0 %)
[left]:  Index(['None2023-01-01 00:00:00', 'None2023-01-02 00:00:00',
       'None2023-01-03 00:00:00', 'None2023-01-04 00:00:00',
       'None2023-01-05 00:00:00', 'None2023-01-06 00:00:00',
       'None2023-01-07 00:00:00'],
      dtype='object')
[right]: Index(['None2023-01-01 00:00:00.000', 'None2023-01-02 00:00:00.000',
       'None2023-01-03 00:00:00.000', 'None2023-01-04 00:00:00.000',
       'None2023-01-05 00:00:00.000', 'None2023-01-06 00:00:00.000',
       'None2023-01-07 00:00:00.000'],
      dtype='object')
At positional index 0, first diff: None2023-01-01 00:00:00 != None2023-01-01 00:00:00.000",failed
tests.integ.modin.series.test_add_prefix,test_series_add_prefix_time_column_df[prefix3],"AssertionError: Series.index are different

Series.index values are different (100.0 %)
[left]:  Index(['('tuple data', 12)2023-01-01 00:00:00',
       '('tuple data', 12)2023-01-02 00:00:00',
       '('tuple data', 12)2023-01-03 00:00:00',
       '('tuple data', 12)2023-01-04 00:00:00',
       '('tuple data', 12)2023-01-05 00:00:00',
       '('tuple data', 12)2023-01-06 00:00:00',
       '('tuple data', 12)2023-01-07 00:00:00'],
      dtype='object')
[right]: Index(['('tuple data', 12)2023-01-01 00:00:00.000',
       '('tuple data', 12)2023-01-02 00:00:00.000',
       '('tuple data', 12)2023-01-03 00:00:00.000',
       '('tuple data', 12)2023-01-04 00:00:00.000',
       '('tuple data', 12)2023-01-05 00:00:00.000',
       '('tuple data', 12)2023-01-06 00:00:00.000',
       '('tuple data', 12)2023-01-07 00:00:00.000'],
      dtype='object')
At positional index 0, first diff: ('tuple data', 12)2023-01-01 00:00:00 != ('tuple data', 12)2023-01-01 00:00:00.000",failed
tests.integ.modin.series.test_add_prefix,test_series_add_prefix_time_column_df[prefix4],"AssertionError: Series.index are different

Series.index values are different (100.0 %)
[left]:  Index(['[24, 25, 26, 'list!']2023-01-01 00:00:00',
       '[24, 25, 26, 'list!']2023-01-02 00:00:00',
       '[24, 25, 26, 'list!']2023-01-03 00:00:00',
       '[24, 25, 26, 'list!']2023-01-04 00:00:00',
       '[24, 25, 26, 'list!']2023-01-05 00:00:00',
       '[24, 25, 26, 'list!']2023-01-06 00:00:00',
       '[24, 25, 26, 'list!']2023-01-07 00:00:00'],
      dtype='object')
[right]: Index(['[24, 25, 26, 'list!']2023-01-01 00:00:00.000',
       '[24, 25, 26, 'list!']2023-01-02 00:00:00.000',
       '[24, 25, 26, 'list!']2023-01-03 00:00:00.000',
       '[24, 25, 26, 'list!']2023-01-04 00:00:00.000',
       '[24, 25, 26, 'list!']2023-01-05 00:00:00.000',
       '[24, 25, 26, 'list!']2023-01-06 00:00:00.000',
       '[24, 25, 26, 'list!']2023-01-07 00:00:00.000'],
      dtype='object')
At positional index 0, first diff: [24, 25, 26, 'list!']2023-01-01 00:00:00 != [24, 25, 26, 'list!']2023-01-01 00:00:00.000",failed
tests.integ.modin.series.test_add_prefix,test_series_add_prefix_time_column_df[prefix5],"AssertionError: Series.index are different

Series.index values are different (100.0 %)
[left]:  Index(['[[], [1, 2]]2023-01-01 00:00:00', '[[], [1, 2]]2023-01-02 00:00:00',
       '[[], [1, 2]]2023-01-03 00:00:00', '[[], [1, 2]]2023-01-04 00:00:00',
       '[[], [1, 2]]2023-01-05 00:00:00', '[[], [1, 2]]2023-01-06 00:00:00',
       '[[], [1, 2]]2023-01-07 00:00:00'],
      dtype='object')
[right]: Index(['[[], [1, 2]]2023-01-01 00:00:00.000',
       '[[], [1, 2]]2023-01-02 00:00:00.000',
       '[[], [1, 2]]2023-01-03 00:00:00.000',
       '[[], [1, 2]]2023-01-04 00:00:00.000',
       '[[], [1, 2]]2023-01-05 00:00:00.000',
       '[[], [1, 2]]2023-01-06 00:00:00.000',
       '[[], [1, 2]]2023-01-07 00:00:00.000'],
      dtype='object')
At positional index 0, first diff: [[], [1, 2]]2023-01-01 00:00:00 != [[], [1, 2]]2023-01-01 00:00:00.000",failed
tests.integ.modin.series.test_add_prefix,test_series_add_prefix_time_column_df[prefix6],"AssertionError: Series.index are different

Series.index values are different (100.0 %)
[left]:  Index(['0      this\n1        is\n2         a\n3    series\ndtype: object2023-01-01 00:00:00',
       '0      this\n1        is\n2         a\n3    series\ndtype: object2023-01-02 00:00:00',
       '0      this\n1        is\n2         a\n3    series\ndtype: object2023-01-03 00:00:00',
       '0      this\n1        is\n2         a\n3    series\ndtype: object2023-01-04 00:00:00',
       '0      this\n1        is\n2         a\n3    series\ndtype: object2023-01-05 00:00:00',
       '0      this\n1        is\n2         a\n3    series\ndtype: object2023-01-06 00:00:00',
       '0      this\n1        is\n2         a\n3    series\ndtype: object2023-01-07 00:00:00'],
      dtype='object')
[right]: Index(['0      this\n1        is\n2         a\n3    series\ndtype: object2023-01-01 00:00:00.000',
       '0      this\n1        is\n2         a\n3    series\ndtype: object2023-01-02 00:00:00.000',
       '0      this\n1        is\n2         a\n3    series\ndtype: object2023-01-03 00:00:00.000',
       '0      this\n1        is\n2         a\n3    series\ndtype: object2023-01-04 00:00:00.000',
       '0      this\n1        is\n2         a\n3    series\ndtype: object2023-01-05 00:00:00.000',
       '0      this\n1        is\n2         a\n3    series\ndtype: object2023-01-06 00:00:00.000',
       '0      this\n1        is\n2         a\n3    series\ndtype: object2023-01-07 00:00:00.000'],
      dtype='object')
At positional index 0, first diff: 0      this
1        is
2         a
3    series
dtype: object2023-01-01 00:00:00 != 0      this
1        is
2         a
3    series
dtype: object2023-01-01 00:00:00.000",failed
tests.integ.modin.series.test_add_prefix,test_series_add_prefix_time_column_df[prefix7],"AssertionError: Series.index are different

Series.index values are different (100.0 %)
[left]:  Index(['   column1  column2\n0       67      909\n1       68      9102023-01-01 00:00:00',
       '   column1  column2\n0       67      909\n1       68      9102023-01-02 00:00:00',
       '   column1  column2\n0       67      909\n1       68      9102023-01-03 00:00:00',
       '   column1  column2\n0       67      909\n1       68      9102023-01-04 00:00:00',
       '   column1  column2\n0       67      909\n1       68      9102023-01-05 00:00:00',
       '   column1  column2\n0       67      909\n1       68      9102023-01-06 00:00:00',
       '   column1  column2\n0       67      909\n1       68      9102023-01-07 00:00:00'],
      dtype='object')
[right]: Index(['   column1  column2\n0       67      909\n1       68      9102023-01-01 00:00:00.000',
       '   column1  column2\n0       67      909\n1       68      9102023-01-02 00:00:00.000',
       '   column1  column2\n0       67      909\n1       68      9102023-01-03 00:00:00.000',
       '   column1  column2\n0       67      909\n1       68      9102023-01-04 00:00:00.000',
       '   column1  column2\n0       67      909\n1       68      9102023-01-05 00:00:00.000',
       '   column1  column2\n0       67      909\n1       68      9102023-01-06 00:00:00.000',
       '   column1  column2\n0       67      909\n1       68      9102023-01-07 00:00:00.000'],
      dtype='object')
At positional index 0, first diff:    column1  column2
0       67      909
1       68      9102023-01-01 00:00:00 !=    column1  column2
0       67      909
1       68      9102023-01-01 00:00:00.000",failed
tests.integ.modin.series.test_add_prefix,test_series_add_prefix_time_column_df[prefix_],"AssertionError: Series.index are different

Series.index values are different (100.0 %)
[left]:  Index(['prefix_2023-01-01 00:00:00', 'prefix_2023-01-02 00:00:00',
       'prefix_2023-01-03 00:00:00', 'prefix_2023-01-04 00:00:00',
       'prefix_2023-01-05 00:00:00', 'prefix_2023-01-06 00:00:00',
       'prefix_2023-01-07 00:00:00'],
      dtype='object')
[right]: Index(['prefix_2023-01-01 00:00:00.000', 'prefix_2023-01-02 00:00:00.000',
       'prefix_2023-01-03 00:00:00.000', 'prefix_2023-01-04 00:00:00.000',
       'prefix_2023-01-05 00:00:00.000', 'prefix_2023-01-06 00:00:00.000',
       'prefix_2023-01-07 00:00:00.000'],
      dtype='object')
At positional index 0, first diff: prefix_2023-01-01 00:00:00 != prefix_2023-01-01 00:00:00.000",failed
tests.integ.modin.series.test_add_suffix,test_add_suffix_time_column_df[ 0 9 0 1 2 3],"AssertionError: Series.index are different

Series.index values are different (100.0 %)
[left]:  Index(['2023-01-01 00:00:00 0 9 0 1 2 3', '2023-01-02 00:00:00 0 9 0 1 2 3',
       '2023-01-03 00:00:00 0 9 0 1 2 3', '2023-01-04 00:00:00 0 9 0 1 2 3',
       '2023-01-05 00:00:00 0 9 0 1 2 3', '2023-01-06 00:00:00 0 9 0 1 2 3',
       '2023-01-07 00:00:00 0 9 0 1 2 3'],
      dtype='object')
[right]: Index(['2023-01-01 00:00:00.000 0 9 0 1 2 3',
       '2023-01-02 00:00:00.000 0 9 0 1 2 3',
       '2023-01-03 00:00:00.000 0 9 0 1 2 3',
       '2023-01-04 00:00:00.000 0 9 0 1 2 3',
       '2023-01-05 00:00:00.000 0 9 0 1 2 3',
       '2023-01-06 00:00:00.000 0 9 0 1 2 3',
       '2023-01-07 00:00:00.000 0 9 0 1 2 3'],
      dtype='object')
At positional index 0, first diff: 2023-01-01 00:00:00 0 9 0 1 2 3 != 2023-01-01 00:00:00.000 0 9 0 1 2 3",failed
tests.integ.modin.series.test_add_suffix,test_add_suffix_time_column_df[12345],"AssertionError: Series.index are different

Series.index values are different (100.0 %)
[left]:  Index(['2023-01-01 00:00:0012345', '2023-01-02 00:00:0012345',
       '2023-01-03 00:00:0012345', '2023-01-04 00:00:0012345',
       '2023-01-05 00:00:0012345', '2023-01-06 00:00:0012345',
       '2023-01-07 00:00:0012345'],
      dtype='object')
[right]: Index(['2023-01-01 00:00:00.00012345', '2023-01-02 00:00:00.00012345',
       '2023-01-03 00:00:00.00012345', '2023-01-04 00:00:00.00012345',
       '2023-01-05 00:00:00.00012345', '2023-01-06 00:00:00.00012345',
       '2023-01-07 00:00:00.00012345'],
      dtype='object')
At positional index 0, first diff: 2023-01-01 00:00:0012345 != 2023-01-01 00:00:00.00012345",failed
tests.integ.modin.series.test_add_suffix,test_add_suffix_time_column_df[None],"AssertionError: Series.index are different

Series.index values are different (100.0 %)
[left]:  Index(['2023-01-01 00:00:00None', '2023-01-02 00:00:00None',
       '2023-01-03 00:00:00None', '2023-01-04 00:00:00None',
       '2023-01-05 00:00:00None', '2023-01-06 00:00:00None',
       '2023-01-07 00:00:00None'],
      dtype='object')
[right]: Index(['2023-01-01 00:00:00.000None', '2023-01-02 00:00:00.000None',
       '2023-01-03 00:00:00.000None', '2023-01-04 00:00:00.000None',
       '2023-01-05 00:00:00.000None', '2023-01-06 00:00:00.000None',
       '2023-01-07 00:00:00.000None'],
      dtype='object')
At positional index 0, first diff: 2023-01-01 00:00:00None != 2023-01-01 00:00:00.000None",failed
tests.integ.modin.series.test_add_suffix,test_add_suffix_time_column_df[_suffix],"AssertionError: Series.index are different

Series.index values are different (100.0 %)
[left]:  Index(['2023-01-01 00:00:00_suffix', '2023-01-02 00:00:00_suffix',
       '2023-01-03 00:00:00_suffix', '2023-01-04 00:00:00_suffix',
       '2023-01-05 00:00:00_suffix', '2023-01-06 00:00:00_suffix',
       '2023-01-07 00:00:00_suffix'],
      dtype='object')
[right]: Index(['2023-01-01 00:00:00.000_suffix', '2023-01-02 00:00:00.000_suffix',
       '2023-01-03 00:00:00.000_suffix', '2023-01-04 00:00:00.000_suffix',
       '2023-01-05 00:00:00.000_suffix', '2023-01-06 00:00:00.000_suffix',
       '2023-01-07 00:00:00.000_suffix'],
      dtype='object')
At positional index 0, first diff: 2023-01-01 00:00:00_suffix != 2023-01-01 00:00:00.000_suffix",failed
tests.integ.modin.series.test_add_suffix,test_add_suffix_time_column_df[suffix3],"AssertionError: Series.index are different

Series.index values are different (100.0 %)
[left]:  Index(['2023-01-01 00:00:00('tuple data', 12)',
       '2023-01-02 00:00:00('tuple data', 12)',
       '2023-01-03 00:00:00('tuple data', 12)',
       '2023-01-04 00:00:00('tuple data', 12)',
       '2023-01-05 00:00:00('tuple data', 12)',
       '2023-01-06 00:00:00('tuple data', 12)',
       '2023-01-07 00:00:00('tuple data', 12)'],
      dtype='object')
[right]: Index(['2023-01-01 00:00:00.000('tuple data', 12)',
       '2023-01-02 00:00:00.000('tuple data', 12)',
       '2023-01-03 00:00:00.000('tuple data', 12)',
       '2023-01-04 00:00:00.000('tuple data', 12)',
       '2023-01-05 00:00:00.000('tuple data', 12)',
       '2023-01-06 00:00:00.000('tuple data', 12)',
       '2023-01-07 00:00:00.000('tuple data', 12)'],
      dtype='object')
At positional index 0, first diff: 2023-01-01 00:00:00('tuple data', 12) != 2023-01-01 00:00:00.000('tuple data', 12)",failed
tests.integ.modin.series.test_add_suffix,test_add_suffix_time_column_df[suffix4],"AssertionError: Series.index are different

Series.index values are different (100.0 %)
[left]:  Index(['2023-01-01 00:00:00[24, 25, 26, 'list!']',
       '2023-01-02 00:00:00[24, 25, 26, 'list!']',
       '2023-01-03 00:00:00[24, 25, 26, 'list!']',
       '2023-01-04 00:00:00[24, 25, 26, 'list!']',
       '2023-01-05 00:00:00[24, 25, 26, 'list!']',
       '2023-01-06 00:00:00[24, 25, 26, 'list!']',
       '2023-01-07 00:00:00[24, 25, 26, 'list!']'],
      dtype='object')
[right]: Index(['2023-01-01 00:00:00.000[24, 25, 26, 'list!']',
       '2023-01-02 00:00:00.000[24, 25, 26, 'list!']',
       '2023-01-03 00:00:00.000[24, 25, 26, 'list!']',
       '2023-01-04 00:00:00.000[24, 25, 26, 'list!']',
       '2023-01-05 00:00:00.000[24, 25, 26, 'list!']',
       '2023-01-06 00:00:00.000[24, 25, 26, 'list!']',
       '2023-01-07 00:00:00.000[24, 25, 26, 'list!']'],
      dtype='object')
At positional index 0, first diff: 2023-01-01 00:00:00[24, 25, 26, 'list!'] != 2023-01-01 00:00:00.000[24, 25, 26, 'list!']",failed
tests.integ.modin.series.test_add_suffix,test_add_suffix_time_column_df[suffix5],"AssertionError: Series.index are different

Series.index values are different (100.0 %)
[left]:  Index(['2023-01-01 00:00:00[[], [1, 2]]', '2023-01-02 00:00:00[[], [1, 2]]',
       '2023-01-03 00:00:00[[], [1, 2]]', '2023-01-04 00:00:00[[], [1, 2]]',
       '2023-01-05 00:00:00[[], [1, 2]]', '2023-01-06 00:00:00[[], [1, 2]]',
       '2023-01-07 00:00:00[[], [1, 2]]'],
      dtype='object')
[right]: Index(['2023-01-01 00:00:00.000[[], [1, 2]]',
       '2023-01-02 00:00:00.000[[], [1, 2]]',
       '2023-01-03 00:00:00.000[[], [1, 2]]',
       '2023-01-04 00:00:00.000[[], [1, 2]]',
       '2023-01-05 00:00:00.000[[], [1, 2]]',
       '2023-01-06 00:00:00.000[[], [1, 2]]',
       '2023-01-07 00:00:00.000[[], [1, 2]]'],
      dtype='object')
At positional index 0, first diff: 2023-01-01 00:00:00[[], [1, 2]] != 2023-01-01 00:00:00.000[[], [1, 2]]",failed
tests.integ.modin.series.test_add_suffix,test_add_suffix_time_column_df[suffix6],"AssertionError: Series.index are different

Series.index values are different (100.0 %)
[left]:  Index(['2023-01-01 00:00:000      this\n1        is\n2         a\n3    series\ndtype: object',
       '2023-01-02 00:00:000      this\n1        is\n2         a\n3    series\ndtype: object',
       '2023-01-03 00:00:000      this\n1        is\n2         a\n3    series\ndtype: object',
       '2023-01-04 00:00:000      this\n1        is\n2         a\n3    series\ndtype: object',
       '2023-01-05 00:00:000      this\n1        is\n2         a\n3    series\ndtype: object',
       '2023-01-06 00:00:000      this\n1        is\n2         a\n3    series\ndtype: object',
       '2023-01-07 00:00:000      this\n1        is\n2         a\n3    series\ndtype: object'],
      dtype='object')
[right]: Index(['2023-01-01 00:00:00.0000      this\n1        is\n2         a\n3    series\ndtype: object',
       '2023-01-02 00:00:00.0000      this\n1        is\n2         a\n3    series\ndtype: object',
       '2023-01-03 00:00:00.0000      this\n1        is\n2         a\n3    series\ndtype: object',
       '2023-01-04 00:00:00.0000      this\n1        is\n2         a\n3    series\ndtype: object',
       '2023-01-05 00:00:00.0000      this\n1        is\n2         a\n3    series\ndtype: object',
       '2023-01-06 00:00:00.0000      this\n1        is\n2         a\n3    series\ndtype: object',
       '2023-01-07 00:00:00.0000      this\n1        is\n2         a\n3    series\ndtype: object'],
      dtype='object')
At positional index 0, first diff: 2023-01-01 00:00:000      this
1        is
2         a
3    series
dtype: object != 2023-01-01 00:00:00.0000      this
1        is
2         a
3    series
dtype: object",failed
tests.integ.modin.series.test_add_suffix,test_add_suffix_time_column_df[suffix7],"AssertionError: Series.index are different

Series.index values are different (100.0 %)
[left]:  Index(['2023-01-01 00:00:00   column1  column2\n0       67      909\n1       68      910',
       '2023-01-02 00:00:00   column1  column2\n0       67      909\n1       68      910',
       '2023-01-03 00:00:00   column1  column2\n0       67      909\n1       68      910',
       '2023-01-04 00:00:00   column1  column2\n0       67      909\n1       68      910',
       '2023-01-05 00:00:00   column1  column2\n0       67      909\n1       68      910',
       '2023-01-06 00:00:00   column1  column2\n0       67      909\n1       68      910',
       '2023-01-07 00:00:00   column1  column2\n0       67      909\n1       68      910'],
      dtype='object')
[right]: Index(['2023-01-01 00:00:00.000   column1  column2\n0       67      909\n1       68      910',
       '2023-01-02 00:00:00.000   column1  column2\n0       67      909\n1       68      910',
       '2023-01-03 00:00:00.000   column1  column2\n0       67      909\n1       68      910',
       '2023-01-04 00:00:00.000   column1  column2\n0       67      909\n1       68      910',
       '2023-01-05 00:00:00.000   column1  column2\n0       67      909\n1       68      910',
       '2023-01-06 00:00:00.000   column1  column2\n0       67      909\n1       68      910',
       '2023-01-07 00:00:00.000   column1  column2\n0       67      909\n1       68      910'],
      dtype='object')
At positional index 0, first diff: 2023-01-01 00:00:00   column1  column2
0       67      909
1       68      910 != 2023-01-01 00:00:00.000   column1  column2
0       67      909
1       68      910",failed
tests.integ.modin.series.test_aggregate,test_2_tuple_named_agg_errors_for_series[2-tuple],AssertionError: exception type <class 'AssertionError'> does not match with expected type <class 'pandas.errors.SpecificationError'>,failed
tests.integ.modin.series.test_aggregate,test_2_tuple_named_agg_errors_for_series[NamedAgg],AssertionError: exception type <class 'AssertionError'> does not match with expected type <class 'pandas.errors.SpecificationError'>,failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_dtype_raise[data0-Array-mean],"TypeError: Could not convert [list([1, 2, 10, 20])] to numeric",failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_dtype_raise[data0-Array-median],TypeError: Cannot convert [[list([1]) list([2]) list([10]) list([20])]] to numeric,failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_dtype_raise[data0-Array-std],TypeError: setting an array element with a sequence.,failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_dtype_raise[data0-Array-sum],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_dtype_raise[data0-Array-var],TypeError: setting an array element with a sequence.,failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_dtype_raise[data1-Array-mean],"TypeError: Could not convert [list([1, 2, 10, 20])] to numeric",failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_dtype_raise[data1-Array-median],TypeError: Cannot convert [[list([1]) list([2]) list([10]) list([20])]] to numeric,failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_dtype_raise[data1-Array-std],TypeError: setting an array element with a sequence.,failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_dtype_raise[data1-Array-sum],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_dtype_raise[data1-Array-var],TypeError: setting an array element with a sequence.,failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_dtype_raise[data2-Timestamp-mean],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_dtype_raise[data2-Timestamp-median],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_dtype_raise[data2-Timestamp-std],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_dtype_raise[data2-Timestamp-sum],TypeError: 'DatetimeArray' with dtype datetime64[ns] does not support reduction 'sum',failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_dtype_raise[data2-Timestamp-var],TypeError: 'DatetimeArray' with dtype datetime64[ns] does not support reduction 'var',failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_dtype_raise[data3-Variant-mean],TypeError: unsupported operand type(s) for +: 'int' and 'str',failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_dtype_raise[data3-Variant-median],TypeError: could not convert string to float: 'A',failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_dtype_raise[data3-Variant-std],TypeError: could not convert string to float: 'A',failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_dtype_raise[data3-Variant-sum],TypeError: unsupported operand type(s) for +: 'int' and 'str',failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_dtype_raise[data3-Variant-var],TypeError: could not convert string to float: 'A',failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_min_max_dtype_raise[data0-Array-max],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_min_max_dtype_raise[data0-Array-min],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_min_max_dtype_raise[data1-Object-max],TypeError: '>=' not supported between instances of 'dict' and 'dict',failed
tests.integ.modin.series.test_aggregate,test_agg_invalid_min_max_dtype_raise[data1-Object-min],TypeError: '<=' not supported between instances of 'dict' and 'dict',failed
tests.integ.modin.series.test_aggregate,test_agg_series[data0-float32-<lambda>-False-False-01],"AssertionError: One of the passed functions has an invalid type: <class 'NoneType'>: None, only callable or string is acceptable.",failed
tests.integ.modin.series.test_aggregate,test_agg_series[data0-float32-<lambda>-False-False-11],"AssertionError: One of the passed functions has an invalid type: <class 'NoneType'>: None, only callable or string is acceptable.",failed
tests.integ.modin.series.test_aggregate,test_agg_series[data0-float32-<lambda>-False-False-12],"AssertionError: One of the passed functions has an invalid type: <class 'NoneType'>: None, only callable or string is acceptable.",failed
tests.integ.modin.series.test_aggregate,test_agg_series[data0-float32-<lambda>-False-True-21],"AssertionError: One of the passed functions has an invalid type: <class 'NoneType'>: None, only callable or string is acceptable.",failed
tests.integ.modin.series.test_aggregate,test_agg_series[data1-Float32-<lambda>-False-False-01],"AssertionError: One of the passed functions has an invalid type: <class 'NoneType'>: None, only callable or string is acceptable.",failed
tests.integ.modin.series.test_aggregate,test_agg_series[data1-Float32-<lambda>-False-False-11],"AssertionError: One of the passed functions has an invalid type: <class 'NoneType'>: None, only callable or string is acceptable.",failed
tests.integ.modin.series.test_aggregate,test_agg_series[data1-Float32-<lambda>-False-False-12],"AssertionError: One of the passed functions has an invalid type: <class 'NoneType'>: None, only callable or string is acceptable.",failed
tests.integ.modin.series.test_aggregate,test_agg_series[data1-Float32-<lambda>-False-True-21],"AssertionError: One of the passed functions has an invalid type: <class 'NoneType'>: None, only callable or string is acceptable.",failed
tests.integ.modin.series.test_aggregate,test_agg_series[data1-Float32-<lambda>-True-False-00],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_aggregate,test_agg_series[data2-Int64-<lambda>-False-False-01],"AssertionError: One of the passed functions has an invalid type: <class 'NoneType'>: None, only callable or string is acceptable.",failed
tests.integ.modin.series.test_aggregate,test_agg_series[data2-Int64-<lambda>-False-False-11],"AssertionError: One of the passed functions has an invalid type: <class 'NoneType'>: None, only callable or string is acceptable.",failed
tests.integ.modin.series.test_aggregate,test_agg_series[data2-Int64-<lambda>-False-False-12],"AssertionError: One of the passed functions has an invalid type: <class 'NoneType'>: None, only callable or string is acceptable.",failed
tests.integ.modin.series.test_aggregate,test_agg_series[data2-Int64-<lambda>-False-True-21],"AssertionError: One of the passed functions has an invalid type: <class 'NoneType'>: None, only callable or string is acceptable.",failed
tests.integ.modin.series.test_aggregate,test_agg_series[data2-Int64-<lambda>-True-False-00],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_aggregate,test_agg_series[data3-string-<lambda>-False-False-01],"AssertionError: One of the passed functions has an invalid type: <class 'NoneType'>: None, only callable or string is acceptable.",failed
tests.integ.modin.series.test_aggregate,test_agg_series[data3-string-<lambda>-False-False-11],"AssertionError: One of the passed functions has an invalid type: <class 'NoneType'>: None, only callable or string is acceptable.",failed
tests.integ.modin.series.test_aggregate,test_agg_series[data3-string-<lambda>-False-False-12],"AssertionError: One of the passed functions has an invalid type: <class 'NoneType'>: None, only callable or string is acceptable.",failed
tests.integ.modin.series.test_aggregate,test_agg_series[data3-string-<lambda>-False-True-21],"AssertionError: One of the passed functions has an invalid type: <class 'NoneType'>: None, only callable or string is acceptable.",failed
tests.integ.modin.series.test_aggregate,test_agg_series[data3-string-<lambda>-True-False-00],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_aggregate,test_agg_series[data3-string-<lambda>-True-False-01],"AssertionError: Input are different

Input classes are different
[left]:  str_
[right]: str",failed
tests.integ.modin.series.test_aggregate,test_agg_series[data4-datetime64[ns]-<lambda>-False-False-01],"AssertionError: One of the passed functions has an invalid type: <class 'NoneType'>: None, only callable or string is acceptable.",failed
tests.integ.modin.series.test_aggregate,test_agg_series[data4-datetime64[ns]-<lambda>-False-False-11],"AssertionError: One of the passed functions has an invalid type: <class 'NoneType'>: None, only callable or string is acceptable.",failed
tests.integ.modin.series.test_aggregate,test_agg_series[data4-datetime64[ns]-<lambda>-False-False-12],"AssertionError: One of the passed functions has an invalid type: <class 'NoneType'>: None, only callable or string is acceptable.",failed
tests.integ.modin.series.test_aggregate,test_agg_series[data4-datetime64[ns]-<lambda>-False-True-21],"AssertionError: One of the passed functions has an invalid type: <class 'NoneType'>: None, only callable or string is acceptable.",failed
tests.integ.modin.series.test_aggregate,test_duplicate_named_agg_funcs_succeeds,"AssertionError: One of the passed functions has an invalid type: <class 'NoneType'>: None, only callable or string is acceptable.",failed
tests.integ.modin.series.test_aggregate,test_min_max_with_mixed_str_numeric_type,TypeError: '>=' not supported between instances of 'int' and 'str',failed
tests.integ.modin.series.test_aggregate,test_string_aggregation_numeric_only[max],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_aggregate,test_string_aggregation_numeric_only[mean],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_aggregate,test_string_aggregation_numeric_only[median],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_aggregate,test_string_aggregation_numeric_only[min],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_aggregate,test_string_aggregation_numeric_only[std],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_aggregate,test_string_aggregation_numeric_only[sum],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_aggregate,test_string_aggregation_numeric_only[var],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_aggregate,test_string_sum_with_nulls,"TypeError: can only concatenate str (not ""int"") to str",failed
tests.integ.modin.series.test_aggregate,test_unsupported_due_to_concat,"[XPASS(strict)] requires concat(), which we cannot do with Timedelta.",failed
tests.integ.modin.series.test_aggregate,test_var_invalid,"AssertionError: Regex pattern did not match.
 Regex: 'timedelta64\\ type\\ does\\ not\\ support\\ var\\ operations'
 Input: ""'TimedeltaArray' with dtype timedelta64[ns] does not support reduction 'var'""",failed
tests.integ.modin.series.test_align,test_align_series_axis_1_negative,Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_align,test_align_series_copy_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_align,test_align_series_deprecated_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_align,test_align_series_fill_value_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_align,test_align_series_invalid_axis_negative,"AssertionError: Regex pattern did not match.
 Regex: 'No axis named 2 for object type Series'
 Input: 'No axis named 2 for object type DataFrame'",failed
tests.integ.modin.series.test_align,test_align_series_with_frame[inner],AssertionError,failed
tests.integ.modin.series.test_align,test_align_series_with_frame[left],AssertionError,failed
tests.integ.modin.series.test_align,test_align_series_with_frame[outer],AssertionError,failed
tests.integ.modin.series.test_align,test_align_series_with_frame[right],AssertionError,failed
tests.integ.modin.series.test_align,test_align_series_with_frame_axis_negative[inner],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_align,test_align_series_with_frame_axis_negative[left],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_align,test_align_series_with_frame_axis_negative[outer],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_align,test_align_series_with_frame_axis_negative[right],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_all_any,test_all_float_not_implemented[False-data0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_all_any,test_all_float_not_implemented[False-data1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_all_any,test_all_float_not_implemented[False-data2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_all_any,test_all_float_not_implemented[False-data3],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_all_any,test_all_float_not_implemented[True-data0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_all_any,test_all_float_not_implemented[True-data1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_all_any,test_all_float_not_implemented[True-data2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_all_any,test_all_float_not_implemented[True-data3],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_all_any,test_all_str_not_implemented[data0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_all_any,test_all_str_not_implemented[data1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_all_any,test_any_float_not_implemented[False-data0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_all_any,test_any_float_not_implemented[False-data1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_all_any,test_any_float_not_implemented[False-data2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_all_any,test_any_float_not_implemented[False-data3],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_all_any,test_any_float_not_implemented[True-data0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_all_any,test_any_float_not_implemented[True-data1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_all_any,test_any_float_not_implemented[True-data2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_all_any,test_any_float_not_implemented[True-data3],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_all_any,test_any_str_not_implemented[data0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_all_any,test_any_str_not_implemented[data1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_apply_and_map,test_3rd_party_package_mix_and_match[udf_packages0-session_packages0-apply],TODO: SNOW-1478188 Re-enable quarantined tests for 8.23,xfailed
tests.integ.modin.series.test_apply_and_map,test_3rd_party_package_mix_and_match[udf_packages0-session_packages0-map],TODO: SNOW-1478188 Re-enable quarantined tests for 8.23,xfailed
tests.integ.modin.series.test_apply_and_map,test_3rd_party_package_with_udf_annotation[scipy-7-apply],"TypeError: The input of UDF ""TESTDB_SNOWPANDAS"".""PUBLIC"".SNOWPARK_TEMP_FUNCTION_54TJREGDTE must be Column, column name, or a list of them",failed
tests.integ.modin.series.test_apply_and_map,test_3rd_party_package_with_udf_annotation[scipy-7-map],"TypeError: The input of UDF ""TESTDB_SNOWPANDAS"".""PUBLIC"".SNOWPARK_TEMP_FUNCTION_R32JEQV580 must be Column, column name, or a list of them",failed
tests.integ.modin.series.test_apply_and_map,test_3rd_party_package_with_udf_annotation[scipy<1.12.0-7-apply],"TypeError: The input of UDF ""TESTDB_SNOWPANDAS"".""PUBLIC"".SNOWPARK_TEMP_FUNCTION_DS7EMI9S6O must be Column, column name, or a list of them",failed
tests.integ.modin.series.test_apply_and_map,test_3rd_party_package_with_udf_annotation[scipy<1.12.0-7-map],"TypeError: The input of UDF ""TESTDB_SNOWPANDAS"".""PUBLIC"".SNOWPARK_TEMP_FUNCTION_ST4ZPNMMQE must be Column, column name, or a list of them",failed
tests.integ.modin.series.test_apply_and_map,test_3rd_party_package_with_udf_annotation[scipy>=1.0-7-apply],"TypeError: The input of UDF ""TESTDB_SNOWPANDAS"".""PUBLIC"".SNOWPARK_TEMP_FUNCTION_7GVKF1EDCF must be Column, column name, or a list of them",failed
tests.integ.modin.series.test_apply_and_map,test_3rd_party_package_with_udf_annotation[scipy>=1.0-7-map],"TypeError: The input of UDF ""TESTDB_SNOWPANDAS"".""PUBLIC"".SNOWPARK_TEMP_FUNCTION_ENM6PZ8EZS must be Column, column name, or a list of them",failed
tests.integ.modin.series.test_apply_and_map,test_SNOW_1344784_udf_decorator[apply],"TypeError: Cannot convert a Column object into bool: please use '&' for 'and', '|' for 'or', '~' for 'not' if you're building DataFrame filter expressions. For example, use df.filter((col1 > 1) & (col2 > 2)) instead of df.filter(col1 > 1 and col2 > 2).",failed
tests.integ.modin.series.test_apply_and_map,test_SNOW_1344784_udf_decorator[map],"TypeError: Cannot convert a Column object into bool: please use '&' for 'and', '|' for 'or', '~' for 'not' if you're building DataFrame filter expressions. For example, use df.filter((col1 > 1) & (col2 > 2)) instead of df.filter(col1 > 1 and col2 > 2).",failed
tests.integ.modin.series.test_apply_and_map,test_args_and_kwargs_with_snowpark_pandas_object_not_implemented,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_apply_and_map,test_basic_with_type_hints[apply_on_frame_with_timedelta_data_columns_returns_int-apply],[XPASS(strict)] ,failed
tests.integ.modin.series.test_apply_and_map,test_basic_with_type_hints[apply_on_frame_with_timedelta_data_columns_returns_int-map],[XPASS(strict)] ,failed
tests.integ.modin.series.test_apply_and_map,test_basic_with_type_hints[return_timedelta_scalar-apply],[XPASS(strict)] SNOW-1619940,failed
tests.integ.modin.series.test_apply_and_map,test_basic_with_type_hints[return_timedelta_scalar-map],[XPASS(strict)] SNOW-1619940,failed
tests.integ.modin.series.test_apply_and_map,test_basic_without_type_hints[apply_on_frame_with_timedelta_data_columns_returns_int-apply],[XPASS(strict)] ,failed
tests.integ.modin.series.test_apply_and_map,test_basic_without_type_hints[apply_on_frame_with_timedelta_data_columns_returns_int-map],[XPASS(strict)] ,failed
tests.integ.modin.series.test_apply_and_map,test_basic_without_type_hints[return_timedelta_scalar-apply],[XPASS(strict)] SNOW-1619940,failed
tests.integ.modin.series.test_apply_and_map,test_basic_without_type_hints[return_timedelta_scalar-map],[XPASS(strict)] SNOW-1619940,failed
tests.integ.modin.series.test_apply_and_map,test_date_time_timestamp[data0-str-str-expected_result0-apply],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1]
[left]:  [2023-01-01, None]
[right]: [2023-01-01 00:00:00, NaT]
At positional index 0, first diff: 2023-01-01 != 2023-01-01 00:00:00",failed
tests.integ.modin.series.test_apply_and_map,test_date_time_timestamp[data0-str-str-expected_result0-map],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1]
[left]:  [2023-01-01, None]
[right]: [2023-01-01 00:00:00, NaT]
At positional index 0, first diff: 2023-01-01 != 2023-01-01 00:00:00",failed
tests.integ.modin.series.test_apply_and_map,test_date_time_timestamp[data1-type-str-expected_result1-apply],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1]
[left]:  [<class 'datetime.date'>, <class 'NoneType'>]
[right]: [<class 'pandas._libs.tslibs.timestamps.Timestamp'>, <class 'pandas._libs.tslibs.nattype.NaTType'>]
At positional index 0, first diff: <class 'datetime.date'> != <class 'pandas._libs.tslibs.timestamps.Timestamp'>",failed
tests.integ.modin.series.test_apply_and_map,test_date_time_timestamp[data1-type-str-expected_result1-map],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1]
[left]:  [<class 'datetime.date'>, <class 'NoneType'>]
[right]: [<class 'pandas._libs.tslibs.timestamps.Timestamp'>, <class 'pandas._libs.tslibs.nattype.NaTType'>]
At positional index 0, first diff: <class 'datetime.date'> != <class 'pandas._libs.tslibs.timestamps.Timestamp'>",failed
tests.integ.modin.series.test_apply_and_map,test_date_time_timestamp[data2-str-str-expected_result2-apply],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1]
[left]:  [01:02:03, None]
[right]: [0 days 01:02:03, NaT]
At positional index 0, first diff: 01:02:03 != 0 days 01:02:03",failed
tests.integ.modin.series.test_apply_and_map,test_date_time_timestamp[data2-str-str-expected_result2-map],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1]
[left]:  [01:02:03, None]
[right]: [0 days 01:02:03, NaT]
At positional index 0, first diff: 01:02:03 != 0 days 01:02:03",failed
tests.integ.modin.series.test_apply_and_map,test_date_time_timestamp[data3-type-str-expected_result3-apply],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1]
[left]:  [<class 'datetime.time'>, <class 'NoneType'>]
[right]: [<class 'pandas._libs.tslibs.timedeltas.Timedelta'>, <class 'pandas._libs.tslibs.nattype.NaTType'>]
At positional index 0, first diff: <class 'datetime.time'> != <class 'pandas._libs.tslibs.timedeltas.Timedelta'>",failed
tests.integ.modin.series.test_apply_and_map,test_date_time_timestamp[data3-type-str-expected_result3-map],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1]
[left]:  [<class 'datetime.time'>, <class 'NoneType'>]
[right]: [<class 'pandas._libs.tslibs.timedeltas.Timedelta'>, <class 'pandas._libs.tslibs.nattype.NaTType'>]
At positional index 0, first diff: <class 'datetime.time'> != <class 'pandas._libs.tslibs.timedeltas.Timedelta'>",failed
tests.integ.modin.series.test_apply_and_map,test_date_time_timestamp[data5-type-str-expected_result5-apply],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1]
[left]:  [<class 'pandas._libs.tslibs.timestamps.Timestamp'>, <class 'pandas._libs.tslibs.nattype.NaTType'>]
[right]: [<class 'pandas._libs.tslibs.timestamps.Timestamp'>, <class 'pandas._libs.tslibs.nattype.NaTType'>]
At positional index 0, first diff: <class 'pandas._libs.tslibs.timestamps.Timestamp'> != <class 'pandas._libs.tslibs.timestamps.Timestamp'>",failed
tests.integ.modin.series.test_apply_and_map,test_date_time_timestamp[data5-type-str-expected_result5-map],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1]
[left]:  [<class 'pandas._libs.tslibs.timestamps.Timestamp'>, <class 'pandas._libs.tslibs.nattype.NaTType'>]
[right]: [<class 'pandas._libs.tslibs.timestamps.Timestamp'>, <class 'pandas._libs.tslibs.nattype.NaTType'>]
At positional index 0, first diff: <class 'pandas._libs.tslibs.timestamps.Timestamp'> != <class 'pandas._libs.tslibs.timestamps.Timestamp'>",failed
tests.integ.modin.series.test_apply_and_map,test_date_time_timestamp[data6-str-str-expected_result6-apply],"AssertionError: Series are different

Series values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [2023-01-01 01:02:03+00:00, 2023-01-01 01:02:03, None]
[right]: [2023-01-01 01:02:03+00:00, 2023-01-01 01:02:03-08:00, None]
At positional index 1, first diff: 2023-01-01 01:02:03 != 2023-01-01 01:02:03-08:00",failed
tests.integ.modin.series.test_apply_and_map,test_date_time_timestamp[data6-str-str-expected_result6-map],"AssertionError: Series are different

Series values are different (33.33333 %)
[index]: [0, 1, 2]
[left]:  [2023-01-01 01:02:03+00:00, 2023-01-01 01:02:03, None]
[right]: [2023-01-01 01:02:03+00:00, 2023-01-01 01:02:03-08:00, None]
At positional index 1, first diff: 2023-01-01 01:02:03 != 2023-01-01 01:02:03-08:00",failed
tests.integ.modin.series.test_apply_and_map,test_date_time_timestamp[data7-type-str-expected_result7-apply],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1]
[left]:  [<class 'pandas._libs.tslibs.timestamps.Timestamp'>, <class 'pandas._libs.tslibs.nattype.NaTType'>]
[right]: [<class 'pandas._libs.tslibs.timestamps.Timestamp'>, <class 'NoneType'>]
At positional index 0, first diff: <class 'pandas._libs.tslibs.timestamps.Timestamp'> != <class 'pandas._libs.tslibs.timestamps.Timestamp'>",failed
tests.integ.modin.series.test_apply_and_map,test_date_time_timestamp[data7-type-str-expected_result7-map],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1]
[left]:  [<class 'pandas._libs.tslibs.timestamps.Timestamp'>, <class 'pandas._libs.tslibs.nattype.NaTType'>]
[right]: [<class 'pandas._libs.tslibs.timestamps.Timestamp'>, <class 'NoneType'>]
At positional index 0, first diff: <class 'pandas._libs.tslibs.timestamps.Timestamp'> != <class 'pandas._libs.tslibs.timestamps.Timestamp'>",failed
tests.integ.modin.series.test_apply_and_map,test_defaultdict_missing_values_but_no_default_factory,Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_apply_and_map,test_dict[custom_defaultdict_empty],"AssertionError: Series are different

Series values are different (75.0 %)
[index]: [0, 1, 2, 3]
[left]:  [nan, nan, nan, nan]
[right]: [cat, dog, None, rabbit]
At positional index 0, first diff: nan != cat",failed
tests.integ.modin.series.test_apply_and_map,test_dict[custom_defaultdict_mapping_string_to_string],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_apply_and_map,test_incorrect_inferred_type,Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_apply_and_map,test_input_has_correct_type[data0-apply],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2, 3]
[left]:  [<class 'float'>, <class 'float'>, <class 'float'>, <class 'float'>]
[right]: [<class 'float'>, <class 'float'>, <class 'float'>, <class 'float'>]
At positional index 0, first diff: <class 'float'> != <class 'float'>",failed
tests.integ.modin.series.test_apply_and_map,test_input_has_correct_type[data0-map],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2, 3]
[left]:  [<class 'float'>, <class 'float'>, <class 'float'>, <class 'float'>]
[right]: [<class 'float'>, <class 'float'>, <class 'float'>, <class 'float'>]
At positional index 0, first diff: <class 'float'> != <class 'float'>",failed
tests.integ.modin.series.test_apply_and_map,test_input_has_correct_type[data1-apply],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2, 3]
[left]:  [<class 'float'>, <class 'float'>, <class 'float'>, <class 'float'>]
[right]: [<class 'float'>, <class 'float'>, <class 'float'>, <class 'float'>]
At positional index 0, first diff: <class 'float'> != <class 'float'>",failed
tests.integ.modin.series.test_apply_and_map,test_input_has_correct_type[data1-map],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2, 3]
[left]:  [<class 'float'>, <class 'float'>, <class 'float'>, <class 'float'>]
[right]: [<class 'float'>, <class 'float'>, <class 'float'>, <class 'float'>]
At positional index 0, first diff: <class 'float'> != <class 'float'>",failed
tests.integ.modin.series.test_apply_and_map,test_input_has_correct_type[data2-apply],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2, 3]
[left]:  [<class 'str'>, <class 'str'>, <class 'str'>, <class 'str'>]
[right]: [<class 'str'>, <class 'str'>, <class 'str'>, <class 'str'>]
At positional index 0, first diff: <class 'str'> != <class 'str'>",failed
tests.integ.modin.series.test_apply_and_map,test_input_has_correct_type[data2-map],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2, 3]
[left]:  [<class 'str'>, <class 'str'>, <class 'str'>, <class 'str'>]
[right]: [<class 'str'>, <class 'str'>, <class 'str'>, <class 'str'>]
At positional index 0, first diff: <class 'str'> != <class 'str'>",failed
tests.integ.modin.series.test_apply_and_map,test_input_has_correct_type[data3-apply],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [<class 'float'>, <class 'float'>, <class 'float'>]
[right]: [<class 'float'>, <class 'float'>, <class 'float'>]
At positional index 0, first diff: <class 'float'> != <class 'float'>",failed
tests.integ.modin.series.test_apply_and_map,test_input_has_correct_type[data3-map],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [<class 'float'>, <class 'float'>, <class 'float'>]
[right]: [<class 'float'>, <class 'float'>, <class 'float'>]
At positional index 0, first diff: <class 'float'> != <class 'float'>",failed
tests.integ.modin.series.test_apply_and_map,test_input_has_correct_type[data4-apply],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [<class 'bool'>, <class 'bool'>, <class 'bool'>]
[right]: [<class 'bool'>, <class 'bool'>, <class 'bool'>]
At positional index 0, first diff: <class 'bool'> != <class 'bool'>",failed
tests.integ.modin.series.test_apply_and_map,test_input_has_correct_type[data4-map],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [<class 'bool'>, <class 'bool'>, <class 'bool'>]
[right]: [<class 'bool'>, <class 'bool'>, <class 'bool'>]
At positional index 0, first diff: <class 'bool'> != <class 'bool'>",failed
tests.integ.modin.series.test_apply_and_map,test_input_has_correct_type[data5-apply],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1]
[left]:  [<class 'bytes'>, <class 'bytes'>]
[right]: [<class 'bytes'>, <class 'bytes'>]
At positional index 0, first diff: <class 'bytes'> != <class 'bytes'>",failed
tests.integ.modin.series.test_apply_and_map,test_input_has_correct_type[data5-map],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1]
[left]:  [<class 'bytes'>, <class 'bytes'>]
[right]: [<class 'bytes'>, <class 'bytes'>]
At positional index 0, first diff: <class 'bytes'> != <class 'bytes'>",failed
tests.integ.modin.series.test_apply_and_map,test_input_has_correct_type[data6-apply],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [<class 'int'>, <class 'int'>, <class 'int'>]
[right]: [<class 'int'>, <class 'int'>, <class 'int'>]
At positional index 0, first diff: <class 'int'> != <class 'int'>",failed
tests.integ.modin.series.test_apply_and_map,test_input_has_correct_type[data6-map],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [<class 'int'>, <class 'int'>, <class 'int'>]
[right]: [<class 'int'>, <class 'int'>, <class 'int'>]
At positional index 0, first diff: <class 'int'> != <class 'int'>",failed
tests.integ.modin.series.test_apply_and_map,test_input_has_correct_type[data7-apply],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [<class 'int'>, <class 'int'>, <class 'int'>]
[right]: [<class 'int'>, <class 'int'>, <class 'int'>]
At positional index 0, first diff: <class 'int'> != <class 'int'>",failed
tests.integ.modin.series.test_apply_and_map,test_input_has_correct_type[data7-map],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [<class 'int'>, <class 'int'>, <class 'int'>]
[right]: [<class 'int'>, <class 'int'>, <class 'int'>]
At positional index 0, first diff: <class 'int'> != <class 'int'>",failed
tests.integ.modin.series.test_apply_and_map,test_input_has_correct_type[data8-apply],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1]
[left]:  [<class 'float'>, <class 'float'>]
[right]: [<class 'float'>, <class 'float'>]
At positional index 0, first diff: <class 'float'> != <class 'float'>",failed
tests.integ.modin.series.test_apply_and_map,test_input_has_correct_type[data8-map],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1]
[left]:  [<class 'float'>, <class 'float'>]
[right]: [<class 'float'>, <class 'float'>]
At positional index 0, first diff: <class 'float'> != <class 'float'>",failed
tests.integ.modin.series.test_apply_and_map,test_input_has_correct_type[data9-apply],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [<class 'float'>, <class 'float'>, <class 'float'>]
[right]: [<class 'float'>, <class 'float'>, <class 'float'>]
At positional index 0, first diff: <class 'float'> != <class 'float'>",failed
tests.integ.modin.series.test_apply_and_map,test_input_has_correct_type[data9-map],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [<class 'float'>, <class 'float'>, <class 'float'>]
[right]: [<class 'float'>, <class 'float'>, <class 'float'>]
At positional index 0, first diff: <class 'float'> != <class 'float'>",failed
tests.integ.modin.series.test_apply_and_map,test_input_has_correct_type[input_timedleta_columns-apply],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1]
[left]:  [<class 'pandas._libs.tslibs.timedeltas.Timedelta'>, <class 'pandas._libs.tslibs.timedeltas.Timedelta'>]
[right]: [<class 'pandas._libs.tslibs.timedeltas.Timedelta'>, <class 'pandas._libs.tslibs.timedeltas.Timedelta'>]
At positional index 0, first diff: <class 'pandas._libs.tslibs.timedeltas.Timedelta'> != <class 'pandas._libs.tslibs.timedeltas.Timedelta'>",failed
tests.integ.modin.series.test_apply_and_map,test_input_has_correct_type[input_timedleta_columns-map],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1]
[left]:  [<class 'pandas._libs.tslibs.timedeltas.Timedelta'>, <class 'pandas._libs.tslibs.timedeltas.Timedelta'>]
[right]: [<class 'pandas._libs.tslibs.timedeltas.Timedelta'>, <class 'pandas._libs.tslibs.timedeltas.Timedelta'>]
At positional index 0, first diff: <class 'pandas._libs.tslibs.timedeltas.Timedelta'> != <class 'pandas._libs.tslibs.timedeltas.Timedelta'>",failed
tests.integ.modin.series.test_apply_and_map,test_input_series_with_timedelta_index[apply],[XPASS(strict)] ,failed
tests.integ.modin.series.test_apply_and_map,test_input_series_with_timedelta_index[map],[XPASS(strict)] ,failed
tests.integ.modin.series.test_apply_and_map,test_input_type_str_list_dict[func0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_apply_and_map,test_input_type_str_list_dict[func1],AttributeError: 'Series' object has no attribute 'columns',failed
tests.integ.modin.series.test_apply_and_map,test_invalid_arg_type,"AssertionError: Regex pattern did not match.
 Regex: '`arg`\\ should\\ be\\ a\\ callable,\\ a\\ Mapping,\\ or\\ a\\ pandas\\ Series,\\ but\\ instead\\ it\\ is\\ of\\ type\\ int'
 Input: ""'int' object is not callable""",failed
tests.integ.modin.series.test_apply_and_map,test_json_serializable_output_negative[apply],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_apply_and_map,test_json_serializable_output_negative[map],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_apply_and_map,test_na_action_ignore_not_implemented,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_apply_and_map,test_null_nan_input[apply],"assert [""<class 'Non... 'NoneType'>""] == [""<class 'pan...ing.NAType'>""]
  At index 0 diff: ""<class 'NoneType'>"" != ""<class 'pandas._libs.missing.NAType'>""
  Full diff:
    [
  -  ""<class 'pandas._libs.missing.NAType'>"",
  -  ""<class 'pandas._libs.missing.NAType'>"",
  +  ""<class 'NoneType'>"",
  +  ""<class 'NoneType'>"",
    ]",failed
tests.integ.modin.series.test_apply_and_map,test_null_nan_input[map],"assert [""<class 'Non... 'NoneType'>""] == [""<class 'pan...ing.NAType'>""]
  At index 0 diff: ""<class 'NoneType'>"" != ""<class 'pandas._libs.missing.NAType'>""
  Full diff:
    [
  -  ""<class 'pandas._libs.missing.NAType'>"",
  -  ""<class 'pandas._libs.missing.NAType'>"",
  +  ""<class 'NoneType'>"",
  +  ""<class 'NoneType'>"",
    ]",failed
tests.integ.modin.series.test_argmax_argmin,test_argmax_argmin_series[False-argmax-timedelta],NotImplementedError,failed
tests.integ.modin.series.test_argmax_argmin,test_argmax_argmin_series[False-argmin-timedelta],NotImplementedError,failed
tests.integ.modin.series.test_argmax_argmin,test_series_argmax_argmin_with_multiindex_negative[False-argmax],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_argmax_argmin,test_series_argmax_argmin_with_multiindex_negative[False-argmin],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_argmax_argmin,test_series_argmax_argmin_with_multiindex_negative[True-argmax],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_argmax_argmin,test_series_argmax_argmin_with_multiindex_negative[True-argmin],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_astype,test_astype_basic[bool_-boolean],"AssertionError: assert BooleanDtype == dtype('bool')
 +  where BooleanDtype = 0    False\n1     True\n2     True\n3     True\ndtype: boolean.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[bool_-float160],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    1.0\n3    1.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[bool_-float161],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    1.0\n3    1.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[bool_-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    1.0\n3    1.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[bool_-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    1\n3    1\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[bool_-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    1\n3    1\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[bool_-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    1\n3    1\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[bool_-to_dtype363],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    1.0\n3    1.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[bool_-to_dtype364],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    1.0\n3    1.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[bool_-to_dtype365],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    1\n3    1\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[bool_-to_dtype366],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    1\n3    1\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[bool_-to_dtype367],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    1\n3    1\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[bool_-to_dtype368],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    1\n3    1\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[bool_-to_dtype369],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    1\n3    1\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[bool_-to_dtype370],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    1\n3    1\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[bool_-to_dtype371],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    1\n3    1\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[bool_-to_dtype372],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    1\n3    1\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[bool_-to_dtype373],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    False\n1     True\n2     True\n3     True\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[bool_-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    1\n3    1\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[bool_-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    1\n3    1\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[bool_-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    1\n3    1\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[bool_-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    1\n3    1\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[boolean-boolean],"AssertionError: assert BooleanDtype == dtype('bool')
 +  where BooleanDtype = 0     True\n1    False\n2    False\n3     True\ndtype: boolean.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[boolean-float160],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    1.0\n1    0.0\n2    0.0\n3    1.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[boolean-float161],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    1.0\n1    0.0\n2    0.0\n3    1.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[boolean-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    1.0\n1    0.0\n2    0.0\n3    1.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[boolean-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    1\n1    0\n2    0\n3    1\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[boolean-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    1\n1    0\n2    0\n3    1\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[boolean-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    1\n1    0\n2    0\n3    1\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[boolean-to_dtype421],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    1.0\n1    0.0\n2    0.0\n3    1.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[boolean-to_dtype422],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    1.0\n1    0.0\n2    0.0\n3    1.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[boolean-to_dtype423],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    1\n1    0\n2    0\n3    1\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[boolean-to_dtype424],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    1\n1    0\n2    0\n3    1\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[boolean-to_dtype425],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    1\n1    0\n2    0\n3    1\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[boolean-to_dtype426],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    1\n1    0\n2    0\n3    1\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[boolean-to_dtype427],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    1\n1    0\n2    0\n3    1\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[boolean-to_dtype428],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    1\n1    0\n2    0\n3    1\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[boolean-to_dtype429],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    1\n1    0\n2    0\n3    1\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[boolean-to_dtype430],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    1\n1    0\n2    0\n3    1\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[boolean-to_dtype431],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0     True\n1    False\n2    False\n3     True\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[boolean-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    1\n1    0\n2    0\n3    1\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[boolean-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    1\n1    0\n2    0\n3    1\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[boolean-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    1\n1    0\n2    0\n3    1\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[boolean-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    1\n1    0\n2    0\n3    1\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[datetime64[ns]-boolean],TypeError: Need to pass bool-like values,failed
tests.integ.modin.series.test_astype,test_astype_basic[datetime64[ns]-float160],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: 'Cannot cast DatetimeArray to dtype float16'",failed
tests.integ.modin.series.test_astype,test_astype_basic[datetime64[ns]-float161],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: 'Cannot cast DatetimeArray to dtype float16'",failed
tests.integ.modin.series.test_astype,test_astype_basic[datetime64[ns]-float32],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: 'Cannot cast DatetimeArray to dtype float32'",failed
tests.integ.modin.series.test_astype,test_astype_basic[datetime64[ns]-float64],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: 'Cannot cast DatetimeArray to dtype float64'",failed
tests.integ.modin.series.test_astype,test_astype_basic[datetime64[ns]-float],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: 'Cannot cast DatetimeArray to dtype float64'",failed
tests.integ.modin.series.test_astype,test_astype_basic[datetime64[ns]-int16],TypeError: Converting from datetime64[ns] to int16 is not supported. Do obj.astype('int64').astype(dtype) instead,failed
tests.integ.modin.series.test_astype,test_astype_basic[datetime64[ns]-int32],TypeError: Converting from datetime64[ns] to int32 is not supported. Do obj.astype('int64').astype(dtype) instead,failed
tests.integ.modin.series.test_astype,test_astype_basic[datetime64[ns]-int8],TypeError: Converting from datetime64[ns] to int8 is not supported. Do obj.astype('int64').astype(dtype) instead,failed
tests.integ.modin.series.test_astype,test_astype_basic[datetime64[ns]-to_dtype394],TypeError: datetime64[ns] cannot be converted to IntegerDtype,failed
tests.integ.modin.series.test_astype,test_astype_basic[datetime64[ns]-to_dtype395],TypeError: datetime64[ns] cannot be converted to IntegerDtype,failed
tests.integ.modin.series.test_astype,test_astype_basic[datetime64[ns]-to_dtype396],TypeError: datetime64[ns] cannot be converted to IntegerDtype,failed
tests.integ.modin.series.test_astype,test_astype_basic[datetime64[ns]-to_dtype397],TypeError: datetime64[ns] cannot be converted to IntegerDtype,failed
tests.integ.modin.series.test_astype,test_astype_basic[datetime64[ns]-to_dtype398],TypeError: datetime64[ns] cannot be converted to IntegerDtype,failed
tests.integ.modin.series.test_astype,test_astype_basic[datetime64[ns]-to_dtype399],TypeError: datetime64[ns] cannot be converted to IntegerDtype,failed
tests.integ.modin.series.test_astype,test_astype_basic[datetime64[ns]-to_dtype400],TypeError: datetime64[ns] cannot be converted to IntegerDtype,failed
tests.integ.modin.series.test_astype,test_astype_basic[datetime64[ns]-to_dtype401],TypeError: datetime64[ns] cannot be converted to IntegerDtype,failed
tests.integ.modin.series.test_astype,test_astype_basic[datetime64[ns]-to_dtype402],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    1970-01-01 00:00:00.000000000\n1    1970-01-01 00:00:00.000000001\n2    1970-01-01 00:00:00.000000002\n3    1970-01-01 00:00:00.000000003\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[datetime64[ns]-uint16],TypeError: Converting from datetime64[ns] to uint16 is not supported. Do obj.astype('int64').astype(dtype) instead,failed
tests.integ.modin.series.test_astype,test_astype_basic[datetime64[ns]-uint32],TypeError: Converting from datetime64[ns] to uint32 is not supported. Do obj.astype('int64').astype(dtype) instead,failed
tests.integ.modin.series.test_astype,test_astype_basic[datetime64[ns]-uint64],TypeError: Converting from datetime64[ns] to uint64 is not supported. Do obj.astype('int64').astype(dtype) instead,failed
tests.integ.modin.series.test_astype,test_astype_basic[datetime64[ns]-uint8],TypeError: Converting from datetime64[ns] to uint8 is not supported. Do obj.astype('int64').astype(dtype) instead,failed
tests.integ.modin.series.test_astype,test_astype_basic[float-boolean],TypeError: Need to pass bool-like values,failed
tests.integ.modin.series.test_astype,test_astype_basic[float-float160],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float-float161],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float-str],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2, 3]
[left]:  [0.0, 1.0, 2.0, 3.0]
[right]: [0, 1, 2, 3]
At positional index 0, first diff: 0.0 != 0",failed
tests.integ.modin.series.test_astype,test_astype_basic[float-to_dtype798],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float-to_dtype799],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float-to_dtype800],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float-to_dtype801],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float-to_dtype802],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float-to_dtype803],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float-to_dtype804],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float-to_dtype805],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float-to_dtype806],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float-to_dtype807],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float-to_dtype808],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-boolean0],TypeError: Need to pass bool-like values,failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-boolean1],TypeError: Need to pass bool-like values,failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-float160],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-float161],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-float162],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-float163],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-float320],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-float321],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-int160],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-int161],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-int320],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-int321],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-int80],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-int81],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-str0],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2, 3]
[left]:  [0.0, 1.0, 2.0, 3.0]
[right]: [0, 1, 2, 3]
At positional index 0, first diff: 0.0 != 0",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-str1],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2, 3]
[left]:  [0.0, 1.0, 2.0, 3.0]
[right]: [0, 1, 2, 3]
At positional index 0, first diff: 0.0 != 0",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-to_dtype276],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-to_dtype277],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-to_dtype278],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-to_dtype279],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-to_dtype280],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-to_dtype281],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-to_dtype282],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-to_dtype283],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-to_dtype284],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-to_dtype285],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-to_dtype286],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-to_dtype305],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-to_dtype306],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-to_dtype307],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-to_dtype308],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-to_dtype309],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-to_dtype310],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-to_dtype311],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-to_dtype312],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-to_dtype313],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-to_dtype314],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-to_dtype315],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-uint160],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-uint161],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-uint320],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-uint321],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-uint640],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-uint641],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-uint80],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float16-uint81],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-boolean],TypeError: Need to pass bool-like values,failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-float160],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-float161],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-str],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2, 3]
[left]:  [0.0, 1.0, 2.0, 3.0]
[right]: [0, 1, 2, 3]
At positional index 0, first diff: 0.0 != 0",failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-to_dtype247],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-to_dtype248],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-to_dtype249],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-to_dtype250],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-to_dtype251],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-to_dtype252],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-to_dtype253],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-to_dtype254],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-to_dtype255],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-to_dtype256],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-to_dtype257],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float32-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-boolean],TypeError: Need to pass bool-like values,failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-float160],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-float161],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-str],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2, 3]
[left]:  [0.0, 1.0, 2.0, 3.0]
[right]: [0, 1, 2, 3]
At positional index 0, first diff: 0.0 != 0",failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-to_dtype334],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-to_dtype335],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-to_dtype336],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-to_dtype337],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-to_dtype338],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-to_dtype339],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-to_dtype340],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-to_dtype341],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-to_dtype342],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-to_dtype343],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-to_dtype344],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[float64-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype436-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype437-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype438-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype439-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype440-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype441-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype442-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype443-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype444-float16],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype445-float16],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype449-boolean],"AssertionError: assert BooleanDtype == dtype('bool')
 +  where BooleanDtype = 0    False\n1     True\n2     True\n3     True\ndtype: boolean.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype450-to_dtype450],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype451-to_dtype451],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype452-to_dtype452],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype453-to_dtype453],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype454-to_dtype454],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype455-to_dtype455],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype456-to_dtype456],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype457-to_dtype457],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype458-to_dtype458],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype459-to_dtype459],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype460-to_dtype460],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype463-str],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2, 3]
[left]:  [0.0, 1.0, 2.0, 3.0]
[right]: [0, 1, 2, 3]
At positional index 0, first diff: 0.0 != 0",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype465-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype466-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype467-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype468-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype469-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype470-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype471-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype472-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype473-float16],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype474-float16],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype478-boolean],"AssertionError: assert BooleanDtype == dtype('bool')
 +  where BooleanDtype = 0    False\n1     True\n2     True\n3     True\ndtype: boolean.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype479-to_dtype479],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype480-to_dtype480],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype481-to_dtype481],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype482-to_dtype482],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype483-to_dtype483],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype484-to_dtype484],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype485-to_dtype485],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype486-to_dtype486],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype487-to_dtype487],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype488-to_dtype488],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype489-to_dtype489],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype492-str],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2, 3]
[left]:  [0.0, 1.0, 2.0, 3.0]
[right]: [0, 1, 2, 3]
At positional index 0, first diff: 0.0 != 0",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype494-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype495-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype496-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype497-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype498-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype499-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype500-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype501-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype502-float16],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype503-float16],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype507-boolean],"AssertionError: assert BooleanDtype == dtype('bool')
 +  where BooleanDtype = 0    False\n1     True\n2     True\n3     True\ndtype: boolean.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype508-to_dtype508],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype509-to_dtype509],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype510-to_dtype510],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype511-to_dtype511],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype512-to_dtype512],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype513-to_dtype513],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype514-to_dtype514],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype515-to_dtype515],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype516-to_dtype516],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype517-to_dtype517],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype518-to_dtype518],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0\n1    1\n2    2\n3    3\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype523-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype524-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype525-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype526-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype527-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype528-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype529-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype530-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype531-float16],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype532-float16],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype536-boolean],"AssertionError: assert BooleanDtype == dtype('bool')
 +  where BooleanDtype = 0    False\n1     True\n2     True\n3     True\ndtype: boolean.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype537-to_dtype537],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype538-to_dtype538],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype539-to_dtype539],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype540-to_dtype540],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype541-to_dtype541],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype542-to_dtype542],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype543-to_dtype543],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype544-to_dtype544],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype545-to_dtype545],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype546-to_dtype546],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype547-to_dtype547],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0\n1    1\n2    2\n3    3\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype552-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype553-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype554-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype555-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype556-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype557-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype558-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype559-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype560-float16],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype561-float16],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype565-boolean],"AssertionError: assert BooleanDtype == dtype('bool')
 +  where BooleanDtype = 0    False\n1     True\n2     True\n3     True\ndtype: boolean.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype566-to_dtype566],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype567-to_dtype567],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype568-to_dtype568],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype569-to_dtype569],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype570-to_dtype570],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype571-to_dtype571],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype572-to_dtype572],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype573-to_dtype573],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype574-to_dtype574],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype575-to_dtype575],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype576-to_dtype576],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0\n1    1\n2    2\n3    3\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype581-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype582-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype583-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype584-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype585-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype586-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype587-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype588-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype589-float16],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype590-float16],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype594-boolean],"AssertionError: assert BooleanDtype == dtype('bool')
 +  where BooleanDtype = 0    False\n1     True\n2     True\n3     True\ndtype: boolean.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype595-to_dtype595],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype596-to_dtype596],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype597-to_dtype597],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype598-to_dtype598],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype599-to_dtype599],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype600-to_dtype600],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype601-to_dtype601],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype602-to_dtype602],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype603-to_dtype603],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype604-to_dtype604],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype605-to_dtype605],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0\n1    1\n2    2\n3    3\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype610-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype611-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype612-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype613-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype614-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype615-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype616-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype617-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype618-float16],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype619-float16],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype623-boolean],"AssertionError: assert BooleanDtype == dtype('bool')
 +  where BooleanDtype = 0    False\n1     True\n2     True\n3     True\ndtype: boolean.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype624-to_dtype624],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype625-to_dtype625],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype626-to_dtype626],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype627-to_dtype627],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype628-to_dtype628],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype629-to_dtype629],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype630-to_dtype630],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype631-to_dtype631],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype632-to_dtype632],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype633-to_dtype633],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype634-to_dtype634],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0\n1    1\n2    2\n3    3\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype639-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype640-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype641-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype642-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype643-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype644-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype645-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype646-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype647-float16],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype648-float16],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype652-boolean],"AssertionError: assert BooleanDtype == dtype('bool')
 +  where BooleanDtype = 0    False\n1     True\n2     True\n3     True\ndtype: boolean.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype653-to_dtype653],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype654-to_dtype654],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype655-to_dtype655],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype656-to_dtype656],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype657-to_dtype657],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype658-to_dtype658],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype659-to_dtype659],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype660-to_dtype660],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype661-to_dtype661],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype662-to_dtype662],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype663-to_dtype663],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0\n1    1\n2    2\n3    3\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype668-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype669-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype670-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype671-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype672-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype673-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype674-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype675-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype676-float16],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype677-float16],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype681-boolean],"AssertionError: assert BooleanDtype == dtype('bool')
 +  where BooleanDtype = 0    False\n1     True\n2     True\n3     True\ndtype: boolean.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype682-to_dtype682],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype683-to_dtype683],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype684-to_dtype684],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype685-to_dtype685],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype686-to_dtype686],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype687-to_dtype687],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype688-to_dtype688],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype689-to_dtype689],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype690-to_dtype690],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype691-to_dtype691],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype692-to_dtype692],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0\n1    1\n2    2\n3    3\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype697-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype698-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype699-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype700-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype701-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype702-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype703-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype704-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype705-float16],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype706-float16],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype710-boolean],"AssertionError: assert BooleanDtype == dtype('bool')
 +  where BooleanDtype = 0    False\n1     True\n2     True\n3     True\ndtype: boolean.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype711-to_dtype711],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype712-to_dtype712],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype713-to_dtype713],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype714-to_dtype714],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype715-to_dtype715],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype716-to_dtype716],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype717-to_dtype717],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype718-to_dtype718],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype719-to_dtype719],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype720-to_dtype720],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype721-to_dtype721],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0\n1    1\n2    2\n3    3\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype726-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype727-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype728-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype729-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype730-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype731-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype732-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype733-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype734-float16],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype735-float16],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype738-datetime64[ns]],"pandas._libs.tslibs.parsing.DateParseError: day is out of range for month: 0, at position 0",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype739-boolean],TypeError: Need to pass bool-like values,failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype740-to_dtype740],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype741-to_dtype741],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype742-to_dtype742],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype743-to_dtype743],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype744-to_dtype744],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype745-to_dtype745],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype746-to_dtype746],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype747-to_dtype747],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype748-to_dtype748],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype749-to_dtype749],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[from_dtype750-to_dtype750],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0\n1    1\n2    2\n3    3\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int-boolean],TypeError: Need to pass bool-like values,failed
tests.integ.modin.series.test_astype,test_astype_basic[int-float160],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int-float161],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int-to_dtype769],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int-to_dtype770],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int-to_dtype771],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int-to_dtype772],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int-to_dtype773],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int-to_dtype774],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int-to_dtype775],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int-to_dtype776],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int-to_dtype777],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int-to_dtype778],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int-to_dtype779],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0\n1    1\n2    2\n3    3\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int16-boolean],TypeError: Need to pass bool-like values,failed
tests.integ.modin.series.test_astype,test_astype_basic[int16-float160],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int16-float161],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int16-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int16-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int16-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int16-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int16-to_dtype131],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int16-to_dtype132],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int16-to_dtype133],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int16-to_dtype134],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int16-to_dtype135],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int16-to_dtype136],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int16-to_dtype137],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int16-to_dtype138],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int16-to_dtype139],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int16-to_dtype140],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int16-to_dtype141],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0\n1    1\n2    2\n3    3\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int16-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int16-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int16-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int16-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int32-boolean],TypeError: Need to pass bool-like values,failed
tests.integ.modin.series.test_astype,test_astype_basic[int32-float160],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int32-float161],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int32-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int32-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int32-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int32-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int32-to_dtype73],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int32-to_dtype74],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int32-to_dtype75],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int32-to_dtype76],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int32-to_dtype77],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int32-to_dtype78],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int32-to_dtype79],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int32-to_dtype80],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int32-to_dtype81],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int32-to_dtype82],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int32-to_dtype83],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0\n1    1\n2    2\n3    3\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int32-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int32-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int32-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int32-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int64-boolean],TypeError: Need to pass bool-like values,failed
tests.integ.modin.series.test_astype,test_astype_basic[int64-float160],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int64-float161],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int64-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int64-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int64-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int64-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int64-to_dtype15],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int64-to_dtype16],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int64-to_dtype17],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int64-to_dtype18],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int64-to_dtype19],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int64-to_dtype20],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int64-to_dtype21],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int64-to_dtype22],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int64-to_dtype23],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int64-to_dtype24],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int64-to_dtype25],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0\n1    1\n2    2\n3    3\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int64-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int64-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int64-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int64-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int8-boolean],TypeError: Need to pass bool-like values,failed
tests.integ.modin.series.test_astype,test_astype_basic[int8-float160],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int8-float161],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int8-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int8-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int8-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int8-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int8-to_dtype189],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int8-to_dtype190],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int8-to_dtype191],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int8-to_dtype192],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int8-to_dtype193],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int8-to_dtype194],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int8-to_dtype195],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int8-to_dtype196],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int8-to_dtype197],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int8-to_dtype198],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int8-to_dtype199],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0\n1    1\n2    2\n3    3\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int8-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int8-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int8-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[int8-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[str-boolean],TypeError: Need to pass bool-like values,failed
tests.integ.modin.series.test_astype,test_astype_basic[str-datetime64[ns]],"pandas._libs.tslibs.parsing.DateParseError: day is out of range for month: 0, at position 0",failed
tests.integ.modin.series.test_astype,test_astype_basic[str-float160],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[str-float161],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[str-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[str-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[str-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[str-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[str-to_dtype827],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[str-to_dtype828],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[str-to_dtype829],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[str-to_dtype830],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[str-to_dtype831],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[str-to_dtype832],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[str-to_dtype833],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[str-to_dtype834],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[str-to_dtype835],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[str-to_dtype836],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[str-to_dtype837],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0\n1    1\n2    2\n3    3\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[str-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[str-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[str-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[str-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint16-boolean],TypeError: Need to pass bool-like values,failed
tests.integ.modin.series.test_astype,test_astype_basic[uint16-float160],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint16-float161],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint16-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint16-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint16-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint16-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint16-to_dtype160],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint16-to_dtype161],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint16-to_dtype162],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint16-to_dtype163],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint16-to_dtype164],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint16-to_dtype165],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint16-to_dtype166],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint16-to_dtype167],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint16-to_dtype168],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint16-to_dtype169],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint16-to_dtype170],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0\n1    1\n2    2\n3    3\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint16-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint16-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint16-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint16-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint32-boolean],TypeError: Need to pass bool-like values,failed
tests.integ.modin.series.test_astype,test_astype_basic[uint32-float160],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint32-float161],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint32-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint32-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint32-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint32-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint32-to_dtype102],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint32-to_dtype103],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint32-to_dtype104],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint32-to_dtype105],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint32-to_dtype106],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint32-to_dtype107],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint32-to_dtype108],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint32-to_dtype109],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint32-to_dtype110],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint32-to_dtype111],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint32-to_dtype112],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0\n1    1\n2    2\n3    3\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint32-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint32-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint32-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint32-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint64-boolean],TypeError: Need to pass bool-like values,failed
tests.integ.modin.series.test_astype,test_astype_basic[uint64-float160],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint64-float161],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint64-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint64-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint64-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint64-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint64-to_dtype44],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint64-to_dtype45],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint64-to_dtype46],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint64-to_dtype47],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint64-to_dtype48],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint64-to_dtype49],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint64-to_dtype50],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint64-to_dtype51],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint64-to_dtype52],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint64-to_dtype53],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint64-to_dtype54],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0\n1    1\n2    2\n3    3\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint64-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint64-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint64-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint64-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint8-boolean],TypeError: Need to pass bool-like values,failed
tests.integ.modin.series.test_astype,test_astype_basic[uint8-float160],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint8-float161],"AssertionError: assert dtype('float16') == dtype('float64')
 +  where dtype('float16') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint8-float32],"AssertionError: assert dtype('float32') == dtype('float64')
 +  where dtype('float32') = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint8-int16],"AssertionError: assert dtype('int16') == dtype('int64')
 +  where dtype('int16') = 0    0\n1    1\n2    2\n3    3\ndtype: int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint8-int32],"AssertionError: assert dtype('int32') == dtype('int64')
 +  where dtype('int32') = 0    0\n1    1\n2    2\n3    3\ndtype: int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint8-int8],"AssertionError: assert dtype('int8') == dtype('int64')
 +  where dtype('int8') = 0    0\n1    1\n2    2\n3    3\ndtype: int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint8-to_dtype218],"AssertionError: assert Float32Dtype() == dtype('float64')
 +  where Float32Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint8-to_dtype219],"AssertionError: assert Float64Dtype() == dtype('float64')
 +  where Float64Dtype() = 0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: Float64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint8-to_dtype220],"AssertionError: assert Int64Dtype() == dtype('int64')
 +  where Int64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint8-to_dtype221],"AssertionError: assert UInt64Dtype() == dtype('int64')
 +  where UInt64Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint8-to_dtype222],"AssertionError: assert Int32Dtype() == dtype('int64')
 +  where Int32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint8-to_dtype223],"AssertionError: assert UInt32Dtype() == dtype('int64')
 +  where UInt32Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint8-to_dtype224],"AssertionError: assert Int16Dtype() == dtype('int64')
 +  where Int16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint8-to_dtype225],"AssertionError: assert UInt16Dtype() == dtype('int64')
 +  where UInt16Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint8-to_dtype226],"AssertionError: assert Int8Dtype() == dtype('int64')
 +  where Int8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: Int8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint8-to_dtype227],"AssertionError: assert UInt8Dtype() == dtype('int64')
 +  where UInt8Dtype() = 0    0\n1    1\n2    2\n3    3\ndtype: UInt8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint8-to_dtype228],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    0\n1    1\n2    2\n3    3\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint8-uint16],"AssertionError: assert dtype('uint16') == dtype('int64')
 +  where dtype('uint16') = 0    0\n1    1\n2    2\n3    3\ndtype: uint16.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint8-uint32],"AssertionError: assert dtype('uint32') == dtype('int64')
 +  where dtype('uint32') = 0    0\n1    1\n2    2\n3    3\ndtype: uint32.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint8-uint64],"AssertionError: assert dtype('uint64') == dtype('int64')
 +  where dtype('uint64') = 0    0\n1    1\n2    2\n3    3\ndtype: uint64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_basic[uint8-uint8],"AssertionError: assert dtype('uint8') == dtype('int64')
 +  where dtype('uint8') = 0    0\n1    1\n2    2\n3    3\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_astype_copy,"AssertionError: assert dtype('int64') == 'object'
 +  where dtype('int64') = 0    1\n1    2\n2    3\ndtype: int64.dtype",failed
tests.integ.modin.series.test_astype,test_astype_errors_ignore_not_implemented[data0-expected0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_astype,test_astype_errors_ignore_not_implemented[data1-expected1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_astype,test_astype_from_DatetimeTZDtype_to_datetime64[America/Los_Angeles],TypeError: Cannot use .astype to convert from timezone-aware dtype to timezone-naive dtype. Use obj.tz_localize(None) or obj.tz_convert('UTC').tz_localize(None) instead.,failed
tests.integ.modin.series.test_astype,test_astype_from_DatetimeTZDtype_to_datetime64[Asia/Tokyo],TypeError: Cannot use .astype to convert from timezone-aware dtype to timezone-naive dtype. Use obj.tz_localize(None) or obj.tz_convert('UTC').tz_localize(None) instead.,failed
tests.integ.modin.series.test_astype,test_astype_from_DatetimeTZDtype_to_datetime64[UTC],TypeError: Cannot use .astype to convert from timezone-aware dtype to timezone-naive dtype. Use obj.tz_localize(None) or obj.tz_convert('UTC').tz_localize(None) instead.,failed
tests.integ.modin.series.test_astype,test_astype_int64_warning,"AssertionError: assert 'Snowpark pandas API auto cast all integers to int64' in ''
 +  where '' = <_pytest.logging.LogCaptureFixture object at 0x34f0ad6c0>.text",failed
tests.integ.modin.series.test_astype,test_astype_none,TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-datetime64[ns]],TypeError: Cannot use .astype to convert from timezone-naive dtype to timezone-aware dtype. Use obj.tz_localize instead or series.dt.tz_localize instead,failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-float160],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-float161],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-float32],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-float64],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-float],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-from_dtype15],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-from_dtype16],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-from_dtype17],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-from_dtype18],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-from_dtype19],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-from_dtype20],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-from_dtype21],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-from_dtype22],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-from_dtype23],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-from_dtype24],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-from_dtype25],pandas._libs.tslibs.parsing.DateParseError: day is out of range for month: 0,failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-int16],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-int32],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-int64],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-int8],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-int],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-str],pandas._libs.tslibs.parsing.DateParseError: day is out of range for month: 0,failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-uint16],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-uint32],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-uint64],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[America/Los_Angeles-uint8],"AssertionError: assert datetime64[ns, America/Los_Angeles] == datetime64[ns, UTC-08:00]
 +  where datetime64[ns, America/Los_Angeles] = 0             1969-12-31 16:00:00-08:00\n1   1969-12-31 16:00:00.000000001-08:00\n2   1969-12-31 16:00:00.000000002-08:00\n3   1969-12-31 16:00:00.000000003-08:00\ndtype: datetime64[ns, America/Los_Angeles].dtype
 +  and   datetime64[ns, UTC-08:00] = DatetimeTZDtype(tz='UTC-08:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-datetime64[ns]],TypeError: Cannot use .astype to convert from timezone-naive dtype to timezone-aware dtype. Use obj.tz_localize instead or series.dt.tz_localize instead,failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-float160],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-float161],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-float32],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-float64],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-float],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-from_dtype15],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-from_dtype16],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-from_dtype17],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-from_dtype18],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-from_dtype19],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-from_dtype20],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-from_dtype21],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-from_dtype22],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-from_dtype23],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-from_dtype24],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-from_dtype25],pandas._libs.tslibs.parsing.DateParseError: day is out of range for month: 0,failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-int16],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-int32],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-int64],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-int8],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-int],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-str],pandas._libs.tslibs.parsing.DateParseError: day is out of range for month: 0,failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-uint16],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-uint32],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-uint64],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[Asia/Tokyo-uint8],"AssertionError: assert datetime64[ns, Asia/Tokyo] == datetime64[ns, UTC+09:00]
 +  where datetime64[ns, Asia/Tokyo] = 0             1970-01-01 09:00:00+09:00\n1   1970-01-01 09:00:00.000000001+09:00\n2   1970-01-01 09:00:00.000000002+09:00\n3   1970-01-01 09:00:00.000000003+09:00\ndtype: datetime64[ns, Asia/Tokyo].dtype
 +  and   datetime64[ns, UTC+09:00] = DatetimeTZDtype(tz='UTC+09:00')",failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[UTC-datetime64[ns]],TypeError: Cannot use .astype to convert from timezone-naive dtype to timezone-aware dtype. Use obj.tz_localize instead or series.dt.tz_localize instead,failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[UTC-from_dtype25],pandas._libs.tslibs.parsing.DateParseError: day is out of range for month: 0,failed
tests.integ.modin.series.test_astype,test_astype_to_DatetimeTZDtype[UTC-str],pandas._libs.tslibs.parsing.DateParseError: day is out of range for month: 0,failed
tests.integ.modin.series.test_astype,test_astype_to_timedelta_negative,"AssertionError: Regex pattern did not match.
 Regex: 'dtype\\ datetime64\\[ns\\]\\ cannot\\ be\\ converted\\ to\\ timedelta64\\[ns\\]'
 Input: 'Cannot cast DatetimeArray to dtype timedelta64[ns]'",failed
tests.integ.modin.series.test_astype,test_astype_uint,"AssertionError: assert dtype('uint8') == 'int64'
 +  where dtype('uint8') = 0    255\n1      0\n2      1\ndtype: uint8.dtype",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-boolean],TypeError: Need to pass bool-like values,failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-float160],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""float() argument must be a string or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-float161],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""float() argument must be a string or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-float32],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""float() argument must be a string or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-float64],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""float() argument must be a string or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-float],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""float() argument must be a string or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-int16],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-int32],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-int64],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-int8],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-int],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-to_dtype15],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""float() argument must be a string or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-to_dtype16],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""float() argument must be a string or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-to_dtype17],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-to_dtype18],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-to_dtype19],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-to_dtype20],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-to_dtype21],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-to_dtype22],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-to_dtype23],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-to_dtype24],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-to_dtype25],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    2011-01-01\n1    2011-01-01\n2    2011-01-01\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-uint16],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-uint32],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-uint64],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed0-uint8],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.date'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-boolean],TypeError: Need to pass bool-like values,failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-datetime64[ns]],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""<class 'datetime.time'> is not convertible to datetime, at position 0""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-float160],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""float() argument must be a string or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-float161],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""float() argument must be a string or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-float32],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""float() argument must be a string or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-float64],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""float() argument must be a string or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-float],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""float() argument must be a string or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-int16],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-int32],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-int64],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-int8],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-int],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-to_dtype15],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""float() argument must be a string or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-to_dtype16],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""float() argument must be a string or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-to_dtype17],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-to_dtype18],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-to_dtype19],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-to_dtype20],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-to_dtype21],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-to_dtype22],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-to_dtype23],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-to_dtype24],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-to_dtype25],"AssertionError: assert string[python] == dtype('O')
 +  where string[python] = 0    00:00:00\n1    01:00:00\n2    02:00:00\ndtype: string.dtype",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-uint16],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-uint32],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-uint64],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_date_and_time[seed1-uint8],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""int() argument must be a string, a bytes-like object or a real number, not 'datetime.time'""",failed
tests.integ.modin.series.test_astype,test_python_datetime_astype_DatetimeTZDtype[seed0],"AssertionError: Regex pattern did not match.
 Regex: 'cannot be converted'
 Input: ""Cannot convert input [00:00:00] of type <class 'datetime.time'> to Timestamp""",failed
tests.integ.modin.series.test_at,test_at_get_multiindex,pandas.errors.IndexingError: Too many indexers,failed
tests.integ.modin.series.test_at,test_at_neg[key0],Failed: DID NOT RAISE <class 'KeyError'>,failed
tests.integ.modin.series.test_at,test_at_neg[key1],"TypeError: int() argument must be a string, a bytes-like object or a real number, not 'dict'",failed
tests.integ.modin.series.test_at,test_at_neg[key2],Failed: DID NOT RAISE <class 'KeyError'>,failed
tests.integ.modin.series.test_at,test_at_neg[key3],"TypeError: int() argument must be a string, a bytes-like object or a real number, not 'dict'",failed
tests.integ.modin.series.test_at,test_at_neg[key4],pandas.errors.IndexingError: Too many indexers,failed
tests.integ.modin.series.test_at,test_at_neg[key5],"TypeError: int() argument must be a string, a bytes-like object or a real number, not 'dict'",failed
tests.integ.modin.series.test_at,test_at_neg[key6],pandas.errors.IndexingError: Too many indexers,failed
tests.integ.modin.series.test_at,test_at_neg[key7],pandas.errors.IndexingError: Too many indexers,failed
tests.integ.modin.series.test_at,test_at_neg[key8],pandas.errors.IndexingError: Too many indexers,failed
tests.integ.modin.series.test_at,test_at_set_multiindex_neg,"KeyError: array(['one'], dtype='<U3')",failed
tests.integ.modin.series.test_axis,test_series_set_axis_copy_true,"AssertionError: assert 'keyword is unused and is ignored.' in ''
 +  where '' = <_pytest.logging.LogCaptureFixture object at 0x34fb38040>.text",failed
tests.integ.modin.series.test_axis,test_set_axis_series_raises_type_error[ser2-axis2-labels2-list is not a valid type for axis.],"AssertionError: Regex pattern did not match.
 Regex: 'list is not a valid type for axis.'
 Input: ""unhashable type: 'list'""",failed
tests.integ.modin.series.test_axis,test_set_axis_series_raises_type_error[ser3-axis3-labels3-Series is not a valid type for axis.],"AssertionError: Regex pattern did not match.
 Regex: 'Series is not a valid type for axis.'
 Input: ""unhashable type: 'Series'""",failed
tests.integ.modin.series.test_axis,test_set_axis_series_raises_type_error[ser4-axis4-labels4-DataFrame is not a valid type for axis.],"AssertionError: Regex pattern did not match.
 Regex: 'DataFrame is not a valid type for axis.'
 Input: ""unhashable type: 'DataFrame'""",failed
tests.integ.modin.series.test_axis,test_set_axis_series_raises_type_error[ser5-axis5-labels5-Index is not a valid type for axis.],"AssertionError: Regex pattern did not match.
 Regex: 'Index is not a valid type for axis.'
 Input: ""unhashable type: 'Index'""",failed
tests.integ.modin.series.test_axis,test_set_axis_series_raises_type_error[ser6-axis6-labels6-MultiIndex is not a valid type for axis.],"AssertionError: Regex pattern did not match.
 Regex: 'MultiIndex is not a valid type for axis.'
 Input: ""unhashable type: 'MultiIndex'""",failed
tests.integ.modin.series.test_axis,test_set_axis_series_raises_type_error[ser7-axis7-labels7-MultiIndex is not a valid type for axis.],"AssertionError: Regex pattern did not match.
 Regex: 'MultiIndex is not a valid type for axis.'
 Input: ""unhashable type: 'MultiIndex'""",failed
tests.integ.modin.series.test_axis,test_set_axis_series_raises_type_error[ser8-index-None-None is not a valid value for the parameter 'labels'.],"AssertionError: Regex pattern did not match.
 Regex: ""None is not a valid value for the parameter 'labels'.""
 Input: 'Index(...) must be called with a collection of some kind, None was passed'",failed
tests.integ.modin.series.test_axis,test_set_axis_series_raises_value_error[ser0-indexes-labels0],AssertionError: Snowpark pandas Exception No axis named indexes for object type DataFrame doesn't match pandas Exception No axis named indexes for object type Series,failed
tests.integ.modin.series.test_axis,test_set_axis_series_raises_value_error[ser1--1111.1111-labels1],AssertionError: Snowpark pandas Exception No axis named -1111.1111 for object type DataFrame doesn't match pandas Exception No axis named -1111.1111 for object type Series,failed
tests.integ.modin.series.test_axis,test_set_axis_series_raises_value_error[ser2-4000000-labels2],AssertionError: Snowpark pandas Exception No axis named 4000000 for object type DataFrame doesn't match pandas Exception No axis named 4000000 for object type Series,failed
tests.integ.modin.series.test_axis,test_set_axis_series_raises_value_error[ser3-None-labels3],AssertionError: Snowpark pandas Exception No axis named None for object type DataFrame doesn't match pandas Exception No axis named None for object type Series,failed
tests.integ.modin.series.test_axis,test_set_axis_series_raises_value_error[ser4--4.217391304347826-labels4],AssertionError: Snowpark pandas Exception No axis named -4.217391304347826 for object type DataFrame doesn't match pandas Exception No axis named -4.217391304347826 for object type Series,failed
tests.integ.modin.series.test_axis,test_set_axis_series_raises_value_error[ser5-0-labels5],AssertionError: Snowpark pandas Exception No axis named 0 for object type DataFrame doesn't match pandas Exception No axis named 0 for object type Series,failed
tests.integ.modin.series.test_axis,test_set_axis_series_raises_value_error[ser6--1e-05-labels6],AssertionError: Snowpark pandas Exception No axis named -1e-05 for object type DataFrame doesn't match pandas Exception No axis named -1e-05 for object type Series,failed
tests.integ.modin.series.test_axis,test_set_axis_series_raises_value_error[ser7-1e-06-labels7],AssertionError: Snowpark pandas Exception No axis named 1e-06 for object type DataFrame doesn't match pandas Exception No axis named 1e-06 for object type Series,failed
tests.integ.modin.series.test_axis,test_set_axis_series_raises_value_error[ser8-1-labels8],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_axis,test_set_axis_series_raises_value_error[ser9-columns-None],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_between,test_series_between_invalid_comparison,TypeError: Invalid comparison between dtype=int64 and str,failed
tests.integ.modin.series.test_between,test_series_between_series_different_dimensions,"ValueError: Unable to coerce to Series, length must be 1: given 2",failed
tests.integ.modin.series.test_bitwise_operators,test_bitwise_binary_between_series_with_deviating_behavior_and[lhs0-rhs0-expected_pandas0-expected_snowpark_pandas0],"AssertionError: Series are different

Series values are different (33.33333 %)
[index]: [1, 2, 3, 4, 5, 7]
[left]:  [False, False, False, False, False, False]
[right]: [None, None, False, False, False, False]",failed
tests.integ.modin.series.test_bitwise_operators,test_bitwise_binary_between_series_with_deviating_behavior_and[lhs1-rhs1-expected_pandas1-expected_snowpark_pandas1],"AssertionError: Series are different

Series values are different (33.33333 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8]
[left]:  [True, False, False, False, False, False, False, False, False]
[right]: [True, False, None, False, False, False, None, False, None]",failed
tests.integ.modin.series.test_bitwise_operators,test_bitwise_binary_between_series_with_deviating_behavior_or[lhs0-rhs0-expected_pandas0-expected_snowpark_pandas0],"AssertionError: Series are different

Series values are different (50.0 %)
[index]: [1, 2, 3, 4, 5, 7]
[left]:  [True, False, True, False, True, False]
[right]: [True, True, True, None, True, None]",failed
tests.integ.modin.series.test_bitwise_operators,test_bitwise_binary_between_series_with_deviating_behavior_or[lhs1-rhs1-expected_pandas1-expected_snowpark_pandas1],"AssertionError: Series are different

Series values are different (44.44444 %)
[index]: [0, 1, 2, 3, 4, 5, 6, 7, 8]
[left]:  [True, True, False, True, False, False, True, False, False]
[right]: [True, True, True, True, False, None, True, None, None]",failed
tests.integ.modin.series.test_bitwise_operators,test_bitwise_binary_between_series_with_deviating_behavior_or[lhs2-rhs2-expected_pandas2-expected_snowpark_pandas2],"AssertionError: Series are different

Series values are different (33.33333 %)
[index]: [(2.0, 0, 0), (0.0, 0, 0), (1.0, 0, 0), (2.0, 1, 0), (nan, 2, 0), (nan, 2, 1)]
[left]:  [True, True, True, True, False, False]
[right]: [True, True, True, True, None, None]",failed
tests.integ.modin.series.test_cache_result,test_cache_result_empty_series[False-index],"NotImplementedError: Modin supports the method Series.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_cache_result,test_cache_result_empty_series[False-no_index],"NotImplementedError: Modin supports the method Series.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_cache_result,test_cache_result_empty_series[True-index],"NotImplementedError: Modin supports the method Series.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_cache_result,test_cache_result_empty_series[True-no_index],"NotImplementedError: Modin supports the method Series.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_cache_result,test_cache_result_post_apply[False],"NotImplementedError: Modin supports the method Series.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_cache_result,test_cache_result_post_apply[True],"NotImplementedError: Modin supports the method Series.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_cache_result,test_cache_result_series_complex_correctness[False],"NotImplementedError: Modin supports the method Series.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_cache_result,test_cache_result_series_complex_correctness[True],"NotImplementedError: Modin supports the method Series.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_cache_result,test_cache_result_simple[False],"NotImplementedError: Modin supports the method Series.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_cache_result,test_cache_result_simple[True],"NotImplementedError: Modin supports the method Series.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_cache_result,test_cacheresult_timedelta,"NotImplementedError: Modin supports the method Series.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_case_when,test_case_when_callable_condition_not_implemented_error,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_case_when,test_case_when_callable_replacement_not_implemented_error,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_case_when,test_case_when_invalid_condition_type,ValueError: Failed to apply condition0 and replacement0.,failed
tests.integ.modin.series.test_case_when,test_case_when_invalid_replacement_type,Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.series.test_compare,test_align_axis[0],"AssertionError: Series are different

Attribute ""name"" are different
[left]:  None
[right]: base_series",failed
tests.integ.modin.series.test_compare,test_align_axis[index],"AssertionError: Series are different

Attribute ""name"" are different
[left]:  None
[right]: base_series",failed
tests.integ.modin.series.test_compare,test_different_index,"AssertionError: Regex pattern did not match.
 Regex: 'Can only compare identically-labeled objects'
 Input: 'Can only compare identically-labeled (both index and columns) DataFrame objects'",failed
tests.integ.modin.series.test_compare,test_different_names,ValueError: Can only compare identically-labeled (both index and columns) DataFrame objects,failed
tests.integ.modin.series.test_compare,test_keep_equal,[XPASS(strict)] ,failed
tests.integ.modin.series.test_compare,test_keep_shape,[XPASS(strict)] ,failed
tests.integ.modin.series.test_compare,test_no_diff,"ValueError: Length mismatch: Expected axis has 0 elements, new values have 2 elements",failed
tests.integ.modin.series.test_compare,test_result_names,"AssertionError: DataFrame.columns are different

DataFrame.columns values are different (100.0 %)
[left]:  Index(['self', 'other'], dtype='object')
[right]: Index(['left', 'right'], dtype='object')
At positional index 0, first diff: self != left",failed
tests.integ.modin.series.test_convert_dtype,test_NotImplementedError,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_create_or_replace_dynamic_table,test_create_or_replace_dynamic_table_enforce_ordering_raises,UnboundLocalError: local variable 'dynamic_table_name' referenced before assignment,failed
tests.integ.modin.series.test_create_or_replace_view,test_create_or_replace_view_basic,"NotImplementedError: Modin supports the method Series.create_or_replace_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_create_or_replace_view,test_create_or_replace_view_multiple_sessions_enforce_ordering_raises,UnboundLocalError: local variable 'view_name' referenced before assignment,failed
tests.integ.modin.series.test_describe,test_timedelta,"[XPASS(strict)] requires concat(), which we cannot do with Timedelta.",failed
tests.integ.modin.series.test_diff,test_series_diff[with_len(df)-1_rows_after-object],TypeError: unsupported operand type for -: got object,failed
tests.integ.modin.series.test_diff,test_series_diff[with_len(df)-1_rows_before-object],TypeError: unsupported operand type for -: got object,failed
tests.integ.modin.series.test_diff,test_series_diff[with_len(df)/2_rows_after-bool],ValueError: periods must be an int. got <class 'float'> instead,failed
tests.integ.modin.series.test_diff,test_series_diff[with_len(df)/2_rows_after-datetime64[ns]],ValueError: periods must be an int. got <class 'float'> instead,failed
tests.integ.modin.series.test_diff,test_series_diff[with_len(df)/2_rows_after-int],ValueError: periods must be an int. got <class 'float'> instead,failed
tests.integ.modin.series.test_diff,test_series_diff[with_len(df)/2_rows_after-object],ValueError: periods must be an int. got <class 'float'> instead,failed
tests.integ.modin.series.test_diff,test_series_diff[with_len(df)/2_rows_after-timedelta64[ns]],ValueError: periods must be an int. got <class 'float'> instead,failed
tests.integ.modin.series.test_diff,test_series_diff[with_len(df)/2_rows_before-bool],ValueError: periods must be an int. got <class 'float'> instead,failed
tests.integ.modin.series.test_diff,test_series_diff[with_len(df)/2_rows_before-datetime64[ns]],ValueError: periods must be an int. got <class 'float'> instead,failed
tests.integ.modin.series.test_diff,test_series_diff[with_len(df)/2_rows_before-int],ValueError: periods must be an int. got <class 'float'> instead,failed
tests.integ.modin.series.test_diff,test_series_diff[with_len(df)/2_rows_before-object],ValueError: periods must be an int. got <class 'float'> instead,failed
tests.integ.modin.series.test_diff,test_series_diff[with_len(df)/2_rows_before-timedelta64[ns]],ValueError: periods must be an int. got <class 'float'> instead,failed
tests.integ.modin.series.test_diff,test_series_diff[with_len(df)_rows_after-object],TypeError: unsupported operand type for -: got object,failed
tests.integ.modin.series.test_diff,test_series_diff[with_len(df)_rows_before-object],TypeError: unsupported operand type for -: got object,failed
tests.integ.modin.series.test_diff,test_series_diff[with_row_after-object],TypeError: unsupported operand type for -: got object,failed
tests.integ.modin.series.test_diff,test_series_diff[with_row_before-object],TypeError: unsupported operand type for -: got object,failed
tests.integ.modin.series.test_diff,test_series_diff[with_self-object],TypeError: unsupported operand type for -: got object,failed
tests.integ.modin.series.test_diff,test_series_diff_custom_object_negative,TypeError: unsupported operand type for -: got object,failed
tests.integ.modin.series.test_diff,test_series_diff_invalid_periods_negative,Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_diff,test_series_diff_mixed_ints_and_bools,TypeError: unsupported operand type for -: got object,failed
tests.integ.modin.series.test_diff,test_series_diff_string_type_negative,AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_diff,test_series_diff_variant_with_na_values,TypeError: unsupported operand type for -: got object,failed
tests.integ.modin.series.test_drop_duplicates,test_drop_duplicates_nan_none[False-expected2],"AssertionError: Series are different

Series length are different
[left]:  1, Index([3], dtype='int64')
[right]: 0, RangeIndex(start=0, stop=0, step=1)",failed
tests.integ.modin.series.test_drop_duplicates,test_drop_duplicates_nan_none[first-expected0],"AssertionError: Series are different

Series length are different
[left]:  3, Index([0, 1, 3], dtype='int64')
[right]: 2, Index([0, 1], dtype='int64')",failed
tests.integ.modin.series.test_drop_duplicates,test_drop_duplicates_nan_none[last-expected1],"AssertionError: Series are different

Series length are different
[left]:  3, Index([2, 3, 4], dtype='int64')
[right]: 2, Index([2, 4], dtype='int64')",failed
tests.integ.modin.series.test_dt_accessor,test_day_month_name_negative[day_name],locale.Error: unsupported locale setting,failed
tests.integ.modin.series.test_dt_accessor,test_day_month_name_negative[month_name],locale.Error: unsupported locale setting,failed
tests.integ.modin.series.test_dt_accessor,test_dt_invalid_dtype_property_combo[data0-None-seconds],AssertionError: Snowpark pandas Exception 'DatetimeIndex' object has no attribute 'seconds' doesn't match pandas Exception 'DatetimeProperties' object has no attribute 'seconds',failed
tests.integ.modin.series.test_dt_accessor,test_dt_invalid_dtype_property_combo[data1-None-second],AssertionError: Snowpark pandas Exception 'TimedeltaIndex' object has no attribute 'second' doesn't match pandas Exception 'TimedeltaProperties' object has no attribute 'second',failed
tests.integ.modin.series.test_dt_accessor,test_dt_invalid_dtypes[data0-int],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_dt_accessor,test_dt_invalid_dtypes[data1-float],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_dt_accessor,test_dt_invalid_dtypes[data2-None],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_dt_accessor,test_dt_invalid_dtypes[data3-None],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_dt_accessor,test_dt_invalid_dtypes[data4-None],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round[1s-round-datetime_index_value0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round[1s-round-datetime_index_value1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round[1s-round-datetime_index_value2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round[1s-round-datetime_index_value3],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round[2s-round-datetime_index_value0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round[2s-round-datetime_index_value1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round[2s-round-datetime_index_value2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round[2s-round-datetime_index_value3],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1h-NaT-raise-ceil],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1h-NaT-raise-floor],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1h-NaT-raise-round],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1h-ambiguous3-raise-ceil],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1h-ambiguous3-raise-floor],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1h-ambiguous3-raise-round],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1h-infer-raise-ceil],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1h-infer-raise-floor],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1h-infer-raise-round],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1h-raise-NaT-ceil],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1h-raise-NaT-floor],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1h-raise-NaT-round],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1h-raise-nonexistent7-ceil],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1h-raise-nonexistent7-floor],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1h-raise-nonexistent7-round],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1h-raise-shift_backward-ceil],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1h-raise-shift_backward-floor],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1h-raise-shift_backward-round],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1h-raise-shift_forward-ceil],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1h-raise-shift_forward-floor],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1h-raise-shift_forward-round],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1w-infer-shift_forward-ceil],ValueError: <Week: weekday=6> is a non-fixed frequency,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1w-infer-shift_forward-floor],ValueError: <Week: weekday=6> is a non-fixed frequency,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1w-infer-shift_forward-round],ValueError: <Week: weekday=6> is a non-fixed frequency,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1w-raise-raise-ceil],ValueError: <Week: weekday=6> is a non-fixed frequency,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1w-raise-raise-floor],ValueError: <Week: weekday=6> is a non-fixed frequency,failed
tests.integ.modin.series.test_dt_accessor,test_floor_ceil_round_negative[1w-raise-raise-round],ValueError: <Week: weekday=6> is a non-fixed frequency,failed
tests.integ.modin.series.test_dt_accessor,test_strftime_neg[%A],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_strftime_neg[%B],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_strftime_neg[%I],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_strftime_neg[%U],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_strftime_neg[%W],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_strftime_neg[%Z],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_strftime_neg[%a],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_strftime_neg[%b],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_strftime_neg[%c],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_strftime_neg[%p],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_strftime_neg[%w],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_strftime_neg[%x],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_strftime_neg[%y],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_strftime_neg[%z],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_timedelta_total_seconds_type_error,"AssertionError: Regex pattern did not match.
 Regex: ""'DatetimeProperties' object has no attribute 'total_seconds'""
 Input: ""'DatetimeIndex' object has no attribute 'total_seconds'""",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[Africa/Abidjan],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[Africa/Timbuktu],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[America/Adak],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[America/Yellowknife],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[Antarctica/Casey],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[Asia/Dhaka],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[Asia/Manila],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[Asia/Shanghai],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[Atlantic/Stanley],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[Australia/Sydney],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[Canada/Pacific],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[Europe/Chisinau],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[Europe/Luxembourg],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[Indian/Christmas],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[None],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[Pacific/Chatham],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[Pacific/Wake],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[US/Arizona],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[US/Central],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[US/Eastern],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[US/Hawaii],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[US/Mountain],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[US/Pacific],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[UTC],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz11],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz13],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz15],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz17],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz19],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz1],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz21],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz23],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz25],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz27],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz29],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz31],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz33],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz35],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz37],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz39],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz3],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz41],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz43],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz45],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz5],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz7],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert[tz9],"AssertionError: assert datetime64[ns, US/Eastern] == 'object'
 +  where datetime64[ns, US/Eastern] = 0   2014-04-04 23:56:01.000000001-04:00\n1   2014-07-18 21:24:02.000000002-04:00\n2   2015-11-22 22:14:03.000000003-05:00\n3   2015-11-23 20:12:04.123456789-05:00\n4                                   NaT\ndtype: datetime64[ns, US/Eastern].dtype",failed
tests.integ.modin.series.test_dt_accessor,test_tz_convert_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_tz_localize_negative[None-NaT-raise],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_tz_localize_negative[None-ambiguous2-raise],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_tz_localize_negative[None-infer-raise],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_tz_localize_negative[None-infer-shift_forward],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_tz_localize_negative[None-raise-NaT],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_tz_localize_negative[None-raise-nonexistent6],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_tz_localize_negative[None-raise-shift_backward],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_tz_localize_negative[None-raise-shift_forward],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor,test_tz_localize_negative[UTC+09:00-raise-raise],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor_unsupported,test_dt_namespace_accessor_datetime64[D],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor_unsupported,test_dt_namespace_accessor_datetime64[ms],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_dt_accessor_unsupported,test_dt_namespace_accessor_datetime64[s],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_duplicated,test_duplicated_nan_none[False-expected2],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [True, True, True, False, True]
[right]: [True, True, True, True, True]",failed
tests.integ.modin.series.test_duplicated,test_duplicated_nan_none[first-expected0],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [False, False, True, False, True]
[right]: [False, False, True, True, True]",failed
tests.integ.modin.series.test_duplicated,test_duplicated_nan_none[last-expected1],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [True, True, False, False, False]
[right]: [True, True, False, True, False]",failed
tests.integ.modin.series.test_equals,test_equals_numeric_variants[float16-float32-True],"assert False == True
 +  where False = <bound method Series.equals of 0    1.0\n1    3.0\ndtype: float16>(0    1.0\n1    3.0\ndtype: float32)
 +    where <bound method Series.equals of 0    1.0\n1    3.0\ndtype: float16> = 0    1.0\n1    3.0\ndtype: float16.equals",failed
tests.integ.modin.series.test_equals,test_equals_numeric_variants[float64-float32-True],"assert False == True
 +  where False = <bound method Series.equals of 0    1.0\n1    3.0\ndtype: float64>(0    1.0\n1    3.0\ndtype: float32)
 +    where <bound method Series.equals of 0    1.0\n1    3.0\ndtype: float64> = 0    1.0\n1    3.0\ndtype: float64.equals",failed
tests.integ.modin.series.test_equals,test_equals_numeric_variants[int32-int16-True],"assert False == True
 +  where False = <bound method Series.equals of 0    1\n1    3\ndtype: int32>(0    1\n1    3\ndtype: int16)
 +    where <bound method Series.equals of 0    1\n1    3\ndtype: int32> = 0    1\n1    3\ndtype: int32.equals",failed
tests.integ.modin.series.test_equals,test_equals_numeric_variants[int8-int16-True],"assert False == True
 +  where False = <bound method Series.equals of 0    1\n1    3\ndtype: int8>(0    1\n1    3\ndtype: int16)
 +    where <bound method Series.equals of 0    1\n1    3\ndtype: int8> = 0    1\n1    3\ndtype: int8.equals",failed
tests.integ.modin.series.test_first_last_valid_index,test_first_and_last_valid_multiindex_series[index0],"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().",failed
tests.integ.modin.series.test_first_last_valid_index,test_first_and_last_valid_multiindex_series[index1],"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().",failed
tests.integ.modin.series.test_first_last_valid_index,test_first_and_last_valid_multiindex_series[index2],"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().",failed
tests.integ.modin.series.test_first_last_valid_index,test_first_and_last_valid_multiindex_series[index3],"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().",failed
tests.integ.modin.series.test_first_last_valid_index,test_first_and_last_valid_nested_multiindex_series,"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().",failed
tests.integ.modin.series.test_first_last_valid_index,test_first_and_last_valid_none_float64_multiindex_series[data0],"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().",failed
tests.integ.modin.series.test_first_last_valid_index,test_first_and_last_valid_none_float64_multiindex_series[data1],"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().",failed
tests.integ.modin.series.test_get_dummies,test_get_dummies_pandas_no_row_pos_col,AttributeError: 'DataFrame' object has no attribute 'row_position_snowflake_quoted_identifier',failed
tests.integ.modin.series.test_get_dummies,test_get_dummies_series_negative[data0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_get_dummies,test_get_dummies_series_negative[data1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_get_dummies,test_valid_dtype[timedelta64[ns]],[XPASS(strict)] ,failed
tests.integ.modin.series.test_get_dummies,test_valid_dtype_int32,"AssertionError: Attributes of DataFrame.iloc[:, 0] (column name=""a"") are different

Attribute ""dtype"" are different
[left]:  int32
[right]: int64",failed
tests.integ.modin.series.test_getattr,test_getattr[index-1-0],ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all(),failed
tests.integ.modin.series.test_getitem,test_series_getitem_with_boolean_list_like[key4],"KeyError: Index([True, True, False, False, False, True, True], dtype='bool')",failed
tests.integ.modin.series.test_getitem,test_series_getitem_with_boolean_list_like[key5],IndexError: boolean index did not match indexed array along dimension 0; dimension is 7 but corresponding boolean dimension is 1,failed
tests.integ.modin.series.test_getitem,test_series_getitem_with_boolean_list_like[key6],IndexError: boolean index did not match indexed array along dimension 0; dimension is 7 but corresponding boolean dimension is 8,failed
tests.integ.modin.series.test_getitem,test_series_getitem_with_int_list_like[key2],"AssertionError: Series are different

Series length are different
[left]:  1, Index([6], dtype='int64')
[right]: 0, Index([], dtype='int64')",failed
tests.integ.modin.series.test_getitem,test_series_getitem_with_int_list_like[key3],"AssertionError: Series are different

Series length are different
[left]:  6, Index([2, 3, 6, 3, 2, 1], dtype='int64')
[right]: 5, Index([2, 3, 3, 2, 1], dtype='int64')",failed
tests.integ.modin.series.test_getitem,test_series_getitem_with_int_list_like[key4],"AssertionError: Series are different

Series length are different
[left]:  2, Index([3, 5], dtype='int64')
[right]: 1, Index([5], dtype='int64')",failed
tests.integ.modin.series.test_getitem,test_series_getitem_with_int_list_like_returns_empty_series[key0],"AssertionError: Series are different

Series length are different
[left]:  1, Index([2], dtype='int64')
[right]: 0, Index([], dtype='int64')",failed
tests.integ.modin.series.test_getitem,test_series_getitem_with_int_list_like_returns_empty_series[key1],"AssertionError: Series are different

Series length are different
[left]:  2, Index([6, 5], dtype='int64')
[right]: 0, Index([], dtype='int64')",failed
tests.integ.modin.series.test_getitem,test_series_getitem_with_int_list_like_returns_empty_series[key2],"AssertionError: Series are different

Series length are different
[left]:  6, Index([5, 4, 6, 4, 5, 6], dtype='int64')
[right]: 0, Index([], dtype='int64')",failed
tests.integ.modin.series.test_getitem,test_series_getitem_with_int_list_like_returns_empty_series[key3],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.series.test_getitem,test_series_getitem_with_multiindex[baz],AssertionError: Got type: <class 'float'>,failed
tests.integ.modin.series.test_getitem,test_series_getitem_with_multiindex[key4],"AssertionError: Series are different

Series length are different
[left]:  2, MultiIndex([('extra', 'one'),
            ('extra', 'one')],
           names=['first', 'second'])
[right]: 4, MultiIndex([('foo', 'one'),
            ('foo', 'two'),
            ('bar', 'one'),
            ('bar', 'two')],
           names=['first', 'second'])",failed
tests.integ.modin.series.test_getitem,test_series_getitem_with_scalars[-120.3],KeyError: -120.3,failed
tests.integ.modin.series.test_getitem,test_series_getitem_with_scalars[-6],AssertionError: Got type: <class 'float'>,failed
tests.integ.modin.series.test_getitem,test_series_getitem_with_scalars[-7.2],KeyError: -7.2,failed
tests.integ.modin.series.test_getitem,test_series_getitem_with_scalars[100],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.series.test_getitem,test_series_getitem_with_scalars[23.9],KeyError: 23.9,failed
tests.integ.modin.series.test_getitem,test_series_getitem_with_scalars[5],"assert (1,) == [1]
  Full diff:
  - [1]
  + (1,)",failed
tests.integ.modin.series.test_getitem,test_series_getitem_with_scalars[6.5],KeyError: 6.5,failed
tests.integ.modin.series.test_head_tail,test_empty_dataframe[-10],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.series.test_head_tail,test_empty_dataframe[-1],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.series.test_head_tail,test_empty_dataframe[0],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.series.test_head_tail,test_empty_dataframe[10],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.series.test_head_tail,test_empty_dataframe[1],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.series.test_head_tail,test_empty_dataframe[5],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.series.test_head_tail,test_empty_dataframe[None],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.series.test_head_tail,test_head_tail[-10],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.series.test_head_tail,test_head_tail[-1],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.series.test_head_tail,test_head_tail[0],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.series.test_head_tail,test_head_tail[10],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.series.test_head_tail,test_head_tail[1],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.series.test_head_tail,test_head_tail[5],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.series.test_head_tail,test_head_tail[None],AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.series.test_hist,test_hist_by_unsupported,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_hist,test_hist_params_neg[1-None-None-None-None-None-None-False-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_hist,test_hist_params_neg[None-1.0-None-None-None-None-None-False-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_hist,test_hist_params_neg[None-None-1-None-None-None-None-False-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_hist,test_hist_params_neg[None-None-None-1.0-None-None-None-False-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_hist,test_hist_params_neg[None-None-None-None-None-None-None-True-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_hist,test_hist_params_neg[None-None-None-None-None-None-matplotlib-False-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_hist,test_hist_params_neg[None-None-None-None-None-bins7-None-False-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_hist,test_hist_params_neg[None-None-None-None-figsize4-None-None-False-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_iat,test_iat_neg[a-IndexError],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iat,test_iat_neg[key0-KeyError],Failed: DID NOT RAISE <class 'KeyError'>,failed
tests.integ.modin.series.test_iat,test_iat_neg[key1-KeyError],"TypeError: int() argument must be a string, a bytes-like object or a real number, not 'dict'",failed
tests.integ.modin.series.test_iat,test_iat_neg[key3-KeyError],pandas.errors.IndexingError: Too many indexers,failed
tests.integ.modin.series.test_idxmax_idxmin,test_idxmax_idxmin_series[False-idxmax-data0-index0],"When the data column is None, Snowpark pandas returns None instead of nan",xfailed
tests.integ.modin.series.test_idxmax_idxmin,test_idxmax_idxmin_series[False-idxmax-data1-index1],"When the data column is None, Snowpark pandas returns None instead of nan",xfailed
tests.integ.modin.series.test_idxmax_idxmin,test_idxmax_idxmin_series[False-idxmax-timedelta],"When the data column is None, Snowpark pandas returns None instead of nan",xfailed
tests.integ.modin.series.test_idxmax_idxmin,test_idxmax_idxmin_series[False-idxmin-data0-index0],"When the data column is None, Snowpark pandas returns None instead of nan",xfailed
tests.integ.modin.series.test_idxmax_idxmin,test_idxmax_idxmin_series[False-idxmin-data1-index1],"When the data column is None, Snowpark pandas returns None instead of nan",xfailed
tests.integ.modin.series.test_idxmax_idxmin,test_idxmax_idxmin_series[False-idxmin-timedelta],"When the data column is None, Snowpark pandas returns None instead of nan",xfailed
tests.integ.modin.series.test_idxmax_idxmin,test_series_idxmax_idxmin_with_multiindex[False-idxmax],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_idxmax_idxmin,test_series_idxmax_idxmin_with_multiindex[False-idxmin],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_idxmax_idxmin,test_series_idxmax_idxmin_with_multiindex[True-idxmax],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_idxmax_idxmin,test_series_idxmax_idxmin_with_multiindex[True-idxmin],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_iloc,test_df_iloc_set_with_multiindex[item_values1-None-3-1-None],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [10.0, nan, 12.0, 13.0, 14.0]
[right]: [10, -999, 12, 13, 14]",failed
tests.integ.modin.series.test_iloc,test_df_iloc_set_with_multiindex[item_values1-None-3-row_key1-None],"AssertionError: Series are different

Series values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [nan, 11.0, 12.0, nan, 14.0]
[right]: [-998, 11, 12, -999, 14]",failed
tests.integ.modin.series.test_iloc,test_df_iloc_set_with_multiindex[item_values1-None-3-row_key2-row_key_index2],"AssertionError: Series are different

Series values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [10.0, nan, nan, 13.0, 14.0]
[right]: [10, -999, -998, 13, 14]",failed
tests.integ.modin.series.test_iloc,test_df_iloc_set_with_multiindex[item_values1-None-3-row_key3-row_key_index3],"AssertionError: Series are different

Series values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [10.0, nan, nan, 13.0, 14.0]
[right]: [10, -998, -999, 13, 14]",failed
tests.integ.modin.series.test_iloc,test_df_iloc_set_with_multiindex[item_values2-item_index2-4-1-None],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [10.0, nan, 12.0, 13.0, 14.0]
[right]: [10, -999, 12, 13, 14]",failed
tests.integ.modin.series.test_iloc,test_df_iloc_set_with_multiindex[item_values2-item_index2-4-row_key1-None],"AssertionError: Series are different

Series values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [nan, 11.0, 12.0, nan, 14.0]
[right]: [-998, 11, 12, -999, 14]",failed
tests.integ.modin.series.test_iloc,test_df_iloc_set_with_multiindex[item_values2-item_index2-4-row_key2-row_key_index2],"AssertionError: Series are different

Series values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [10.0, nan, nan, 13.0, 14.0]
[right]: [10, -999, -998, 13, 14]",failed
tests.integ.modin.series.test_iloc,test_df_iloc_set_with_multiindex[item_values2-item_index2-4-row_key3-row_key_index3],"AssertionError: Series are different

Series values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [10.0, nan, nan, 13.0, 14.0]
[right]: [10, -998, -999, 13, 14]",failed
tests.integ.modin.series.test_iloc,test_df_iloc_set_with_multiindex[item_values3-item_index3-5-1-None],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [10.0, nan, 12.0, 13.0, 14.0]
[right]: [10, -999, 12, 13, 14]",failed
tests.integ.modin.series.test_iloc,test_df_iloc_set_with_multiindex[item_values3-item_index3-5-row_key1-None],"AssertionError: Series are different

Series values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [nan, 11.0, 12.0, nan, 14.0]
[right]: [-998, 11, 12, -999, 14]",failed
tests.integ.modin.series.test_iloc,test_df_iloc_set_with_multiindex[item_values3-item_index3-5-row_key2-row_key_index2],"AssertionError: Series are different

Series values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [10.0, nan, nan, 13.0, 14.0]
[right]: [10, -999, -998, 13, 14]",failed
tests.integ.modin.series.test_iloc,test_df_iloc_set_with_multiindex[item_values3-item_index3-5-row_key3-row_key_index3],"AssertionError: Series are different

Series values are different (40.0 %)
[index]: [(x, 99), (y, 11), (x, 11), (y, 99), (z, -12)]
[left]:  [10.0, nan, nan, 13.0, 14.0]
[right]: [10, -998, -999, 13, 14]",failed
tests.integ.modin.series.test_iloc,test_iloc_efficient_sql[<lambda>0],IndexError: list index out of range,failed
tests.integ.modin.series.test_iloc,test_iloc_efficient_sql[<lambda>1],IndexError: list index out of range,failed
tests.integ.modin.series.test_iloc,test_iloc_efficient_sql[<lambda>2],IndexError: list index out of range,failed
tests.integ.modin.series.test_iloc,test_iloc_efficient_sql[<lambda>3],IndexError: list index out of range,failed
tests.integ.modin.series.test_iloc,test_iloc_efficient_sql[<lambda>4],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.series.test_iloc,test_iloc_get_multiindex_key_negative,"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_iloc_with_row_key_series_rhs_series[row_pos0-col_pos0-item_values0],"ValueError: could not broadcast input array from shape (3,) into shape (3, 0)",failed
tests.integ.modin.series.test_iloc,test_iloc_with_row_key_series_rhs_series[row_pos1-col_pos1-item_values1],ValueError: buffer source array is read-only,failed
tests.integ.modin.series.test_iloc,test_iloc_with_row_key_series_rhs_series[row_pos2-col_pos2-item_values2],ValueError: buffer source array is read-only,failed
tests.integ.modin.series.test_iloc,test_iloc_with_row_key_series_rhs_series[row_pos3-col_pos3-item_values3],ValueError: buffer source array is read-only,failed
tests.integ.modin.series.test_iloc,test_iloc_with_row_key_series_rhs_series[row_pos4-col_pos4-item_values4],ValueError: buffer source array is read-only,failed
tests.integ.modin.series.test_iloc,test_iloc_with_row_key_series_rhs_series[row_pos5-col_pos5-item_values5],ValueError: buffer source array is read-only,failed
tests.integ.modin.series.test_iloc,test_iloc_with_row_key_series_rhs_series_no_shape_check[row_pos0-col_pos0-item_values0-native_values0],ValueError: buffer source array is read-only,failed
tests.integ.modin.series.test_iloc,test_iloc_with_row_key_series_rhs_series_no_shape_check[row_pos3-col_pos3-item_values3-native_values3],ValueError: buffer source array is read-only,failed
tests.integ.modin.series.test_iloc,test_iloc_with_row_key_series_rhs_series_no_shape_check[row_pos4-col_pos4-item_values4-native_values4],ValueError: buffer source array is read-only,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_ellipses_and_native_pd_key_raises_type_error_negative[key0-<class\\ 'pandas\\.core\\.series\\.Series'>\\ is\\ not\\ supported\\ as\\ 'value'\\ argument\\.\\ Please\\ convert\\ this\\ to\\ Snowpark\\ pandas\\ objects\\ by\\ calling\\ modin\\.pandas\\.Series\\(\\)/DataFrame\\(\\)],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_ellipses_and_native_pd_key_raises_type_error_negative[key1-<class\\ 'pandas\\.core\\.frame\\.DataFrame'>\\ is\\ not\\ supported\\ as\\ 'value'\\ argument\\.\\ Please\\ convert\\ this\\ to\\ Snowpark\\ pandas\\ objects\\ by\\ calling\\ modin\\.pandas\\.Series\\(\\)/DataFrame\\(\\)],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_ellipses_and_native_pd_key_raises_type_error_negative[key2-Object\\ of\\ type\\ ellipsis\\ is\\ not\\ JSON\\ serializable],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_ellipses_and_native_pd_key_raises_type_error_negative[key3-Object of type ellipsis is not JSON serializable],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_empty,IndexError: single positional indexer is out-of-bounds,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_invalid_slice_key_negative[key0],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_invalid_slice_key_negative[key1],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_invalid_slice_key_negative[key2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_bool[index with name-key5],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_bool[index-key5],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_bool[list-key5],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_bool[ndarray-key0],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_bool[ndarray-key5],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_bool[series-key0],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_bool[series-key1],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_bool[series-key2],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_bool[series-key3],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_bool[series-key4],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_bool[series-key5],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_numeric[index with name-key4],IndexError: index -9 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_numeric[index with name-key5],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_numeric[index with name-key6],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_numeric[index-key4],IndexError: index -9 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_numeric[index-key5],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_numeric[index-key6],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_numeric[list-key4],IndexError: index -9 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_numeric[list-key5],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_numeric[list-key6],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_numeric[ndarray-key0],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_numeric[ndarray-key4],IndexError: index -9 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_numeric[ndarray-key5],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_numeric[ndarray-key6],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_numeric[series-key0],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_numeric[series-key4],IndexError: index -9 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_numeric[series-key5],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_numeric[series-key6],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_raises_not_implemented_error_negative[key0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_scalar[-8],IndexError: index -8 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_scalar[-9028751],IndexError: index -9028751 is out of bounds for axis 0 with size 7,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_scalar[52879115],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_scalar[7],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_snowpark_df_input_negative,"ValueError: Buffer has wrong number of dimensions (expected 1, got 2)",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_key_snowpark_empty_str_series_input_negative,"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_non_numeric_key_negative[-3.14],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_non_numeric_key_negative[3.142857142857143],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_non_numeric_key_negative[False],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_non_numeric_key_negative[None],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_non_numeric_key_negative[True],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_non_numeric_key_negative[key12],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_non_numeric_key_negative[key13],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_non_numeric_key_negative[key6],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_non_numeric_key_negative[key7],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_non_numeric_key_negative[key8],Failed: DID NOT RAISE <class 'IndexError'>,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_non_numeric_key_negative[key9],Failed: DID NOT RAISE <class 'IndexError'>,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_non_numeric_key_negative[nan],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_non_numeric_key_negative[string],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_non_numeric_key_negative[test],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_range_deviating_behavior[range_key0],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_range_deviating_behavior[range_key1],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_range_deviating_behavior[range_key2],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_range_deviating_behavior[range_key3],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_slice_with_invalid_step_negative,"AssertionError: Regex pattern did not match.
 Regex: 'slice step cannot be zero.'
 Input: 'slice step cannot be zero'",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_slice_with_non_integer_parameters_negative[slice_key0],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_slice_with_non_integer_parameters_negative[slice_key1],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_get_slice_with_non_integer_parameters_negative[slice_key2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_set_scalar_key_with_list_value_negative,TODO: SNOW-991872 support set cell to array values,xfailed
tests.integ.modin.series.test_iloc,test_series_iloc_snowpark_pandas_input_return_dataframe[Index-2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_snowpark_pandas_input_return_dataframe[Series-2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_iloc,test_series_iloc_snowpark_pandas_input_return_dataframe[emptyFloatSeries-2],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.series.test_isin,test_isin_with_str_negative,"AssertionError: Regex pattern did not match.
 Regex: 'only\\ list\\-like\\ objects\\ are\\ allowed\\ to\\ be\\ passed\\ to\\ isin\\(\\),\\ you\\ passed\\ a\\ \\[str\\]'
 Input: 'only list-like objects are allowed to be passed to isin(), you passed a `str`'",failed
tests.integ.modin.series.test_loc,test_mi_series_loc_get_non_boolean_list_key[key10-AssertionError],"assert False
 +  where False = mark i  mark v     12\n        mark vi     2\ndtype: int64.empty",failed
tests.integ.modin.series.test_loc,test_mi_series_loc_get_non_boolean_list_key[key2-None],pandas.errors.IndexingError: Too many indexers,failed
tests.integ.modin.series.test_loc,test_mi_series_loc_get_non_boolean_list_key[key4-None],"AssertionError: Series.index are different

Series.index levels are different
[left]:  1, Index(['mark v', 'mark vi'], dtype='object')
[right]: 2, MultiIndex([('mark i',  'mark v'),
            ('mark i', 'mark vi')],
           )",failed
tests.integ.modin.series.test_loc,test_mi_series_loc_get_non_boolean_list_key[key5-None],"KeyError: ['viper', 'mark i', 'viper']",failed
tests.integ.modin.series.test_loc,test_mi_series_loc_get_non_boolean_list_key[key6-KeyError],KeyError: 'invalid',failed
tests.integ.modin.series.test_loc,test_mi_series_loc_get_non_boolean_list_key[key7-None],KeyError: 'mark vi',failed
tests.integ.modin.series.test_loc,test_mi_series_loc_get_non_boolean_list_key[key8-None],KeyError: 'mark vi',failed
tests.integ.modin.series.test_loc,test_mi_series_loc_get_non_boolean_list_key[key9-None],KeyError: 'mark vi',failed
tests.integ.modin.series.test_loc,test_mi_series_loc_get_non_boolean_list_key[mark ii-KeyError],KeyError: 'mark ii',failed
tests.integ.modin.series.test_loc,test_series_loc_get_basic[series5-key5],pandas.errors.IndexingError: Too many indexers,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_bool[array-key5],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_bool[index-key5],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_bool[list-key5],IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_bool[series-key4],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_bool_series_with_mismatch_index_len[False-key0],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_bool_series_with_mismatch_index_len[False-key1],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_bool_series_with_mismatch_index_len[True-key0],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_bool_series_with_mismatch_index_len[True-key1],pandas.errors.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_bool_series_with_unaligned_and_duplicate_indices,"AssertionError: Series are different

Series length are different
[left]:  5, Index(['a', 'a', None, 'b', 'b'], dtype='object', name='index')
[right]: 9, Index(['a', 'a', 'a', 'a', None, 'b', 'b', 'b', 'b'], dtype='object', name='index')",failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_non_boolean_series[index-native_series_key1],TypeError: Cannot interpret 'Int64Dtype()' as a data type,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_non_boolean_series[index-native_series_key2],TypeError: Cannot interpret 'Int64Dtype()' as a data type,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_non_boolean_series[index-native_series_key3],TypeError: Cannot interpret 'Int64Dtype()' as a data type,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_non_boolean_series[index-native_series_key4],TypeError: Cannot interpret 'Int64Dtype()' as a data type,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_non_boolean_series[index-native_series_key5],TypeError: Cannot interpret 'Int64Dtype()' as a data type,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_non_boolean_series[index-native_series_key6],TypeError: Cannot interpret 'Int64Dtype()' as a data type,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_non_boolean_series[list-native_series_key1],TypeError: Cannot interpret 'Int64Dtype()' as a data type,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_non_boolean_series[list-native_series_key2],TypeError: Cannot interpret 'Int64Dtype()' as a data type,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_non_boolean_series[list-native_series_key3],TypeError: Cannot interpret 'Int64Dtype()' as a data type,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_non_boolean_series[list-native_series_key4],TypeError: Cannot interpret 'Int64Dtype()' as a data type,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_non_boolean_series[list-native_series_key5],TypeError: Cannot interpret 'Int64Dtype()' as a data type,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_non_boolean_series[list-native_series_key6],TypeError: Cannot interpret 'Int64Dtype()' as a data type,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_non_boolean_series[series-native_series_key0],TypeError: Cannot interpret 'Int64Dtype()' as a data type,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_non_boolean_series[series-native_series_key1],TypeError: Cannot interpret 'Int64Dtype()' as a data type,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_non_boolean_series[series-native_series_key2],TypeError: Cannot interpret 'Int64Dtype()' as a data type,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_non_boolean_series[series-native_series_key3],TypeError: Cannot interpret 'Int64Dtype()' as a data type,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_non_boolean_series[series-native_series_key4],TypeError: Cannot interpret 'Int64Dtype()' as a data type,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_non_boolean_series[series-native_series_key5],TypeError: Cannot interpret 'Int64Dtype()' as a data type,failed
tests.integ.modin.series.test_loc,test_series_loc_get_key_non_boolean_series[series-native_series_key6],TypeError: Cannot interpret 'Int64Dtype()' as a data type,failed
tests.integ.modin.series.test_loc,test_series_loc_get_negative_diff2native[key0-TypeError-Passing a set as an indexer is not supported. Use a list instead.],"AssertionError: Regex pattern did not match.
 Regex: 'Passing a set as an indexer is not supported. Use a list instead.'
 Input: ""'set' type is unordered""",failed
tests.integ.modin.series.test_loc,test_series_loc_get_negative_diff2native[key1-TypeError-Passing a dict as an indexer is not supported. Use a list instead.],Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_get_negative_diff2native[key2-TypeError-Please convert this to Snowpark pandas objects by calling modin],"KeyError: array([2, 4], dtype=object)",failed
tests.integ.modin.series.test_loc,test_series_loc_get_negative_diff2native[key3-TypeError-Please convert this to Snowpark pandas objects by calling modin],Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_get_negative_snowpark_pandas_input[dataframe],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_loc,test_series_loc_get_return_series[key1],"ValueError: Length mismatch: Expected axis has 8 elements, new values have 5 elements",failed
tests.integ.modin.series.test_loc,test_series_loc_get_return_series[key7],"ValueError: Length mismatch: Expected axis has 4 elements, new values have 7 elements",failed
tests.integ.modin.series.test_loc,test_series_loc_get_with_timedelta[key2-1-2],ValueError: Could not convert object to NumPy timedelta,failed
tests.integ.modin.series.test_loc,test_series_loc_get_with_timedelta_and_none_key,SNOW-1653219 None key does not work with timedelta index,xfailed
tests.integ.modin.series.test_loc,test_series_loc_get_with_timedelta_behavior_difference[key0-expected_result0],KeyError: Timedelta('4 days 23:59:59.999999999'),failed
tests.integ.modin.series.test_loc,test_series_loc_get_with_timedelta_behavior_difference[key1-expected_result1],KeyError: Timedelta('4 days 23:59:59.999999999'),failed
tests.integ.modin.series.test_loc,test_series_loc_get_with_timedelta_behavior_difference[key2-expected_result2],KeyError: Timedelta('2 days 23:59:59.999999999'),failed
tests.integ.modin.series.test_loc,test_series_loc_get_with_timedelta_behavior_difference[key3-expected_result3],KeyError: Timedelta('2 days 02:00:00'),failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index0-0],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, True, False, x]
[left]:  [99, 1, 2, 99, 4]
[right]: [99, 1, 2, 3, 4]",failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index0-1],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, True, False, x]
[left]:  [0, 99, 99, 3, 4]
[right]: [0, 99, 2, 3, 4]",failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index0-False],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, True, False, x]
[left]:  [0, 1, 2, 3, 4]
[right]: [0, 1, 2, 99, 4]",failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index0-True],"AssertionError: Series are different

Series values are different (40.0 %)
[index]: [0, 1, True, False, x]
[left]:  [99, 1, 2, 3, 4]
[right]: [0, 1, 99, 3, 4]",failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index1-1],"AssertionError: Series are different

Series values are different (25.0 %)
[index]: [0, 1, True, x]
[left]:  [0, 99, 99, 3]
[right]: [0, 99, 2, 3]",failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index1-False],"AssertionError: Series are different

Series length are different
[left]:  4, Index([0, 1, True, 'x'], dtype='object')
[right]: 5, Index([0, 1, True, 'x', False], dtype='object')",failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index1-True],"AssertionError: Series are different

Series values are different (50.0 %)
[index]: [0, 1, True, x]
[left]:  [99, 1, 2, 3]
[right]: [0, 1, 99, 3]",failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index2-0],"AssertionError: Series are different

Series length are different
[left]:  4, Index([1, True, False, 'x'], dtype='object')
[right]: 5, Index([1, True, False, 'x', 0], dtype='object')",failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index2-1],"AssertionError: Series are different

Series values are different (25.0 %)
[index]: [1, True, False, x]
[left]:  [99, 99, 2, 3]
[right]: [99, 1, 2, 3]",failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index2-False],"AssertionError: Series are different

Series values are different (25.0 %)
[index]: [1, True, False, x]
[left]:  [0, 1, 2, 3]
[right]: [0, 1, 99, 3]",failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index2-True],"AssertionError: Series are different

Series values are different (50.0 %)
[index]: [1, True, False, x]
[left]:  [99, 1, 2, 3]
[right]: [0, 99, 2, 3]",failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index3-0],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index3-1],"AssertionError: Series are different

Series values are different (33.33333 %)
[index]: [1, True, x]
[left]:  [99, 99, 2]
[right]: [99, 1, 2]",failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index3-False],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index3-True],"AssertionError: Series are different

Series values are different (66.66667 %)
[index]: [1, True, x]
[left]:  [99, 1, 2]
[right]: [0, 99, 2]",failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index4-0],"AssertionError: Series are different

Series values are different (25.0 %)
[index]: [0, 1, False, x]
[left]:  [99, 1, 99, 3]
[right]: [99, 1, 2, 3]",failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index4-False],"AssertionError: Series are different

Series values are different (25.0 %)
[index]: [0, 1, False, x]
[left]:  [0, 1, 2, 3]
[right]: [0, 1, 99, 3]",failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index4-True],"AssertionError: Series are different

Series length are different
[left]:  4, Index([0, 1, False, 'x'], dtype='object')
[right]: 5, Index([0, 1, False, 'x', True], dtype='object')",failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index5-0],"AssertionError: Series are different

Series values are different (33.33333 %)
[index]: [0, False, x]
[left]:  [99, 99, 2]
[right]: [99, 1, 2]",failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index5-1],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index5-False],"AssertionError: Series are different

Series values are different (33.33333 %)
[index]: [0, False, x]
[left]:  [0, 1, 2]
[right]: [0, 99, 2]",failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index5-True],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index6-False],"AssertionError: Series are different

Series values are different (33.33333 %)
[index]: [2, x, False]
[left]:  [0, 1, 0]
[right]: [0, 1, 99]",failed
tests.integ.modin.series.test_loc,test_series_loc_set_boolean_key[index6-True],"AssertionError: Series are different

Series values are different (66.66667 %)
[index]: [2, x, True]
[left]:  [99, 1, 0]
[right]: [0, 1, 99]",failed
tests.integ.modin.series.test_loc,test_series_loc_set_dataframe_item_negative[array],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_dataframe_item_negative[index],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_dataframe_item_negative[list],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_dataframe_item_negative[series],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_df_key_negative[1.2],"AssertionError: Regex pattern did not match.
 Regex: 'Data cannot be a DataFrame'
 Input: 'Index data must be 1-dimensional'",failed
tests.integ.modin.series.test_loc,test_series_loc_set_df_key_negative[None],"AssertionError: Regex pattern did not match.
 Regex: 'Data cannot be a DataFrame'
 Input: 'Index data must be 1-dimensional'",failed
tests.integ.modin.series.test_loc,test_series_loc_set_df_key_negative[item2],"AssertionError: Regex pattern did not match.
 Regex: 'Data cannot be a DataFrame'
 Input: 'Index data must be 1-dimensional'",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-1-1-10],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, new, new, new]
[right]: [x, new, new, new, new]
At positional index 1, first diff: y != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-1-1-1],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, new, z, w, u]
At positional index 1, first diff: y != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-1-1-4],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, new, new, new]
[right]: [x, new, new, new, new]
At positional index 1, first diff: y != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-1-1-None],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, new, new, new]
[right]: [x, new, new, new, new]
At positional index 1, first diff: y != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-1-4-10],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, y, z, w, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-1-4-4],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, y, z, w, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-1-4-None],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, y, z, w, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-2--1-10],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, new, w, new]
[right]: [new, y, new, w, new]
At positional index 0, first diff: x != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-2--1-4],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, new, w, new]
[right]: [new, y, new, w, new]
At positional index 0, first diff: x != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-2--1-None],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, new, w, new]
[right]: [new, y, new, w, new]
At positional index 0, first diff: x != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-2-1-10],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, new]
[right]: [x, y, new, w, new]
At positional index 2, first diff: z != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-2-1-1],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, new, z, w, u]
At positional index 1, first diff: y != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-2-1-4],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, new]
[right]: [x, y, new, w, new]
At positional index 2, first diff: z != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-2-1-None],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, new]
[right]: [x, y, new, w, new]
At positional index 2, first diff: z != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-2-4-10],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, y, z, w, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-2-4-4],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, y, z, w, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-2-4-None],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, y, z, w, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-9--1-10],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, y, z, w, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-9--1-1],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, new, z, w, u]
At positional index 1, first diff: y != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-9--1-4],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, y, z, w, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-9--1-None],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, y, z, w, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-9-1-10],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, y, z, w, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-9-1-1],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, new, z, w, u]
At positional index 1, first diff: y != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-9-1-4],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, y, z, w, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-9-1-None],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, y, z, w, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-9-4-10],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, y, z, w, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-9-4-4],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, y, z, w, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[-9-4-None],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, y, z, w, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[1-1--1],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [new, y, z, w, u]
[right]: [new, new, z, w, u]
At positional index 1, first diff: y != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[1-1-1],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, new, z, w, u]
At positional index 1, first diff: y != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[1-1-None],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [new, y, z, w, u]
[right]: [new, new, z, w, u]
At positional index 1, first diff: y != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[1-4--1],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [new, new, new, new, u]
[right]: [new, new, new, new, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[1-4-1],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, new, new, new, u]
[right]: [x, new, new, new, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[1-4-4],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, y, z, w, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[1-4-None],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [new, new, new, new, u]
[right]: [new, new, new, new, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[2-1--1],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [new, y, z, w, u]
At positional index 0, first diff: x != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[2-1-1],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, new, z, w, u]
At positional index 1, first diff: y != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[2-1-None],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [new, y, z, w, u]
At positional index 0, first diff: x != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[2-4--1],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [new, y, new, w, u]
[right]: [new, y, new, w, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[2-4-1],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, new, z, w, u]
[right]: [x, new, z, new, u]
At positional index 3, first diff: w != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[2-4-4],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, y, z, w, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[2-4-None],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [new, y, new, w, u]
[right]: [new, y, new, w, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[9-1--1],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [new, y, z, w, u]
At positional index 0, first diff: x != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[9-1-1],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, new, z, w, u]
At positional index 1, first diff: y != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[9-1-None],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [new, y, z, w, u]
At positional index 0, first diff: x != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[9-10-4],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, y, z, w, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[9-4--1],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [new, y, z, w, u]
At positional index 0, first diff: x != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[9-4-1],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, new, z, w, u]
At positional index 1, first diff: y != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[9-4-4],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [x, y, z, w, new]
At positional index 4, first diff: u != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_key_slice[9-4-None],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [x, y, z, w, u]
[right]: [new, y, z, w, u]
At positional index 0, first diff: x != new",failed
tests.integ.modin.series.test_loc,test_series_loc_set_none,"KeyError: array([None], dtype=object)",failed
tests.integ.modin.series.test_loc,test_series_loc_set_scalar_key_and_df_item_mixed_types_negative[item0-0],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_scalar_key_and_df_item_mixed_types_negative[item0-3.14],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_scalar_key_and_df_item_mixed_types_negative[item0-None],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_scalar_key_and_df_item_mixed_types_negative[item0-xyz],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_scalar_key_and_series_item_negative[item0-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_scalar_key_and_series_item_negative[item0-3.14],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_scalar_key_and_series_item_negative[item0-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_scalar_key_and_series_item_negative[item0-xyz],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_scalar_row_key_enlargement[ser_index1-x-94],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_loc,test_series_loc_set_series_and_list_like_row_key_and_item[ndarray-index with name-row_key0],IndexError: index 2 is out of bounds for axis 0 with size 2,failed
tests.integ.modin.series.test_loc,test_series_loc_set_series_and_list_like_row_key_and_item[ndarray-index-row_key0],IndexError: index 2 is out of bounds for axis 0 with size 2,failed
tests.integ.modin.series.test_loc,test_series_loc_set_series_and_list_like_row_key_and_item[ndarray-list-row_key0],IndexError: index 2 is out of bounds for axis 0 with size 2,failed
tests.integ.modin.series.test_loc,test_series_loc_set_series_and_list_like_row_key_and_item[ndarray-ndarray-row_key0],IndexError: index 2 is out of bounds for axis 0 with size 2,failed
tests.integ.modin.series.test_loc,test_series_loc_set_series_and_list_like_row_key_and_item[ndarray-series with name-row_key0],IndexError: index 2 is out of bounds for axis 0 with size 2,failed
tests.integ.modin.series.test_loc,test_series_loc_set_series_and_list_like_row_key_and_item[ndarray-series with non-default index-row_key0],IndexError: index 2 is out of bounds for axis 0 with size 2,failed
tests.integ.modin.series.test_loc,test_series_loc_set_series_and_list_like_row_key_and_item[ndarray-series-row_key0],IndexError: index 2 is out of bounds for axis 0 with size 2,failed
tests.integ.modin.series.test_loc,test_series_loc_set_series_list_like_key_and_range_like_item_negative[item0-key0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_series_list_like_key_and_range_like_item_negative[item0-key1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_slice_item_negative[12],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_slice_item_negative[1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_slice_item_negative[key2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_slice_item_negative[key3],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_empty_key_and_empty_item_negative[item0-key0],"KeyError: ""None of [[]] are in the [Index([0, 1, 2, 3, 4, 5, 6], dtype='int64')]""",failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_empty_key_and_empty_item_negative[item0-key1],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_empty_key_and_empty_item_negative[item0-key2],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_empty_key_and_empty_item_negative[item0-key3],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_empty_key_and_empty_item_negative[item1-key0],"KeyError: ""None of [[]] are in the [Index([0, 1, 2, 3, 4, 5, 6], dtype='int64')]""",failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_empty_key_and_empty_item_negative[item1-key1],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_empty_key_and_empty_item_negative[item1-key2],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_empty_key_and_empty_item_negative[item1-key3],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_empty_key_and_empty_item_negative[item2-key0],"KeyError: ""None of [[]] are in the [Index([0, 1, 2, 3, 4, 5, 6], dtype='int64')]""",failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_empty_key_and_empty_item_negative[item2-key1],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_empty_key_and_empty_item_negative[item2-key2],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_empty_key_and_empty_item_negative[item2-key3],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_empty_key_and_empty_series_item[key0],"KeyError: ""None of [[]] are in the [Index([0, 1, 2, 3, 4, 5, 6], dtype='int64')]""",failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_empty_key_and_scalar_item[key0],"KeyError: ""None of [[]] are in the [Index([0, 1, 2, 3, 4, 5, 6], dtype='int64')]""",failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_empty_key_and_series_item[item0-key0],"KeyError: ""None of [[]] are in the [Index([0, 1, 2, 3, 4, 5, 6], dtype='int64')]""",failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_scalar_key_and_list_like_item[item0--3.555],"ValueError: could not broadcast input array from shape (3,) into shape (1, 1)",failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_scalar_key_and_list_like_item[item0-3],"ValueError: could not broadcast input array from shape (3,) into shape (1, 1)",failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_scalar_key_and_list_like_item[item0-t],"ValueError: could not broadcast input array from shape (3,) into shape (1, 1)",failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_scalar_key_and_list_like_item[item1--3.555],"ValueError: could not broadcast input array from shape (3,) into shape (1, 1)",failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_scalar_key_and_list_like_item[item1-3],"ValueError: could not broadcast input array from shape (3,) into shape (1, 1)",failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_scalar_key_and_list_like_item[item1-t],"ValueError: could not broadcast input array from shape (3,) into shape (1, 1)",failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_scalar_key_and_list_like_item[item2--3.555],"ValueError: could not broadcast input array from shape (3,) into shape (1, 1)",failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_scalar_key_and_list_like_item[item2-3],"ValueError: could not broadcast input array from shape (3,) into shape (1, 1)",failed
tests.integ.modin.series.test_loc,test_series_loc_set_with_scalar_key_and_list_like_item[item2-t],"ValueError: could not broadcast input array from shape (3,) into shape (1, 1)",failed
tests.integ.modin.series.test_loc,test_series_non_partial_string_indexing_cases[<lambda>-True0],KeyError: '2010',failed
tests.integ.modin.series.test_loc,test_series_non_partial_string_indexing_cases[<lambda>-True1],"KeyError: array(['2010-11'], dtype='<U7')",failed
tests.integ.modin.series.test_loc,test_series_partial_string_indexing[<lambda>0],AssertionError: Got type: <class 'numpy.float64'>,failed
tests.integ.modin.series.test_loc,test_series_partial_string_indexing[<lambda>1],"KeyError: array(['2010-11'], dtype='<U7')",failed
tests.integ.modin.series.test_loc,test_series_partial_string_indexing_behavior_diff,"AssertionError: Series Expected type <class 'pandas.core.series.Series'>, found <class 'numpy.int64'> instead",failed
tests.integ.modin.series.test_mask,test_series_mask_index_no_names,SNOW-914228: Do not currently handle duplicates in index correctly,xfailed
tests.integ.modin.series.test_mask,test_series_mask_with_cond_and_other_series,ValueError: Must specify axis=0 or 1,failed
tests.integ.modin.series.test_mask,test_series_mask_with_duplicated_index_aligned,"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.series.test_mask,test_series_mask_with_lambda_other[<lambda>-3-6],ValueError: Array conditional must be same shape as self,failed
tests.integ.modin.series.test_mask,test_series_mask_with_lambda_other[<lambda>-4-6],ValueError: Array conditional must be same shape as self,failed
tests.integ.modin.series.test_mask,test_series_mask_with_np_array_cond,ValueError: Array conditional must be same shape as self,failed
tests.integ.modin.series.test_mask,test_series_mask_with_series_cond_single_index_different_names,"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['Y']",failed
tests.integ.modin.series.test_monotonic,test_monotonic_type_mismatch,"AssertionError: assert False
 +  where False = 0    0\n1    a\ndtype: object.is_monotonic_increasing
 +    where 0    0\n1    a\ndtype: object = <class 'modin.pandas.series.Series'>([0, 'a'])
 +      where <class 'modin.pandas.series.Series'> = pd.Series",failed
tests.integ.modin.series.test_name,test_create_series_from_object_with_name[sample1-1],"AssertionError: Series are different

Attribute ""name"" are different
[left]:  None
[right]: abc",failed
tests.integ.modin.series.test_name,test_create_series_from_object_with_name[sample2-1],"AssertionError: Series are different

Attribute ""name"" are different
[left]:  None
[right]: abc",failed
tests.integ.modin.series.test_name,test_create_series_from_object_with_name[sample3-1],"AssertionError: Series are different

Attribute ""name"" are different
[left]:  None
[right]: ('a', 'b')",failed
tests.integ.modin.series.test_nlargest_nsmallest,test_nlargest_nsmallest_all_keep_not_implemented[nlargest],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_nlargest_nsmallest,test_nlargest_nsmallest_all_keep_not_implemented[nsmallest],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_nlargest_nsmallest,test_nlargest_nsmallest_non_numeric_types[nlargest-data0],TypeError: Cannot use method 'nlargest' with dtype object,failed
tests.integ.modin.series.test_nlargest_nsmallest,test_nlargest_nsmallest_non_numeric_types[nlargest-data1],TypeError: '<' not supported between instances of 'str' and 'float',failed
tests.integ.modin.series.test_nlargest_nsmallest,test_nlargest_nsmallest_non_numeric_types[nsmallest-data0],TypeError: Cannot use method 'nsmallest' with dtype object,failed
tests.integ.modin.series.test_nlargest_nsmallest,test_nlargest_nsmallest_non_numeric_types[nsmallest-data1],TypeError: '<' not supported between instances of 'str' and 'int',failed
tests.integ.modin.series.test_nunique,test_series_nunique_deviating_nan_behavior[input_data0-1],"AssertionError: assert 3 == 1
 +  where 3 = <bound method Series.nunique of 0     NaT\n1     NaN\n2    <NA>\ndtype: object>(dropna=False)
 +    where <bound method Series.nunique of 0     NaT\n1     NaN\n2    <NA>\ndtype: object> = 0     NaT\n1     NaN\n2    <NA>\ndtype: object.nunique
 +      where 0     NaT\n1     NaN\n2    <NA>\ndtype: object = <class 'modin.pandas.series.Series'>([NaT, nan, <NA>])
 +        where <class 'modin.pandas.series.Series'> = pd.Series",failed
tests.integ.modin.series.test_nunique,test_series_nunique_deviating_nan_behavior[input_data1-2],"AssertionError: assert 5 == 2
 +  where 5 = <bound method Series.nunique of 0     NaT\n1     NaN\n2    <NA>\n3       7\n4    None\ndtype: object>(dropna=False)
 +    where <bound method Series.nunique of 0     NaT\n1     NaN\n2    <NA>\n3       7\n4    None\ndtype: object> = 0     NaT\n1     NaN\n2    <NA>\n3       7\n4    None\ndtype: object.nunique
 +      where 0     NaT\n1     NaN\n2    <NA>\n3       7\n4    None\ndtype: object = <class 'modin.pandas.series.Series'>([NaT, nan, <NA>, 7, None])
 +        where <class 'modin.pandas.series.Series'> = pd.Series",failed
tests.integ.modin.series.test_pct_change,test_pct_change_bad_periods,ValueError: periods must be an int. got <class 'str'> instead,failed
tests.integ.modin.series.test_pct_change,test_pct_change_simple[_NoDefault.no_default--1-nonulls],"Failed: DID NOT WARN. No warnings of type (<class 'FutureWarning'>,) were emitted.
The list of emitted warnings is: [].",failed
tests.integ.modin.series.test_pct_change,test_pct_change_simple[_NoDefault.no_default-0-nonulls],"Failed: DID NOT WARN. No warnings of type (<class 'FutureWarning'>,) were emitted.
The list of emitted warnings is: [].",failed
tests.integ.modin.series.test_pct_change,test_pct_change_simple[_NoDefault.no_default-1-nonulls],"Failed: DID NOT WARN. No warnings of type (<class 'FutureWarning'>,) were emitted.
The list of emitted warnings is: [].",failed
tests.integ.modin.series.test_pct_change,test_pct_change_simple[_NoDefault.no_default-2-nonulls],"Failed: DID NOT WARN. No warnings of type (<class 'FutureWarning'>,) were emitted.
The list of emitted warnings is: [].",failed
tests.integ.modin.series.test_pct_change,test_pct_change_unsupported_args[params0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_quantile,test_quantile_datetime_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_quantile,test_quantile_nearest_negative,[XPASS(strict)] SNOW-1062839: PERCENTILE_DISC does not give desired behavior,failed
tests.integ.modin.series.test_quantile,test_quantile_unsupported_args_negative[higher],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_quantile,test_quantile_unsupported_args_negative[lower],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_quantile,test_quantile_unsupported_args_negative[midpoint],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_reindex,test_reindex_index_duplicate_values[new_index0],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_reindex,test_reindex_index_duplicate_values[new_index1],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_reindex,test_reindex_index_duplicate_values[new_index2],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_reindex,test_reindex_index_duplicate_values[new_index3],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_pandas_negative[1-backfill],ValueError: limit argument for 'backfill' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_pandas_negative[1-bfill],ValueError: limit argument for 'backfill' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_pandas_negative[1-ffill],ValueError: limit argument for 'pad' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_pandas_negative[1-pad],ValueError: limit argument for 'pad' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_pandas_negative[100-backfill],ValueError: limit argument for 'backfill' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_pandas_negative[100-bfill],ValueError: limit argument for 'backfill' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_pandas_negative[100-ffill],ValueError: limit argument for 'pad' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_pandas_negative[100-pad],ValueError: limit argument for 'pad' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_pandas_negative[2-backfill],ValueError: limit argument for 'backfill' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_pandas_negative[2-bfill],ValueError: limit argument for 'backfill' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_pandas_negative[2-ffill],ValueError: limit argument for 'pad' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_pandas_negative[2-pad],ValueError: limit argument for 'pad' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[backfill-100],ValueError: limit argument for 'backfill' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[backfill-1],ValueError: limit argument for 'backfill' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[backfill-2],ValueError: limit argument for 'backfill' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[bfill-100],ValueError: limit argument for 'backfill' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[bfill-1],ValueError: limit argument for 'backfill' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[bfill-2],ValueError: limit argument for 'backfill' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[ffill-100],ValueError: limit argument for 'pad' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[ffill-1],ValueError: limit argument for 'pad' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[ffill-2],ValueError: limit argument for 'pad' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[pad-100],ValueError: limit argument for 'pad' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[pad-1],ValueError: limit argument for 'pad' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_fill_method_with_old_na_values_pandas_negative[pad-2],ValueError: limit argument for 'pad' method only well-defined if index and target are monotonic,failed
tests.integ.modin.series.test_reindex,test_reindex_index_passed_twice,"AssertionError: Regex pattern did not match.
 Regex: ""got\\ multiple\\ values\\ for\\ argument\\ 'index'""
 Input: ""multiple values for argument 'index'""",failed
tests.integ.modin.series.test_reindex,test_reindex_multiindex_negative,"ValueError: Buffer dtype mismatch, expected 'Python object' but got 'long'",failed
tests.integ.modin.series.test_reindex,test_reindex_multiple_args_passed,"AssertionError: Regex pattern did not match.
 Regex: ""got\\ multiple\\ values\\ for\\ argument\\ 'index'""
 Input: ""multiple values for argument 'index'""",failed
tests.integ.modin.series.test_rename,test_rename,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_rename,test_rename_axis_supported,Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_rename,test_rename_by_series,TypeError: 'Series' object is not callable,failed
tests.integ.modin.series.test_rename,test_rename_callable,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_rename,test_rename_copy_warning,"AssertionError: assert 'The argument `copy` of `series.rename` has been ignored by Snowpark pandas API' in ''
 +  where '' = <_pytest.logging.LogCaptureFixture object at 0x34f133040>.text",failed
tests.integ.modin.series.test_rename,test_rename_error_arg,Failed: DID NOT RAISE <class 'KeyError'>,failed
tests.integ.modin.series.test_rename,test_rename_inplace,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_rename,test_rename_with_custom_indexer,"TypeError: Index(...) must be called with a collection of some kind, <tests.integ.modin.series.test_rename.TestRename.test_rename_with_custom_indexer.<locals>.MyIndexer object at 0x34e929690> was passed",failed
tests.integ.modin.series.test_rename,test_rename_with_custom_indexer_inplace,"TypeError: Index(...) must be called with a collection of some kind, <tests.integ.modin.series.test_rename.TestRename.test_rename_with_custom_indexer_inplace.<locals>.MyIndexer object at 0x34cee3cd0> was passed",failed
tests.integ.modin.series.test_replace,test_replace_limit_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_replace,test_replace_method_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_replace,test_replace_no_value_negative,Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_replace,test_replace_to_replace_dict_negative[to_replace0-NEW],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_replace,test_replace_to_replace_dict_negative[to_replace1-None],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_replace,test_replace_to_replace_dict_negative[to_replace2-value2],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_replace,test_replace_value_dict_negative[one-value0],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_replace,test_replace_value_dict_negative[to_replace1-value1],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_round,test_round_timedelta_negative[-1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_round,test_round_timedelta_negative[-2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_round,test_round_timedelta_negative[0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_round,test_round_timedelta_negative[1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_round,test_round_timedelta_negative[2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[bad_str-is not recognized--1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[bad_str-is not recognized--2],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[bad_str-is not recognized-0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[bad_str-is not recognized-1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[bad_str-is not recognized-2],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value0-Invalid argument types for function--1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value0-Invalid argument types for function--2],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value0-Invalid argument types for function-0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value0-Invalid argument types for function-1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value0-Invalid argument types for function-2],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value1-Invalid argument types for function--1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value1-Invalid argument types for function--2],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value1-Invalid argument types for function-0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value1-Invalid argument types for function-1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value1-Invalid argument types for function-2],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value2-Failed to cast variant value--1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value2-Failed to cast variant value--2],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value2-Failed to cast variant value-0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value2-Failed to cast variant value-1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value2-Failed to cast variant value-2],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value4-Failed to cast variant value--1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value4-Failed to cast variant value--2],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value4-Failed to cast variant value-0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value4-Failed to cast variant value-1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value4-Failed to cast variant value-2],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value5-Failed to cast variant value--1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value5-Failed to cast variant value--2],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value5-Failed to cast variant value-0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value5-Failed to cast variant value-1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_invalid_in_sf_negative[invalid_value5-Failed to cast variant value-2],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_round,test_ser_round_neg_even_half[0],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [-2.0, -4.0, -6.0]
[right]: [-3.0, -5.0, -7.0]
At positional index 0, first diff: -2.0 != -3.0",failed
tests.integ.modin.series.test_round,test_ser_round_pos_even_half[0],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [0, 1, 2]
[left]:  [2.0, 4.0, 6.0]
[right]: [3.0, 5.0, 7.0]
At positional index 0, first diff: 2.0 != 3.0",failed
tests.integ.modin.series.test_sample,test_series_sample_not_implemented[<lambda>0],KeyError: 'String passed to weights not a valid column',failed
tests.integ.modin.series.test_sample,test_series_sample_not_implemented[<lambda>1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_sample,test_series_sample_over_size_n[<lambda>],ValueError: Cannot take a larger sample than population when 'replace=False',failed
tests.integ.modin.series.test_setitem,test_behavior_table_is_up_to_date,"AssertionError: Exception raised: table: SnowparkSQLException, expected: - for {'series_type': 'int', 'item_type': 'string', 'key_type': 'int'}.",failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index0-0],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, True, False, x]
[left]:  [99, 1, 2, 99, 4]
[right]: [99, 1, 2, 3, 4]",failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index0-1],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, True, False, x]
[left]:  [0, 99, 99, 3, 4]
[right]: [0, 99, 2, 3, 4]",failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index0-False],"AssertionError: Series are different

Series values are different (20.0 %)
[index]: [0, 1, True, False, x]
[left]:  [0, 1, 2, 3, 4]
[right]: [0, 1, 2, 99, 4]",failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index0-True],"AssertionError: Series are different

Series values are different (40.0 %)
[index]: [0, 1, True, False, x]
[left]:  [99, 1, 2, 3, 4]
[right]: [0, 1, 99, 3, 4]",failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index1-1],"AssertionError: Series are different

Series values are different (25.0 %)
[index]: [0, 1, True, x]
[left]:  [0, 99, 99, 3]
[right]: [0, 99, 2, 3]",failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index1-False],"AssertionError: Series are different

Series length are different
[left]:  4, Index([0, 1, True, 'x'], dtype='object')
[right]: 5, Index([0, 1, True, 'x', False], dtype='object')",failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index1-True],"AssertionError: Series are different

Series values are different (50.0 %)
[index]: [0, 1, True, x]
[left]:  [99, 1, 2, 3]
[right]: [0, 1, 99, 3]",failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index2-0],"AssertionError: Series are different

Series length are different
[left]:  4, Index([1, True, False, 'x'], dtype='object')
[right]: 5, Index([1, True, False, 'x', 0], dtype='object')",failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index2-1],"AssertionError: Series are different

Series values are different (25.0 %)
[index]: [1, True, False, x]
[left]:  [99, 99, 2, 3]
[right]: [99, 1, 2, 3]",failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index2-False],"AssertionError: Series are different

Series values are different (25.0 %)
[index]: [1, True, False, x]
[left]:  [0, 1, 2, 3]
[right]: [0, 1, 99, 3]",failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index2-True],"AssertionError: Series are different

Series values are different (50.0 %)
[index]: [1, True, False, x]
[left]:  [99, 1, 2, 3]
[right]: [0, 99, 2, 3]",failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index3-0],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index3-1],"AssertionError: Series are different

Series values are different (33.33333 %)
[index]: [1, True, x]
[left]:  [99, 99, 2]
[right]: [99, 1, 2]",failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index3-False],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index3-True],"AssertionError: Series are different

Series values are different (66.66667 %)
[index]: [1, True, x]
[left]:  [99, 1, 2]
[right]: [0, 99, 2]",failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index4-0],"AssertionError: Series are different

Series values are different (25.0 %)
[index]: [0, 1, False, x]
[left]:  [99, 1, 99, 3]
[right]: [99, 1, 2, 3]",failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index4-False],"AssertionError: Series are different

Series values are different (25.0 %)
[index]: [0, 1, False, x]
[left]:  [0, 1, 2, 3]
[right]: [0, 1, 99, 3]",failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index4-True],"AssertionError: Series are different

Series length are different
[left]:  4, Index([0, 1, False, 'x'], dtype='object')
[right]: 5, Index([0, 1, False, 'x', True], dtype='object')",failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index5-0],"AssertionError: Series are different

Series values are different (33.33333 %)
[index]: [0, False, x]
[left]:  [99, 99, 2]
[right]: [99, 1, 2]",failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index5-1],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index5-False],"AssertionError: Series are different

Series values are different (33.33333 %)
[index]: [0, False, x]
[left]:  [0, 1, 2]
[right]: [0, 99, 2]",failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index5-True],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index6-False],"AssertionError: Series are different

Series values are different (33.33333 %)
[index]: [2, x, False]
[left]:  [0, 1, 0]
[right]: [0, 1, 99]",failed
tests.integ.modin.series.test_setitem,test_df_setitem_boolean_key[index6-True],"AssertionError: Series are different

Series values are different (66.66667 %)
[index]: [2, x, True]
[left]:  [99, 1, 0]
[right]: [0, 1, 99]",failed
tests.integ.modin.series.test_setitem,test_series_setitem_array_like_and_series_key_and_scalar_item[abc-key0],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_array_like_and_series_key_and_scalar_item[abc-key1],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_array_like_key_and_scalar_item_mixed_types[0-key1],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_array_like_key_and_scalar_item_mixed_types[3.14-key1],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_array_like_key_and_scalar_item_mixed_types[None-key1],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_array_like_key_and_scalar_item_mixed_types[None-key3],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_array_like_key_and_scalar_item_mixed_types[xyz-key0],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_array_like_key_and_scalar_item_mixed_types[xyz-key1],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_array_like_key_and_scalar_item_mixed_types[xyz-key3],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case2_non_numeric_index[0-False],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case2_non_numeric_index[0-True],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case2_non_numeric_index[3.14-False],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case2_non_numeric_index[3.14-True],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case2_non_numeric_index[None-False],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case2_non_numeric_index[None-True],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case2_non_numeric_index[xyz-False],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case2_non_numeric_index[xyz-True],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case2_numeric_index[0-False],"AssertionError: Series are different

Series length are different
[left]:  5, Index([0, 1, 2, 3, False], dtype='object')
[right]: 4, Index([False, True, True, True], dtype='bool')",failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case2_numeric_index[0-True],"AssertionError: Series are different

Series length are different
[left]:  5, Index([0, 1, 2, 3, True], dtype='object')
[right]: 4, Index([False, True, True, True], dtype='bool')",failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case2_numeric_index[3.14-False],"AssertionError: Series are different

Series length are different
[left]:  5, Index([0, 1, 2, 3, False], dtype='object')
[right]: 4, Index([False, True, True, True], dtype='bool')",failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case2_numeric_index[3.14-True],"AssertionError: Series are different

Series length are different
[left]:  5, Index([0, 1, 2, 3, True], dtype='object')
[right]: 4, Index([False, True, True, True], dtype='bool')",failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case2_numeric_index[None-False],"AssertionError: Series are different

Series length are different
[left]:  5, Index([0, 1, 2, 3, False], dtype='object')
[right]: 4, Index([False, True, True, True], dtype='bool')",failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case2_numeric_index[None-True],"AssertionError: Series are different

Series length are different
[left]:  5, Index([0, 1, 2, 3, True], dtype='object')
[right]: 4, Index([False, True, True, True], dtype='bool')",failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case2_numeric_index[xyz-True],"AssertionError: Series are different

Series length are different
[left]:  5, Index([0, 1, 2, 3, True], dtype='object')
[right]: 4, Index([False, True, True, True], dtype='bool')",failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case3[0-0],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case3[0-1],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case3[3.14-0],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case3[3.14-1],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case3[None-0],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case3[xyz-0],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case3[xyz-1],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case4_negative[0-False],Snowflake type casting error caused due to comparison of different types with IFF.,xfailed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case4_negative[0-True],Snowflake type casting error caused due to comparison of different types with IFF.,xfailed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case4_negative[3.14-False],Snowflake type casting error caused due to comparison of different types with IFF.,xfailed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case4_negative[3.14-True],Snowflake type casting error caused due to comparison of different types with IFF.,xfailed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case4_negative[None-False],Snowflake type casting error caused due to comparison of different types with IFF.,xfailed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case4_negative[None-True],Snowflake type casting error caused due to comparison of different types with IFF.,xfailed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case4_negative[xyz-False],Snowflake type casting error caused due to comparison of different types with IFF.,xfailed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_case4_negative[xyz-True],Snowflake type casting error caused due to comparison of different types with IFF.,xfailed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_label_updated[0-False],"AssertionError: Series are different

Series values are different (25.0 %)
[index]: [a, True, b, False]
[left]:  [1.1, hello, 1.2, 34]
[right]: [1.1, hello, 1.2, 0]
At positional index 3, first diff: 34 != 0",failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_label_updated[0-True],"AssertionError: Series are different

Series values are different (50.0 %)
[index]: [a, True, b, False]
[left]:  [0, hello, 1.2, 34]
[right]: [1.1, 0, 1.2, 34]
At positional index 0, first diff: 0 != 1.1",failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_label_updated[3.14-False],"AssertionError: Series are different

Series values are different (25.0 %)
[index]: [a, True, b, False]
[left]:  [1.1, hello, 1.2, 34]
[right]: [1.1, hello, 1.2, 3.14]
At positional index 3, first diff: 34 != 3.14",failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_label_updated[3.14-True],"AssertionError: Series are different

Series values are different (50.0 %)
[index]: [a, True, b, False]
[left]:  [3.14, hello, 1.2, 34]
[right]: [1.1, 3.14, 1.2, 34]
At positional index 0, first diff: 3.14 != 1.1",failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_label_updated[None-False],"AssertionError: Series are different

Series values are different (25.0 %)
[index]: [a, True, b, False]
[left]:  [1.1, hello, 1.2, 34]
[right]: [1.1, hello, 1.2, None]
At positional index 3, first diff: 34 != None",failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_label_updated[None-True],"AssertionError: Series are different

Series values are different (50.0 %)
[index]: [a, True, b, False]
[left]:  [None, hello, 1.2, 34]
[right]: [1.1, None, 1.2, 34]
At positional index 0, first diff: None != 1.1",failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_label_updated[xyz-False],"AssertionError: Series are different

Series values are different (75.0 %)
[index]: [a, True, b, False]
[left]:  [1.1, hello, 1.2, 34]
[right]: [1.1, hello, 1.2, xyz]
At positional index 0, first diff: 1.1 != 1.1",failed
tests.integ.modin.series.test_setitem,test_series_setitem_boolean_key_and_scalar_item_label_updated[xyz-True],"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [a, True, b, False]
[left]:  [xyz, hello, 1.2, 34]
[right]: [1.1, xyz, 1.2, 34]
At positional index 0, first diff: xyz != 1.1",failed
tests.integ.modin.series.test_setitem,test_series_setitem_check_type_behavior_with_string_key_and_boolean_scalar_item[False],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_check_type_behavior_with_string_key_and_boolean_scalar_item[True],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_check_type_behavior_with_string_key_and_number_scalar_item[-8.999-data6],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_check_type_behavior_with_string_key_and_number_scalar_item[12-data6],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_check_type_behavior_with_string_key_and_string_scalar_item[data0],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_check_type_behavior_with_string_key_and_string_scalar_item[data1],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_check_type_behavior_with_string_key_and_string_scalar_item[data2],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_check_type_behavior_with_string_key_and_string_scalar_item[data3],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_check_type_behavior_with_string_key_and_string_scalar_item[data5],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_check_type_behavior_with_string_key_and_string_scalar_item[data6],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_check_type_behavior_with_string_key_and_string_scalar_item[data7],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_check_type_behavior_with_string_key_and_string_scalar_item[data8],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_check_type_behavior_with_string_key_and_string_scalar_item[data9],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_comparator_key_string_compare,Snowflake type casting error caused due to comparison of different types with IFF.,xfailed
tests.integ.modin.series.test_setitem,test_series_setitem_df_key_negative[0],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark pandas DataFrame cannot be used as an indexer with Series'
 Input: 'Index data must be 1-dimensional'",failed
tests.integ.modin.series.test_setitem,test_series_setitem_df_key_negative[item1],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark pandas DataFrame cannot be used as an indexer with Series'
 Input: 'Index data must be 1-dimensional'",failed
tests.integ.modin.series.test_setitem,test_series_setitem_df_key_negative[item2],"AssertionError: Regex pattern did not match.
 Regex: 'Snowpark pandas DataFrame cannot be used as an indexer with Series'
 Input: 'Index data must be 1-dimensional'",failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-1-1--1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-1-1-10],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-1-1-4],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-1-1-None],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-1-None--1],"AssertionError: Series are different

Series values are different (80.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [A, B, C, D, E]
[right]: [E, D, C, B, A]
At positional index 0, first diff: A != E",failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-1-None-10],"AssertionError: Series are different

Series values are different (80.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [A, B, C, D, E]
[right]: [E, D, C, B, A]
At positional index 0, first diff: A != E",failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-1-None-1],"AssertionError: Series are different

Series values are different (40.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [A, B, z, w, u]
[right]: [B, A, z, w, u]
At positional index 0, first diff: A != B",failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-1-None-4],"AssertionError: Series are different

Series values are different (80.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [A, B, C, D, E]
[right]: [E, D, C, B, A]
At positional index 0, first diff: A != E",failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-1-None-None],"AssertionError: Series are different

Series values are different (80.0 %)
[index]: [0, 1, 2, 3, 4]
[left]:  [A, B, C, D, E]
[right]: [E, D, C, B, A]
At positional index 0, first diff: A != E",failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-2-1--1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-2-1-10],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-2-1-4],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-2-1-None],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-2-None--1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-2-None-10],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-2-None-1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-2-None-4],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-2-None-None],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-9-1--1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-9-1-10],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-9-1-4],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-9-1-None],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-9-None--1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-9-None-10],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-9-None-1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-9-None-4],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[-9-None-None],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[1--1-1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[1-10--1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[1-10-1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[1-10-4],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[1-4-1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[1-None--1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[1-None-1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[1-None-4],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[2--1-1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[2--1-None],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[2-10--1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[2-10-1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[2-10-4],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[2-10-None],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[2-4-1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[2-4-None],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[2-None--1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[2-None-1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[2-None-4],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[2-None-None],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[9--1-1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[9-10--1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[9-10-1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[9-10-4],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[9-4-1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[9-None--1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[9-None-1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[9-None-4],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[None--1-1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[None-10--1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[None-10-1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[None-10-4],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[None-4-1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[None-None--1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[None-None-1],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_key_slice_with_series[None-None-4],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_range_like_key_and_series_list_like_item[item0-key0],TypeError: boolean value of NA is ambiguous,failed
tests.integ.modin.series.test_setitem,test_series_setitem_range_like_key_and_series_list_like_item[item0-key1],"AssertionError: Series are different

Series values are different (28.57143 %)
[index]: [0, 1, 2, 3, 4, 5, 6]
[left]:  [1, 21, True, a, <NA>, (1,), [1]]
[right]: [1, abc, True, a, 21, (1,), [1]]
At positional index 1, first diff: 21 != abc",failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_array_like_and_series_item[item1-a],"Failed: DID NOT RAISE (<class 'ValueError'>, <class 'NotImplementedError'>)",failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_array_like_and_series_item[item1-z],"Failed: DID NOT RAISE (<class 'ValueError'>, <class 'NotImplementedError'>)",failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_array_like_item_mixed_types[item0-0],"ValueError: could not broadcast input array from shape (4,) into shape (1, 1)",failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_array_like_item_mixed_types[item0-3.14],"ValueError: could not broadcast input array from shape (4,) into shape (1, 1)",failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_array_like_item_mixed_types[item0-None],"ValueError: could not broadcast input array from shape (4,) into shape (1, 1)",failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_array_like_item_mixed_types[item0-xyz],"ValueError: could not broadcast input array from shape (4,) into shape (1, 1)",failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_array_like_item_mixed_types[item1-0],"ValueError: could not broadcast input array from shape (4,) into shape (1, 1)",failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_array_like_item_mixed_types[item1-3.14],"ValueError: could not broadcast input array from shape (4,) into shape (1, 1)",failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_array_like_item_mixed_types[item1-None],"ValueError: could not broadcast input array from shape (4,) into shape (1, 1)",failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_array_like_item_mixed_types[item1-xyz],"ValueError: could not broadcast input array from shape (4,) into shape (1, 1)",failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_array_like_item_mixed_types[item2-0],"ValueError: could not broadcast input array from shape (5,) into shape (1, 1)",failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_array_like_item_mixed_types[item2-3.14],"ValueError: could not broadcast input array from shape (5,) into shape (1, 1)",failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_array_like_item_mixed_types[item2-None],"ValueError: could not broadcast input array from shape (5,) into shape (1, 1)",failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_array_like_item_mixed_types[item2-xyz],"ValueError: could not broadcast input array from shape (5,) into shape (1, 1)",failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_array_like_item_mixed_types[item3-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_array_like_item_mixed_types[item3-3.14],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_array_like_item_mixed_types[item3-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_array_like_item_mixed_types[item3-xyz],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_df_item_mixed_types_negative[item0-0],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_df_item_mixed_types_negative[item0-3.14],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_df_item_mixed_types_negative[item0-None],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_df_item_mixed_types_negative[item0-xyz],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_scalar_item[None-35],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_scalar_item[z-35],ValueError: cannot reindex on an axis with duplicate labels,failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_scalar_item_mixed_type_series_type_coercion[0-a],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_scalar_item_mixed_type_series_type_coercion[3.14-a],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_scalar_item_mixed_type_series_type_coercion[xyz-a],Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_series_item_negative[item0-0],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_series_item_negative[item0-3.14],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_series_item_negative[item0-None],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_scalar_key_and_series_item_negative[item0-xyz],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_series_behavior_that_deviates_from_loc_set,"AssertionError: Series are different

Series values are different (33.33333 %)
[index]: [a, b, c, d, e, f]
[left]:  [0.0, nan, nan, 3.0, 4.0, 5.0]
[right]: [0, 20, 30, 3, 4, 5]",failed
tests.integ.modin.series.test_setitem,test_series_setitem_series_list_like_item_key_and_item_no_duplicates[item0-key0],"AssertionError: Series are different

Series values are different (71.42857 %)
[index]: [0, 1, 2, 3, 4, 5, 6]
[left]:  [1, 4, 0, 2, 3, (1,), [1]]
[right]: [0, 1, 2, 3, 4, (1,), [1]]
At positional index 0, first diff: 1 != 0",failed
tests.integ.modin.series.test_setitem,test_series_setitem_series_list_like_item_key_and_item_no_duplicates[item0-key1],"AssertionError: Series are different

Series values are different (71.42857 %)
[index]: [0, 1, 2, 3, 4, 5, 6]
[left]:  [1.0, 1.1, True, 2.0, 3.0, <NA>, <NA>]
[right]: [0, 1.1, True, 3, 1, 2, 4]
At positional index 0, first diff: 1.0 != 0",failed
tests.integ.modin.series.test_setitem,test_series_setitem_series_list_like_item_key_and_item_with_duplicates[item0-key0],"AssertionError: Series are different

Series values are different (71.42857 %)
[index]: [0, 1, 2, 3, 4, 5, 6]
[left]:  [1, 4, 1, 0, 2, (1,), [1]]
[right]: [0, 1, 2, 3, 4, (1,), [1]]
At positional index 0, first diff: 1 != 0",failed
tests.integ.modin.series.test_setitem,test_series_setitem_series_list_like_item_key_and_item_with_duplicates[item0-key1],"AssertionError: Series are different

Series values are different (28.57143 %)
[index]: [0, 1, 2, 3, 4, 5, 6]
[left]:  [1, 1.1, True, a, 2, 3, 2]
[right]: [2, 1.1, True, a, 2, 3, 0]
At positional index 0, first diff: 1 != 2",failed
tests.integ.modin.series.test_setitem,test_series_setitem_series_list_like_key_and_range_like_item_negative[item0-key0],"ValueError: could not broadcast input array from shape (7,) into shape (5, 1)",failed
tests.integ.modin.series.test_setitem,test_series_setitem_series_list_like_key_and_range_like_item_negative[item0-key1],"ValueError: could not broadcast input array from shape (7,) into shape (5, 1)",failed
tests.integ.modin.series.test_setitem,test_series_setitem_series_list_like_key_and_range_like_item_negative[item0-key2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_series_list_like_key_and_range_like_item_negative[item0-key3],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_slice_item_negative[12],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_slice_item_negative[1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_slice_item_negative[key2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_slice_item_negative[key3],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_value_length_is_short,"AssertionError: Series are different

Series values are different (100.0 %)
[index]: [a, b, c, d]
[left]:  [nan, nan, nan, nan]
[right]: [0, 1, 1, 1]",failed
tests.integ.modin.series.test_setitem,test_series_setitem_with_empty_key_and_empty_item_negative[item0-key0],"KeyError: ""None of [[]] are in the [Index([0, 1, 2, 3, 4, 5, 6], dtype='int64')]""",failed
tests.integ.modin.series.test_setitem,test_series_setitem_with_empty_key_and_empty_item_negative[item0-key1],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_with_empty_key_and_empty_item_negative[item0-key2],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_with_empty_key_and_empty_item_negative[item0-key3],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_with_empty_key_and_empty_item_negative[item1-key0],"KeyError: ""None of [[]] are in the [Index([0, 1, 2, 3, 4, 5, 6], dtype='int64')]""",failed
tests.integ.modin.series.test_setitem,test_series_setitem_with_empty_key_and_empty_item_negative[item1-key1],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_with_empty_key_and_empty_item_negative[item1-key2],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_with_empty_key_and_empty_item_negative[item1-key3],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.series.test_setitem,test_series_setitem_with_empty_key_and_empty_series_item[key0],"KeyError: ""None of [[]] are in the [Index([0, 1, 2, 3, 4, 5, 6], dtype='int64')]""",failed
tests.integ.modin.series.test_setitem,test_series_setitem_with_empty_key_and_scalar_item[key0],"KeyError: ""None of [[]] are in the [Index([0, 1, 2, 3, 4, 5, 6], dtype='int64')]""",failed
tests.integ.modin.series.test_shift,test_shift_unsupported_args[params0-periods],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_shift,test_shift_unsupported_args[params1-suffix],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_sort_index,test_sort_index_series_multiindex_unsupported,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_sort_values,test_sort_values_by_ascending_length_mismatch_negative,"AssertionError: Regex pattern did not match.
 Regex: 'Length of ascending \\(5\\) must be 1 for Series'
 Input: 'Length of ascending (5) != length of by (1)'",failed
tests.integ.modin.series.test_sort_values,test_sort_values_invalid_axis_negative[1],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_sort_values,test_sort_values_invalid_axis_negative[2],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_sort_values,test_sort_values_invalid_kind_negative,"AssertionError: Regex pattern did not match.
 Regex: ""sort kind must be 'stable' or None \\(got 'fastsort'\\)""
 Input: ""sort kind must be one of 'quick', 'heap', or 'stable' (got 'fastsort')""",failed
tests.integ.modin.series.test_sort_values,test_sort_values_key,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str___getitem___list_neg,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str___getitem___neg[data0-1.2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str___getitem___neg[data1-a],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str___getitem___neg[data2-a],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str___getitem___neg[data3-1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str___getitem___string_key,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_contains_invlaid_na[1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_contains_invlaid_na[klm],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_contains_invlaid_na[na2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_contains_invlaid_na[na3],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_get_neg[data0-1.2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_get_neg[data1-a],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_get_neg[data2-a],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_get_neg[data3-1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_invalid_dtypes[data0],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_str_accessor,test_str_invalid_dtypes[data1],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.series.test_str_accessor,test_str_match_invlaid_na[1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_match_invlaid_na[klm],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_match_invlaid_na[na2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_match_invlaid_na[na3],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_replace_neg[-2.0-a-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_replace_neg[None-a-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_replace_neg[a-<lambda>-1-NotImplementedError],ValueError: Cannot use a callable replacement when regex=False,failed
tests.integ.modin.series.test_str_accessor,test_str_replace_neg[a-a-0-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_replace_neg[a-a-1-NotImplementedError],ValueError: Cannot use a compiled regex as replacement pattern with regex=False,failed
tests.integ.modin.series.test_str_accessor,test_str_replace_neg[a-a-a-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_slice_list_neg,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_split_neg[-2.0-1-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_split_neg[a-1-NotImplementedError],ValueError: Cannot use a compiled regex as replacement pattern with regex=False,failed
tests.integ.modin.series.test_str_accessor,test_str_split_neg[a-a-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_split_regex[None],[XPASS(strict)] Snowflake SQL's split function does not support regex,failed
tests.integ.modin.series.test_str_accessor,test_str_split_regex[True],[XPASS(strict)] Snowflake SQL's split function does not support regex,failed
tests.integ.modin.series.test_str_accessor,test_str_startswith_endswith_invlaid_na[1-endswith],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_startswith_endswith_invlaid_na[1-startswith],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_startswith_endswith_invlaid_na[klm-endswith],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_startswith_endswith_invlaid_na[klm-startswith],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_startswith_endswith_invlaid_na[na2-endswith],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_startswith_endswith_invlaid_na[na2-startswith],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_startswith_endswith_invlaid_na[na3-endswith],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_startswith_endswith_invlaid_na[na3-startswith],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_strip_variants_neg[-2.0-lstrip],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_strip_variants_neg[-2.0-rstrip],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_strip_variants_neg[-2.0-strip],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_strip_variants_neg[1-lstrip],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_strip_variants_neg[1-rstrip],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_str_accessor,test_str_strip_variants_neg[1-strip],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_take,test_series_take,IndexError: positional indexers are out-of-bounds,failed
tests.integ.modin.series.test_to_dynamic_table,test_to_dynamic_table_enforce_ordering_raises[function],"NotImplementedError: Modin supports the method Series.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_dynamic_table,test_to_dynamic_table_enforce_ordering_raises[method],"NotImplementedError: Modin supports the method Series.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_dynamic_table,test_to_dynamic_table_index[function-False-None-expected_index_columns2],"NotImplementedError: Modin supports the method Series.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_dynamic_table,test_to_dynamic_table_index[function-False-index_labels3-expected_index_columns3],"NotImplementedError: Modin supports the method Series.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_dynamic_table,test_to_dynamic_table_index[function-True-None-expected_index_columns0],"NotImplementedError: Modin supports the method Series.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_dynamic_table,test_to_dynamic_table_index[function-True-index_labels1-expected_index_columns1],"NotImplementedError: Modin supports the method Series.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_dynamic_table,test_to_dynamic_table_index[method-False-None-expected_index_columns2],"NotImplementedError: Modin supports the method Series.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_dynamic_table,test_to_dynamic_table_index[method-False-index_labels3-expected_index_columns3],"NotImplementedError: Modin supports the method Series.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_dynamic_table,test_to_dynamic_table_index[method-True-None-expected_index_columns0],"NotImplementedError: Modin supports the method Series.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_dynamic_table,test_to_dynamic_table_index[method-True-index_labels1-expected_index_columns1],"NotImplementedError: Modin supports the method Series.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_dynamic_table,test_to_dynamic_table_multiindex[function],"NotImplementedError: Modin supports the method Series.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_dynamic_table,test_to_dynamic_table_multiindex[method],"NotImplementedError: Modin supports the method Series.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_dynamic_table,test_to_dynamic_table_multiple_sessions_no_enforce_ordering[function],"NotImplementedError: Modin supports the method Series.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_dynamic_table,test_to_dynamic_table_multiple_sessions_no_enforce_ordering[method],"NotImplementedError: Modin supports the method Series.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_dynamic_table,test_to_dynamic_table_no_enforce_ordering[function],"NotImplementedError: Modin supports the method Series.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_dynamic_table,test_to_dynamic_table_no_enforce_ordering[method],"NotImplementedError: Modin supports the method Series.to_dynamic_table on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_iceberg,test_to_iceberg_config_required[function],"AssertionError: Regex pattern did not match.
 Regex: ""missing 1 required keyword-only argument: 'iceberg_config'""
 Input: ""missing a required argument: 'iceberg_config'""",failed
tests.integ.modin.series.test_to_iceberg,test_to_iceberg_config_required[method],"AssertionError: Regex pattern did not match.
 Regex: ""missing 1 required keyword-only argument: 'iceberg_config'""
 Input: ""missing a required argument: 'iceberg_config'""",failed
tests.integ.modin.series.test_to_list,test_to_list[data0],"AssertionError: assert 'The current operation leads to materialization' in ''
 +  where '' = <_pytest.logging.LogCaptureFixture object at 0x3505d30d0>.text",failed
tests.integ.modin.series.test_to_list,test_to_list[data10],"AssertionError: assert 'The current operation leads to materialization' in ''
 +  where '' = <_pytest.logging.LogCaptureFixture object at 0x3d3e41990>.text",failed
tests.integ.modin.series.test_to_list,test_to_list[data1],"AssertionError: assert 'The current operation leads to materialization' in ''
 +  where '' = <_pytest.logging.LogCaptureFixture object at 0x3505d24d0>.text",failed
tests.integ.modin.series.test_to_list,test_to_list[data2],"AssertionError: assert 'The current operation leads to materialization' in ''
 +  where '' = <_pytest.logging.LogCaptureFixture object at 0x3d3acd360>.text",failed
tests.integ.modin.series.test_to_list,test_to_list[data3],"AssertionError: assert 'The current operation leads to materialization' in ''
 +  where '' = <_pytest.logging.LogCaptureFixture object at 0x3d3a5ecb0>.text",failed
tests.integ.modin.series.test_to_list,test_to_list[data4],"AssertionError: assert 'The current operation leads to materialization' in ''
 +  where '' = <_pytest.logging.LogCaptureFixture object at 0x3d3846470>.text",failed
tests.integ.modin.series.test_to_list,test_to_list[data5],"AssertionError: assert 'The current operation leads to materialization' in ''
 +  where '' = <_pytest.logging.LogCaptureFixture object at 0x3d387a380>.text",failed
tests.integ.modin.series.test_to_list,test_to_list[data6],"AssertionError: assert 'The current operation leads to materialization' in ''
 +  where '' = <_pytest.logging.LogCaptureFixture object at 0x3d47d45e0>.text",failed
tests.integ.modin.series.test_to_list,test_to_list[data7],"AssertionError: assert 'The current operation leads to materialization' in ''
 +  where '' = <_pytest.logging.LogCaptureFixture object at 0x3d345c850>.text",failed
tests.integ.modin.series.test_to_list,test_to_list[data8],"AssertionError: assert 'The current operation leads to materialization' in ''
 +  where '' = <_pytest.logging.LogCaptureFixture object at 0x3d3e42920>.text",failed
tests.integ.modin.series.test_to_list,test_to_list[data9],"AssertionError: assert 'The current operation leads to materialization' in ''
 +  where '' = <_pytest.logging.LogCaptureFixture object at 0x3d391d7b0>.text",failed
tests.integ.modin.series.test_to_snowflake,test_to_snowflake_data_column_labels[backend_pandas-parquet_threshold_0-col_label2],reason: https://github.com/modin-project/modin/issues/7689,xfailed
tests.integ.modin.series.test_to_snowflake,test_to_snowflake_data_column_labels[backend_pandas-parquet_threshold_1000000000-col_label2],reason: https://github.com/modin-project/modin/issues/7689,xfailed
tests.integ.modin.series.test_to_snowflake,test_to_snowflake_data_column_labels[backend_snowflake-parquet_threshold_0-col_label2],reason: https://github.com/modin-project/modin/issues/7689,xfailed
tests.integ.modin.series.test_to_view,test_to_view_basic[function],"NotImplementedError: Modin supports the method Series.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_view,test_to_view_basic[method],"NotImplementedError: Modin supports the method Series.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_view,test_to_view_index[function-False-None-expected_index_columns2],"NotImplementedError: Modin supports the method Series.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_view,test_to_view_index[function-False-index_labels3-expected_index_columns3],"NotImplementedError: Modin supports the method Series.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_view,test_to_view_index[function-True-None-expected_index_columns0],"NotImplementedError: Modin supports the method Series.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_view,test_to_view_index[function-True-index_labels1-expected_index_columns1],"NotImplementedError: Modin supports the method Series.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_view,test_to_view_index[method-False-None-expected_index_columns2],"NotImplementedError: Modin supports the method Series.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_view,test_to_view_index[method-False-index_labels3-expected_index_columns3],"NotImplementedError: Modin supports the method Series.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_view,test_to_view_index[method-True-None-expected_index_columns0],"NotImplementedError: Modin supports the method Series.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_view,test_to_view_index[method-True-index_labels1-expected_index_columns1],"NotImplementedError: Modin supports the method Series.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_view,test_to_view_multiindex[function],"NotImplementedError: Modin supports the method Series.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_view,test_to_view_multiindex[method],"NotImplementedError: Modin supports the method Series.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_view,test_to_view_multiindex_length_mismatch_raises[function],"NotImplementedError: Modin supports the method Series.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_view,test_to_view_multiindex_length_mismatch_raises[method],"NotImplementedError: Modin supports the method Series.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_view,test_to_view_multiple_sessions_enforce_ordering_raises[function],"NotImplementedError: Modin supports the method Series.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_view,test_to_view_multiple_sessions_enforce_ordering_raises[method],"NotImplementedError: Modin supports the method Series.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_view,test_to_view_multiple_sessions_no_enforce_ordering[function],"NotImplementedError: Modin supports the method Series.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_to_view,test_to_view_multiple_sessions_no_enforce_ordering[method],"NotImplementedError: Modin supports the method Series.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.series.test_tz_convert,test_tz_convert_negative[UTC+09:00-0-None-None-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_tz_convert,test_tz_convert_negative[UTC-0-1-None-NotImplementedError],ValueError: The level 1 is not valid,failed
tests.integ.modin.series.test_tz_convert,test_tz_convert_negative[UTC-0-None-False-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_tz_localize,test_tz_localize_negative[UTC+09:00-0-None-True-raise-raise-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_tz_localize,test_tz_localize_negative[UTC-0-1-None-raise-raise-NotImplementedError],ValueError: The level 1 is not valid,failed
tests.integ.modin.series.test_tz_localize,test_tz_localize_negative[UTC-0-None-False-raise-raise-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_tz_localize,test_tz_localize_negative[UTC-0-None-True-NaT-raise-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_tz_localize,test_tz_localize_negative[UTC-0-None-True-ambiguous6-raise-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_tz_localize,test_tz_localize_negative[UTC-0-None-True-infer-raise-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_tz_localize,test_tz_localize_negative[UTC-0-None-True-infer-shift_forward-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_tz_localize,test_tz_localize_negative[UTC-0-None-True-raise-NaT-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_tz_localize,test_tz_localize_negative[UTC-0-None-True-raise-nonexistent10-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_tz_localize,test_tz_localize_negative[UTC-0-None-True-raise-shift_backward-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_tz_localize,test_tz_localize_negative[UTC-0-None-True-raise-shift_forward-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_unary_op,test_ser_unary_invalid_in_native_negative[data0-<lambda>],TypeError: bad operand type for unary -: 'NoneType',failed
tests.integ.modin.series.test_unary_op,test_ser_unary_invalid_in_native_negative[data0-abs],TypeError: bad operand type for abs(): 'NoneType',failed
tests.integ.modin.series.test_unary_op,test_ser_unary_invalid_in_native_negative[data1-<lambda>],TypeError: bad operand type for unary -: 'NoneType',failed
tests.integ.modin.series.test_unary_op,test_ser_unary_invalid_in_native_negative[data1-abs],TypeError: bad operand type for abs(): 'NoneType',failed
tests.integ.modin.series.test_unary_op,test_ser_unary_invalid_in_native_negative[data2-<lambda>],TypeError: bad operand type for unary -: 'NoneType',failed
tests.integ.modin.series.test_unary_op,test_ser_unary_invalid_in_native_negative[data2-abs],TypeError: bad operand type for abs(): 'NoneType',failed
tests.integ.modin.series.test_unary_op,test_ser_unary_invalid_in_sf_negative[data0-<lambda>],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_unary_op,test_ser_unary_invalid_in_sf_negative[data0-abs],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_unary_op,test_ser_unary_invalid_in_sf_negative[data1-<lambda>],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_unary_op,test_ser_unary_invalid_in_sf_negative[data1-abs],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.series.test_unique,test_index_unique_data_columns_should_not_affect_index_column,SNOW-1524901: Wrong result when index and a data column have the same name,xfailed
tests.integ.modin.series.test_unique,test_unique_heterogeneous_data,TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.series.test_unique,test_unique_homogeneous_data[input_data0],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.series.test_unique,test_unique_homogeneous_data[input_data1],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.series.test_unique,test_unique_homogeneous_data[input_data2],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.series.test_unique,test_unique_homogeneous_data[input_data3],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.series.test_unique,test_unique_homogeneous_data[input_data4],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.series.test_unique,test_unique_homogeneous_data[input_data5],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.series.test_unique,test_unique_homogeneous_data[input_data6],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.series.test_unique,test_unique_homogeneous_data[input_data7],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.series.test_unique,test_unique_homogeneous_data[input_data8],Represent overflow using float instead of integer,xfailed
tests.integ.modin.series.test_unique,test_unique_homogeneous_data[input_data9],Represent Decimal using float instead of integer as pandas does not recognize it,xfailed
tests.integ.modin.series.test_unique,test_unique_post_sort_values[input_data0],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.series.test_unique,test_unique_post_sort_values[input_data1],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.series.test_unique,test_unique_post_sort_values[input_data2],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.series.test_unique,test_unique_post_sort_values[input_data3],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.series.test_unique,test_unique_post_sort_values[input_data4],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.series.test_unique,test_unique_post_sort_values[input_data5],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.series.test_unique,test_unique_post_sort_values[input_data6],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.series.test_unique,test_unique_post_sort_values[input_data7],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.series.test_unique,test_unique_post_sort_values[input_data8],Represent overflow using float instead of integer,xfailed
tests.integ.modin.series.test_unique,test_unique_post_sort_values[input_data9],Represent Decimal using float instead of integer as pandas does not recognize it,xfailed
tests.integ.modin.series.test_unstack,test_unstack_non_integer_level_notimplemented,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_unstack,test_unstack_sort_notimplemented,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_value_counts,test_value_counts_bins,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.series.test_where,test_series_where_with_duplicated_index_aligned,"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['index']",failed
tests.integ.modin.series.test_where,test_series_where_with_series_cond_single_index_different_names,"AssertionError: Series.index are different

Attribute ""names"" are different
[left]:  [None]
[right]: ['Y']",failed
tests.integ.modin.strings.test_case_justify,test_casefold_not_implemented,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_cat,test_str_cat_incorrect_lengths,"ValueError: If `others` contains arrays or lists (or other list-likes without an index), these must all be of the same length as the calling Series/Index.",failed
tests.integ.modin.strings.test_cat,test_str_cat_series_with_array,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_cat,test_str_cat_single_array[None---aabbc-],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_cat,test_str_cat_single_array[None-None-aabbc],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_cat,test_str_cat_single_array[_-NA-a_a_b_b_c_NA],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_extract,test_extract_expand_capture_groups,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_extract,test_extract_expand_kwarg,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_extract,test_extract_expand_kwarg_wrong_type_raises,ValueError: expand must be True or False,failed
tests.integ.modin.strings.test_get_dummies,test_get_dummies_unimplemented,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_get_dummies,test_get_dummies_with_name_dummy_unimplemented,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_empty_str_empty_cat,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_empty_str_self_cat,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_encode_decode,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_index[index-E-4-8-expected4],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_index[index-EF-3-None-expected2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_index[index-EF-None-None-expected0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_index[rindex-E-0-5-expected5],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_index[rindex-EF-3-None-expected3],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_index[rindex-EF-None-None-expected1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_index_missing[index-exp0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_index_missing[rindex-exp1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_index_not_found_raises,ValueError: substring not found,failed
tests.integ.modin.strings.test_strings,test_index_raises_not_implemented_error[index],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_index_raises_not_implemented_error[rindex],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_ismethods[isalnum-expected0-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_ismethods[isalpha-expected1-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_ismethods[isnumeric-expected3-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_ismethods[isspace-expected4-0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_isnumeric_unicode[isdecimal-expected1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_isnumeric_unicode[isnumeric-expected0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_isnumeric_unicode_missing[isdecimal-expected1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_isnumeric_unicode_missing[isnumeric-expected0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_normalize[NFC-expected1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_normalize[NFKC-expected0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_removeprefix[a-expected0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_removeprefix[ab-expected1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_removesuffix[bc-expected1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_removesuffix[c-expected0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_repeat[3-expected_result_data0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_repeat[repeat1-expected_result_data1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_repeat_with_null[None-4],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_repeat_with_null[b-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_slice_replace[-1-None-z-expected4],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_slice_replace[-10-3-z-expected7],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_slice_replace[2-1-z-expected3],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_slice_replace[2-2-z-expected2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_slice_replace[2-3-None-expected0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_slice_replace[2-3-z-expected1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_slice_replace[6-8-z-expected6],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_slice_replace[None--2-z-expected5],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_split_join_roundtrip,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_zfill[3-data0-expected_data0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_zfill[5-data1-expected_data1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_strings,test_zfill_with_leading_sign,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_translate,test_translate_invalid_mappings[table0-ValueError],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.strings.test_translate,test_translate_invalid_mappings[table1-ValueError],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.strings.test_translate,test_translate_invalid_mappings[table2-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_translate,test_translate_invalid_mappings[table3-NotImplementedError],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.strings.test_translate,test_translate_without_maketrans,"AssertionError: Series are different

Series values are different (75.0 %)
[index]: [0, 1, 2, 3]
[left]:  [AAAAA, jkdsAjk, cjghgjqk, yubikey]
[right]: [AAAAA, jdsAj, cjghgjq, zubiez]
At positional index 1, first diff: jkdsAjk != jdsAj",failed
tests.integ.modin.test_apply_persist,test_apply_existing_udf,TypeError: test_apply_existing_udf.<locals>.dummy() got an unexpected keyword argument 'snowflake_udf_params',failed
tests.integ.modin.test_apply_persist,test_apply_immutable,TypeError: test_apply_immutable.<locals>.immutable_f() got an unexpected keyword argument 'snowflake_udf_params',failed
tests.integ.modin.test_apply_persist,test_apply_named_udf_negative,TypeError: test_apply_named_udf_negative.<locals>.identity() got an unexpected keyword argument 'snowflake_udf_params',failed
tests.integ.modin.test_apply_persist,test_apply_or_map_permanent_def[apply],TypeError: test_apply_or_map_permanent_def.<locals>.double() got an unexpected keyword argument 'snowflake_udf_params',failed
tests.integ.modin.test_apply_persist,test_apply_or_map_permanent_def[map],TypeError: test_apply_or_map_permanent_def.<locals>.double() got an unexpected keyword argument 'snowflake_udf_params',failed
tests.integ.modin.test_apply_persist,test_apply_permanent_lambda,TypeError: test_apply_permanent_lambda.<locals>.<lambda>() got an unexpected keyword argument 'snowflake_udf_params',failed
tests.integ.modin.test_apply_persist,test_grouby_apply_permanent,TypeError: test_grouby_apply_permanent.<locals>.sum_plus_one() got an unexpected keyword argument 'snowflake_udf_params',failed
tests.integ.modin.test_apply_snowpark_python_functions,test_apply_log10,"TypeError: 'LOG' expected Column or str, got: <class 'pandas.core.series.Series'>",failed
tests.integ.modin.test_apply_snowpark_python_functions,test_apply_log_base,TypeError: log() got multiple values for argument 'base',failed
tests.integ.modin.test_apply_snowpark_python_functions,test_apply_pass_base_as_column,"TypeError: 'LOG' expected Column or str, got: <class 'pandas.core.series.Series'>",failed
tests.integ.modin.test_apply_snowpark_python_functions,test_apply_sin,"TypeError: 'SIN' expected Column or str, got: <class 'pandas.core.series.Series'>",failed
tests.integ.modin.test_apply_snowpark_python_functions,test_apply_snowpark_python_function_not_implemented,"TypeError: 'DESC' expected Column or str, got: <class 'int'>",failed
tests.integ.modin.test_apply_snowpark_python_functions,test_apply_trunc_default_scale,"TypeError: 'TRUNC' expected Column or str, got: <class 'pandas.core.series.Series'>",failed
tests.integ.modin.test_apply_snowpark_python_functions,test_apply_trunc_scale[-1],"TypeError: 'TRUNC' expected Column or str, got: <class 'pandas.core.series.Series'>",failed
tests.integ.modin.test_apply_snowpark_python_functions,test_apply_trunc_scale[0],"TypeError: 'TRUNC' expected Column or str, got: <class 'pandas.core.series.Series'>",failed
tests.integ.modin.test_apply_snowpark_python_functions,test_apply_trunc_scale[1],"TypeError: 'TRUNC' expected Column or str, got: <class 'pandas.core.series.Series'>",failed
tests.integ.modin.test_apply_snowpark_python_functions,test_apply_trunc_scale[2],"TypeError: 'TRUNC' expected Column or str, got: <class 'pandas.core.series.Series'>",failed
tests.integ.modin.test_concat,test_concat_all_series_verify_integrity_axis1_negative,Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.test_concat,test_concat_dict_with_invalid_keys_negative[0],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.test_concat,test_concat_dict_with_invalid_keys_negative[1],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.test_concat,test_concat_duplicate_columns[columns11-columns21-expected_rows1-expected_cols1],pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects,failed
tests.integ.modin.test_concat,test_concat_duplicate_columns[columns12-columns22-expected_rows2-expected_cols2],pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects,failed
tests.integ.modin.test_concat,test_concat_duplicate_columns[columns13-columns23-expected_rows3-expected_cols3],pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects,failed
tests.integ.modin.test_concat,test_concat_empty_keys_negative[0],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'ValueError'>,failed
tests.integ.modin.test_concat,test_concat_empty_keys_negative[1],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'ValueError'>,failed
tests.integ.modin.test_concat,test_concat_invalid_type_negative,AssertionError: exception type <class 'ValueError'> does not match with expected type <class 'TypeError'>,failed
tests.integ.modin.test_concat,test_concat_keys_with_none[0],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (7, 4)
[right]: (3, 3)",failed
tests.integ.modin.test_concat,test_concat_keys_with_none[1],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (5, 6)
[right]: (3, 3)",failed
tests.integ.modin.test_concat,test_concat_levels_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.test_concat,test_concat_mixed_objs[1-inner],"AssertionError: DataFrame.columns are different

DataFrame.columns values are different (50.0 %)
[left]:  Index([0, 0], dtype='int64')
[right]: RangeIndex(start=0, stop=2, step=1)
At positional index 1, first diff: 0 != 1",failed
tests.integ.modin.test_concat,test_concat_mixed_objs[1-outer],"AssertionError: DataFrame.columns are different

DataFrame.columns values are different (50.0 %)
[left]:  Index([0, 0], dtype='int64')
[right]: RangeIndex(start=0, stop=2, step=1)
At positional index 1, first diff: 0 != 1",failed
tests.integ.modin.test_concat,test_concat_multiindex_columns_axis0[columns110-columns210-expected_cols10],AssertionError: Length of new_levels (2) must be <= self.nlevels (1),failed
tests.integ.modin.test_concat,test_concat_multiindex_columns_axis0[columns112-columns212-expected_cols12],AssertionError: Length of new_levels (3) must be <= self.nlevels (2),failed
tests.integ.modin.test_concat,test_concat_multiindex_columns_axis0[columns14-columns24-expected_cols4],IndexError: tuple index out of range,failed
tests.integ.modin.test_concat,test_concat_multiindex_columns_axis0[columns16-columns26-expected_cols6],AssertionError: Length of new_levels (3) must be <= self.nlevels (2),failed
tests.integ.modin.test_concat,test_concat_multiindex_columns_axis0[columns17-columns27-expected_cols7],"NotImplementedError: Can only union MultiIndex with MultiIndex or Index of tuples, try mi.to_flat_index().union(other) instead.",failed
tests.integ.modin.test_concat,test_concat_multiindex_columns_axis0[columns19-columns29-expected_cols9],"AssertionError: Index are different

Index classes are different
[left]:  MultiIndex([(1, 2)],
           )
[right]: Index([(1, 2), (1, 2, 3)], dtype='object')",failed
tests.integ.modin.test_concat,test_concat_multiindex_columns_axis1[columns112-columns212-expected_cols12],"AssertionError: Index are different

Index classes are different
[left]:  MultiIndex([(1, 2),
            (1, 2)],
           )
[right]: Index([(1, 2), (1, 2, 3)], dtype='object')",failed
tests.integ.modin.test_concat,test_concat_multiindex_columns_axis1[columns19-columns29-expected_cols9],"AssertionError: Index are different

Index classes are different
[left]:  MultiIndex([(1, 2),
            (1, 2)],
           )
[right]: Index([(1, 2), (1, 2, 3)], dtype='object')",failed
tests.integ.modin.test_concat,test_concat_multiindex_columns_with_keys_axis1[keys1-2],"AssertionError: DataFrame.columns are different

DataFrame.columns levels are different
[left]:  3, MultiIndex([(('x', 1), 'C', 'C'),
            (('x', 1), 'A', 'A'),
            (('x', 1), 'D', 'D'),
            (('y', 2), 'P', 'P'),
            (('y', 2), 'A', 'A'),
            (('y', 2), 'C', 'C')],
           )
[right]: 4, MultiIndex([('x', 1, 'C', 'C'),
            ('x', 1, 'A', 'A'),
            ('x', 1, 'D', 'D'),
            ('y', 2, 'P', 'P'),
            ('y', 2, 'A', 'A'),
            ('y', 2, 'C', 'C')],
           )",failed
tests.integ.modin.test_concat,test_concat_multiindex_columns_with_keys_axis1[keys1-3],"AssertionError: DataFrame.columns are different

DataFrame.columns levels are different
[left]:  4, MultiIndex([(('x', 1), 'C', 'C', 'C'),
            (('x', 1), 'A', 'A', 'A'),
            (('x', 1), 'D', 'D', 'D'),
            (('y', 2), 'P', 'P', 'P'),
            (('y', 2), 'A', 'A', 'A'),
            (('y', 2), 'C', 'C', 'C')],
           )
[right]: 5, MultiIndex([('x', 1, 'C', 'C', 'C'),
            ('x', 1, 'A', 'A', 'A'),
            ('x', 1, 'D', 'D', 'D'),
            ('y', 2, 'P', 'P', 'P'),
            ('y', 2, 'A', 'A', 'A'),
            ('y', 2, 'C', 'C', 'C')],
           )",failed
tests.integ.modin.test_concat,test_concat_multiindex_row_labels_axis0[index11-index21-expected_index1-2],"assert [1, (1, 2)] == [1, [1, 2]]
  At index 1 diff: (1, 2) != [1, 2]
  Full diff:
  - [1, [1, 2]]
  ?     ^     -
  + [1, (1, 2)]
  ?     ^    +",failed
tests.integ.modin.test_concat,test_concat_multiindex_row_labels_axis0[index110-index210-expected_index10-3],"assert [(1, 2), (1,)] == [[1, 2], 1]
  At index 0 diff: (1, 2) != [1, 2]
  Full diff:
  - [[1, 2], 1]
  + [(1, 2), (1,)]",failed
tests.integ.modin.test_concat,test_concat_multiindex_row_labels_axis0[index112-index212-expected_index12-5],"AssertionError: assert True == False
 +  where True = isinstance(MultiIndex([(1, 2),\n            (1, 2)],\n           ), MultiIndex)
 +  and   False = isinstance(Index([(1, 2), (1, 2, 3)], dtype='object'), MultiIndex)",failed
tests.integ.modin.test_concat,test_concat_multiindex_row_labels_axis0[index12-index22-expected_index2-2],"assert [1, (1,)] == [1, 1]
  At index 1 diff: (1,) != 1
  Full diff:
  - [1, 1]
  + [1, (1,)]
  ?     + ++",failed
tests.integ.modin.test_concat,test_concat_multiindex_row_labels_axis0[index13-index23-expected_index3-3],"assert [1, (1, 2)] == [1, [1, 2]]
  At index 1 diff: (1, 2) != [1, 2]
  Full diff:
  - [1, [1, 2]]
  ?     ^     -
  + [1, (1, 2)]
  ?     ^    +",failed
tests.integ.modin.test_concat,test_concat_multiindex_row_labels_axis0[index14-index24-expected_index4-2],"assert [(1, 2), (1,)] == [[1, 2], 1]
  At index 0 diff: (1, 2) != [1, 2]
  Full diff:
  - [[1, 2], 1]
  + [(1, 2), (1,)]",failed
tests.integ.modin.test_concat,test_concat_multiindex_row_labels_axis0[index15-index25-expected_index5-3],"assert [(1, 2), (1, 2)] == [[1, 2], [1, 2]]
  At index 0 diff: (1, 2) != [1, 2]
  Full diff:
  - [[1, 2], [1, 2]]
  ?  ^    ^  ^     -
  + [(1, 2), (1, 2)]
  ?  ^    ^  ^    +",failed
tests.integ.modin.test_concat,test_concat_multiindex_row_labels_axis0[index16-index26-expected_index6-4],"assert [(1, 2), (1, 2, 3)] == [[1, 2], [1, 2, 3]]
  At index 0 diff: (1, 2) != [1, 2]
  Full diff:
  - [[1, 2], [1, 2, 3]]
  ?  ^    ^  ^        -
  + [(1, 2), (1, 2, 3)]
  ?  ^    ^  ^       +",failed
tests.integ.modin.test_concat,test_concat_multiindex_row_labels_axis0[index17-index27-expected_index7-3],"assert [(1, 2), 1] == [[1, 2], 1]
  At index 0 diff: (1, 2) != [1, 2]
  Full diff:
  - [[1, 2], 1]
  ?  ^    ^
  + [(1, 2), 1]
  ?  ^    ^",failed
tests.integ.modin.test_concat,test_concat_multiindex_row_labels_axis0[index18-index28-expected_index8-3],"AssertionError: assert True == False
 +  where True = isinstance(MultiIndex([(1, 2),\n            (1, 2)],\n           ), MultiIndex)
 +  and   False = isinstance(Index([(1, 2), (1, 2)], dtype='object'), MultiIndex)",failed
tests.integ.modin.test_concat,test_concat_multiindex_row_labels_axis0[index19-index29-expected_index9-3],"AssertionError: assert True == False
 +  where True = isinstance(MultiIndex([(1, 2),\n            (1, 2)],\n           ), MultiIndex)
 +  and   False = isinstance(Index([(1, 2), (1, 2, 3)], dtype='object'), MultiIndex)",failed
tests.integ.modin.test_concat,test_concat_multiindex_row_labels_axis1[index11-index21-expected_index1-3],"assert [1, (1,)] == [1]
  Left contains one more item: (1,)
  Full diff:
  - [1]
  + [1, (1,)]",failed
tests.integ.modin.test_concat,test_concat_multiindex_row_labels_axis1[index12-index22-expected_index2-4],"assert [(1, 2)] == [[1, 2]]
  At index 0 diff: (1, 2) != [1, 2]
  Full diff:
  - [[1, 2]]
  ?  ^     -
  + [(1, 2)]
  ?  ^    +",failed
tests.integ.modin.test_concat,test_concat_multiindex_row_labels_axis1[index13-index23-expected_index3-5],AssertionError: Length of new_levels (3) must be <= self.nlevels (2),failed
tests.integ.modin.test_concat,test_concat_multiindex_row_labels_axis1[index14-index24-expected_index4-4],"AssertionError: assert True == False
 +  where True = isinstance(MultiIndex([(1, 2)],\n           ), MultiIndex)
 +  and   False = isinstance(Index([(1, 2)], dtype='object'), MultiIndex)",failed
tests.integ.modin.test_concat,test_concat_multiindex_row_labels_axis1[index15-index25-expected_index5-4],"AssertionError: assert True == False
 +  where True = isinstance(MultiIndex([(1, 2)],\n           ), MultiIndex)
 +  and   False = isinstance(Index([(1, 2), (1, 2, 3)], dtype='object'), MultiIndex)",failed
tests.integ.modin.test_concat,test_concat_multiindex_row_labels_axis1[index17-index27-expected_index7-6],AssertionError: Length of new_levels (3) must be <= self.nlevels (2),failed
tests.integ.modin.test_concat,test_concat_multiindex_row_labels_axis1_negative[index10-index20],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.test_concat,test_concat_multiindex_row_labels_axis1_negative[index11-index21],Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.test_concat,test_concat_multiindex_row_labels_axis1_negative[index12-index22],IndexError: tuple index out of range,failed
tests.integ.modin.test_concat,test_concat_multiindex_row_labels_axis1_negative[index13-index23],"NotImplementedError: Can only union MultiIndex with MultiIndex or Index of tuples, try mi.to_flat_index().union(other) instead.",failed
tests.integ.modin.test_concat,test_concat_multiindex_row_labels_axis1_negative[index14-index24],AssertionError: Length of new_levels (2) must be <= self.nlevels (1),failed
tests.integ.modin.test_concat,test_concat_native_object_negative[obj0],"AssertionError: Regex pattern did not match.
 Regex: ""<class 'pandas.core.frame.DataFrame'> is not supported as 'value' argument. Please convert this to Snowpark pandas objects by calling modin.pandas.Series\\(\\)/DataFrame\\(\\)""
 Input: 'first argument must be an iterable of pandas objects, you passed an object of type ""DataFrame""'",failed
tests.integ.modin.test_concat,test_concat_native_object_negative[obj1],"AssertionError: Regex pattern did not match.
 Regex: ""<class 'pandas.core.series.Series'> is not supported as 'value' argument. Please convert this to Snowpark pandas objects by calling modin.pandas.Series\\(\\)/DataFrame\\(\\)""
 Input: 'first argument must be an iterable of pandas objects, you passed an object of type ""Series""'",failed
tests.integ.modin.test_concat,test_concat_object_with_same_index_with_dup[inner],pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects,failed
tests.integ.modin.test_concat,test_concat_object_with_same_index_with_dup_sort[inner],pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects,failed
tests.integ.modin.test_concat,test_concat_object_with_same_index_with_dup_sort[outer],pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects,failed
tests.integ.modin.test_concat,test_concat_same_frame_with_keys[0-keys3],"ValueError: Length mismatch: Expected axis has 6 elements, new values have 3 elements",failed
tests.integ.modin.test_concat,test_concat_same_frame_with_keys[0-keys4],"AssertionError: DataFrame.index are different

DataFrame.index levels are different
[left]:  2, MultiIndex([(('x', 1), 3),
            (('x', 1), 1),
            (('x', 1), 2),
            (('y', 2), 3),
            (('y', 2), 1),
            (('y', 2), 2)],
           names=[None, 'left_i'])
[right]: 3, MultiIndex([('x', 1, 3),
            ('x', 1, 1),
            ('x', 1, 2),
            ('y', 2, 3),
            ('y', 2, 1),
            ('y', 2, 2)],
           names=[None, None, 'left_i'])",failed
tests.integ.modin.test_concat,test_concat_same_frame_with_keys[1-keys3],"ValueError: Length mismatch: Expected axis has 6 elements, new values have 3 elements",failed
tests.integ.modin.test_concat,test_concat_same_frame_with_keys[1-keys4],"AssertionError: DataFrame.columns are different

DataFrame.columns levels are different
[left]:  2, MultiIndex([(('x', 1), 'C'),
            (('x', 1), 'A'),
            (('x', 1), 'D'),
            (('y', 2), 'C'),
            (('y', 2), 'A'),
            (('y', 2), 'D')],
           )
[right]: 3, MultiIndex([('x', 1, 'C'),
            ('x', 1, 'A'),
            ('x', 1, 'D'),
            ('y', 2, 'C'),
            ('y', 2, 'A'),
            ('y', 2, 'D')],
           )",failed
tests.integ.modin.test_concat,test_concat_series_names_axis0[None-bar-None],AttributeError: 'DataFrame' object has no attribute 'dtype'. Did you mean: 'dtypes'?,failed
tests.integ.modin.test_concat,test_concat_series_names_axis0[foo-None-None],AttributeError: 'DataFrame' object has no attribute 'dtype'. Did you mean: 'dtypes'?,failed
tests.integ.modin.test_concat,test_concat_series_names_axis0[foo-bar-None],AttributeError: 'DataFrame' object has no attribute 'dtype'. Did you mean: 'dtypes'?,failed
tests.integ.modin.test_concat,test_concat_series_names_axis1[None-None-expected_columns0],"AssertionError: DataFrame.columns are different

DataFrame.columns values are different (50.0 %)
[left]:  Index([0, 0], dtype='int64')
[right]: RangeIndex(start=0, stop=2, step=1)
At positional index 1, first diff: 0 != 1",failed
tests.integ.modin.test_concat,test_concat_timedelta_not_implemented,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.test_concat,test_concat_verify_integrity_axis0_large_overlap_negative,Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.test_concat,test_concat_verify_integrity_axis0_negative[index10-index20],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.test_concat,test_concat_verify_integrity_axis0_negative[index11-index21],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.test_concat,test_concat_verify_integrity_axis0_negative[index12-index22],Failed: DID NOT RAISE <class 'Exception'>,failed
tests.integ.modin.test_concat,test_concat_verify_integrity_axis1_negative[df],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.test_concat,test_concat_verify_integrity_axis1_negative[series],Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.test_concat,test_concat_with_keys[0-keys3],"ValueError: Length mismatch: Expected axis has 9 elements, new values have 6 elements",failed
tests.integ.modin.test_concat,test_concat_with_keys[0-keys4],"ValueError: Length mismatch: Expected axis has 9 elements, new values have 6 elements",failed
tests.integ.modin.test_concat,test_concat_with_keys[0-keys5],"AssertionError: DataFrame.index are different

DataFrame.index levels are different
[left]:  2, MultiIndex([(('x', 1), 3),
            (('x', 1), 1),
            (('x', 1), 2),
            (('y', 2), 2),
            (('y', 2), 0),
            (('y', 2), 3),
            (('y', 2), 4),
            (('z', 3), 0),
            (('z', 3), 1)],
           )
[right]: 3, MultiIndex([('x', 1, 3),
            ('x', 1, 1),
            ('x', 1, 2),
            ('y', 2, 2),
            ('y', 2, 0),
            ('y', 2, 3),
            ('y', 2, 4),
            ('z', 3, 0),
            ('z', 3, 1)],
           )",failed
tests.integ.modin.test_concat,test_concat_with_keys[1-keys3],"ValueError: Length mismatch: Expected axis has 7 elements, new values have 4 elements",failed
tests.integ.modin.test_concat,test_concat_with_keys[1-keys4],"ValueError: Length mismatch: Expected axis has 7 elements, new values have 4 elements",failed
tests.integ.modin.test_concat,test_concat_with_keys[1-keys5],"AssertionError: DataFrame.columns are different

DataFrame.columns levels are different
[left]:  2, MultiIndex([(('x', 1), 'C'),
            (('x', 1), 'A'),
            (('x', 1), 'D'),
            (('y', 2), 'P'),
            (('y', 2), 'A'),
            (('y', 2), 'C'),
            (('z', 3),   0)],
           )
[right]: 3, MultiIndex([('x', 1, 'C'),
            ('x', 1, 'A'),
            ('x', 1, 'D'),
            ('y', 2, 'P'),
            ('y', 2, 'A'),
            ('y', 2, 'C'),
            ('z', 3,   0)],
           )",failed
tests.integ.modin.test_concat,test_concat_with_keys_and_names[0-None-None-names1],ValueError: Length of names must match number of levels in MultiIndex.,failed
tests.integ.modin.test_concat,test_concat_with_keys_and_names[0-None-None-names2],ValueError: Length of names must match number of levels in MultiIndex.,failed
tests.integ.modin.test_concat,test_concat_with_keys_and_names[0-None-two-names1],ValueError: Length of names must match number of levels in MultiIndex.,failed
tests.integ.modin.test_concat,test_concat_with_keys_and_names[0-None-two-names2],ValueError: Length of names must match number of levels in MultiIndex.,failed
tests.integ.modin.test_concat,test_concat_with_keys_and_names[0-one-None-names1],ValueError: Length of names must match number of levels in MultiIndex.,failed
tests.integ.modin.test_concat,test_concat_with_keys_and_names[0-one-None-names2],ValueError: Length of names must match number of levels in MultiIndex.,failed
tests.integ.modin.test_concat,test_concat_with_keys_and_names[0-one-two-names1],ValueError: Length of names must match number of levels in MultiIndex.,failed
tests.integ.modin.test_concat,test_concat_with_keys_and_names[0-one-two-names2],ValueError: Length of names must match number of levels in MultiIndex.,failed
tests.integ.modin.test_concat,test_concat_with_keys_and_names[1-None-None-names1],ValueError: Length of names must match number of levels in MultiIndex.,failed
tests.integ.modin.test_concat,test_concat_with_keys_and_names[1-None-None-names2],ValueError: Length of names must match number of levels in MultiIndex.,failed
tests.integ.modin.test_concat,test_concat_with_keys_and_names[1-None-two-names1],ValueError: Length of names must match number of levels in MultiIndex.,failed
tests.integ.modin.test_concat,test_concat_with_keys_and_names[1-None-two-names2],ValueError: Length of names must match number of levels in MultiIndex.,failed
tests.integ.modin.test_concat,test_concat_with_keys_and_names[1-one-None-names1],ValueError: Length of names must match number of levels in MultiIndex.,failed
tests.integ.modin.test_concat,test_concat_with_keys_and_names[1-one-None-names2],ValueError: Length of names must match number of levels in MultiIndex.,failed
tests.integ.modin.test_concat,test_concat_with_keys_and_names[1-one-two-names1],ValueError: Length of names must match number of levels in MultiIndex.,failed
tests.integ.modin.test_concat,test_concat_with_keys_and_names[1-one-two-names2],ValueError: Length of names must match number of levels in MultiIndex.,failed
tests.integ.modin.test_cut,test_cut_labels_none_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.test_cut,test_cut_retbins_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.test_cut,test_cut_with_labels[False-3-False-False-data0-cuts0-labels0],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[False-3-False-False-data1-4-labels1],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[False-3-False-True-data0-cuts0-labels0],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[False-3-False-True-data1-4-labels1],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[False-3-True-False-data0-cuts0-labels0],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[False-3-True-False-data1-4-labels1],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[False-3-True-True-data0-cuts0-labels0],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[False-3-True-True-data1-4-labels1],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[False-8-False-False-data0-cuts0-labels0],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[False-8-False-False-data1-4-labels1],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[False-8-False-True-data0-cuts0-labels0],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[False-8-False-True-data1-4-labels1],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[False-8-True-False-data0-cuts0-labels0],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[False-8-True-False-data1-4-labels1],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[False-8-True-True-data0-cuts0-labels0],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[False-8-True-True-data1-4-labels1],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[True-3-False-False-data0-cuts0-labels0],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[True-3-False-False-data1-4-labels1],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[True-3-False-True-data0-cuts0-labels0],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[True-3-False-True-data1-4-labels1],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[True-3-True-False-data0-cuts0-labels0],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[True-3-True-False-data1-4-labels1],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[True-3-True-True-data0-cuts0-labels0],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[True-3-True-True-data1-4-labels1],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[True-8-False-False-data0-cuts0-labels0],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[True-8-False-False-data1-4-labels1],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[True-8-False-True-data0-cuts0-labels0],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[True-8-False-True-data1-4-labels1],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[True-8-True-False-data0-cuts0-labels0],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[True-8-True-False-data1-4-labels1],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[True-8-True-True-data0-cuts0-labels0],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_cut,test_cut_with_labels[True-8-True-True-data1-4-labels1],categorical not supported in Snowpark pandas API,xfailed
tests.integ.modin.test_faster_pandas,test_dataframe_to_datetime,AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_drop,AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_dt_properties[date],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_dt_properties[day],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_dt_properties[days_in_month],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_dt_properties[daysinmonth],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_dt_properties[hour],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_dt_properties[is_leap_year],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_dt_properties[is_month_end],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_dt_properties[is_month_start],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_dt_properties[is_quarter_end],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_dt_properties[is_quarter_start],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_dt_properties[is_year_end],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_dt_properties[is_year_start],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_dt_properties[microsecond],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_dt_properties[minute],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_dt_properties[month],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_dt_properties[nanosecond],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_dt_properties[quarter],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_dt_properties[second],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_dt_properties[time],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_dt_properties[year],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_isin_list,AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_isin_series,AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_isna_notna[isna],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_isna_notna[isnull],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_isna_notna[notna],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_isna_notna[notnull],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_read_filter_groupby_agg,AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_read_filter_join,AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_read_filter_join_flag_disabled,AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_read_filter_join_on_index,AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_rename,AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_series_to_datetime,AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_set_2d_labels_from_different_df[input_df20],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_set_2d_labels_from_different_df[input_df21],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_set_2d_labels_from_same_df,AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_sort_values,AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_str_contains,AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_str_slice,AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_str_startswith_endswith[endswith],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_faster_pandas,test_str_startswith_endswith[startswith],AttributeError: 'NativeQueryCompiler' object has no attribute '_relaxed_query_compiler',failed
tests.integ.modin.test_from_pandas_to_pandas,test_from_to_pandas_datetime64_support,AssertionError,failed
tests.integ.modin.test_from_pandas_to_pandas,test_from_to_pandas_datetime64_timezone_support,"AssertionError: Attributes of DataFrame.iloc[:, 1] (column name=""pacific"") are different

Attribute ""dtype"" are different
[left]:  datetime64[ns, US/Pacific]
[right]: datetime64[ns, UTC-08:00]",failed
tests.integ.modin.test_from_pandas_to_pandas,test_rw_datetimeindex,"AssertionError: Series are different

Series values are different (50.0 %)
[index]: [ntz, tz]
[left]:  [datetime64[ns], datetime64[ns, US/Pacific]]
[right]: [datetime64[ns], datetime64[ns, UTC-08:00]]
At positional index 1, first diff: datetime64[ns, US/Pacific] != datetime64[ns, UTC-08:00]",failed
tests.integ.modin.test_from_pandas_to_pandas,test_snowpark_pandas_statement_params,AssertionError: Expected 'to_pandas' to have been called once. Called 0 times.,failed
tests.integ.modin.test_from_pandas_to_pandas,test_type_mismatch_index_type[bool-object],AssertionError: Expected bool saw object,failed
tests.integ.modin.test_from_pandas_to_pandas,test_type_mismatch_index_type[nullable_bool],AssertionError: Expected bool saw boolean,failed
tests.integ.modin.test_from_pandas_to_pandas,test_type_mismatch_index_type[nullable_float],AssertionError: Expected float64 saw Float32,failed
tests.integ.modin.test_from_pandas_to_pandas,test_type_mismatch_index_type[nullable_int],AssertionError: Expected float64 saw Int64,failed
tests.integ.modin.test_from_pandas_to_pandas,test_type_mismatch_index_type[nullable_uint],AssertionError: Expected float64 saw UInt16,failed
tests.integ.modin.test_from_pandas_to_pandas,test_type_mismatch_index_type[num_float32],AssertionError: Expected float64 saw float32,failed
tests.integ.modin.test_from_pandas_to_pandas,test_type_mismatch_index_type[num_int32],AssertionError: Expected int16 saw int32,failed
tests.integ.modin.test_from_pandas_to_pandas,test_type_mismatch_index_type[num_uint16],AssertionError: Expected int16 saw uint16,failed
tests.integ.modin.test_from_pandas_to_pandas,test_type_mismatch_index_type[num_uint32],AssertionError: Expected int16 saw uint32,failed
tests.integ.modin.test_from_pandas_to_pandas,test_type_mismatch_index_type[num_uint64],AssertionError: Expected int16 saw uint64,failed
tests.integ.modin.test_from_pandas_to_pandas,test_type_mismatch_index_type[num_uint8],AssertionError: Expected int16 saw uint8,failed
tests.integ.modin.test_from_pandas_to_pandas,test_type_mismatch_index_type[string-python],AssertionError: Expected object saw string,failed
tests.integ.modin.test_from_pandas_to_pandas,test_type_mismatch_index_type[uint],AssertionError: Expected int16 saw uint64,failed
tests.integ.modin.test_from_pandas_to_pandas,test_value_type_mismatch_index_type[categorical],"Failed: DID NOT RAISE (<class 'AssertionError'>, <class 'NotImplementedError'>)",failed
tests.integ.modin.test_from_pandas_to_pandas,test_value_type_mismatch_index_type[complex128],"Failed: DID NOT RAISE (<class 'AssertionError'>, <class 'NotImplementedError'>)",failed
tests.integ.modin.test_from_pandas_to_pandas,test_value_type_mismatch_index_type[complex64],"Failed: DID NOT RAISE (<class 'AssertionError'>, <class 'NotImplementedError'>)",failed
tests.integ.modin.test_from_pandas_to_pandas,test_value_type_mismatch_index_type[datetime-tz],"Failed: DID NOT RAISE (<class 'AssertionError'>, <class 'NotImplementedError'>)",failed
tests.integ.modin.test_from_pandas_to_pandas,test_value_type_mismatch_index_type[datetime],"Failed: DID NOT RAISE (<class 'AssertionError'>, <class 'NotImplementedError'>)",failed
tests.integ.modin.test_from_pandas_to_pandas,test_value_type_mismatch_index_type[interval],"Failed: DID NOT RAISE (<class 'AssertionError'>, <class 'NotImplementedError'>)",failed
tests.integ.modin.test_from_pandas_to_pandas,test_value_type_mismatch_index_type[period],"Failed: DID NOT RAISE (<class 'AssertionError'>, <class 'NotImplementedError'>)",failed
tests.integ.modin.test_from_pandas_to_pandas,test_value_type_mismatch_index_type[timedelta],"Failed: DID NOT RAISE (<class 'AssertionError'>, <class 'NotImplementedError'>)",failed
tests.integ.modin.test_internal_frame,test_strip_duplicates[input0-expected0],AttributeError: 'DataFrame' object has no attribute 'strip_duplicates'. Did you mean: 'drop_duplicates'?,failed
tests.integ.modin.test_internal_frame,test_strip_duplicates[input1-expected1],AttributeError: 'DataFrame' object has no attribute 'strip_duplicates'. Did you mean: 'drop_duplicates'?,failed
tests.integ.modin.test_merge,test_merge_native_pandas_object_negative,"AssertionError: Regex pattern did not match.
 Regex: ""<class 'pandas.core.frame.DataFrame'> is not supported as 'value' argument. Please convert this to Snowpark pandas objects by calling modin.pandas.Series\\(\\)/DataFrame\\(\\)""
 Input: ""Can only merge Series or DataFrame objects, a <class 'pandas.core.frame.DataFrame'> was passed""",failed
tests.integ.modin.test_merge_asof,test_merge_asof_left_right_on[backward-False],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 5)
[right]: (3, 6)",failed
tests.integ.modin.test_merge_asof,test_merge_asof_left_right_on[backward-True],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 5)
[right]: (3, 6)",failed
tests.integ.modin.test_merge_asof,test_merge_asof_left_right_on[forward-False],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 5)
[right]: (3, 6)",failed
tests.integ.modin.test_merge_asof,test_merge_asof_left_right_on[forward-True],"AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (3, 5)
[right]: (3, 6)",failed
tests.integ.modin.test_merge_asof,test_merge_asof_nearest_unsupported,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.test_merge_asof,test_merge_asof_negative_multiple_on,"KeyError: ""None of [Index([('a', 'another_col_right')], dtype='object')] are in the [columns]""",failed
tests.integ.modin.test_merge_asof,test_merge_asof_negative_non_numeric_on,"pandas.errors.MergeError: Incompatible merge dtype, dtype('O') and dtype('O'), both sides must have numeric dtype",failed
tests.integ.modin.test_merge_asof,test_merge_asof_params_unsupported,"KeyError: ""None of [Index(['price'], dtype='object')] are in the [columns]""",failed
tests.integ.modin.test_modin_stored_procedures,test_sproc_merge,"AssertionError: assert '0     K0\n1 ...dtype: object' == '0      K0\n1...dtype: object'
  - 0      K0
  ?  -
  + 0     K0
  - 1      K1
  ?  -
  + 1     K1
  - 2      K2...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show",failed
tests.integ.modin.test_modin_stored_procedures,test_sproc_pivot,"AssertionError: assert 'C        lar...   NaN    6.0' == 'C        lar...   NaN      6'
    C        large  small
    A   B                
  - bar one    4.0      5
  ?                   --
  + bar one    4.0    5.0
  ?                    ++
  -     two    7.0      6...
  
  ...Full output truncated (11 lines hidden), use '-vv' to show",failed
tests.integ.modin.test_numpy,test_full_like,Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.test_numpy,test_np_ufunc_notimplemented,Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.test_numpy,test_np_ufunc_with_out_notimpl,Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.test_numpy,test_np_unique,Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.test_numpy,test_np_where_notimplemented,Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.test_numpy,test_where_with_different_columns_negative,Failed: DID NOT RAISE <class 'TypeError'>,failed
tests.integ.modin.test_numpy,test_where_with_different_indexes,Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.test_ordered_dataframe,test_join_no_column_conflict[outer],reason: SNOW-1321662 - outer join issue,xfailed
tests.integ.modin.test_ordered_dataframe,test_join_with_column_conflict[outer],reason: SNOW-1321662 - outer join issue,xfailed
tests.integ.modin.test_qcut,test_qcut_quantile_limit_exhausted,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.test_qcut,test_qcut_series_with_none_labels_negative[1-100-1],"AssertionError: Categorical Expected type <class 'pandas.core.arrays.categorical.Categorical'>, found <class 'pandas.core.arrays.interval.IntervalArray'> instead",failed
tests.integ.modin.test_qcut,test_qcut_series_with_none_labels_negative[1-1000-6],"AssertionError: Categorical Expected type <class 'pandas.core.arrays.categorical.Categorical'>, found <class 'pandas.core.arrays.interval.IntervalArray'> instead",failed
tests.integ.modin.test_qcut,test_qcut_series_with_none_labels_negative[1-5-1],"AssertionError: Categorical Expected type <class 'pandas.core.arrays.categorical.Categorical'>, found <class 'pandas.core.arrays.interval.IntervalArray'> instead",failed
tests.integ.modin.test_qcut,test_qcut_series_with_none_labels_negative[10-100-1],"AssertionError: Categorical Expected type <class 'pandas.core.arrays.categorical.Categorical'>, found <class 'pandas.core.arrays.interval.IntervalArray'> instead",failed
tests.integ.modin.test_qcut,test_qcut_series_with_none_labels_negative[10-1000-6],"AssertionError: Categorical Expected type <class 'pandas.core.arrays.categorical.Categorical'>, found <class 'pandas.core.arrays.interval.IntervalArray'> instead",failed
tests.integ.modin.test_qcut,test_qcut_series_with_none_labels_negative[10-5-1],"AssertionError: Categorical Expected type <class 'pandas.core.arrays.categorical.Categorical'>, found <class 'pandas.core.arrays.interval.IntervalArray'> instead",failed
tests.integ.modin.test_qcut,test_qcut_series_with_none_labels_negative[10000-100-1],"AssertionError: Categorical Expected type <class 'pandas.core.arrays.categorical.Categorical'>, found <class 'pandas.core.arrays.interval.IntervalArray'> instead",failed
tests.integ.modin.test_qcut,test_qcut_series_with_none_labels_negative[10000-1000-6],"AssertionError: Categorical Expected type <class 'pandas.core.arrays.categorical.Categorical'>, found <class 'pandas.core.arrays.interval.IntervalArray'> instead",failed
tests.integ.modin.test_qcut,test_qcut_series_with_none_labels_negative[10000-5-1],"AssertionError: Categorical Expected type <class 'pandas.core.arrays.categorical.Categorical'>, found <class 'pandas.core.arrays.interval.IntervalArray'> instead",failed
tests.integ.modin.test_qcut,test_qcut_series_with_none_labels_negative[47-100-1],"AssertionError: Categorical Expected type <class 'pandas.core.arrays.categorical.Categorical'>, found <class 'pandas.core.arrays.interval.IntervalArray'> instead",failed
tests.integ.modin.test_qcut,test_qcut_series_with_none_labels_negative[47-1000-6],"AssertionError: Categorical Expected type <class 'pandas.core.arrays.categorical.Categorical'>, found <class 'pandas.core.arrays.interval.IntervalArray'> instead",failed
tests.integ.modin.test_qcut,test_qcut_series_with_none_labels_negative[47-5-1],"AssertionError: Categorical Expected type <class 'pandas.core.arrays.categorical.Categorical'>, found <class 'pandas.core.arrays.interval.IntervalArray'> instead",failed
tests.integ.modin.test_session,test_automatically_create_session_from_config_env_var,Failed: Please remove the existing config file to run this test,failed
tests.integ.modin.test_session,test_automatically_create_session_from_config_file,Failed: Please remove the existing config file to run this test,failed
tests.integ.modin.test_session,test_cannot_create_dataframe_without_session,Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSessionException'>,failed
tests.integ.modin.test_session,test_multiple_session,AttributeError: 'DataFrame' object has no attribute 'ordered_dataframe',failed
tests.integ.modin.test_session,test_warning_if_quoted_identifiers_ignore_case_is_set,"assert 0 == 1
 +  where 0 = len([])",failed
tests.integ.modin.test_session,test_with_no_pandas_session[<lambda>1],"AssertionError: Series are different

Attribute ""name"" are different
[left]:  None
[right]: 0",failed
tests.integ.modin.test_session,test_with_pandas_session[<lambda>1],"AssertionError: Series are different

Attribute ""name"" are different
[left]:  None
[right]: 0",failed
tests.integ.modin.test_sql_counter,test_counter_not_required,,xfailed
tests.integ.modin.test_sql_counter,test_high_sql_count_expect_high_count_no_reason,[XPASS(strict)] We expect this to fail since no high_count_reason was provided,failed
tests.integ.modin.test_sql_counter,test_high_sql_count_fail,"[XPASS(strict)] We expect this to fail, but we don't treat as a hard failure since it is validating expect_high_count=False",failed
tests.integ.modin.test_sql_counter,test_inaccurate_counter_not_checked,,xfailed
tests.integ.modin.test_sql_counter,test_sql_counter_with_context_manager_inside_loop,Failed: DID NOT RAISE <class 'AssertionError'>,failed
tests.integ.modin.test_telemetry,test_modin_e2e_telemetry_remote,"AssertionError: assert 'Pandas' == 'Snowflake'
  - Snowflake
  + Pandas",failed
tests.integ.modin.test_telemetry,test_modin_telemetry_send_immediately,assert False,failed
tests.integ.modin.test_telemetry,test_modin_telemetry_time_passed,TypeError: unsupported operand type(s) for +: 'datetime.time' and 'datetime.time',failed
tests.integ.modin.test_telemetry,test_property_methods_telemetry,SNOW-2031975: Investigate why no telemetry is reported for accessor properties,xfailed
tests.integ.modin.test_telemetry,test_snowpark_pandas_telemetry_method_decorator,AttributeError: 'NativeQueryCompiler' object has no attribute 'snowpark_pandas_api_calls',failed
tests.integ.modin.test_telemetry,test_snowpark_pandas_telemetry_standalone_function_decorator,AttributeError: 'NativeQueryCompiler' object has no attribute 'snowpark_pandas_api_calls',failed
tests.integ.modin.test_telemetry,test_standalone_api_telemetry,AttributeError: 'NativeQueryCompiler' object has no attribute 'snowpark_pandas_api_calls',failed
tests.integ.modin.test_telemetry,test_telemetry_cache_result,"NotImplementedError: Modin supports the method Series.cache_result on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.test_telemetry,test_telemetry_copy,AttributeError: 'NativeQueryCompiler' object has no attribute 'snowpark_pandas_api_calls',failed
tests.integ.modin.test_telemetry,test_telemetry_func_call_count,"assert 0 == 4
 +  where 0 = len([])",failed
tests.integ.modin.test_telemetry,test_telemetry_getitem_setitem,AttributeError: 'NativeQueryCompiler' object has no attribute 'snowpark_pandas_api_calls',failed
tests.integ.modin.test_telemetry,test_telemetry_interchange_call_count,"assert 0 == 6
 +  where 0 = len([])",failed
tests.integ.modin.test_telemetry,test_telemetry_multiple_func_call_count,IndexError: list index out of range,failed
tests.integ.modin.test_telemetry,test_telemetry_private_method[__dataframe__-DataFrame.__dataframe__-<lambda>-1],IndexError: list index out of range,failed
tests.integ.modin.test_telemetry,test_telemetry_private_method[__iter__-DataFrame.DataFrame.__iter__-<lambda>-0],IndexError: list index out of range,failed
tests.integ.modin.test_telemetry,test_telemetry_private_method[__repr__-DataFrame.__repr__-<lambda>-1],IndexError: list index out of range,failed
tests.integ.modin.test_telemetry,test_telemetry_property_iloc[iloc-<lambda>-1-0],"assert 0 == 1
 +  where 0 = len([])",failed
tests.integ.modin.test_telemetry,test_telemetry_property_iloc[loc-<lambda>-2-2],"assert 0 == 1
 +  where 0 = len([])",failed
tests.integ.modin.test_telemetry,test_telemetry_property_index,IndexError: list index out of range,failed
tests.integ.modin.test_telemetry,test_telemetry_property_missing_methods[delete-iloc-_del_iloc-deleter],AttributeError: 'NativeQueryCompiler' object has no attribute 'snowpark_pandas_api_calls',failed
tests.integ.modin.test_telemetry,test_telemetry_property_missing_methods[set-iloc-_set_iloc-setter],AttributeError: 'NativeQueryCompiler' object has no attribute 'snowpark_pandas_api_calls',failed
tests.integ.modin.test_telemetry,test_telemetry_quantile,AttributeError: 'NativeQueryCompiler' object has no attribute 'snowpark_pandas_api_calls',failed
tests.integ.modin.test_telemetry,test_telemetry_read_json,AttributeError: 'NativeQueryCompiler' object has no attribute 'snowpark_pandas_api_calls',failed
tests.integ.modin.test_telemetry,test_telemetry_repr,IndexError: list index out of range,failed
tests.integ.modin.test_telemetry,test_telemetry_series_describe,AttributeError: 'NativeQueryCompiler' object has no attribute 'snowpark_pandas_api_calls',failed
tests.integ.modin.test_telemetry,test_telemetry_series_isin,AttributeError: 'NativeQueryCompiler' object has no attribute 'snowpark_pandas_api_calls',failed
tests.integ.modin.test_telemetry,test_telemetry_with_groupby,AttributeError: 'NativeQueryCompiler' object has no attribute 'snowpark_pandas_api_calls',failed
tests.integ.modin.test_telemetry,test_telemetry_with_resample,AttributeError: 'NativeQueryCompiler' object has no attribute 'snowpark_pandas_api_calls',failed
tests.integ.modin.test_telemetry,test_telemetry_with_rolling,AttributeError: 'NativeQueryCompiler' object has no attribute 'snowpark_pandas_api_calls',failed
tests.integ.modin.test_telemetry,test_telemetry_with_update_inplace,AttributeError: 'NativeQueryCompiler' object has no attribute 'snowpark_pandas_api_calls',failed
tests.integ.modin.test_to_numpy,test_to_numpy_copy_true_series,"AssertionError: assert 'has been ignored by Snowpark pandas' in ''
 +  where '' = <_pytest.logging.LogCaptureFixture object at 0x33b527250>.text",failed
tests.integ.modin.test_to_numpy,test_to_numpy_warning,"AssertionError: assert 'The current operation leads to materialization and can be slow if the data is large!' in ''
 +  where '' = <_pytest.logging.LogCaptureFixture object at 0x33b53ac50>.text",failed
tests.integ.modin.test_to_numpy,test_variant_data_to_numpy[DataFrame],"AssertionError: 
Arrays are not equal

Mismatched elements: 4 / 10 (40%)
 x: array([[1],
       [1.1],
       ['snow'],...
 y: array([[1],
       [1.1],
       ['snow'],...",failed
tests.integ.modin.test_to_numpy,test_variant_data_to_numpy[Series],"AssertionError: 
Arrays are not equal

Mismatched elements: 4 / 10 (40%)
 x: array([1, 1.1, 'snow', b'snow', datetime.date(2023, 1, 1),
       datetime.time(1, 2, 3, 1), datetime.datetime(2023, 1, 1, 0, 0),
       list([1, 2]), {'snow': 'flake'}, None], dtype=object)
 y: array([1, 1.1, 'snow', '736e6f77', '2023-01-01', '01:02:03.000001',
       '2023-01-01T00:00:00', list([1, 2]), {'snow': 'flake'}, None],
      dtype=object)",failed
tests.integ.modin.test_unimplemented,test_unsupported_dataframe_binary_methods[<lambda>-update],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.test_unimplemented,test_unsupported_dataframe_methods[<lambda>-cumprod0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.test_unimplemented,test_unsupported_dataframe_methods[<lambda>-cumprod1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.test_unimplemented,test_unsupported_series_binary_methods[<lambda>-update],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.test_unimplemented,test_unsupported_series_methods[<lambda>-cumprod],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.test_unimplemented,test_unsupported_series_methods[<lambda>-transform],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.test_unimplemented,test_unsupported_str_methods[<lambda>-Series.rfind],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.test_unique,test_unique_byte_array[input_data0],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_byte_array[input_data1],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_index[index0],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_index[index1],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_index[index2],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_index[index3],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_index[index4],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_index[index5],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_index[index6],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_index[index7],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_list[input_data0],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_list[input_data1],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_list[input_data2],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_list[input_data3],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_list[input_data4],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_list[input_data5],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_list[input_data6],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_list_of_invalid_objects_negative[input_data0-TestUniqueUserDefinedClass],AssertionError,failed
tests.integ.modin.test_unique,test_unique_list_of_invalid_objects_negative[input_data1-set],AssertionError,failed
tests.integ.modin.test_unique,test_unique_list_of_invalid_objects_negative[input_data2-ndarray],AssertionError,failed
tests.integ.modin.test_unique,test_unique_list_of_lists,TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_list_of_tuples,TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_ndarray[input_data0],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_ndarray[input_data1],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_ndarray[input_data2],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_series[native_series0],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_series[native_series1],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_series[native_series2],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_series[native_series3],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_series[native_series4],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_series[native_series5],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_series[native_series6],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_series[native_series7],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_series[native_series8],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_series_reordered[native_series0],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_series_reordered[native_series1],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_series_reordered[native_series2],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_series_reordered[native_series3],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_series_reordered[native_series4],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_series_reordered[native_series5],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_series_reordered[native_series6],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_series_reordered[native_series7],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_series_reordered[native_series8],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_timestamp_index[timestamp_index0],AssertionError,failed
tests.integ.modin.test_unique,test_unique_tuple[input_data0],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_tuple[input_data1],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_tuple[input_data2],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_tuple[input_data3],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_unique,test_unique_tuple[input_data4],TypeError: assert_array_equal() got an unexpected keyword argument 'strict',failed
tests.integ.modin.test_utils,test_get_object_metadata_row_count,"NotImplementedError: Modin supports the method DataFrame.to_view on the Snowflake backend, but not on the backend Pandas.",failed
tests.integ.modin.tools.test_to_datetime,test_out_of_bound,SNOW-1170304: out of bounds datetime convert to datetime64[us] instead of raising error,xfailed
tests.integ.modin.tools.test_to_datetime,test_to_datetime_df_fallback[sample0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.tools.test_to_datetime,test_to_datetime_df_negative,Failed: DID NOT RAISE <class 'ValueError'>,failed
tests.integ.modin.tools.test_to_datetime,test_to_datetime_format_YYYYMMDD_ignore[True],SNOW-1170304: out of bounds datetime convert to datetime64[us] instead of raising error,xfailed
tests.integ.modin.tools.test_to_datetime,test_to_datetime_format_YYYYMMDD_with_str_nat[nAn],"ValueError: time data ""nAn"" doesn't match format ""%Y%m%d"", at position 2. You might want to try:
    - passing `format` if your strings have a consistent format;
    - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
    - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.",failed
tests.integ.modin.tools.test_to_datetime,test_to_datetime_format_YYYYMMDD_with_str_nat[nAt],"ValueError: time data ""nAt"" doesn't match format ""%Y%m%d"", at position 2. You might want to try:
    - passing `format` if your strings have a consistent format;
    - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
    - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.",failed
tests.integ.modin.tools.test_to_datetime,test_to_datetime_unit_negative,AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'ValueError'>,failed
tests.integ.modin.tools.test_to_datetime,test_to_datetime_with_non_exact_unimplemented[True],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.tools.test_to_numeric,test_1darray[input1-int64],"AssertionError: Attributes of Series are different

Attribute ""dtype"" are different
[left]:  int8
[right]: int64",failed
tests.integ.modin.tools.test_to_numeric,test_1darray[input2-float64],"AssertionError: Attributes of Series are different

Attribute ""dtype"" are different
[left]:  Int64
[right]: float64",failed
tests.integ.modin.tools.test_to_numeric,test_datetime_like[ignore],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.tools.test_to_numeric,test_nan_to_numeric,"ValueError: Unable to parse string ""nan"" at position 0",failed
tests.integ.modin.tools.test_to_numeric,test_scalar_to_numeric[-3-float64],"AssertionError: assert dtype('int64') == 'float64'
 +  where dtype('int64') = -3.dtype",failed
tests.integ.modin.tools.test_to_numeric,test_series_to_numeric[None-None-float64],"AssertionError: assert dtype('int64') == 'float64'
 +  where dtype('int64') = Series([], dtype: int64).dtype
 +    where Series([], dtype: int64) = <function to_numeric at 0x12cda1360>(Series([], dtype: object))
 +      where <function to_numeric at 0x12cda1360> = pd.to_numeric",failed
tests.integ.modin.tools.test_to_numeric,test_series_to_numeric[input1-None-float64],"AssertionError: assert dtype('int64') == 'float64'
 +  where dtype('int64') = Series([], dtype: int64).dtype
 +    where Series([], dtype: int64) = <function to_numeric at 0x12cda1360>(Series([], dtype: object))
 +      where <function to_numeric at 0x12cda1360> = pd.to_numeric",failed
tests.integ.modin.tools.test_to_numeric,test_series_to_numeric[input2-str-float64],"AssertionError: assert dtype('int64') == 'float64'
 +  where dtype('int64') = Series([], dtype: int64).dtype
 +    where Series([], dtype: int64) = <function to_numeric at 0x12cda1360>(Series([], dtype: object))
 +      where <function to_numeric at 0x12cda1360> = pd.to_numeric",failed
tests.integ.modin.tools.test_to_numeric,test_series_to_numeric[input3-object-float64],"AssertionError: assert dtype('int64') == 'float64'
 +  where dtype('int64') = Series([], dtype: int64).dtype
 +    where Series([], dtype: int64) = <function to_numeric at 0x12cda1360>(Series([], dtype: object))
 +      where <function to_numeric at 0x12cda1360> = pd.to_numeric",failed
tests.integ.modin.tools.test_to_numeric,test_series_to_numeric[input7-None-float64],"AssertionError: assert dtype('int64') == 'float64'
 +  where dtype('int64') = 0    1\n1    2\n2    3\ndtype: int64.dtype
 +    where 0    1\n1    2\n2    3\ndtype: int64 = <function to_numeric at 0x13a6a1360>(0    1\n1    2\n2    3\ndtype: object)
 +      where <function to_numeric at 0x13a6a1360> = pd.to_numeric",failed
tests.integ.modin.tools.test_to_numeric,test_to_numeric_errors[ignore],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.tools.test_to_numeric,test_to_numeric_errors[raise],AssertionError: exception type <class 'ValueError'> does not match with expected type <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.tools.test_to_numeric,test_to_numeric_errors_dtype[ignore-0-input0],"AssertionError: assert dtype('O') == dtype('float64')
 +  where dtype('O') = 0    apple\n1      1.0\n2        2\n3       -3\ndtype: object.dtype
 +  and   dtype('float64') = <class 'numpy.dtype'>('float64')
 +    where <class 'numpy.dtype'> = np.dtype",failed
tests.integ.modin.tools.test_to_numeric,test_to_numeric_errors_dtype[ignore-0-input1],"AssertionError: assert dtype('O') == dtype('float64')
 +  where dtype('O') = 0       1\n1    NULL\n2       3\ndtype: object.dtype
 +  and   dtype('float64') = <class 'numpy.dtype'>('float64')
 +    where <class 'numpy.dtype'> = np.dtype",failed
tests.integ.modin.tools.test_to_numeric,"test_unsupported_types[raise-bin binary-values ('48454C50'),('48454C50')-native_series4]",AssertionError: exception type <class 'ValueError'> does not match with expected type <class 'TypeError'>,failed
tests.integ.modin.types.test_timedelta,test_timedelta_not_supported,TypeError: 'PrettyDict' object is not callable,failed
tests.integ.modin.types.test_timedelta_indexing,test_df_indexing_enlargement_timedelta[item1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.types.test_timedelta_indexing,test_df_indexing_get_timedelta[key11-1-0-False],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.types.test_timedelta_indexing,test_df_indexing_get_timedelta[key4-1-0-False],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.types.test_timedelta_indexing,test_df_indexing_set_timedelta[None],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.types.test_timedelta_indexing,test_df_indexing_set_timedelta[item0],"ValueError: 
Location based indexing can only have [integer, integer slice (START point is
INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types.",failed
tests.integ.modin.types.test_timedelta_indexing,test_df_indexing_set_timedelta_with_other_type,Failed: DID NOT RAISE <class 'snowflake.snowpark.exceptions.SnowparkSQLException'>,failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_dataframe_unsupported[aggregate-min],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_dataframe_unsupported[apply-min],AttributeError: 'Expanding' object has no attribute 'apply',failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_dataframe_unsupported[corr-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_dataframe_unsupported[cov-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_dataframe_unsupported[kurt-None],TypeError: Expanding.kurt() takes 1 positional argument but 2 were given,failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_dataframe_unsupported[median-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_dataframe_unsupported[quantile-0.5],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_dataframe_unsupported[rank-None],ValueError: Method 'None' is not supported,failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_dataframe_unsupported[skew-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_series_unsupported[aggregate-min],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_series_unsupported[apply-min],AttributeError: 'Expanding' object has no attribute 'apply',failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_series_unsupported[corr-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_series_unsupported[cov-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_series_unsupported[kurt-None],TypeError: Expanding.kurt() takes 1 positional argument but 2 were given,failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_series_unsupported[median-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_series_unsupported[quantile-0.5],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_series_unsupported[rank-None],ValueError: Method 'None' is not supported,failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_series_unsupported[skew-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_unsupported[max-dataframe],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_unsupported[max-series],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_unsupported[mean-dataframe],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_unsupported[mean-series],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_unsupported[min-dataframe],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_unsupported[min-series],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_unsupported[sem-dataframe],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_unsupported[sem-series],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_unsupported[std-dataframe],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_unsupported[std-series],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_unsupported[sum-dataframe],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_unsupported[sum-series],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_unsupported[var-dataframe],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_expanding,test_expanding_aggregation_unsupported[var-series],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_rolling,test_rolling_aggregation_unsupported[aggregate-min],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_rolling,test_rolling_aggregation_unsupported[apply-min],TypeError: 'str' object is not callable,failed
tests.integ.modin.window.test_rolling,test_rolling_aggregation_unsupported[cov-None],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_rolling,test_rolling_aggregation_unsupported[kurt-None],TypeError: Rolling.kurt() takes 1 positional argument but 2 were given,failed
tests.integ.modin.window.test_rolling,test_rolling_aggregation_unsupported[max-dataframe],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_rolling,test_rolling_aggregation_unsupported[max-series],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_rolling,test_rolling_aggregation_unsupported[mean-dataframe],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_rolling,test_rolling_aggregation_unsupported[mean-series],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_rolling,test_rolling_aggregation_unsupported[median-None],TypeError: Rolling.median() takes 1 positional argument but 2 were given,failed
tests.integ.modin.window.test_rolling,test_rolling_aggregation_unsupported[min-dataframe],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_rolling,test_rolling_aggregation_unsupported[min-series],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_rolling,test_rolling_aggregation_unsupported[quantile-0.5],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_rolling,test_rolling_aggregation_unsupported[rank-None],ValueError: Method 'None' is not supported,failed
tests.integ.modin.window.test_rolling,test_rolling_aggregation_unsupported[sem-dataframe],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_rolling,test_rolling_aggregation_unsupported[sem-series],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_rolling,test_rolling_aggregation_unsupported[skew-None],TypeError: Rolling.skew() takes 1 positional argument but 2 were given,failed
tests.integ.modin.window.test_rolling,test_rolling_aggregation_unsupported[std-dataframe],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_rolling,test_rolling_aggregation_unsupported[std-series],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_rolling,test_rolling_aggregation_unsupported[sum-dataframe],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_rolling,test_rolling_aggregation_unsupported[sum-series],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_rolling,test_rolling_aggregation_unsupported[var-dataframe],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_rolling,test_rolling_aggregation_unsupported[var-series],"AssertionError: Regex pattern did not match.
 Regex: '(?:No\\ numeric\\ types\\ to\\ aggregate)|(?:No\\ numeric\\ types\\ to\\ aggregate)'
 Input: 'Cannot aggregate non-numeric type: timedelta64[ns]'",failed
tests.integ.modin.window.test_rolling,test_rolling_corr_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[False-1-1-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[False-1-2-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[False-1-3-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[False-1-4-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[False-1-6-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[False-2-1-count],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'ValueError'>,failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[False-2-2-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[False-2-3-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[False-2-4-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[False-2-6-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[False-None-1-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[False-None-2-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[False-None-3-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[False-None-4-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[False-None-6-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[True-1-1-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[True-1-2-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[True-1-3-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[True-1-4-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[True-1-6-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[True-2-1-count],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'ValueError'>,failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[True-2-2-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[True-2-3-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[True-2-4-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[True-2-6-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[True-None-1-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[True-None-2-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[True-None-3-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[True-None-4-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_dataframe[True-None-6-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[False-1-1-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[False-1-2-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[False-1-3-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[False-1-4-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[False-1-6-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[False-2-1-count],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'ValueError'>,failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[False-2-2-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[False-2-3-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[False-2-4-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[False-2-6-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[False-None-1-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[False-None-2-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[False-None-3-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[False-None-4-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[False-None-6-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[True-1-1-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[True-1-2-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[True-1-3-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[True-1-4-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[True-1-6-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[True-2-1-count],AssertionError: exception type <class 'TypeError'> does not match with expected type <class 'ValueError'>,failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[True-2-2-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[True-2-3-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[True-2-4-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[True-2-6-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[True-None-1-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[True-None-2-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[True-None-3-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[True-None-4-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_null_dataframe[True-None-6-count],TypeError: Rolling.count() got an unexpected keyword argument 'numeric_only',failed
tests.integ.modin.window.test_rolling,test_rolling_params_unsupported[<lambda>0],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_rolling,test_rolling_params_unsupported[<lambda>1],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_rolling,test_rolling_params_unsupported[<lambda>2],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_rolling,test_rolling_params_unsupported[<lambda>3],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_rolling,test_rolling_params_unsupported[<lambda>4],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_rolling,test_rolling_params_unsupported[<lambda>6],Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_rolling,test_rolling_time_window_negative,Failed: DID NOT RAISE <class 'NotImplementedError'>,failed
tests.integ.modin.window.test_rolling,test_rolling_window_multiindex,"AssertionError: Regex pattern did not match.
 Regex: 'Rolling behavior is undefined when used with a MultiIndex'
 Input: 'window must be an integer 0 or greater'",failed
,,worker 'gw3' crashed while running 'tests/integ/modin/resample/test_resample_negative.py::test_resample_unsupported_freq_negative[us]',error
